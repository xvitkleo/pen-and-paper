(function (f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f();
  } else if (typeof define === 'function' && define.amd) {
    define([], f);
  } else {
    let g;
    if (typeof window !== 'undefined') {
      g = window;
    } else if (typeof global !== 'undefined') {
      g = global;
    } else if (typeof self !== 'undefined') {
      g = self;
    } else {
      g = this;
    }
    g.Flashphoner = f();
  }
}(() => {
  let define; let module; let
    exports;
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            const c = typeof require === 'function' && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            const a = new Error(`Cannot find module '${i}'`);
            throw ((a.code = 'MODULE_NOT_FOUND'), a);
          }
          const p = (n[i] = { exports: {} });
          e[i][0].call(
            p.exports,
            (r) => {
              const n = e[i][1][r];
              return o(n || r);
            },
            p,
            p.exports,
            r,
            e,
            n,
            t,
          );
        }
        return n[i].exports;
      }
      for (var u = typeof require === 'function' && require, i = 0; i < t.length; i++) o(t[i]);
      return o;
    }
    return r;
  }())(
    {
      1: [function (require, module, exports) {}, {}],
      2: [
        function (require, module, exports) {
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError('Cannot call a class as a function');
            }
          }

          function _defineProperties(target, props) {
            for (let i = 0; i < props.length; i++) {
              const descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ('value' in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          function _createClass(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties(Constructor, staticProps);
            return Constructor;
          }
          /**
           * KalmanFilter
           * @class
           * @author Wouter Bulten
           * @see {@link http://github.com/wouterbulten/kalmanjs}
           * @version Version: 1.0.0-beta
           * @copyright Copyright 2015-2018 Wouter Bulten
           * @license MIT License
           * @preserve
           */

          const KalmanFilter = /* #__PURE__ */ (function () {
            /**
             * Create 1-dimensional kalman filter
             * @param  {Number} options.R Process noise
             * @param  {Number} options.Q Measurement noise
             * @param  {Number} options.A State vector
             * @param  {Number} options.B Control vector
             * @param  {Number} options.C Measurement vector
             * @return {KalmanFilter}
             */
            function KalmanFilter() {
              const _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              const _ref$R = _ref.R;
              const R = _ref$R === void 0 ? 1 : _ref$R;
              const _ref$Q = _ref.Q;
              const Q = _ref$Q === void 0 ? 1 : _ref$Q;
              const _ref$A = _ref.A;
              const A = _ref$A === void 0 ? 1 : _ref$A;
              const _ref$B = _ref.B;
              const B = _ref$B === void 0 ? 0 : _ref$B;
              const _ref$C = _ref.C;
              const C = _ref$C === void 0 ? 1 : _ref$C;

              _classCallCheck(this, KalmanFilter);

              this.R = R; // noise power desirable

              this.Q = Q; // noise power estimated

              this.A = A;
              this.C = C;
              this.B = B;
              this.cov = NaN;
              this.x = NaN; // estimated signal without noise
            }
            /**
             * Filter a new value
             * @param  {Number} z Measurement
             * @param  {Number} u Control
             * @return {Number}
             */

            _createClass(KalmanFilter, [
              {
                key: 'filter',
                value: function filter(z) {
                  const u = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

                  if (isNaN(this.x)) {
                    this.x = (1 / this.C) * z;
                    this.cov = (1 / this.C) * this.Q * (1 / this.C);
                  } else {
                    // Compute prediction
                    const predX = this.predict(u);
                    const predCov = this.uncertainty(); // Kalman gain

                    const K = predCov * this.C * (1 / (this.C * predCov * this.C + this.Q)); // Correction

                    this.x = predX + K * (z - this.C * predX);
                    this.cov = predCov - K * this.C * predCov;
                  }

                  return this.x;
                },
                /**
                 * Predict next value
                 * @param  {Number} [u] Control
                 * @return {Number}
                 */
              },
              {
                key: 'predict',
                value: function predict() {
                  const u = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                  return this.A * this.x + this.B * u;
                },
                /**
                 * Return uncertainty of filter
                 * @return {Number}
                 */
              },
              {
                key: 'uncertainty',
                value: function uncertainty() {
                  return this.A * this.cov * this.A + this.R;
                },
                /**
                 * Return the last filtered measurement
                 * @return {Number}
                 */
              },
              {
                key: 'lastMeasurement',
                value: function lastMeasurement() {
                  return this.x;
                },
                /**
                 * Set measurement noise Q
                 * @param {Number} noise
                 */
              },
              {
                key: 'setMeasurementNoise',
                value: function setMeasurementNoise(noise) {
                  this.Q = noise;
                },
                /**
                 * Set the process noise R
                 * @param {Number} noise
                 */
              },
              {
                key: 'setProcessNoise',
                value: function setProcessNoise(noise) {
                  this.R = noise;
                },
              },
            ]);

            return KalmanFilter;
          }());

          module.exports = KalmanFilter;
        },
        {},
      ],
      3: [
        function (require, module, exports) {
          // shim for using process in browser
          const process = (module.exports = {}); // cached from whatever global is present so that test runners that stub it
          // don't break things.  But we need to wrap it in a try catch in case it is
          // wrapped in strict mode code which doesn't define any globals.  It's inside a
          // function because try/catches deoptimize in certain engines.

          let cachedSetTimeout;
          let cachedClearTimeout;

          function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
          }

          function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined');
          }

          (function () {
            try {
              if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
              } else {
                cachedSetTimeout = defaultSetTimout;
              }
            } catch (e) {
              cachedSetTimeout = defaultSetTimout;
            }

            try {
              if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
              } else {
                cachedClearTimeout = defaultClearTimeout;
              }
            } catch (e) {
              cachedClearTimeout = defaultClearTimeout;
            }
          }());

          function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
              // normal enviroments in sane situations
              return setTimeout(fun, 0);
            } // if setTimeout wasn't available but was latter defined

            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }

            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedSetTimeout(fun, 0);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
              }
            }
          }

          function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
              // normal enviroments in sane situations
              return clearTimeout(marker);
            } // if clearTimeout wasn't available but was latter defined

            if (
              (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout)
              && clearTimeout
            ) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }

            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedClearTimeout(marker);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
              }
            }
          }

          let queue = [];
          let draining = false;
          let currentQueue;
          let queueIndex = -1;

          function cleanUpNextTick() {
            if (!draining || !currentQueue) {
              return;
            }

            draining = false;

            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }

            if (queue.length) {
              drainQueue();
            }
          }

          function drainQueue() {
            if (draining) {
              return;
            }

            const timeout = runTimeout(cleanUpNextTick);
            draining = true;
            let len = queue.length;

            while (len) {
              currentQueue = queue;
              queue = [];

              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }

              queueIndex = -1;
              len = queue.length;
            }

            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }

          process.nextTick = function (fun) {
            const args = new Array(arguments.length - 1);

            if (arguments.length > 1) {
              for (let i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
              }
            }

            queue.push(new Item(fun, args));

            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          }; // v8 likes predictible objects

          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }

          Item.prototype.run = function () {
            this.fun.apply(null, this.array);
          };

          process.title = 'browser';
          process.browser = true;
          process.env = {};
          process.argv = [];
          process.version = ''; // empty string to avoid regexp issues

          process.versions = {};

          function noop() {}

          process.on = noop;
          process.addListener = noop;
          process.once = noop;
          process.off = noop;
          process.removeListener = noop;
          process.removeAllListeners = noop;
          process.emit = noop;
          process.prependListener = noop;
          process.prependOnceListener = noop;

          process.listeners = function (name) {
            return [];
          };

          process.binding = function (name) {
            throw new Error('process.binding is not supported');
          };

          process.cwd = function () {
            return '/';
          };

          process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
          };

          process.umask = function () {
            return 0;
          };
        },
        {},
      ],
      4: [
        function (require, module, exports) {
          (function (setImmediate) {
            (function () {
              function _typeof(obj) {
                '@babel/helpers - typeof';

                if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
                  _typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  _typeof = function _typeof(obj) {
                    return obj
                      && typeof Symbol === 'function'
                      && obj.constructor === Symbol
                      && obj !== Symbol.prototype
                      ? 'symbol'
                      : typeof obj;
                  };
                }
                return _typeof(obj);
              }

              (function (root) {
                // Store setTimeout reference so promise-polyfill will be unaffected by
                // other code modifying setTimeout (like sinon.useFakeTimers())
                const setTimeoutFunc = setTimeout;

                function noop() {} // Polyfill for Function.prototype.bind

                function bind(fn, thisArg) {
                  return function () {
                    fn.apply(thisArg, arguments);
                  };
                }

                function Promise(fn) {
                  if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new');
                  if (typeof fn !== 'function') throw new TypeError('not a function');
                  this._state = 0;
                  this._handled = false;
                  this._value = undefined;
                  this._deferreds = [];
                  doResolve(fn, this);
                }

                function handle(self, deferred) {
                  while (self._state === 3) {
                    self = self._value;
                  }

                  if (self._state === 0) {
                    self._deferreds.push(deferred);

                    return;
                  }

                  self._handled = true;

                  Promise._immediateFn(() => {
                    const cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;

                    if (cb === null) {
                      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
                      return;
                    }

                    let ret;

                    try {
                      ret = cb(self._value);
                    } catch (e) {
                      reject(deferred.promise, e);
                      return;
                    }

                    resolve(deferred.promise, ret);
                  });
                }

                function resolve(self, newValue) {
                  try {
                    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
                    if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');

                    if (
                      newValue
                      && (_typeof(newValue) === 'object' || typeof newValue === 'function')
                    ) {
                      const { then } = newValue;

                      if (newValue instanceof Promise) {
                        self._state = 3;
                        self._value = newValue;
                        finale(self);
                        return;
                      } if (typeof then === 'function') {
                        doResolve(bind(then, newValue), self);
                        return;
                      }
                    }

                    self._state = 1;
                    self._value = newValue;
                    finale(self);
                  } catch (e) {
                    reject(self, e);
                  }
                }

                function reject(self, newValue) {
                  self._state = 2;
                  self._value = newValue;
                  finale(self);
                }

                function finale(self) {
                  if (self._state === 2 && self._deferreds.length === 0) {
                    Promise._immediateFn(() => {
                      if (!self._handled) {
                        Promise._unhandledRejectionFn(self._value);
                      }
                    });
                  }

                  for (let i = 0, len = self._deferreds.length; i < len; i++) {
                    handle(self, self._deferreds[i]);
                  }

                  self._deferreds = null;
                }

                function Handler(onFulfilled, onRejected, promise) {
                  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
                  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
                  this.promise = promise;
                }
                /**
                 * Take a potentially misbehaving resolver function and make sure
                 * onFulfilled and onRejected are only called once.
                 *
                 * Makes no guarantees about asynchrony.
                 */

                function doResolve(fn, self) {
                  let done = false;

                  try {
                    fn(
                      (value) => {
                        if (done) return;
                        done = true;
                        resolve(self, value);
                      },
                      (reason) => {
                        if (done) return;
                        done = true;
                        reject(self, reason);
                      },
                    );
                  } catch (ex) {
                    if (done) return;
                    done = true;
                    reject(self, ex);
                  }
                }

                Promise.prototype.catch = function (onRejected) {
                  return this.then(null, onRejected);
                };

                Promise.prototype.then = function (onFulfilled, onRejected) {
                  const prom = new this.constructor(noop);
                  handle(this, new Handler(onFulfilled, onRejected, prom));
                  return prom;
                };

                Promise.all = function (arr) {
                  return new Promise(((resolve, reject) => {
                    if (!arr || typeof arr.length === 'undefined') throw new TypeError('Promise.all accepts an array');
                    const args = Array.prototype.slice.call(arr);
                    if (args.length === 0) return resolve([]);
                    let remaining = args.length;

                    function res(i, val) {
                      try {
                        if (val && (_typeof(val) === 'object' || typeof val === 'function')) {
                          const { then } = val;

                          if (typeof then === 'function') {
                            then.call(
                              val,
                              (val) => {
                                res(i, val);
                              },
                              reject,
                            );
                            return;
                          }
                        }

                        args[i] = val;

                        if (--remaining === 0) {
                          resolve(args);
                        }
                      } catch (ex) {
                        reject(ex);
                      }
                    }

                    for (let i = 0; i < args.length; i++) {
                      res(i, args[i]);
                    }
                  }));
                };

                Promise.resolve = function (value) {
                  if (value && _typeof(value) === 'object' && value.constructor === Promise) {
                    return value;
                  }

                  return new Promise(((resolve) => {
                    resolve(value);
                  }));
                };

                Promise.reject = function (value) {
                  return new Promise(((resolve, reject) => {
                    reject(value);
                  }));
                };

                Promise.race = function (values) {
                  return new Promise(((resolve, reject) => {
                    for (let i = 0, len = values.length; i < len; i++) {
                      values[i].then(resolve, reject);
                    }
                  }));
                }; // Use polyfill for setImmediate for performance gains

                Promise._immediateFn = (typeof setImmediate === 'function'
                    && function (fn) {
                      setImmediate(fn);
                    })
                  || function (fn) {
                    setTimeoutFunc(fn, 0);
                  };

                Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
                  if (typeof console !== 'undefined' && console) {
                    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
                  }
                };
                /**
                 * Set the immediate function to execute callbacks
                 * @param fn {function} Function to execute
                 * @deprecated
                 */

                Promise._setImmediateFn = function _setImmediateFn(fn) {
                  Promise._immediateFn = fn;
                };
                /**
                 * Change the function to execute on unhandled rejection
                 * @param {function} fn Function to execute on unhandled rejection
                 * @deprecated
                 */

                Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
                  Promise._unhandledRejectionFn = fn;
                };

                if (typeof module !== 'undefined' && module.exports) {
                  module.exports = Promise;
                } else if (!root.Promise) {
                  root.Promise = Promise;
                }
              }(this));
            }.call(this));
          }.call(this, require('timers').setImmediate));
        },
        { timers: 8 },
      ],
      5: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          const SDPUtils = require('sdp');

          function fixStatsType(stat) {
            return (
              {
                inboundrtp: 'inbound-rtp',
                outboundrtp: 'outbound-rtp',
                candidatepair: 'candidate-pair',
                localcandidate: 'local-candidate',
                remotecandidate: 'remote-candidate',
              }[stat.type] || stat.type
            );
          }

          function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
            let sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps); // Map ICE parameters (ufrag, pwd) to SDP.

            sdp += SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters()); // Map DTLS parameters to SDP.

            sdp += SDPUtils.writeDtlsParameters(
              transceiver.dtlsTransport.getLocalParameters(),
              type === 'offer' ? 'actpass' : dtlsRole || 'active',
            );
            sdp += `a=mid:${transceiver.mid}\r\n`;

            if (transceiver.rtpSender && transceiver.rtpReceiver) {
              sdp += 'a=sendrecv\r\n';
            } else if (transceiver.rtpSender) {
              sdp += 'a=sendonly\r\n';
            } else if (transceiver.rtpReceiver) {
              sdp += 'a=recvonly\r\n';
            } else {
              sdp += 'a=inactive\r\n';
            }

            if (transceiver.rtpSender) {
              const trackId = transceiver.rtpSender._initialTrackId || transceiver.rtpSender.track.id;
              transceiver.rtpSender._initialTrackId = trackId; // spec.

              const msid = `msid:${stream ? stream.id : '-'} ${trackId}\r\n`;
              sdp += `a=${msid}`; // for Chrome. Legacy should no longer be required.

              sdp += `a=ssrc:${transceiver.sendEncodingParameters[0].ssrc} ${msid}`; // RTX

              if (transceiver.sendEncodingParameters[0].rtx) {
                sdp += `a=ssrc:${transceiver.sendEncodingParameters[0].rtx.ssrc} ${msid}`;
                sdp
                  += `a=ssrc-group:FID ${
                    transceiver.sendEncodingParameters[0].ssrc
                  } ${
                    transceiver.sendEncodingParameters[0].rtx.ssrc
                  }\r\n`;
              }
            } // FIXME: this should be written by writeRtpDescription.

            sdp
              += `a=ssrc:${
                transceiver.sendEncodingParameters[0].ssrc
              } cname:${
                SDPUtils.localCName
              }\r\n`;

            if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
              sdp
                += `a=ssrc:${
                  transceiver.sendEncodingParameters[0].rtx.ssrc
                } cname:${
                  SDPUtils.localCName
                }\r\n`;
            }

            return sdp;
          } // Edge does not like
          // 1) stun: filtered after 14393 unless ?transport=udp is present
          // 2) turn: that does not have all of turn:host:port?transport=udp
          // 3) turn: with ipv6 addresses
          // 4) turn: occurring muliple times

          function filterIceServers(iceServers, edgeVersion) {
            let hasTurn = false;
            iceServers = JSON.parse(JSON.stringify(iceServers));
            return iceServers.filter((server) => {
              if (server && (server.urls || server.url)) {
                let urls = server.urls || server.url;

                if (server.url && !server.urls) {
                  console.warn('RTCIceServer.url is deprecated! Use urls instead.');
                }

                const isString = typeof urls === 'string';

                if (isString) {
                  urls = [urls];
                }

                urls = urls.filter((url) => {
                  const validTurn = url.indexOf('turn:') === 0
                    && url.indexOf('transport=udp') !== -1
                    && url.indexOf('turn:[') === -1
                    && !hasTurn;

                  if (validTurn) {
                    hasTurn = true;
                    return true;
                  }

                  return (
                    url.indexOf('stun:') === 0
                    && edgeVersion >= 14393
                    && url.indexOf('?transport=udp') === -1
                  );
                });
                delete server.url;
                server.urls = isString ? urls[0] : urls;
                return !!urls.length;
              }
            });
          } // Determines the intersection of local and remote capabilities.

          function getCommonCapabilities(localCapabilities, remoteCapabilities) {
            const commonCapabilities = {
              codecs: [],
              headerExtensions: [],
              fecMechanisms: [],
            };

            const findCodecByPayloadType = function findCodecByPayloadType(pt, codecs) {
              pt = parseInt(pt, 10);

              for (let i = 0; i < codecs.length; i++) {
                if (codecs[i].payloadType === pt || codecs[i].preferredPayloadType === pt) {
                  return codecs[i];
                }
              }
            };

            const rtxCapabilityMatches = function rtxCapabilityMatches(lRtx, rRtx, lCodecs, rCodecs) {
              const lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
              const rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
              return lCodec && rCodec && lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
            };

            localCapabilities.codecs.forEach((lCodec) => {
              for (let i = 0; i < remoteCapabilities.codecs.length; i++) {
                let rCodec = remoteCapabilities.codecs[i];

                if (
                  lCodec.name.toLowerCase() === rCodec.name.toLowerCase()
                  && lCodec.clockRate === rCodec.clockRate
                ) {
                  if (
                    lCodec.name.toLowerCase() === 'rtx'
                    && lCodec.parameters
                    && rCodec.parameters.apt
                  ) {
                    // for RTX we need to find the local rtx that has a apt
                    // which points to the same local codec as the remote one.
                    if (
                      !rtxCapabilityMatches(
                        lCodec,
                        rCodec,
                        localCapabilities.codecs,
                        remoteCapabilities.codecs,
                      )
                    ) {
                      continue;
                    }
                  }

                  rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
                  // number of channels is the highest common number of channels

                  rCodec.numChannels = Math.min(lCodec.numChannels, rCodec.numChannels); // push rCodec so we reply with offerer payload type

                  commonCapabilities.codecs.push(rCodec); // determine common feedback mechanisms

                  rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter((fb) => {
                    for (let j = 0; j < lCodec.rtcpFeedback.length; j++) {
                      if (
                        lCodec.rtcpFeedback[j].type === fb.type
                        && lCodec.rtcpFeedback[j].parameter === fb.parameter
                      ) {
                        return true;
                      }
                    }

                    return false;
                  }); // FIXME: also need to determine .parameters
                  //  see https://github.com/openpeer/ortc/issues/569

                  break;
                }
              }
            });
            localCapabilities.headerExtensions.forEach((lHeaderExtension) => {
              for (let i = 0; i < remoteCapabilities.headerExtensions.length; i++) {
                const rHeaderExtension = remoteCapabilities.headerExtensions[i];

                if (lHeaderExtension.uri === rHeaderExtension.uri) {
                  commonCapabilities.headerExtensions.push(rHeaderExtension);
                  break;
                }
              }
            }); // FIXME: fecMechanisms

            return commonCapabilities;
          } // is action=setLocalDescription with type allowed in signalingState

          function isActionAllowedInSignalingState(action, type, signalingState) {
            return (
              {
                offer: {
                  setLocalDescription: ['stable', 'have-local-offer'],
                  setRemoteDescription: ['stable', 'have-remote-offer'],
                },
                answer: {
                  setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
                  setRemoteDescription: ['have-local-offer', 'have-remote-pranswer'],
                },
              }[type][action].indexOf(signalingState) !== -1
            );
          }

          function maybeAddCandidate(iceTransport, candidate) {
            // Edge's internal representation adds some fields therefore
            // not all fieldÑ• are taken into account.
            const alreadyAdded = iceTransport.getRemoteCandidates().find((remoteCandidate) => (
              candidate.foundation === remoteCandidate.foundation
                && candidate.ip === remoteCandidate.ip
                && candidate.port === remoteCandidate.port
                && candidate.priority === remoteCandidate.priority
                && candidate.protocol === remoteCandidate.protocol
                && candidate.type === remoteCandidate.type
            ));

            if (!alreadyAdded) {
              iceTransport.addRemoteCandidate(candidate);
            }

            return !alreadyAdded;
          }

          function makeError(name, description) {
            const e = new Error(description);
            e.name = name; // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names

            e.code = {
              NotSupportedError: 9,
              InvalidStateError: 11,
              InvalidAccessError: 15,
              TypeError: undefined,
              OperationError: undefined,
            }[name];
            return e;
          }

          module.exports = function (window, edgeVersion) {
            // https://w3c.github.io/mediacapture-main/#mediastream
            // Helper function to add the track to the stream and
            // dispatch the event ourselves.
            function addTrackToStreamAndFireEvent(track, stream) {
              stream.addTrack(track);
              stream.dispatchEvent(
                new window.MediaStreamTrackEvent('addtrack', {
                  track,
                }),
              );
            }

            function removeTrackFromStreamAndFireEvent(track, stream) {
              stream.removeTrack(track);
              stream.dispatchEvent(
                new window.MediaStreamTrackEvent('removetrack', {
                  track,
                }),
              );
            }

            function fireAddTrack(pc, track, receiver, streams) {
              const trackEvent = new Event('track');
              trackEvent.track = track;
              trackEvent.receiver = receiver;
              trackEvent.transceiver = {
                receiver,
              };
              trackEvent.streams = streams;
              window.setTimeout(() => {
                pc._dispatchEvent('track', trackEvent);
              });
            }

            const RTCPeerConnection = function RTCPeerConnection(config) {
              const pc = this;

              const _eventTarget = document.createDocumentFragment();

              ['addEventListener', 'removeEventListener', 'dispatchEvent'].forEach((
                method,
              ) => {
                pc[method] = _eventTarget[method].bind(_eventTarget);
              });
              this.canTrickleIceCandidates = null;
              this.needNegotiation = false;
              this.localStreams = [];
              this.remoteStreams = [];
              this._localDescription = null;
              this._remoteDescription = null;
              this.signalingState = 'stable';
              this.iceConnectionState = 'new';
              this.connectionState = 'new';
              this.iceGatheringState = 'new';
              config = JSON.parse(JSON.stringify(config || {}));
              this.usingBundle = config.bundlePolicy === 'max-bundle';

              if (config.rtcpMuxPolicy === 'negotiate') {
                throw makeError('NotSupportedError', "rtcpMuxPolicy 'negotiate' is not supported");
              } else if (!config.rtcpMuxPolicy) {
                config.rtcpMuxPolicy = 'require';
              }

              switch (config.iceTransportPolicy) {
                case 'all':
                case 'relay':
                  break;

                default:
                  config.iceTransportPolicy = 'all';
                  break;
              }

              switch (config.bundlePolicy) {
                case 'balanced':
                case 'max-compat':
                case 'max-bundle':
                  break;

                default:
                  config.bundlePolicy = 'balanced';
                  break;
              }

              config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);
              this._iceGatherers = [];

              if (config.iceCandidatePoolSize) {
                for (let i = config.iceCandidatePoolSize; i > 0; i--) {
                  this._iceGatherers.push(
                    new window.RTCIceGatherer({
                      iceServers: config.iceServers,
                      gatherPolicy: config.iceTransportPolicy,
                    }),
                  );
                }
              } else {
                config.iceCandidatePoolSize = 0;
              }

              this._config = config; // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
              // everything that is needed to describe a SDP m-line.

              this.transceivers = [];
              this._sdpSessionId = SDPUtils.generateSessionId();
              this._sdpSessionVersion = 0;
              this._dtlsRole = undefined; // role for a=setup to use in answers.

              this._isClosed = false;
            };

            Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
              configurable: true,
              get: function get() {
                return this._localDescription;
              },
            });
            Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
              configurable: true,
              get: function get() {
                return this._remoteDescription;
              },
            }); // set up event handlers on prototype

            RTCPeerConnection.prototype.onicecandidate = null;
            RTCPeerConnection.prototype.onaddstream = null;
            RTCPeerConnection.prototype.ontrack = null;
            RTCPeerConnection.prototype.onremovestream = null;
            RTCPeerConnection.prototype.onsignalingstatechange = null;
            RTCPeerConnection.prototype.oniceconnectionstatechange = null;
            RTCPeerConnection.prototype.onconnectionstatechange = null;
            RTCPeerConnection.prototype.onicegatheringstatechange = null;
            RTCPeerConnection.prototype.onnegotiationneeded = null;
            RTCPeerConnection.prototype.ondatachannel = null;

            RTCPeerConnection.prototype._dispatchEvent = function (name, event) {
              if (this._isClosed) {
                return;
              }

              this.dispatchEvent(event);

              if (typeof this[`on${name}`] === 'function') {
                this[`on${name}`](event);
              }
            };

            RTCPeerConnection.prototype._emitGatheringStateChange = function () {
              const event = new Event('icegatheringstatechange');

              this._dispatchEvent('icegatheringstatechange', event);
            };

            RTCPeerConnection.prototype.getConfiguration = function () {
              return this._config;
            };

            RTCPeerConnection.prototype.getLocalStreams = function () {
              return this.localStreams;
            };

            RTCPeerConnection.prototype.getRemoteStreams = function () {
              return this.remoteStreams;
            }; // internal helper to create a transceiver object.
            // (which is not yet the same as the WebRTC 1.0 transceiver)

            RTCPeerConnection.prototype._createTransceiver = function (kind, doNotAdd) {
              const hasBundleTransport = this.transceivers.length > 0;
              const transceiver = {
                track: null,
                iceGatherer: null,
                iceTransport: null,
                dtlsTransport: null,
                localCapabilities: null,
                remoteCapabilities: null,
                rtpSender: null,
                rtpReceiver: null,
                kind,
                mid: null,
                sendEncodingParameters: null,
                recvEncodingParameters: null,
                stream: null,
                associatedRemoteMediaStreams: [],
                wantReceive: true,
              };

              if (this.usingBundle && hasBundleTransport) {
                transceiver.iceTransport = this.transceivers[0].iceTransport;
                transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
              } else {
                const transports = this._createIceAndDtlsTransports();

                transceiver.iceTransport = transports.iceTransport;
                transceiver.dtlsTransport = transports.dtlsTransport;
              }

              if (!doNotAdd) {
                this.transceivers.push(transceiver);
              }

              return transceiver;
            };

            RTCPeerConnection.prototype.addTrack = function (track, stream) {
              if (this._isClosed) {
                throw makeError(
                  'InvalidStateError',
                  'Attempted to call addTrack on a closed peerconnection.',
                );
              }

              const alreadyExists = this.transceivers.find((s) => s.track === track);

              if (alreadyExists) {
                throw makeError('InvalidAccessError', 'Track already exists.');
              }

              let transceiver;

              for (let i = 0; i < this.transceivers.length; i++) {
                if (!this.transceivers[i].track && this.transceivers[i].kind === track.kind) {
                  transceiver = this.transceivers[i];
                }
              }

              if (!transceiver) {
                transceiver = this._createTransceiver(track.kind);
              }

              this._maybeFireNegotiationNeeded();

              if (this.localStreams.indexOf(stream) === -1) {
                this.localStreams.push(stream);
              }

              transceiver.track = track;
              transceiver.stream = stream;
              transceiver.rtpSender = new window.RTCRtpSender(track, transceiver.dtlsTransport);
              return transceiver.rtpSender;
            };

            RTCPeerConnection.prototype.addStream = function (stream) {
              const pc = this;

              if (edgeVersion >= 15025) {
                stream.getTracks().forEach((track) => {
                  pc.addTrack(track, stream);
                });
              } else {
                // Clone is necessary for local demos mostly, attaching directly
                // to two different senders does not work (build 10547).
                // Fixed in 15025 (or earlier)
                const clonedStream = stream.clone();
                stream.getTracks().forEach((track, idx) => {
                  const clonedTrack = clonedStream.getTracks()[idx];
                  track.addEventListener('enabled', (event) => {
                    clonedTrack.enabled = event.enabled;
                  });
                });
                clonedStream.getTracks().forEach((track) => {
                  pc.addTrack(track, clonedStream);
                });
              }
            };

            RTCPeerConnection.prototype.removeTrack = function (sender) {
              if (this._isClosed) {
                throw makeError(
                  'InvalidStateError',
                  'Attempted to call removeTrack on a closed peerconnection.',
                );
              }

              if (!(sender instanceof window.RTCRtpSender)) {
                throw new TypeError(
                  'Argument 1 of RTCPeerConnection.removeTrack '
                    + 'does not implement interface RTCRtpSender.',
                );
              }

              const transceiver = this.transceivers.find((t) => t.rtpSender === sender);

              if (!transceiver) {
                throw makeError('InvalidAccessError', 'Sender was not created by this connection.');
              }

              const { stream } = transceiver;
              transceiver.rtpSender.stop();
              transceiver.rtpSender = null;
              transceiver.track = null;
              transceiver.stream = null; // remove the stream from the set of local streams

              const localStreams = this.transceivers.map((t) => t.stream);

              if (localStreams.indexOf(stream) === -1 && this.localStreams.indexOf(stream) > -1) {
                this.localStreams.splice(this.localStreams.indexOf(stream), 1);
              }

              this._maybeFireNegotiationNeeded();
            };

            RTCPeerConnection.prototype.removeStream = function (stream) {
              const pc = this;
              stream.getTracks().forEach((track) => {
                const sender = pc.getSenders().find((s) => s.track === track);

                if (sender) {
                  pc.removeTrack(sender);
                }
              });
            };

            RTCPeerConnection.prototype.getSenders = function () {
              return this.transceivers
                .filter((transceiver) => !!transceiver.rtpSender)
                .map((transceiver) => transceiver.rtpSender);
            };

            RTCPeerConnection.prototype.getReceivers = function () {
              return this.transceivers
                .filter((transceiver) => !!transceiver.rtpReceiver)
                .map((transceiver) => transceiver.rtpReceiver);
            };

            RTCPeerConnection.prototype._createIceGatherer = function (sdpMLineIndex, usingBundle) {
              const pc = this;

              if (usingBundle && sdpMLineIndex > 0) {
                return this.transceivers[0].iceGatherer;
              } if (this._iceGatherers.length) {
                return this._iceGatherers.shift();
              }

              const iceGatherer = new window.RTCIceGatherer({
                iceServers: this._config.iceServers,
                gatherPolicy: this._config.iceTransportPolicy,
              });
              Object.defineProperty(iceGatherer, 'state', {
                value: 'new',
                writable: true,
              });
              this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];

              this.transceivers[sdpMLineIndex].bufferCandidates = function (event) {
                const end = !event.candidate || Object.keys(event.candidate).length === 0; // polyfill since RTCIceGatherer.state is not implemented in
                // Edge 10547 yet.

                iceGatherer.state = end ? 'completed' : 'gathering';

                if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
                  pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
                }
              };

              iceGatherer.addEventListener(
                'localcandidate',
                this.transceivers[sdpMLineIndex].bufferCandidates,
              );
              return iceGatherer;
            }; // start gathering from an RTCIceGatherer.

            RTCPeerConnection.prototype._gather = function (mid, sdpMLineIndex) {
              const pc = this;
              const { iceGatherer } = this.transceivers[sdpMLineIndex];

              if (iceGatherer.onlocalcandidate) {
                return;
              }

              const { bufferedCandidateEvents } = this.transceivers[sdpMLineIndex];
              this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
              iceGatherer.removeEventListener(
                'localcandidate',
                this.transceivers[sdpMLineIndex].bufferCandidates,
              );

              iceGatherer.onlocalcandidate = function (evt) {
                if (pc.usingBundle && sdpMLineIndex > 0) {
                  // if we know that we use bundle we can drop candidates with
                  // Ñ•dpMLineIndex > 0. If we don't do this then our state gets
                  // confused since we dispose the extra ice gatherer.
                  return;
                }

                const event = new Event('icecandidate');
                event.candidate = {
                  sdpMid: mid,
                  sdpMLineIndex,
                };
                const cand = evt.candidate; // Edge emits an empty object for RTCIceCandidateCompleteâ€¥

                const end = !cand || Object.keys(cand).length === 0;

                if (end) {
                  // polyfill since RTCIceGatherer.state is not implemented in
                  // Edge 10547 yet.
                  if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
                    iceGatherer.state = 'completed';
                  }
                } else {
                  if (iceGatherer.state === 'new') {
                    iceGatherer.state = 'gathering';
                  } // RTCIceCandidate doesn't have a component, needs to be added

                  cand.component = 1; // also the usernameFragment. TODO: update SDP to take both variants.

                  cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;
                  const serializedCandidate = SDPUtils.writeCandidate(cand);
                  event.candidate = Object.assign(
                    event.candidate,
                    SDPUtils.parseCandidate(serializedCandidate),
                  );
                  event.candidate.candidate = serializedCandidate;

                  event.candidate.toJSON = function () {
                    return {
                      candidate: event.candidate.candidate,
                      sdpMid: event.candidate.sdpMid,
                      sdpMLineIndex: event.candidate.sdpMLineIndex,
                      usernameFragment: event.candidate.usernameFragment,
                    };
                  };
                } // update local description.

                const sections = SDPUtils.getMediaSections(pc._localDescription.sdp);

                if (!end) {
                  sections[event.candidate.sdpMLineIndex]
                    += `a=${event.candidate.candidate}\r\n`;
                } else {
                  sections[event.candidate.sdpMLineIndex] += 'a=end-of-candidates\r\n';
                }

                pc._localDescription.sdp = SDPUtils.getDescription(pc._localDescription.sdp) + sections.join('');
                const complete = pc.transceivers.every((transceiver) => transceiver.iceGatherer && transceiver.iceGatherer.state === 'completed');

                if (pc.iceGatheringState !== 'gathering') {
                  pc.iceGatheringState = 'gathering';

                  pc._emitGatheringStateChange();
                } // Emit candidate. Also emit null candidate when all gatherers are
                // complete.

                if (!end) {
                  pc._dispatchEvent('icecandidate', event);
                }

                if (complete) {
                  pc._dispatchEvent('icecandidate', new Event('icecandidate'));

                  pc.iceGatheringState = 'complete';

                  pc._emitGatheringStateChange();
                }
              }; // emit already gathered candidates.

              window.setTimeout(() => {
                bufferedCandidateEvents.forEach((e) => {
                  iceGatherer.onlocalcandidate(e);
                });
              }, 0);
            }; // Create ICE transport and DTLS transport.

            RTCPeerConnection.prototype._createIceAndDtlsTransports = function () {
              const pc = this;
              const iceTransport = new window.RTCIceTransport(null);

              iceTransport.onicestatechange = function () {
                pc._updateIceConnectionState();

                pc._updateConnectionState();
              };

              const dtlsTransport = new window.RTCDtlsTransport(iceTransport);

              dtlsTransport.ondtlsstatechange = function () {
                pc._updateConnectionState();
              };

              dtlsTransport.onerror = function () {
                // onerror does not set state to failed by itself.
                Object.defineProperty(dtlsTransport, 'state', {
                  value: 'failed',
                  writable: true,
                });

                pc._updateConnectionState();
              };

              return {
                iceTransport,
                dtlsTransport,
              };
            }; // Destroy ICE gatherer, ICE transport and DTLS transport.
            // Without triggering the callbacks.

            RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function (sdpMLineIndex) {
              const { iceGatherer } = this.transceivers[sdpMLineIndex];

              if (iceGatherer) {
                delete iceGatherer.onlocalcandidate;
                delete this.transceivers[sdpMLineIndex].iceGatherer;
              }

              const { iceTransport } = this.transceivers[sdpMLineIndex];

              if (iceTransport) {
                delete iceTransport.onicestatechange;
                delete this.transceivers[sdpMLineIndex].iceTransport;
              }

              const { dtlsTransport } = this.transceivers[sdpMLineIndex];

              if (dtlsTransport) {
                delete dtlsTransport.ondtlsstatechange;
                delete dtlsTransport.onerror;
                delete this.transceivers[sdpMLineIndex].dtlsTransport;
              }
            }; // Start the RTP Sender and Receiver for a transceiver.

            RTCPeerConnection.prototype._transceive = function (transceiver, send, recv) {
              const params = getCommonCapabilities(
                transceiver.localCapabilities,
                transceiver.remoteCapabilities,
              );

              if (send && transceiver.rtpSender) {
                params.encodings = transceiver.sendEncodingParameters;
                params.rtcp = {
                  cname: SDPUtils.localCName,
                  compound: transceiver.rtcpParameters.compound,
                };

                if (transceiver.recvEncodingParameters.length) {
                  params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
                }

                transceiver.rtpSender.send(params);
              }

              if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
                // remove RTX field in Edge 14942
                if (
                  transceiver.kind === 'video'
                  && transceiver.recvEncodingParameters
                  && edgeVersion < 15019
                ) {
                  transceiver.recvEncodingParameters.forEach((p) => {
                    delete p.rtx;
                  });
                }

                if (transceiver.recvEncodingParameters.length) {
                  params.encodings = transceiver.recvEncodingParameters;
                } else {
                  params.encodings = [{}];
                }

                params.rtcp = {
                  compound: transceiver.rtcpParameters.compound,
                };

                if (transceiver.rtcpParameters.cname) {
                  params.rtcp.cname = transceiver.rtcpParameters.cname;
                }

                if (transceiver.sendEncodingParameters.length) {
                  params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
                }

                transceiver.rtpReceiver.receive(params);
              }
            };

            RTCPeerConnection.prototype.setLocalDescription = function (description) {
              const pc = this; // Note: pranswer is not supported.

              if (['offer', 'answer'].indexOf(description.type) === -1) {
                return Promise.reject(
                  makeError('TypeError', `Unsupported type "${description.type}"`),
                );
              }

              if (
                !isActionAllowedInSignalingState(
                  'setLocalDescription',
                  description.type,
                  pc.signalingState,
                )
                || pc._isClosed
              ) {
                return Promise.reject(
                  makeError(
                    'InvalidStateError',
                    `Can not set local ${description.type} in state ${pc.signalingState}`,
                  ),
                );
              }

              let sections;
              let sessionpart;

              if (description.type === 'offer') {
                // VERY limited support for SDP munging. Limited to:
                // * changing the order of codecs
                sections = SDPUtils.splitSections(description.sdp);
                sessionpart = sections.shift();
                sections.forEach((mediaSection, sdpMLineIndex) => {
                  const caps = SDPUtils.parseRtpParameters(mediaSection);
                  pc.transceivers[sdpMLineIndex].localCapabilities = caps;
                });
                pc.transceivers.forEach((transceiver, sdpMLineIndex) => {
                  pc._gather(transceiver.mid, sdpMLineIndex);
                });
              } else if (description.type === 'answer') {
                sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
                sessionpart = sections.shift();
                const isIceLite = SDPUtils.matchPrefix(sessionpart, 'a=ice-lite').length > 0;
                sections.forEach((mediaSection, sdpMLineIndex) => {
                  const transceiver = pc.transceivers[sdpMLineIndex];
                  const { iceGatherer } = transceiver;
                  const { iceTransport } = transceiver;
                  const { dtlsTransport } = transceiver;
                  const { localCapabilities } = transceiver;
                  const { remoteCapabilities } = transceiver; // treat bundle-only as not-rejected.

                  const rejected = SDPUtils.isRejected(mediaSection)
                    && SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

                  if (!rejected && !transceiver.rejected) {
                    const remoteIceParameters = SDPUtils.getIceParameters(mediaSection, sessionpart);
                    const remoteDtlsParameters = SDPUtils.getDtlsParameters(
                      mediaSection,
                      sessionpart,
                    );

                    if (isIceLite) {
                      remoteDtlsParameters.role = 'server';
                    }

                    if (!pc.usingBundle || sdpMLineIndex === 0) {
                      pc._gather(transceiver.mid, sdpMLineIndex);

                      if (iceTransport.state === 'new') {
                        iceTransport.start(
                          iceGatherer,
                          remoteIceParameters,
                          isIceLite ? 'controlling' : 'controlled',
                        );
                      }

                      if (dtlsTransport.state === 'new') {
                        dtlsTransport.start(remoteDtlsParameters);
                      }
                    } // Calculate intersection of capabilities.

                    const params = getCommonCapabilities(localCapabilities, remoteCapabilities); // Start the RTCRtpSender. The RTCRtpReceiver for this
                    // transceiver has already been started in setRemoteDescription.

                    pc._transceive(transceiver, params.codecs.length > 0, false);
                  }
                });
              }

              pc._localDescription = {
                type: description.type,
                sdp: description.sdp,
              };

              if (description.type === 'offer') {
                pc._updateSignalingState('have-local-offer');
              } else {
                pc._updateSignalingState('stable');
              }

              return Promise.resolve();
            };

            RTCPeerConnection.prototype.setRemoteDescription = function (description) {
              const pc = this; // Note: pranswer is not supported.

              if (['offer', 'answer'].indexOf(description.type) === -1) {
                return Promise.reject(
                  makeError('TypeError', `Unsupported type "${description.type}"`),
                );
              }

              if (
                !isActionAllowedInSignalingState(
                  'setRemoteDescription',
                  description.type,
                  pc.signalingState,
                )
                || pc._isClosed
              ) {
                return Promise.reject(
                  makeError(
                    'InvalidStateError',
                    `Can not set remote ${description.type} in state ${pc.signalingState}`,
                  ),
                );
              }

              const streams = {};
              pc.remoteStreams.forEach((stream) => {
                streams[stream.id] = stream;
              });
              const receiverList = [];
              const sections = SDPUtils.splitSections(description.sdp);
              const sessionpart = sections.shift();
              const isIceLite = SDPUtils.matchPrefix(sessionpart, 'a=ice-lite').length > 0;
              const usingBundle = SDPUtils.matchPrefix(sessionpart, 'a=group:BUNDLE ').length > 0;
              pc.usingBundle = usingBundle;
              const iceOptions = SDPUtils.matchPrefix(sessionpart, 'a=ice-options:')[0];

              if (iceOptions) {
                pc.canTrickleIceCandidates = iceOptions
                  .substr(14)
                  .split(' ')
                  .indexOf('trickle') >= 0;
              } else {
                pc.canTrickleIceCandidates = false;
              }

              sections.forEach((mediaSection, sdpMLineIndex) => {
                const lines = SDPUtils.splitLines(mediaSection);
                const kind = SDPUtils.getKind(mediaSection); // treat bundle-only as not-rejected.

                const rejected = SDPUtils.isRejected(mediaSection)
                  && SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
                const protocol = lines[0].substr(2).split(' ')[2];
                const direction = SDPUtils.getDirection(mediaSection, sessionpart);
                const remoteMsid = SDPUtils.parseMsid(mediaSection);
                const mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier(); // Reject datachannels which are not implemented yet.

                if (
                  rejected
                  || (kind === 'application'
                    && (protocol === 'DTLS/SCTP' || protocol === 'UDP/DTLS/SCTP'))
                ) {
                  // TODO: this is dangerous in the case where a non-rejected m-line
                  //     becomes rejected.
                  pc.transceivers[sdpMLineIndex] = {
                    mid,
                    kind,
                    protocol,
                    rejected: true,
                  };
                  return;
                }

                if (
                  !rejected
                  && pc.transceivers[sdpMLineIndex]
                  && pc.transceivers[sdpMLineIndex].rejected
                ) {
                  // recycle a rejected transceiver.
                  pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
                }

                let transceiver;
                let iceGatherer;
                let iceTransport;
                let dtlsTransport;
                let rtpReceiver;
                let sendEncodingParameters;
                let recvEncodingParameters;
                let localCapabilities;
                let track; // FIXME: ensure the mediaSection has rtcp-mux set.

                const remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
                let remoteIceParameters;
                let remoteDtlsParameters;

                if (!rejected) {
                  remoteIceParameters = SDPUtils.getIceParameters(mediaSection, sessionpart);
                  remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection, sessionpart);
                  remoteDtlsParameters.role = 'client';
                }

                recvEncodingParameters = SDPUtils.parseRtpEncodingParameters(mediaSection);
                const rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);
                const isComplete = SDPUtils.matchPrefix(mediaSection, 'a=end-of-candidates', sessionpart).length > 0;
                const cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
                  .map((cand) => SDPUtils.parseCandidate(cand))
                  .filter((cand) => cand.component === 1); // Check if we can use BUNDLE and dispose transports.

                if (
                  (description.type === 'offer' || description.type === 'answer')
                  && !rejected
                  && usingBundle
                  && sdpMLineIndex > 0
                  && pc.transceivers[sdpMLineIndex]
                ) {
                  pc._disposeIceAndDtlsTransports(sdpMLineIndex);

                  pc.transceivers[sdpMLineIndex].iceGatherer = pc.transceivers[0].iceGatherer;
                  pc.transceivers[sdpMLineIndex].iceTransport = pc.transceivers[0].iceTransport;
                  pc.transceivers[sdpMLineIndex].dtlsTransport = pc.transceivers[0].dtlsTransport;

                  if (pc.transceivers[sdpMLineIndex].rtpSender) {
                    pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
                      pc.transceivers[0].dtlsTransport,
                    );
                  }

                  if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
                    pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
                      pc.transceivers[0].dtlsTransport,
                    );
                  }
                }

                if (description.type === 'offer' && !rejected) {
                  transceiver = pc.transceivers[sdpMLineIndex] || pc._createTransceiver(kind);
                  transceiver.mid = mid;

                  if (!transceiver.iceGatherer) {
                    transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex, usingBundle);
                  }

                  if (cands.length && transceiver.iceTransport.state === 'new') {
                    if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
                      transceiver.iceTransport.setRemoteCandidates(cands);
                    } else {
                      cands.forEach((candidate) => {
                        maybeAddCandidate(transceiver.iceTransport, candidate);
                      });
                    }
                  }

                  localCapabilities = window.RTCRtpReceiver.getCapabilities(kind); // filter RTX until additional stuff needed for RTX is implemented
                  // in adapter.js

                  if (edgeVersion < 15019) {
                    localCapabilities.codecs = localCapabilities.codecs.filter((codec) => codec.name !== 'rtx');
                  }

                  sendEncodingParameters = transceiver.sendEncodingParameters || [
                    {
                      ssrc: (2 * sdpMLineIndex + 2) * 1001,
                    },
                  ]; // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams

                  let isNewTrack = false;

                  if (direction === 'sendrecv' || direction === 'sendonly') {
                    isNewTrack = !transceiver.rtpReceiver;
                    rtpReceiver = transceiver.rtpReceiver
                      || new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

                    if (isNewTrack) {
                      let stream;
                      track = rtpReceiver.track; // FIXME: does not work with Plan B.

                      if (remoteMsid && remoteMsid.stream === '-') {
                        // no-op. a stream id of '-' means: no associated stream.
                      } else if (remoteMsid) {
                        if (!streams[remoteMsid.stream]) {
                          streams[remoteMsid.stream] = new window.MediaStream();
                          Object.defineProperty(streams[remoteMsid.stream], 'id', {
                            get: function get() {
                              return remoteMsid.stream;
                            },
                          });
                        }

                        Object.defineProperty(track, 'id', {
                          get: function get() {
                            return remoteMsid.track;
                          },
                        });
                        stream = streams[remoteMsid.stream];
                      } else {
                        if (!streams.default) {
                          streams.default = new window.MediaStream();
                        }

                        stream = streams.default;
                      }

                      if (stream) {
                        addTrackToStreamAndFireEvent(track, stream);
                        transceiver.associatedRemoteMediaStreams.push(stream);
                      }

                      receiverList.push([track, rtpReceiver, stream]);
                    }
                  } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
                    transceiver.associatedRemoteMediaStreams.forEach((s) => {
                      const nativeTrack = s.getTracks().find((t) => t.id === transceiver.rtpReceiver.track.id);

                      if (nativeTrack) {
                        removeTrackFromStreamAndFireEvent(nativeTrack, s);
                      }
                    });
                    transceiver.associatedRemoteMediaStreams = [];
                  }

                  transceiver.localCapabilities = localCapabilities;
                  transceiver.remoteCapabilities = remoteCapabilities;
                  transceiver.rtpReceiver = rtpReceiver;
                  transceiver.rtcpParameters = rtcpParameters;
                  transceiver.sendEncodingParameters = sendEncodingParameters;
                  transceiver.recvEncodingParameters = recvEncodingParameters; // Start the RTCRtpReceiver now. The RTPSender is started in
                  // setLocalDescription.

                  pc._transceive(pc.transceivers[sdpMLineIndex], false, isNewTrack);
                } else if (description.type === 'answer' && !rejected) {
                  transceiver = pc.transceivers[sdpMLineIndex];
                  iceGatherer = transceiver.iceGatherer;
                  iceTransport = transceiver.iceTransport;
                  dtlsTransport = transceiver.dtlsTransport;
                  rtpReceiver = transceiver.rtpReceiver;
                  sendEncodingParameters = transceiver.sendEncodingParameters;
                  localCapabilities = transceiver.localCapabilities;
                  pc.transceivers[sdpMLineIndex].recvEncodingParameters = recvEncodingParameters;
                  pc.transceivers[sdpMLineIndex].remoteCapabilities = remoteCapabilities;
                  pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

                  if (cands.length && iceTransport.state === 'new') {
                    if ((isIceLite || isComplete) && (!usingBundle || sdpMLineIndex === 0)) {
                      iceTransport.setRemoteCandidates(cands);
                    } else {
                      cands.forEach((candidate) => {
                        maybeAddCandidate(transceiver.iceTransport, candidate);
                      });
                    }
                  }

                  if (!usingBundle || sdpMLineIndex === 0) {
                    if (iceTransport.state === 'new') {
                      iceTransport.start(iceGatherer, remoteIceParameters, 'controlling');
                    }

                    if (dtlsTransport.state === 'new') {
                      dtlsTransport.start(remoteDtlsParameters);
                    }
                  } // If the offer contained RTX but the answer did not,
                  // remove RTX from sendEncodingParameters.

                  const commonCapabilities = getCommonCapabilities(
                    transceiver.localCapabilities,
                    transceiver.remoteCapabilities,
                  );
                  const hasRtx = commonCapabilities.codecs.filter((c) => c.name.toLowerCase() === 'rtx').length;

                  if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
                    delete transceiver.sendEncodingParameters[0].rtx;
                  }

                  pc._transceive(
                    transceiver,
                    direction === 'sendrecv' || direction === 'recvonly',
                    direction === 'sendrecv' || direction === 'sendonly',
                  ); // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams

                  if (rtpReceiver && (direction === 'sendrecv' || direction === 'sendonly')) {
                    track = rtpReceiver.track;

                    if (remoteMsid) {
                      if (!streams[remoteMsid.stream]) {
                        streams[remoteMsid.stream] = new window.MediaStream();
                      }

                      addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
                      receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
                    } else {
                      if (!streams.default) {
                        streams.default = new window.MediaStream();
                      }

                      addTrackToStreamAndFireEvent(track, streams.default);
                      receiverList.push([track, rtpReceiver, streams.default]);
                    }
                  } else {
                    // FIXME: actually the receiver should be created later.
                    delete transceiver.rtpReceiver;
                  }
                }
              });

              if (pc._dtlsRole === undefined) {
                pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
              }

              pc._remoteDescription = {
                type: description.type,
                sdp: description.sdp,
              };

              if (description.type === 'offer') {
                pc._updateSignalingState('have-remote-offer');
              } else {
                pc._updateSignalingState('stable');
              }

              Object.keys(streams).forEach((sid) => {
                const stream = streams[sid];

                if (stream.getTracks().length) {
                  if (pc.remoteStreams.indexOf(stream) === -1) {
                    pc.remoteStreams.push(stream);
                    const event = new Event('addstream');
                    event.stream = stream;
                    window.setTimeout(() => {
                      pc._dispatchEvent('addstream', event);
                    });
                  }

                  receiverList.forEach((item) => {
                    const track = item[0];
                    const receiver = item[1];

                    if (stream.id !== item[2].id) {
                      return;
                    }

                    fireAddTrack(pc, track, receiver, [stream]);
                  });
                }
              });
              receiverList.forEach((item) => {
                if (item[2]) {
                  return;
                }

                fireAddTrack(pc, item[0], item[1], []);
              }); // check whether addIceCandidate({}) was called within four seconds after
              // setRemoteDescription.

              window.setTimeout(() => {
                if (!(pc && pc.transceivers)) {
                  return;
                }

                pc.transceivers.forEach((transceiver) => {
                  if (
                    transceiver.iceTransport
                    && transceiver.iceTransport.state === 'new'
                    && transceiver.iceTransport.getRemoteCandidates().length > 0
                  ) {
                    console.warn(
                      'Timeout for addRemoteCandidate. Consider sending '
                        + 'an end-of-candidates notification',
                    );
                    transceiver.iceTransport.addRemoteCandidate({});
                  }
                });
              }, 4000);
              return Promise.resolve();
            };

            RTCPeerConnection.prototype.close = function () {
              this.transceivers.forEach((transceiver) => {
                /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
                if (transceiver.iceTransport) {
                  transceiver.iceTransport.stop();
                }

                if (transceiver.dtlsTransport) {
                  transceiver.dtlsTransport.stop();
                }

                if (transceiver.rtpSender) {
                  transceiver.rtpSender.stop();
                }

                if (transceiver.rtpReceiver) {
                  transceiver.rtpReceiver.stop();
                }
              }); // FIXME: clean up tracks, local streams, remote streams, etc

              this._isClosed = true;

              this._updateSignalingState('closed');
            }; // Update the signaling state.

            RTCPeerConnection.prototype._updateSignalingState = function (newState) {
              this.signalingState = newState;
              const event = new Event('signalingstatechange');

              this._dispatchEvent('signalingstatechange', event);
            }; // Determine whether to fire the negotiationneeded event.

            RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function () {
              const pc = this;

              if (this.signalingState !== 'stable' || this.needNegotiation === true) {
                return;
              }

              this.needNegotiation = true;
              window.setTimeout(() => {
                if (pc.needNegotiation) {
                  pc.needNegotiation = false;
                  const event = new Event('negotiationneeded');

                  pc._dispatchEvent('negotiationneeded', event);
                }
              }, 0);
            }; // Update the ice connection state.

            RTCPeerConnection.prototype._updateIceConnectionState = function () {
              let newState;
              const states = {
                new: 0,
                closed: 0,
                checking: 0,
                connected: 0,
                completed: 0,
                disconnected: 0,
                failed: 0,
              };
              this.transceivers.forEach((transceiver) => {
                if (transceiver.iceTransport && !transceiver.rejected) {
                  states[transceiver.iceTransport.state]++;
                }
              });
              newState = 'new';

              if (states.failed > 0) {
                newState = 'failed';
              } else if (states.checking > 0) {
                newState = 'checking';
              } else if (states.disconnected > 0) {
                newState = 'disconnected';
              } else if (states.new > 0) {
                newState = 'new';
              } else if (states.connected > 0) {
                newState = 'connected';
              } else if (states.completed > 0) {
                newState = 'completed';
              }

              if (newState !== this.iceConnectionState) {
                this.iceConnectionState = newState;
                const event = new Event('iceconnectionstatechange');

                this._dispatchEvent('iceconnectionstatechange', event);
              }
            }; // Update the connection state.

            RTCPeerConnection.prototype._updateConnectionState = function () {
              let newState;
              const states = {
                new: 0,
                closed: 0,
                connecting: 0,
                connected: 0,
                completed: 0,
                disconnected: 0,
                failed: 0,
              };
              this.transceivers.forEach((transceiver) => {
                if (
                  transceiver.iceTransport
                  && transceiver.dtlsTransport
                  && !transceiver.rejected
                ) {
                  states[transceiver.iceTransport.state]++;
                  states[transceiver.dtlsTransport.state]++;
                }
              }); // ICETransport.completed and connected are the same for this purpose.

              states.connected += states.completed;
              newState = 'new';

              if (states.failed > 0) {
                newState = 'failed';
              } else if (states.connecting > 0) {
                newState = 'connecting';
              } else if (states.disconnected > 0) {
                newState = 'disconnected';
              } else if (states.new > 0) {
                newState = 'new';
              } else if (states.connected > 0) {
                newState = 'connected';
              }

              if (newState !== this.connectionState) {
                this.connectionState = newState;
                const event = new Event('connectionstatechange');

                this._dispatchEvent('connectionstatechange', event);
              }
            };

            RTCPeerConnection.prototype.createOffer = function () {
              const pc = this;

              if (pc._isClosed) {
                return Promise.reject(
                  makeError('InvalidStateError', 'Can not call createOffer after close'),
                );
              }

              let numAudioTracks = pc.transceivers.filter((t) => t.kind === 'audio').length;
              let numVideoTracks = pc.transceivers.filter((t) => t.kind === 'video').length; // Determine number of audio and video tracks we need to send/recv.

              const offerOptions = arguments[0];

              if (offerOptions) {
                // Reject Chrome legacy constraints.
                if (offerOptions.mandatory || offerOptions.optional) {
                  throw new TypeError('Legacy mandatory/optional constraints not supported.');
                }

                if (offerOptions.offerToReceiveAudio !== undefined) {
                  if (offerOptions.offerToReceiveAudio === true) {
                    numAudioTracks = 1;
                  } else if (offerOptions.offerToReceiveAudio === false) {
                    numAudioTracks = 0;
                  } else {
                    numAudioTracks = offerOptions.offerToReceiveAudio;
                  }
                }

                if (offerOptions.offerToReceiveVideo !== undefined) {
                  if (offerOptions.offerToReceiveVideo === true) {
                    numVideoTracks = 1;
                  } else if (offerOptions.offerToReceiveVideo === false) {
                    numVideoTracks = 0;
                  } else {
                    numVideoTracks = offerOptions.offerToReceiveVideo;
                  }
                }
              }

              pc.transceivers.forEach((transceiver) => {
                if (transceiver.kind === 'audio') {
                  numAudioTracks--;

                  if (numAudioTracks < 0) {
                    transceiver.wantReceive = false;
                  }
                } else if (transceiver.kind === 'video') {
                  numVideoTracks--;

                  if (numVideoTracks < 0) {
                    transceiver.wantReceive = false;
                  }
                }
              }); // Create M-lines for recvonly streams.

              while (numAudioTracks > 0 || numVideoTracks > 0) {
                if (numAudioTracks > 0) {
                  pc._createTransceiver('audio');

                  numAudioTracks--;
                }

                if (numVideoTracks > 0) {
                  pc._createTransceiver('video');

                  numVideoTracks--;
                }
              }

              let sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId, pc._sdpSessionVersion++);
              pc.transceivers.forEach((transceiver, sdpMLineIndex) => {
                // For each track, create an ice gatherer, ice transport,
                // dtls transport, potentially rtpsender and rtpreceiver.
                const { track } = transceiver;
                const { kind } = transceiver;
                const mid = transceiver.mid || SDPUtils.generateIdentifier();
                transceiver.mid = mid;

                if (!transceiver.iceGatherer) {
                  transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex, pc.usingBundle);
                }

                const localCapabilities = window.RTCRtpSender.getCapabilities(kind); // filter RTX until additional stuff needed for RTX is implemented
                // in adapter.js

                if (edgeVersion < 15019) {
                  localCapabilities.codecs = localCapabilities.codecs.filter((codec) => codec.name !== 'rtx');
                }

                localCapabilities.codecs.forEach((codec) => {
                  // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
                  // by adding level-asymmetry-allowed=1
                  if (
                    codec.name === 'H264'
                    && codec.parameters['level-asymmetry-allowed'] === undefined
                  ) {
                    codec.parameters['level-asymmetry-allowed'] = '1';
                  } // for subsequent offers, we might have to re-use the payload
                  // type of the last offer.

                  if (transceiver.remoteCapabilities && transceiver.remoteCapabilities.codecs) {
                    transceiver.remoteCapabilities.codecs.forEach((remoteCodec) => {
                      if (
                        codec.name.toLowerCase() === remoteCodec.name.toLowerCase()
                        && codec.clockRate === remoteCodec.clockRate
                      ) {
                        codec.preferredPayloadType = remoteCodec.payloadType;
                      }
                    });
                  }
                });
                localCapabilities.headerExtensions.forEach((hdrExt) => {
                  const remoteExtensions = (transceiver.remoteCapabilities
                      && transceiver.remoteCapabilities.headerExtensions)
                    || [];
                  remoteExtensions.forEach((rHdrExt) => {
                    if (hdrExt.uri === rHdrExt.uri) {
                      hdrExt.id = rHdrExt.id;
                    }
                  });
                }); // generate an ssrc now, to be used later in rtpSender.send

                const sendEncodingParameters = transceiver.sendEncodingParameters || [
                  {
                    ssrc: (2 * sdpMLineIndex + 1) * 1001,
                  },
                ];

                if (track) {
                  // add RTX
                  if (edgeVersion >= 15019 && kind === 'video' && !sendEncodingParameters[0].rtx) {
                    sendEncodingParameters[0].rtx = {
                      ssrc: sendEncodingParameters[0].ssrc + 1,
                    };
                  }
                }

                if (transceiver.wantReceive) {
                  transceiver.rtpReceiver = new window.RTCRtpReceiver(
                    transceiver.dtlsTransport,
                    kind,
                  );
                }

                transceiver.localCapabilities = localCapabilities;
                transceiver.sendEncodingParameters = sendEncodingParameters;
              }); // always offer BUNDLE and dispose on return if not supported.

              if (pc._config.bundlePolicy !== 'max-compat') {
                sdp
                  += `a=group:BUNDLE ${
                    pc.transceivers
                      .map((t) => t.mid)
                      .join(' ')
                  }\r\n`;
              }

              sdp += 'a=ice-options:trickle\r\n';
              pc.transceivers.forEach((transceiver, sdpMLineIndex) => {
                sdp += writeMediaSection(
                  transceiver,
                  transceiver.localCapabilities,
                  'offer',
                  transceiver.stream,
                  pc._dtlsRole,
                );
                sdp += 'a=rtcp-rsize\r\n';

                if (
                  transceiver.iceGatherer
                  && pc.iceGatheringState !== 'new'
                  && (sdpMLineIndex === 0 || !pc.usingBundle)
                ) {
                  transceiver.iceGatherer.getLocalCandidates().forEach((cand) => {
                    cand.component = 1;
                    sdp += `a=${SDPUtils.writeCandidate(cand)}\r\n`;
                  });

                  if (transceiver.iceGatherer.state === 'completed') {
                    sdp += 'a=end-of-candidates\r\n';
                  }
                }
              });
              const desc = new window.RTCSessionDescription({
                type: 'offer',
                sdp,
              });
              return Promise.resolve(desc);
            };

            RTCPeerConnection.prototype.createAnswer = function () {
              const pc = this;

              if (pc._isClosed) {
                return Promise.reject(
                  makeError('InvalidStateError', 'Can not call createAnswer after close'),
                );
              }

              if (
                !(
                  pc.signalingState === 'have-remote-offer'
                  || pc.signalingState === 'have-local-pranswer'
                )
              ) {
                return Promise.reject(
                  makeError(
                    'InvalidStateError',
                    `Can not call createAnswer in signalingState ${pc.signalingState}`,
                  ),
                );
              }

              let sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId, pc._sdpSessionVersion++);

              if (pc.usingBundle) {
                sdp
                  += `a=group:BUNDLE ${
                    pc.transceivers
                      .map((t) => t.mid)
                      .join(' ')
                  }\r\n`;
              }

              sdp += 'a=ice-options:trickle\r\n';
              const mediaSectionsInOffer = SDPUtils.getMediaSections(pc._remoteDescription.sdp)
                .length;
              pc.transceivers.forEach((transceiver, sdpMLineIndex) => {
                if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
                  return;
                }

                if (transceiver.rejected) {
                  if (transceiver.kind === 'application') {
                    if (transceiver.protocol === 'DTLS/SCTP') {
                      // legacy fmt
                      sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
                    } else {
                      sdp += `m=application 0 ${transceiver.protocol} webrtc-datachannel\r\n`;
                    }
                  } else if (transceiver.kind === 'audio') {
                    sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' + 'a=rtpmap:0 PCMU/8000\r\n';
                  } else if (transceiver.kind === 'video') {
                    sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' + 'a=rtpmap:120 VP8/90000\r\n';
                  }

                  sdp
                    += `${'c=IN IP4 0.0.0.0\r\n' + 'a=inactive\r\n' + 'a=mid:'}${transceiver.mid}\r\n`;
                  return;
                } // FIXME: look at direction.

                if (transceiver.stream) {
                  let localTrack;

                  if (transceiver.kind === 'audio') {
                    localTrack = transceiver.stream.getAudioTracks()[0];
                  } else if (transceiver.kind === 'video') {
                    localTrack = transceiver.stream.getVideoTracks()[0];
                  }

                  if (localTrack) {
                    // add RTX
                    if (
                      edgeVersion >= 15019
                      && transceiver.kind === 'video'
                      && !transceiver.sendEncodingParameters[0].rtx
                    ) {
                      transceiver.sendEncodingParameters[0].rtx = {
                        ssrc: transceiver.sendEncodingParameters[0].ssrc + 1,
                      };
                    }
                  }
                } // Calculate intersection of capabilities.

                const commonCapabilities = getCommonCapabilities(
                  transceiver.localCapabilities,
                  transceiver.remoteCapabilities,
                );
                const hasRtx = commonCapabilities.codecs.filter((c) => c.name.toLowerCase() === 'rtx').length;

                if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
                  delete transceiver.sendEncodingParameters[0].rtx;
                }

                sdp += writeMediaSection(
                  transceiver,
                  commonCapabilities,
                  'answer',
                  transceiver.stream,
                  pc._dtlsRole,
                );

                if (transceiver.rtcpParameters && transceiver.rtcpParameters.reducedSize) {
                  sdp += 'a=rtcp-rsize\r\n';
                }
              });
              const desc = new window.RTCSessionDescription({
                type: 'answer',
                sdp,
              });
              return Promise.resolve(desc);
            };

            RTCPeerConnection.prototype.addIceCandidate = function (candidate) {
              const pc = this;
              let sections;

              if (candidate && !(candidate.sdpMLineIndex !== undefined || candidate.sdpMid)) {
                return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
              } // TODO: needs to go into ops queue.

              return new Promise(((resolve, reject) => {
                if (!pc._remoteDescription) {
                  return reject(
                    makeError(
                      'InvalidStateError',
                      'Can not add ICE candidate without a remote description',
                    ),
                  );
                } if (!candidate || candidate.candidate === '') {
                  for (let j = 0; j < pc.transceivers.length; j++) {
                    if (pc.transceivers[j].rejected) {
                      continue;
                    }

                    pc.transceivers[j].iceTransport.addRemoteCandidate({});
                    sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
                    sections[j] += 'a=end-of-candidates\r\n';
                    pc._remoteDescription.sdp = SDPUtils.getDescription(pc._remoteDescription.sdp) + sections.join('');

                    if (pc.usingBundle) {
                      break;
                    }
                  }
                } else {
                  let { sdpMLineIndex } = candidate;

                  if (candidate.sdpMid) {
                    for (let i = 0; i < pc.transceivers.length; i++) {
                      if (pc.transceivers[i].mid === candidate.sdpMid) {
                        sdpMLineIndex = i;
                        break;
                      }
                    }
                  }

                  const transceiver = pc.transceivers[sdpMLineIndex];

                  if (transceiver) {
                    if (transceiver.rejected) {
                      return resolve();
                    }

                    const cand = Object.keys(candidate.candidate).length > 0
                      ? SDPUtils.parseCandidate(candidate.candidate)
                      : {}; // Ignore Chrome's invalid candidates since Edge does not like them.

                    if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
                      return resolve();
                    } // Ignore RTCP candidates, we assume RTCP-MUX.

                    if (cand.component && cand.component !== 1) {
                      return resolve();
                    } // when using bundle, avoid adding candidates to the wrong
                    // ice transport. And avoid adding candidates added in the SDP.

                    if (
                      sdpMLineIndex === 0
                      || (sdpMLineIndex > 0
                        && transceiver.iceTransport !== pc.transceivers[0].iceTransport)
                    ) {
                      if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
                        return reject(makeError('OperationError', 'Can not add ICE candidate'));
                      }
                    } // update the remoteDescription.

                    let candidateString = candidate.candidate.trim();

                    if (candidateString.indexOf('a=') === 0) {
                      candidateString = candidateString.substr(2);
                    }

                    sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
                    sections[sdpMLineIndex]
                      += `a=${cand.type ? candidateString : 'end-of-candidates'}\r\n`;
                    pc._remoteDescription.sdp = SDPUtils.getDescription(pc._remoteDescription.sdp) + sections.join('');
                  } else {
                    return reject(makeError('OperationError', 'Can not add ICE candidate'));
                  }
                }

                resolve();
              }));
            };

            RTCPeerConnection.prototype.getStats = function (selector) {
              if (selector && selector instanceof window.MediaStreamTrack) {
                let senderOrReceiver = null;
                this.transceivers.forEach((transceiver) => {
                  if (transceiver.rtpSender && transceiver.rtpSender.track === selector) {
                    senderOrReceiver = transceiver.rtpSender;
                  } else if (
                    transceiver.rtpReceiver
                    && transceiver.rtpReceiver.track === selector
                  ) {
                    senderOrReceiver = transceiver.rtpReceiver;
                  }
                });

                if (!senderOrReceiver) {
                  throw makeError('InvalidAccessError', 'Invalid selector.');
                }

                return senderOrReceiver.getStats();
              }

              const promises = [];
              this.transceivers.forEach((transceiver) => {
                [
                  'rtpSender',
                  'rtpReceiver',
                  'iceGatherer',
                  'iceTransport',
                  'dtlsTransport',
                ].forEach((method) => {
                  if (transceiver[method]) {
                    promises.push(transceiver[method].getStats());
                  }
                });
              });
              return Promise.all(promises).then((allStats) => {
                const results = new Map();
                allStats.forEach((stats) => {
                  stats.forEach((stat) => {
                    results.set(stat.id, stat);
                  });
                });
                return results;
              });
            }; // fix low-level stat names and return Map instead of object.

            const ortcObjects = [
              'RTCRtpSender',
              'RTCRtpReceiver',
              'RTCIceGatherer',
              'RTCIceTransport',
              'RTCDtlsTransport',
            ];
            ortcObjects.forEach((ortcObjectName) => {
              const obj = window[ortcObjectName];

              if (obj && obj.prototype && obj.prototype.getStats) {
                const nativeGetstats = obj.prototype.getStats;

                obj.prototype.getStats = function () {
                  return nativeGetstats.apply(this).then((nativeStats) => {
                    const mapStats = new Map();
                    Object.keys(nativeStats).forEach((id) => {
                      nativeStats[id].type = fixStatsType(nativeStats[id]);
                      mapStats.set(id, nativeStats[id]);
                    });
                    return mapStats;
                  });
                };
              }
            }); // legacy callback shims. Should be moved to adapter.js some days.

            let methods = ['createOffer', 'createAnswer'];
            methods.forEach((method) => {
              const nativeMethod = RTCPeerConnection.prototype[method];

              RTCPeerConnection.prototype[method] = function () {
                const args = arguments;

                if (typeof args[0] === 'function' || typeof args[1] === 'function') {
                  // legacy
                  return nativeMethod.apply(this, [arguments[2]]).then(
                    (description) => {
                      if (typeof args[0] === 'function') {
                        args[0].apply(null, [description]);
                      }
                    },
                    (error) => {
                      if (typeof args[1] === 'function') {
                        args[1].apply(null, [error]);
                      }
                    },
                  );
                }

                return nativeMethod.apply(this, arguments);
              };
            });
            methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
            methods.forEach((method) => {
              const nativeMethod = RTCPeerConnection.prototype[method];

              RTCPeerConnection.prototype[method] = function () {
                const args = arguments;

                if (typeof args[1] === 'function' || typeof args[2] === 'function') {
                  // legacy
                  return nativeMethod.apply(this, arguments).then(
                    () => {
                      if (typeof args[1] === 'function') {
                        args[1].apply(null);
                      }
                    },
                    (error) => {
                      if (typeof args[2] === 'function') {
                        args[2].apply(null, [error]);
                      }
                    },
                  );
                }

                return nativeMethod.apply(this, arguments);
              };
            }); // getStats is special. It doesn't have a spec legacy method yet we support
            // getStats(something, cb) without error callbacks.

            ['getStats'].forEach((method) => {
              const nativeMethod = RTCPeerConnection.prototype[method];

              RTCPeerConnection.prototype[method] = function () {
                const args = arguments;

                if (typeof args[1] === 'function') {
                  return nativeMethod.apply(this, arguments).then(() => {
                    if (typeof args[1] === 'function') {
                      args[1].apply(null);
                    }
                  });
                }

                return nativeMethod.apply(this, arguments);
              };
            });
            return RTCPeerConnection;
          };
        },
        { sdp: 6 },
      ],
      6: [
        function (require, module, exports) {
          /* eslint-env node */

          // SDP helpers.

          function _typeof(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof = function _typeof(obj) {
                return typeof obj;
              };
            } else {
              _typeof = function _typeof(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof(obj);
          }

          const SDPUtils = {}; // Generate an alphanumeric identifier for cname or mids.
          // TODO: use UUIDs instead? https://gist.github.com/jed/982883

          SDPUtils.generateIdentifier = function () {
            return Math.random()
              .toString(36)
              .substr(2, 10);
          }; // The RTCP CNAME used by all peerconnections from the same JS.

          SDPUtils.localCName = SDPUtils.generateIdentifier(); // Splits SDP into lines, dealing with both CRLF and LF.

          SDPUtils.splitLines = function (blob) {
            return blob
              .trim()
              .split('\n')
              .map((line) => line.trim());
          }; // Splits SDP into sessionpart and mediasections. Ensures CRLF.

          SDPUtils.splitSections = function (blob) {
            const parts = blob.split('\nm=');
            return parts.map((part, index) => `${(index > 0 ? `m=${part}` : part).trim()}\r\n`);
          }; // returns the session description.

          SDPUtils.getDescription = function (blob) {
            const sections = SDPUtils.splitSections(blob);
            return sections && sections[0];
          }; // returns the individual media sections.

          SDPUtils.getMediaSections = function (blob) {
            const sections = SDPUtils.splitSections(blob);
            sections.shift();
            return sections;
          }; // Returns lines that start with a certain prefix.

          SDPUtils.matchPrefix = function (blob, prefix) {
            return SDPUtils.splitLines(blob).filter((line) => line.indexOf(prefix) === 0);
          }; // Parses an ICE candidate line. Sample input:
          // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
          // rport 55996"

          SDPUtils.parseCandidate = function (line) {
            let parts; // Parse both variants.

            if (line.indexOf('a=candidate:') === 0) {
              parts = line.substring(12).split(' ');
            } else {
              parts = line.substring(10).split(' ');
            }

            const candidate = {
              foundation: parts[0],
              component: parseInt(parts[1], 10),
              protocol: parts[2].toLowerCase(),
              priority: parseInt(parts[3], 10),
              ip: parts[4],
              address: parts[4],
              // address is an alias for ip.
              port: parseInt(parts[5], 10),
              // skip parts[6] == 'typ'
              type: parts[7],
            };

            for (let i = 8; i < parts.length; i += 2) {
              switch (parts[i]) {
                case 'raddr':
                  candidate.relatedAddress = parts[i + 1];
                  break;

                case 'rport':
                  candidate.relatedPort = parseInt(parts[i + 1], 10);
                  break;

                case 'tcptype':
                  candidate.tcpType = parts[i + 1];
                  break;

                case 'ufrag':
                  candidate.ufrag = parts[i + 1]; // for backward compability.

                  candidate.usernameFragment = parts[i + 1];
                  break;

                default:
                  // extension handling, in particular ufrag
                  candidate[parts[i]] = parts[i + 1];
                  break;
              }
            }

            return candidate;
          }; // Translates a candidate object into SDP candidate attribute.

          SDPUtils.writeCandidate = function (candidate) {
            const sdp = [];
            sdp.push(candidate.foundation);
            sdp.push(candidate.component);
            sdp.push(candidate.protocol.toUpperCase());
            sdp.push(candidate.priority);
            sdp.push(candidate.address || candidate.ip);
            sdp.push(candidate.port);
            const { type } = candidate;
            sdp.push('typ');
            sdp.push(type);

            if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {
              sdp.push('raddr');
              sdp.push(candidate.relatedAddress);
              sdp.push('rport');
              sdp.push(candidate.relatedPort);
            }

            if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
              sdp.push('tcptype');
              sdp.push(candidate.tcpType);
            }

            if (candidate.usernameFragment || candidate.ufrag) {
              sdp.push('ufrag');
              sdp.push(candidate.usernameFragment || candidate.ufrag);
            }

            return `candidate:${sdp.join(' ')}`;
          }; // Parses an ice-options line, returns an array of option tags.
          // a=ice-options:foo bar

          SDPUtils.parseIceOptions = function (line) {
            return line.substr(14).split(' ');
          }; // Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
          // a=rtpmap:111 opus/48000/2

          SDPUtils.parseRtpMap = function (line) {
            let parts = line.substr(9).split(' ');
            const parsed = {
              payloadType: parseInt(parts.shift(), 10), // was: id
            };
            parts = parts[0].split('/');
            parsed.name = parts[0];
            parsed.clockRate = parseInt(parts[1], 10); // was: clockrate

            parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // legacy alias, got renamed back to channels in ORTC.

            parsed.numChannels = parsed.channels;
            return parsed;
          }; // Generate an a=rtpmap line from RTCRtpCodecCapability or
          // RTCRtpCodecParameters.

          SDPUtils.writeRtpMap = function (codec) {
            let pt = codec.payloadType;

            if (codec.preferredPayloadType !== undefined) {
              pt = codec.preferredPayloadType;
            }

            const channels = codec.channels || codec.numChannels || 1;
            return (
              `a=rtpmap:${
                pt
              } ${
                codec.name
              }/${
                codec.clockRate
              }${channels !== 1 ? `/${channels}` : ''
              }\r\n`
            );
          }; // Parses an a=extmap line (headerextension from RFC 5285). Sample input:
          // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
          // a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset

          SDPUtils.parseExtmap = function (line) {
            const parts = line.substr(9).split(' ');
            return {
              id: parseInt(parts[0], 10),
              direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
              uri: parts[1],
            };
          }; // Generates a=extmap line from RTCRtpHeaderExtensionParameters or
          // RTCRtpHeaderExtension.

          SDPUtils.writeExtmap = function (headerExtension) {
            return (
              `a=extmap:${
                headerExtension.id || headerExtension.preferredId
              }${headerExtension.direction && headerExtension.direction !== 'sendrecv'
                ? `/${headerExtension.direction}`
                : ''
              } ${
                headerExtension.uri
              }\r\n`
            );
          }; // Parses an ftmp line, returns dictionary. Sample input:
          // a=fmtp:96 vbr=on;cng=on
          // Also deals with vbr=on; cng=on

          SDPUtils.parseFmtp = function (line) {
            const parsed = {};
            let kv;
            const parts = line.substr(line.indexOf(' ') + 1).split(';');

            for (let j = 0; j < parts.length; j++) {
              kv = parts[j].trim().split('=');
              parsed[kv[0].trim()] = kv[1];
            }

            return parsed;
          }; // Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.

          SDPUtils.writeFmtp = function (codec) {
            let line = '';
            let pt = codec.payloadType;

            if (codec.preferredPayloadType !== undefined) {
              pt = codec.preferredPayloadType;
            }

            if (codec.parameters && Object.keys(codec.parameters).length) {
              const params = [];
              Object.keys(codec.parameters).forEach((param) => {
                if (codec.parameters[param]) {
                  params.push(`${param}=${codec.parameters[param]}`);
                } else {
                  params.push(param);
                }
              });
              line += `a=fmtp:${pt} ${params.join(';')}\r\n`;
            }

            return line;
          }; // Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
          // a=rtcp-fb:98 nack rpsi

          SDPUtils.parseRtcpFb = function (line) {
            const parts = line.substr(line.indexOf(' ') + 1).split(' ');
            return {
              type: parts.shift(),
              parameter: parts.join(' '),
            };
          }; // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.

          SDPUtils.writeRtcpFb = function (codec) {
            let lines = '';
            let pt = codec.payloadType;

            if (codec.preferredPayloadType !== undefined) {
              pt = codec.preferredPayloadType;
            }

            if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
              // FIXME: special handling for trr-int?
              codec.rtcpFeedback.forEach((fb) => {
                lines
                  += `a=rtcp-fb:${
                    pt
                  } ${
                    fb.type
                  }${fb.parameter && fb.parameter.length ? ` ${fb.parameter}` : ''
                  }\r\n`;
              });
            }

            return lines;
          }; // Parses an RFC 5576 ssrc media attribute. Sample input:
          // a=ssrc:3735928559 cname:something

          SDPUtils.parseSsrcMedia = function (line) {
            const sp = line.indexOf(' ');
            const parts = {
              ssrc: parseInt(line.substr(7, sp - 7), 10),
            };
            const colon = line.indexOf(':', sp);

            if (colon > -1) {
              parts.attribute = line.substr(sp + 1, colon - sp - 1);
              parts.value = line.substr(colon + 1);
            } else {
              parts.attribute = line.substr(sp + 1);
            }

            return parts;
          };

          SDPUtils.parseSsrcGroup = function (line) {
            const parts = line.substr(13).split(' ');
            return {
              semantics: parts.shift(),
              ssrcs: parts.map((ssrc) => parseInt(ssrc, 10)),
            };
          }; // Extracts the MID (RFC 5888) from a media section.
          // returns the MID or undefined if no mid line was found.

          SDPUtils.getMid = function (mediaSection) {
            const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];

            if (mid) {
              return mid.substr(6);
            }
          };

          SDPUtils.parseFingerprint = function (line) {
            const parts = line.substr(14).split(' ');
            return {
              algorithm: parts[0].toLowerCase(),
              // algorithm is case-sensitive in Edge.
              value: parts[1],
            };
          }; // Extracts DTLS parameters from SDP media section or sessionpart.
          // FIXME: for consistency with other functions this should only
          //   get the fingerprint line as input. See also getIceParameters.

          SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {
            const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:'); // Note: a=setup line is ignored since we use the 'auto' role.
            // Note2: 'algorithm' is not case sensitive except in Edge.

            return {
              role: 'auto',
              fingerprints: lines.map(SDPUtils.parseFingerprint),
            };
          }; // Serializes DTLS parameters to SDP.

          SDPUtils.writeDtlsParameters = function (params, setupType) {
            let sdp = `a=setup:${setupType}\r\n`;
            params.fingerprints.forEach((fp) => {
              sdp += `a=fingerprint:${fp.algorithm} ${fp.value}\r\n`;
            });
            return sdp;
          }; // Parses a=crypto lines into
          //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members

          SDPUtils.parseCryptoLine = function (line) {
            const parts = line.substr(9).split(' ');
            return {
              tag: parseInt(parts[0], 10),
              cryptoSuite: parts[1],
              keyParams: parts[2],
              sessionParams: parts.slice(3),
            };
          };

          SDPUtils.writeCryptoLine = function (parameters) {
            return (
              `a=crypto:${
                parameters.tag
              } ${
                parameters.cryptoSuite
              } ${
                _typeof(parameters.keyParams) === 'object'
                  ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
                  : parameters.keyParams
              }${parameters.sessionParams ? ` ${parameters.sessionParams.join(' ')}` : ''
              }\r\n`
            );
          }; // Parses the crypto key parameters into
          //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*

          SDPUtils.parseCryptoKeyParams = function (keyParams) {
            if (keyParams.indexOf('inline:') !== 0) {
              return null;
            }

            const parts = keyParams.substr(7).split('|');
            return {
              keyMethod: 'inline',
              keySalt: parts[0],
              lifeTime: parts[1],
              mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
              mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
            };
          };

          SDPUtils.writeCryptoKeyParams = function (keyParams) {
            return (
              `${keyParams.keyMethod
              }:${
                keyParams.keySalt
              }${keyParams.lifeTime ? `|${keyParams.lifeTime}` : ''
              }${keyParams.mkiValue && keyParams.mkiLength
                ? `|${keyParams.mkiValue}:${keyParams.mkiLength}`
                : ''}`
            );
          }; // Extracts all SDES paramters.

          SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {
            const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');
            return lines.map(SDPUtils.parseCryptoLine);
          }; // Parses ICE information from SDP media section or sessionpart.
          // FIXME: for consistency with other functions this should only
          //   get the ice-ufrag and ice-pwd lines as input.

          SDPUtils.getIceParameters = function (mediaSection, sessionpart) {
            const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];
            const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];

            if (!(ufrag && pwd)) {
              return null;
            }

            return {
              usernameFragment: ufrag.substr(12),
              password: pwd.substr(10),
            };
          }; // Serializes ICE parameters to SDP.

          SDPUtils.writeIceParameters = function (params) {
            return (
              `a=ice-ufrag:${
                params.usernameFragment
              }\r\n`
              + `a=ice-pwd:${
                params.password
              }\r\n`
            );
          }; // Parses the SDP media section and returns RTCRtpParameters.

          SDPUtils.parseRtpParameters = function (mediaSection) {
            const description = {
              codecs: [],
              headerExtensions: [],
              fecMechanisms: [],
              rtcp: [],
            };
            const lines = SDPUtils.splitLines(mediaSection);
            const mline = lines[0].split(' ');

            for (let i = 3; i < mline.length; i++) {
              // find all codecs from mline[3..]
              const pt = mline[i];
              const rtpmapline = SDPUtils.matchPrefix(mediaSection, `a=rtpmap:${pt} `)[0];

              if (rtpmapline) {
                const codec = SDPUtils.parseRtpMap(rtpmapline);
                const fmtps = SDPUtils.matchPrefix(mediaSection, `a=fmtp:${pt} `); // Only the first a=fmtp:<pt> is considered.

                codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
                codec.rtcpFeedback = SDPUtils.matchPrefix(
                  mediaSection,
                  `a=rtcp-fb:${pt} `,
                ).map(SDPUtils.parseRtcpFb);
                description.codecs.push(codec); // parse FEC mechanisms from rtpmap lines.

                switch (codec.name.toUpperCase()) {
                  case 'RED':
                  case 'ULPFEC':
                    description.fecMechanisms.push(codec.name.toUpperCase());
                    break;

                  default:
                    // only RED and ULPFEC are recognized as FEC mechanisms.
                    break;
                }
              }
            }

            SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach((line) => {
              description.headerExtensions.push(SDPUtils.parseExtmap(line));
            }); // FIXME: parse rtcp.

            return description;
          }; // Generates parts of the SDP media section describing the capabilities /
          // parameters.

          SDPUtils.writeRtpDescription = function (kind, caps) {
            let sdp = ''; // Build the mline.

            sdp += `m=${kind} `;
            sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.

            sdp += ' UDP/TLS/RTP/SAVPF ';
            sdp
              += `${caps.codecs
                .map((codec) => {
                  if (codec.preferredPayloadType !== undefined) {
                    return codec.preferredPayloadType;
                  }

                  return codec.payloadType;
                })
                .join(' ')}\r\n`;
            sdp += 'c=IN IP4 0.0.0.0\r\n';
            sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n'; // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.

            caps.codecs.forEach((codec) => {
              sdp += SDPUtils.writeRtpMap(codec);
              sdp += SDPUtils.writeFmtp(codec);
              sdp += SDPUtils.writeRtcpFb(codec);
            });
            let maxptime = 0;
            caps.codecs.forEach((codec) => {
              if (codec.maxptime > maxptime) {
                maxptime = codec.maxptime;
              }
            });

            if (maxptime > 0) {
              sdp += `a=maxptime:${maxptime}\r\n`;
            }

            sdp += 'a=rtcp-mux\r\n';

            if (caps.headerExtensions) {
              caps.headerExtensions.forEach((extension) => {
                sdp += SDPUtils.writeExtmap(extension);
              });
            } // FIXME: write fecMechanisms.

            return sdp;
          }; // Parses the SDP media section and returns an array of
          // RTCRtpEncodingParameters.

          SDPUtils.parseRtpEncodingParameters = function (mediaSection) {
            const encodingParameters = [];
            const description = SDPUtils.parseRtpParameters(mediaSection);
            const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
            const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1; // filter a=ssrc:... cname:, ignore PlanB-msid

            const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
              .map((line) => SDPUtils.parseSsrcMedia(line))
              .filter((parts) => parts.attribute === 'cname');
            const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
            let secondarySsrc;
            const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map((line) => {
              const parts = line.substr(17).split(' ');
              return parts.map((part) => parseInt(part, 10));
            });

            if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
              secondarySsrc = flows[0][1];
            }

            description.codecs.forEach((codec) => {
              if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
                let encParam = {
                  ssrc: primarySsrc,
                  codecPayloadType: parseInt(codec.parameters.apt, 10),
                };

                if (primarySsrc && secondarySsrc) {
                  encParam.rtx = {
                    ssrc: secondarySsrc,
                  };
                }

                encodingParameters.push(encParam);

                if (hasRed) {
                  encParam = JSON.parse(JSON.stringify(encParam));
                  encParam.fec = {
                    ssrc: primarySsrc,
                    mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
                  };
                  encodingParameters.push(encParam);
                }
              }
            });

            if (encodingParameters.length === 0 && primarySsrc) {
              encodingParameters.push({
                ssrc: primarySsrc,
              });
            } // we support both b=AS and b=TIAS but interpret AS as TIAS.

            let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');

            if (bandwidth.length) {
              if (bandwidth[0].indexOf('b=TIAS:') === 0) {
                bandwidth = parseInt(bandwidth[0].substr(7), 10);
              } else if (bandwidth[0].indexOf('b=AS:') === 0) {
                // use formula from JSEP to convert b=AS to TIAS value.
                bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95 - 50 * 40 * 8;
              } else {
                bandwidth = undefined;
              }

              encodingParameters.forEach((params) => {
                params.maxBitrate = bandwidth;
              });
            }

            return encodingParameters;
          }; // parses http://draft.ortc.org/#rtcrtcpparameters*

          SDPUtils.parseRtcpParameters = function (mediaSection) {
            const rtcpParameters = {}; // Gets the first SSRC. Note tha with RTX there might be multiple
            // SSRCs.

            const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
              .map((line) => SDPUtils.parseSsrcMedia(line))
              .filter((obj) => obj.attribute === 'cname')[0];

            if (remoteSsrc) {
              rtcpParameters.cname = remoteSsrc.value;
              rtcpParameters.ssrc = remoteSsrc.ssrc;
            } // Edge uses the compound attribute instead of reducedSize
            // compound is !reducedSize

            const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
            rtcpParameters.reducedSize = rsize.length > 0;
            rtcpParameters.compound = rsize.length === 0; // parses the rtcp-mux attrÑ–bute.
            // Note that Edge does not support unmuxed RTCP.

            const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
            rtcpParameters.mux = mux.length > 0;
            return rtcpParameters;
          }; // parses either a=msid: or a=ssrc:... msid lines and returns
          // the id of the MediaStream and MediaStreamTrack.

          SDPUtils.parseMsid = function (mediaSection) {
            let parts;
            const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');

            if (spec.length === 1) {
              parts = spec[0].substr(7).split(' ');
              return {
                stream: parts[0],
                track: parts[1],
              };
            }

            const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
              .map((line) => SDPUtils.parseSsrcMedia(line))
              .filter((msidParts) => msidParts.attribute === 'msid');

            if (planB.length > 0) {
              parts = planB[0].value.split(' ');
              return {
                stream: parts[0],
                track: parts[1],
              };
            }
          }; // SCTP
          // parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
          // to draft-ietf-mmusic-sctp-sdp-05

          SDPUtils.parseSctpDescription = function (mediaSection) {
            const mline = SDPUtils.parseMLine(mediaSection);
            const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
            let maxMessageSize;

            if (maxSizeLine.length > 0) {
              maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);
            }

            if (isNaN(maxMessageSize)) {
              maxMessageSize = 65536;
            }

            const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');

            if (sctpPort.length > 0) {
              return {
                port: parseInt(sctpPort[0].substr(12), 10),
                protocol: mline.fmt,
                maxMessageSize,
              };
            }

            const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');

            if (sctpMapLines.length > 0) {
              const parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]
                .substr(10)
                .split(' ');
              return {
                port: parseInt(parts[0], 10),
                protocol: parts[1],
                maxMessageSize,
              };
            }
          }; // SCTP
          // outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
          // support by now receiving in this format, unless we originally parsed
          // as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
          // protocol of DTLS/SCTP -- without UDP/ or TCP/)

          SDPUtils.writeSctpDescription = function (media, sctp) {
            let output = [];

            if (media.protocol !== 'DTLS/SCTP') {
              output = [
                `m=${media.kind} 9 ${media.protocol} ${sctp.protocol}\r\n`,
                'c=IN IP4 0.0.0.0\r\n',
                `a=sctp-port:${sctp.port}\r\n`,
              ];
            } else {
              output = [
                `m=${media.kind} 9 ${media.protocol} ${sctp.port}\r\n`,
                'c=IN IP4 0.0.0.0\r\n',
                `a=sctpmap:${sctp.port} ${sctp.protocol} 65535\r\n`,
              ];
            }

            if (sctp.maxMessageSize !== undefined) {
              output.push(`a=max-message-size:${sctp.maxMessageSize}\r\n`);
            }

            return output.join('');
          }; // Generate a session ID for SDP.
          // https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
          // recommends using a cryptographically random +ve 64-bit value
          // but right now this should be acceptable and within the right range

          SDPUtils.generateSessionId = function () {
            return Math.random()
              .toString()
              .substr(2, 21);
          }; // Write boilder plate for start of SDP
          // sessId argument is optional - if not supplied it will
          // be generated randomly
          // sessVersion is optional and defaults to 2
          // sessUser is optional and defaults to 'thisisadapterortc'

          SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {
            let sessionId;
            const version = sessVer !== undefined ? sessVer : 2;

            if (sessId) {
              sessionId = sessId;
            } else {
              sessionId = SDPUtils.generateSessionId();
            }

            const user = sessUser || 'thisisadapterortc'; // FIXME: sess-id should be an NTP timestamp.

            return (
              `${'v=0\r\n'
              + 'o='}${
                user
              } ${
                sessionId
              } ${
                version
              } IN IP4 127.0.0.1\r\n`
              + 's=-\r\n'
              + 't=0 0\r\n'
            );
          };

          SDPUtils.writeMediaSection = function (transceiver, caps, type, stream) {
            let sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps); // Map ICE parameters (ufrag, pwd) to SDP.

            sdp += SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters()); // Map DTLS parameters to SDP.

            sdp += SDPUtils.writeDtlsParameters(
              transceiver.dtlsTransport.getLocalParameters(),
              type === 'offer' ? 'actpass' : 'active',
            );
            sdp += `a=mid:${transceiver.mid}\r\n`;

            if (transceiver.direction) {
              sdp += `a=${transceiver.direction}\r\n`;
            } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
              sdp += 'a=sendrecv\r\n';
            } else if (transceiver.rtpSender) {
              sdp += 'a=sendonly\r\n';
            } else if (transceiver.rtpReceiver) {
              sdp += 'a=recvonly\r\n';
            } else {
              sdp += 'a=inactive\r\n';
            }

            if (transceiver.rtpSender) {
              // spec.
              const msid = `msid:${stream.id} ${transceiver.rtpSender.track.id}\r\n`;
              sdp += `a=${msid}`; // for Chrome.

              sdp += `a=ssrc:${transceiver.sendEncodingParameters[0].ssrc} ${msid}`;

              if (transceiver.sendEncodingParameters[0].rtx) {
                sdp += `a=ssrc:${transceiver.sendEncodingParameters[0].rtx.ssrc} ${msid}`;
                sdp
                  += `a=ssrc-group:FID ${
                    transceiver.sendEncodingParameters[0].ssrc
                  } ${
                    transceiver.sendEncodingParameters[0].rtx.ssrc
                  }\r\n`;
              }
            } // FIXME: this should be written by writeRtpDescription.

            sdp
              += `a=ssrc:${
                transceiver.sendEncodingParameters[0].ssrc
              } cname:${
                SDPUtils.localCName
              }\r\n`;

            if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
              sdp
                += `a=ssrc:${
                  transceiver.sendEncodingParameters[0].rtx.ssrc
                } cname:${
                  SDPUtils.localCName
                }\r\n`;
            }

            return sdp;
          }; // Gets the direction from the mediaSection or the sessionpart.

          SDPUtils.getDirection = function (mediaSection, sessionpart) {
            // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
            const lines = SDPUtils.splitLines(mediaSection);

            for (let i = 0; i < lines.length; i++) {
              switch (lines[i]) {
                case 'a=sendrecv':
                case 'a=sendonly':
                case 'a=recvonly':
                case 'a=inactive':
                  return lines[i].substr(2);

                default: // FIXME: What should happen here?
              }
            }

            if (sessionpart) {
              return SDPUtils.getDirection(sessionpart);
            }

            return 'sendrecv';
          };

          SDPUtils.getKind = function (mediaSection) {
            const lines = SDPUtils.splitLines(mediaSection);
            const mline = lines[0].split(' ');
            return mline[0].substr(2);
          };

          SDPUtils.isRejected = function (mediaSection) {
            return mediaSection.split(' ', 2)[1] === '0';
          };

          SDPUtils.parseMLine = function (mediaSection) {
            const lines = SDPUtils.splitLines(mediaSection);
            const parts = lines[0].substr(2).split(' ');
            return {
              kind: parts[0],
              port: parseInt(parts[1], 10),
              protocol: parts[2],
              fmt: parts.slice(3).join(' '),
            };
          };

          SDPUtils.parseOLine = function (mediaSection) {
            const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
            const parts = line.substr(2).split(' ');
            return {
              username: parts[0],
              sessionId: parts[1],
              sessionVersion: parseInt(parts[2], 10),
              netType: parts[3],
              addressType: parts[4],
              address: parts[5],
            };
          }; // a very naive interpretation of a valid SDP.

          SDPUtils.isValidSDP = function (blob) {
            if (typeof blob !== 'string' || blob.length === 0) {
              return false;
            }

            const lines = SDPUtils.splitLines(blob);

            for (let i = 0; i < lines.length; i++) {
              if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
                return false;
              } // TODO: check the modifier a bit more.
            }

            return true;
          }; // Expose public methods.

          if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
            module.exports = SDPUtils;
          }
        },
        {},
      ],
      7: [
        function (require, module, exports) {
          function _typeof(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof = function _typeof(obj) {
                return typeof obj;
              };
            } else {
              _typeof = function _typeof(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof(obj);
          }

          /*	SWFObject v2.2 <http://code.google.com/p/swfobject/>
	is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>
*/
          var swfobject = (function () {
            const D = 'undefined';
            const r = 'object';
            const S = 'Shockwave Flash';
            const W = 'ShockwaveFlash.ShockwaveFlash';
            const q = 'application/x-shockwave-flash';
            const R = 'SWFObjectExprInst';
            const x = 'onreadystatechange';
            const O = window;
            const j = document;
            const t = navigator;
            let T = false;
            const U = [h];
            const o = [];
            const N = [];
            const I = [];
            let l;
            let Q;
            let E;
            let B;
            let J = false;
            let a = false;
            let n;
            let G;
            let m = true;
            let M = (function () {
              const aa = _typeof(j.getElementById) != D
                    && _typeof(j.getElementsByTagName) != D
                    && _typeof(j.createElement) != D;
              const ah = t.userAgent.toLowerCase();
              const Y = t.platform.toLowerCase();
              const ae = Y ? /win/.test(Y) : /win/.test(ah);
              const ac = Y ? /mac/.test(Y) : /mac/.test(ah);
              const af = /webkit/.test(ah)
                ? parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, '$1'))
                : false;
              let X = !+'\v1';
              let ag = [0, 0, 0];
              let ab = null;

              if (_typeof(t.plugins) != D && _typeof(t.plugins[S]) == r) {
                ab = t.plugins[S].description;

                if (
                  ab
                    && !(_typeof(t.mimeTypes) != D && t.mimeTypes[q] && !t.mimeTypes[q].enabledPlugin)
                ) {
                  T = true;
                  X = false;
                  ab = ab.replace(/^.*\s+(\S+\s+\S+$)/, '$1');
                  ag[0] = parseInt(ab.replace(/^(.*)\..*$/, '$1'), 10);
                  ag[1] = parseInt(ab.replace(/^.*\.(.*)\s.*$/, '$1'), 10);
                  ag[2] = /[a-zA-Z]/.test(ab)
                    ? parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/, '$1'), 10)
                    : 0;
                }
              } else if (_typeof(O[['Active'].concat('Object').join('X')]) != D) {
                try {
                  const ad = new window[['Active'].concat('Object').join('X')](W);

                  if (ad) {
                    ab = ad.GetVariable('$version');

                    if (ab) {
                      X = true;
                      ab = ab.split(' ')[1].split(',');
                      ag = [parseInt(ab[0], 10), parseInt(ab[1], 10), parseInt(ab[2], 10)];
                    }
                  }
                } catch (Z) {}
              }

              return {
                w3: aa,
                pv: ag,
                wk: af,
                ie: X,
                win: ae,
                mac: ac,
              };
            }());
            const k = (function () {
              if (!M.w3) {
                return;
              }

              if (
                (_typeof(j.readyState) != D && j.readyState == 'complete')
                  || (_typeof(j.readyState) == D && (j.getElementsByTagName('body')[0] || j.body))
              ) {
                f();
              }

              if (!J) {
                if (_typeof(j.addEventListener) != D) {
                  j.addEventListener('DOMContentLoaded', f, false);
                }

                if (M.ie && M.win) {
                  j.attachEvent(x, function () {
                    if (j.readyState == 'complete') {
                      j.detachEvent(x, arguments.callee);
                      f();
                    }
                  });

                  if (O == top) {
                    (function () {
                      if (J) {
                        return;
                      }

                      try {
                        j.documentElement.doScroll('left');
                      } catch (X) {
                        setTimeout(arguments.callee, 0);
                        return;
                      }

                      f();
                    }());
                  }
                }

                if (M.wk) {
                  (function () {
                    if (J) {
                      return;
                    }

                    if (!/loaded|complete/.test(j.readyState)) {
                      setTimeout(arguments.callee, 0);
                      return;
                    }

                    f();
                  }());
                }

                s(f);
              }
            }());

            function f() {
              if (J) {
                return;
              }

              try {
                const Z = j.getElementsByTagName('body')[0].appendChild(C('span'));
                Z.parentNode.removeChild(Z);
              } catch (aa) {
                return;
              }

              J = true;
              const X = U.length;

              for (let Y = 0; Y < X; Y++) {
                U[Y]();
              }
            }

            function K(X) {
              if (J) {
                X();
              } else {
                U[U.length] = X;
              }
            }

            function s(Y) {
              if (_typeof(O.addEventListener) != D) {
                O.addEventListener('load', Y, false);
              } else if (_typeof(j.addEventListener) != D) {
                j.addEventListener('load', Y, false);
              } else if (_typeof(O.attachEvent) != D) {
                i(O, 'onload', Y);
              } else if (typeof O.onload === 'function') {
                const X = O.onload;

                O.onload = function () {
                  X();
                  Y();
                };
              } else {
                O.onload = Y;
              }
            }

            function h() {
              if (T) {
                V();
              } else {
                H();
              }
            }

            function V() {
              const X = j.getElementsByTagName('body')[0];
              const aa = C(r);
              aa.setAttribute('type', q);
              let Z = X.appendChild(aa);

              if (Z) {
                let Y = 0;

                (function () {
                  if (_typeof(Z.GetVariable) != D) {
                    let ab = Z.GetVariable('$version');

                    if (ab) {
                      ab = ab.split(' ')[1].split(',');
                      M.pv = [parseInt(ab[0], 10), parseInt(ab[1], 10), parseInt(ab[2], 10)];
                    }
                  } else if (Y < 10) {
                    Y++;
                    setTimeout(arguments.callee, 10);
                    return;
                  }

                  X.removeChild(aa);
                  Z = null;
                  H();
                }());
              } else {
                H();
              }
            }

            function H() {
              const ag = o.length;

              if (ag > 0) {
                for (let af = 0; af < ag; af++) {
                  const Y = o[af].id;
                  const ab = o[af].callbackFn;
                  const aa = {
                    success: false,
                    id: Y,
                  };

                  if (M.pv[0] > 0) {
                    const ae = c(Y);

                    if (ae) {
                      if (F(o[af].swfVersion) && !(M.wk && M.wk < 312)) {
                        w(Y, true);

                        if (ab) {
                          aa.success = true;
                          aa.ref = z(Y);
                          ab(aa);
                        }
                      } else if (o[af].expressInstall && A()) {
                        const ai = {};
                        ai.data = o[af].expressInstall;
                        ai.width = ae.getAttribute('width') || '0';
                        ai.height = ae.getAttribute('height') || '0';

                        if (ae.getAttribute('class')) {
                          ai.styleclass = ae.getAttribute('class');
                        }

                        if (ae.getAttribute('align')) {
                          ai.align = ae.getAttribute('align');
                        }

                        const ah = {};
                        const X = ae.getElementsByTagName('param');
                        const ac = X.length;

                        for (let ad = 0; ad < ac; ad++) {
                          if (X[ad].getAttribute('name').toLowerCase() != 'movie') {
                            ah[X[ad].getAttribute('name')] = X[ad].getAttribute('value');
                          }
                        }

                        P(ai, ah, Y, ab);
                      } else {
                        p(ae);

                        if (ab) {
                          ab(aa);
                        }
                      }
                    }
                  } else {
                    w(Y, true);

                    if (ab) {
                      const Z = z(Y);

                      if (Z && _typeof(Z.SetVariable) != D) {
                        aa.success = true;
                        aa.ref = Z;
                      }

                      ab(aa);
                    }
                  }
                }
              }
            }

            function z(aa) {
              let X = null;
              const Y = c(aa);

              if (Y && Y.nodeName == 'OBJECT') {
                if (_typeof(Y.SetVariable) != D) {
                  X = Y;
                } else {
                  const Z = Y.getElementsByTagName(r)[0];

                  if (Z) {
                    X = Z;
                  }
                }
              }

              return X;
            }

            function A() {
              return !a && F('6.0.65') && (M.win || M.mac) && !(M.wk && M.wk < 312);
            }

            function P(aa, ab, X, Z) {
              a = true;
              E = Z || null;
              B = {
                success: false,
                id: X,
              };
              const ae = c(X);

              if (ae) {
                if (ae.nodeName == 'OBJECT') {
                  l = g(ae);
                  Q = null;
                } else {
                  l = ae;
                  Q = X;
                }

                aa.id = R;

                if (
                  _typeof(aa.width) == D
                  || (!/%$/.test(aa.width) && parseInt(aa.width, 10) < 310)
                ) {
                  aa.width = '310';
                }

                if (
                  _typeof(aa.height) == D
                  || (!/%$/.test(aa.height) && parseInt(aa.height, 10) < 137)
                ) {
                  aa.height = '137';
                }

                j.title = `${j.title.slice(0, 47)} - Flash Player Installation`;
                const ad = M.ie && M.win ? ['Active'].concat('').join('X') : 'PlugIn';
                const ac = `MMredirectURL=${
                  O.location.toString().replace(/&/g, '%26')
                }&MMplayerType=${
                  ad
                }&MMdoctitle=${
                  j.title}`;

                if (_typeof(ab.flashvars) != D) {
                  ab.flashvars += `&${ac}`;
                } else {
                  ab.flashvars = ac;
                }

                if (M.ie && M.win && ae.readyState != 4) {
                  const Y = C('div');
                  X += 'SWFObjectNew';
                  Y.setAttribute('id', X);
                  ae.parentNode.insertBefore(Y, ae);
                  ae.style.display = 'none';

                  (function () {
                    if (ae.readyState == 4) {
                      ae.parentNode.removeChild(ae);
                    } else {
                      setTimeout(arguments.callee, 10);
                    }
                  }());
                }

                u(aa, ab, X);
              }
            }

            function p(Y) {
              if (M.ie && M.win && Y.readyState != 4) {
                const X = C('div');
                Y.parentNode.insertBefore(X, Y);
                X.parentNode.replaceChild(g(Y), X);
                Y.style.display = 'none';

                (function () {
                  if (Y.readyState == 4) {
                    Y.parentNode.removeChild(Y);
                  } else {
                    setTimeout(arguments.callee, 10);
                  }
                }());
              } else {
                Y.parentNode.replaceChild(g(Y), Y);
              }
            }

            function g(ab) {
              const aa = C('div');

              if (M.win && M.ie) {
                aa.innerHTML = ab.innerHTML;
              } else {
                const Y = ab.getElementsByTagName(r)[0];

                if (Y) {
                  const ad = Y.childNodes;

                  if (ad) {
                    const X = ad.length;

                    for (let Z = 0; Z < X; Z++) {
                      if (
                        !(ad[Z].nodeType == 1 && ad[Z].nodeName == 'PARAM')
                        && !(ad[Z].nodeType == 8)
                      ) {
                        aa.appendChild(ad[Z].cloneNode(true));
                      }
                    }
                  }
                }
              }

              return aa;
            }

            function u(ai, ag, Y) {
              let X;
              const aa = c(Y);

              if (M.wk && M.wk < 312) {
                return X;
              }

              if (aa) {
                if (_typeof(ai.id) == D) {
                  ai.id = Y;
                }

                if (M.ie && M.win) {
                  let ah = '';

                  for (const ae in ai) {
                    if (ai[ae] != Object.prototype[ae]) {
                      if (ae.toLowerCase() == 'data') {
                        ag.movie = ai[ae];
                      } else if (ae.toLowerCase() == 'styleclass') {
                        ah += ` class="${ai[ae]}"`;
                      } else if (ae.toLowerCase() != 'classid') {
                        ah += ` ${ae}="${ai[ae]}"`;
                      }
                    }
                  }

                  let af = '';

                  for (const ad in ag) {
                    if (ag[ad] != Object.prototype[ad]) {
                      af += `<param name="${ad}" value="${ag[ad]}" />`;
                    }
                  }

                  aa.outerHTML = `<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"${
                    ah
                  }>${
                    af
                  }</object>`;
                  N[N.length] = ai.id;
                  X = c(ai.id);
                } else {
                  const Z = C(r);
                  Z.setAttribute('type', q);

                  for (const ac in ai) {
                    if (ai[ac] != Object.prototype[ac]) {
                      if (ac.toLowerCase() == 'styleclass') {
                        Z.setAttribute('class', ai[ac]);
                      } else if (ac.toLowerCase() != 'classid') {
                        Z.setAttribute(ac, ai[ac]);
                      }
                    }
                  }

                  for (const ab in ag) {
                    if (ag[ab] != Object.prototype[ab] && ab.toLowerCase() != 'movie') {
                      e(Z, ab, ag[ab]);
                    }
                  }

                  aa.parentNode.replaceChild(Z, aa);
                  X = Z;
                }
              }

              return X;
            }

            function e(Z, X, Y) {
              const aa = C('param');
              aa.setAttribute('name', X);
              aa.setAttribute('value', Y);
              Z.appendChild(aa);
            }

            function y(Y) {
              const X = c(Y);

              if (X && X.nodeName == 'OBJECT') {
                if (M.ie && M.win) {
                  X.style.display = 'none';

                  (function () {
                    if (X.readyState == 4) {
                      b(Y);
                    } else {
                      setTimeout(arguments.callee, 10);
                    }
                  }());
                } else {
                  X.parentNode.removeChild(X);
                }
              }
            }

            function b(Z) {
              const Y = c(Z);

              if (Y) {
                for (const X in Y) {
                  if (typeof Y[X] === 'function') {
                    Y[X] = null;
                  }
                }

                Y.parentNode.removeChild(Y);
              }
            }

            function c(Z) {
              let X = null;

              try {
                X = j.getElementById(Z);
              } catch (Y) {}

              return X;
            }

            function C(X) {
              return j.createElement(X);
            }

            function i(Z, X, Y) {
              Z.attachEvent(X, Y);
              I[I.length] = [Z, X, Y];
            }

            function F(Z) {
              const Y = M.pv;
              const X = Z.split('.');
              X[0] = parseInt(X[0], 10);
              X[1] = parseInt(X[1], 10) || 0;
              X[2] = parseInt(X[2], 10) || 0;
              return !!(Y[0] > X[0]
                || (Y[0] == X[0] && Y[1] > X[1])
                || (Y[0] == X[0] && Y[1] == X[1] && Y[2] >= X[2]));
            }

            function v(ac, Y, ad, ab) {
              if (M.ie && M.mac) {
                return;
              }

              const aa = j.getElementsByTagName('head')[0];

              if (!aa) {
                return;
              }

              const X = ad && typeof ad === 'string' ? ad : 'screen';

              if (ab) {
                n = null;
                G = null;
              }

              if (!n || G != X) {
                const Z = C('style');
                Z.setAttribute('type', 'text/css');
                Z.setAttribute('media', X);
                n = aa.appendChild(Z);

                if (M.ie && M.win && _typeof(j.styleSheets) != D && j.styleSheets.length > 0) {
                  n = j.styleSheets[j.styleSheets.length - 1];
                }

                G = X;
              }

              if (M.ie && M.win) {
                if (n && _typeof(n.addRule) == r) {
                  n.addRule(ac, Y);
                }
              } else if (n && _typeof(j.createTextNode) != D) {
                n.appendChild(j.createTextNode(`${ac} {${Y}}`));
              }
            }

            function w(Z, X) {
              if (!m) {
                return;
              }

              const Y = X ? 'visible' : 'hidden';

              if (J && c(Z)) {
                c(Z).style.visibility = Y;
              } else {
                v(`#${Z}`, `visibility:${Y}`);
              }
            }

            function L(Y) {
              const Z = /[\\\"<>\.;]/;
              const X = Z.exec(Y) != null;
              return X
                && (typeof encodeURIComponent === 'undefined'
                  ? 'undefined'
                  : _typeof(encodeURIComponent)) != D
                ? encodeURIComponent(Y)
                : Y;
            }

            const d = (function () {
              if (M.ie && M.win) {
                window.attachEvent('onunload', () => {
                  const ac = I.length;

                  for (let ab = 0; ab < ac; ab++) {
                    I[ab][0].detachEvent(I[ab][1], I[ab][2]);
                  }

                  const Z = N.length;

                  for (let aa = 0; aa < Z; aa++) {
                    y(N[aa]);
                  }

                  for (const Y in M) {
                    M[Y] = null;
                  }

                  M = null;

                  for (const X in swfobject) {
                    swfobject[X] = null;
                  }

                  swfobject = null;
                });
              }
            }());

            return {
              registerObject: function registerObject(ab, X, aa, Z) {
                if (M.w3 && ab && X) {
                  const Y = {};
                  Y.id = ab;
                  Y.swfVersion = X;
                  Y.expressInstall = aa;
                  Y.callbackFn = Z;
                  o[o.length] = Y;
                  w(ab, false);
                } else if (Z) {
                  Z({
                    success: false,
                    id: ab,
                  });
                }
              },
              getObjectById: function getObjectById(X) {
                if (M.w3) {
                  return z(X);
                }
              },
              embedSWF: function embedSWF(ab, ah, ae, ag, Y, aa, Z, ad, af, ac) {
                const X = {
                  success: false,
                  id: ah,
                };

                if (M.w3 && !(M.wk && M.wk < 312) && ab && ah && ae && ag && Y) {
                  w(ah, false);
                  K(() => {
                    ae += '';
                    ag += '';
                    const aj = {};

                    if (af && _typeof(af) === r) {
                      for (const al in af) {
                        aj[al] = af[al];
                      }
                    }

                    aj.data = ab;
                    aj.width = ae;
                    aj.height = ag;
                    const am = {};

                    if (ad && _typeof(ad) === r) {
                      for (const ak in ad) {
                        am[ak] = ad[ak];
                      }
                    }

                    if (Z && _typeof(Z) === r) {
                      for (const ai in Z) {
                        if (_typeof(am.flashvars) != D) {
                          am.flashvars += `&${ai}=${Z[ai]}`;
                        } else {
                          am.flashvars = `${ai}=${Z[ai]}`;
                        }
                      }
                    }

                    if (F(Y)) {
                      const an = u(aj, am, ah);

                      if (aj.id == ah) {
                        w(ah, true);
                      }

                      X.success = true;
                      X.ref = an;
                    } else {
                      if (aa && A()) {
                        aj.data = aa;
                        P(aj, am, ah, ac);
                        return;
                      }
                      w(ah, true);
                    }

                    if (ac) {
                      ac(X);
                    }
                  });
                } else if (ac) {
                  ac(X);
                }
              },
              switchOffAutoHideShow: function switchOffAutoHideShow() {
                m = false;
              },
              ua: M,
              getFlashPlayerVersion: function getFlashPlayerVersion() {
                return {
                  major: M.pv[0],
                  minor: M.pv[1],
                  release: M.pv[2],
                };
              },
              hasFlashPlayerVersion: F,
              createSWF: function createSWF(Z, Y, X) {
                if (M.w3) {
                  return u(Z, Y, X);
                }
                return undefined;
              },
              showExpressInstall: function showExpressInstall(Z, aa, X, Y) {
                if (M.w3 && A()) {
                  P(Z, aa, X, Y);
                }
              },
              removeSWF: function removeSWF(X) {
                if (M.w3) {
                  y(X);
                }
              },
              createCSS: function createCSS(aa, Z, Y, X) {
                if (M.w3) {
                  v(aa, Z, Y, X);
                }
              },
              addDomLoadEvent: K,
              addLoadEvent: s,
              getQueryParamValue: function getQueryParamValue(aa) {
                let Z = j.location.search || j.location.hash;

                if (Z) {
                  if (/\?/.test(Z)) {
                    Z = Z.split('?')[1];
                  }

                  if (aa == null) {
                    return L(Z);
                  }

                  const Y = Z.split('&');

                  for (let X = 0; X < Y.length; X++) {
                    if (Y[X].substring(0, Y[X].indexOf('=')) == aa) {
                      return L(Y[X].substring(Y[X].indexOf('=') + 1));
                    }
                  }
                }

                return '';
              },
              expressInstallCallback: function expressInstallCallback() {
                if (a) {
                  const X = c(R);

                  if (X && l) {
                    X.parentNode.replaceChild(l, X);

                    if (Q) {
                      w(Q, true);

                      if (M.ie && M.win) {
                        l.style.display = 'block';
                      }
                    }

                    if (E) {
                      E(B);
                    }
                  }

                  a = false;
                }
              },
            };
          }());

          module.exports = swfobject;
        },
        {},
      ],
      8: [
        function (require, module, exports) {
          (function (setImmediate, clearImmediate) {
            (function () {
              const { nextTick } = require('process/browser.js');

              const { apply } = Function.prototype;
              const { slice } = Array.prototype;
              const immediateIds = {};
              let nextImmediateId = 0; // DOM APIs, for completeness

              exports.setTimeout = function () {
                return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
              };

              exports.setInterval = function () {
                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
              };

              exports.clearTimeout = exports.clearInterval = function (timeout) {
                timeout.close();
              };

              function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
              }

              Timeout.prototype.unref = Timeout.prototype.ref = function () {};

              Timeout.prototype.close = function () {
                this._clearFn.call(window, this._id);
              }; // Does not start the time, just sets up the members needed.

              exports.enroll = function (item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
              };

              exports.unenroll = function (item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
              };

              exports._unrefActive = exports.active = function (item) {
                clearTimeout(item._idleTimeoutId);
                const msecs = item._idleTimeout;

                if (msecs >= 0) {
                  item._idleTimeoutId = setTimeout(() => {
                    if (item._onTimeout) item._onTimeout();
                  }, msecs);
                }
              }; // That's not how node.js implements it but the exposed api is the same.

              exports.setImmediate = typeof setImmediate === 'function'
                ? setImmediate
                : function (fn) {
                  const id = nextImmediateId++;
                  const args = arguments.length < 2 ? false : slice.call(arguments, 1);
                  immediateIds[id] = true;
                  nextTick(() => {
                    if (immediateIds[id]) {
                      // fn.call() is faster so we optimize for the common use-case
                      // @see http://jsperf.com/call-apply-segu
                      if (args) {
                        fn.apply(null, args);
                      } else {
                        fn.call(null);
                      } // Prevent ids from leaking

                      exports.clearImmediate(id);
                    }
                  });
                  return id;
                };
              exports.clearImmediate = typeof clearImmediate === 'function'
                ? clearImmediate
                : function (id) {
                  delete immediateIds[id];
                };
            }.call(this));
          }.call(this, require('timers').setImmediate, require('timers').clearImmediate));
        },
        { 'process/browser.js': 3, timers: 8 },
      ],
      9: [
        function (require, module, exports) {
          /**
           * Convert array of 16 byte values to UUID string format of the form:
           * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
           */
          const byteToHex = [];

          for (let i = 0; i < 256; ++i) {
            byteToHex[i] = (i + 0x100).toString(16).substr(1);
          }

          function bytesToUuid(buf, offset) {
            let i = offset || 0;
            const bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

            return [
              bth[buf[i++]],
              bth[buf[i++]],
              bth[buf[i++]],
              bth[buf[i++]],
              '-',
              bth[buf[i++]],
              bth[buf[i++]],
              '-',
              bth[buf[i++]],
              bth[buf[i++]],
              '-',
              bth[buf[i++]],
              bth[buf[i++]],
              '-',
              bth[buf[i++]],
              bth[buf[i++]],
              bth[buf[i++]],
              bth[buf[i++]],
              bth[buf[i++]],
              bth[buf[i++]],
            ].join('');
          }

          module.exports = bytesToUuid;
        },
        {},
      ],
      10: [
        function (require, module, exports) {
          // Unique ID creation requires a high quality random # generator.  In the
          // browser this is a little complicated due to unknown quality of Math.random()
          // and inconsistent support for the `crypto` API.  We do the best we can via
          // feature-detection
          // getRandomValues needs to be invoked in a context where "this" is a Crypto
          // implementation. Also, find the complete implementation of crypto on IE11.
          const getRandomValues = (typeof crypto !== 'undefined'
              && crypto.getRandomValues
              && crypto.getRandomValues.bind(crypto))
            || (typeof msCrypto !== 'undefined'
              && typeof window.msCrypto.getRandomValues === 'function'
              && msCrypto.getRandomValues.bind(msCrypto));

          if (getRandomValues) {
            // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
            const rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

            module.exports = function whatwgRNG() {
              getRandomValues(rnds8);
              return rnds8;
            };
          } else {
            // Math.random()-based (RNG)
            //
            // If all else fails, use Math.random().  It's fast, but is of unspecified
            // quality.
            const rnds = new Array(16);

            module.exports = function mathRNG() {
              for (var i = 0, r; i < 16; i++) {
                if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
                rnds[i] = (r >>> ((i & 0x03) << 3)) & 0xff;
              }

              return rnds;
            };
          }
        },
        {},
      ],
      11: [
        function (require, module, exports) {
          const rng = require('./lib/rng');

          const bytesToUuid = require('./lib/bytesToUuid'); // **`v1()` - Generate time-based UUID**
          //
          // Inspired by https://github.com/LiosK/UUID.js
          // and http://docs.python.org/library/uuid.html

          let _nodeId;

          let _clockseq; // Previous uuid creation time

          let _lastMSecs = 0;
          let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

          function v1(options, buf, offset) {
            let i = (buf && offset) || 0;
            const b = buf || [];
            options = options || {};
            let node = options.node || _nodeId;
            let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
            // specified.  We do this lazily to minimize issues related to insufficient
            // system entropy.  See #189

            if (node == null || clockseq == null) {
              const seedBytes = rng();

              if (node == null) {
                // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
                node = _nodeId = [
                  seedBytes[0] | 0x01,
                  seedBytes[1],
                  seedBytes[2],
                  seedBytes[3],
                  seedBytes[4],
                  seedBytes[5],
                ];
              }

              if (clockseq == null) {
                // Per 4.2.2, randomize (14 bit) clockseq
                clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff;
              }
            } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
            // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
            // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
            // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

            let msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock
            // cycle to simulate higher resolution clock

            let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

            const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

            if (dt < 0 && options.clockseq === undefined) {
              clockseq = (clockseq + 1) & 0x3fff;
            } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
            // time interval

            if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
              nsecs = 0;
            } // Per 4.2.1.2 Throw error if too many uuids are requested

            if (nsecs >= 10000) {
              throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
            }

            _lastMSecs = msecs;
            _lastNSecs = nsecs;
            _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

            msecs += 12219292800000; // `time_low`

            const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
            b[i++] = (tl >>> 24) & 0xff;
            b[i++] = (tl >>> 16) & 0xff;
            b[i++] = (tl >>> 8) & 0xff;
            b[i++] = tl & 0xff; // `time_mid`

            const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;
            b[i++] = (tmh >>> 8) & 0xff;
            b[i++] = tmh & 0xff; // `time_high_and_version`

            b[i++] = ((tmh >>> 24) & 0xf) | 0x10; // include version

            b[i++] = (tmh >>> 16) & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

            b[i++] = (clockseq >>> 8) | 0x80; // `clock_seq_low`

            b[i++] = clockseq & 0xff; // `node`

            for (let n = 0; n < 6; ++n) {
              b[i + n] = node[n];
            }

            return buf || bytesToUuid(b);
          }

          module.exports = v1;
        },
        { './lib/bytesToUuid': 9, './lib/rng': 10 },
      ],
      12: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });

          const _adapter_factory = require('./adapter_factory.js');

          const adapter = (0, _adapter_factory.adapterFactory)({
            window: typeof window === 'undefined' ? undefined : window,
          });
          exports.default = adapter;
        },
        { './adapter_factory.js': 13 },
      ],
      13: [
        function (require, module, exports) {
          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.adapterFactory = adapterFactory;

          const _utils = require('./utils');

          const utils = _interopRequireWildcard(_utils);

          const _chrome_shim = require('./chrome/chrome_shim');

          const chromeShim = _interopRequireWildcard(_chrome_shim);

          const _edge_shim = require('./edge/edge_shim');

          const edgeShim = _interopRequireWildcard(_edge_shim);

          const _firefox_shim = require('./firefox/firefox_shim');

          const firefoxShim = _interopRequireWildcard(_firefox_shim);

          const _safari_shim = require('./safari/safari_shim');

          const safariShim = _interopRequireWildcard(_safari_shim);

          const _common_shim = require('./common_shim');

          const commonShim = _interopRequireWildcard(_common_shim);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          } // Shimming starts here.

          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          function adapterFactory() {
            const _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            const { window } = _ref;

            const options = arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {
                shimChrome: true,
                shimFirefox: true,
                shimEdge: true,
                shimSafari: true,
              }; // Utils.

            const logging = utils.log;
            const browserDetails = utils.detectBrowser(window);
            const adapter = {
              browserDetails,
              commonShim,
              extractVersion: utils.extractVersion,
              disableLog: utils.disableLog,
              disableWarnings: utils.disableWarnings,
            }; // Shim browser if found.

            switch (browserDetails.browser) {
              case 'chrome':
                if (!chromeShim || !chromeShim.shimPeerConnection || !options.shimChrome) {
                  logging('Chrome shim is not included in this adapter release.');
                  return adapter;
                }

                if (browserDetails.version === null) {
                  logging('Chrome shim can not determine version, not shimming.');
                  return adapter;
                }

                logging('adapter.js shimming chrome.'); // Export to the adapter global object visible in the browser.

                adapter.browserShim = chromeShim; // Must be called before shimPeerConnection.

                commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
                chromeShim.shimGetUserMedia(window, browserDetails);
                chromeShim.shimMediaStream(window, browserDetails);
                chromeShim.shimPeerConnection(window, browserDetails);
                chromeShim.shimOnTrack(window, browserDetails);
                chromeShim.shimAddTrackRemoveTrack(window, browserDetails);
                chromeShim.shimGetSendersWithDtmf(window, browserDetails);
                chromeShim.shimGetStats(window, browserDetails);
                chromeShim.shimSenderReceiverGetStats(window, browserDetails);
                chromeShim.fixNegotiationNeeded(window, browserDetails);
                commonShim.shimRTCIceCandidate(window, browserDetails);
                commonShim.shimConnectionState(window, browserDetails);
                commonShim.shimMaxMessageSize(window, browserDetails);
                commonShim.shimSendThrowTypeError(window, browserDetails);
                commonShim.removeExtmapAllowMixed(window, browserDetails);
                break;

              case 'firefox':
                if (!firefoxShim || !firefoxShim.shimPeerConnection || !options.shimFirefox) {
                  logging('Firefox shim is not included in this adapter release.');
                  return adapter;
                }

                logging('adapter.js shimming firefox.'); // Export to the adapter global object visible in the browser.

                adapter.browserShim = firefoxShim; // Must be called before shimPeerConnection.

                commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
                firefoxShim.shimGetUserMedia(window, browserDetails);
                firefoxShim.shimPeerConnection(window, browserDetails);
                firefoxShim.shimOnTrack(window, browserDetails);
                firefoxShim.shimRemoveStream(window, browserDetails);
                firefoxShim.shimSenderGetStats(window, browserDetails);
                firefoxShim.shimReceiverGetStats(window, browserDetails);
                firefoxShim.shimRTCDataChannel(window, browserDetails);
                firefoxShim.shimAddTransceiver(window, browserDetails);
                firefoxShim.shimGetParameters(window, browserDetails);
                firefoxShim.shimCreateOffer(window, browserDetails);
                firefoxShim.shimCreateAnswer(window, browserDetails);
                commonShim.shimRTCIceCandidate(window, browserDetails);
                commonShim.shimConnectionState(window, browserDetails);
                commonShim.shimMaxMessageSize(window, browserDetails);
                commonShim.shimSendThrowTypeError(window, browserDetails);
                break;

              case 'edge':
                if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {
                  logging('MS edge shim is not included in this adapter release.');
                  return adapter;
                }

                logging('adapter.js shimming edge.'); // Export to the adapter global object visible in the browser.

                adapter.browserShim = edgeShim;
                edgeShim.shimGetUserMedia(window, browserDetails);
                edgeShim.shimGetDisplayMedia(window, browserDetails);
                edgeShim.shimPeerConnection(window, browserDetails);
                edgeShim.shimReplaceTrack(window, browserDetails); // the edge shim implements the full RTCIceCandidate object.

                commonShim.shimMaxMessageSize(window, browserDetails);
                commonShim.shimSendThrowTypeError(window, browserDetails);
                break;

              case 'safari':
                if (!safariShim || !options.shimSafari) {
                  logging('Safari shim is not included in this adapter release.');
                  return adapter;
                }

                logging('adapter.js shimming safari.'); // Export to the adapter global object visible in the browser.

                adapter.browserShim = safariShim; // Must be called before shimCallbackAPI.

                commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);
                safariShim.shimRTCIceServerUrls(window, browserDetails);
                safariShim.shimCreateOfferLegacy(window, browserDetails);
                safariShim.shimCallbacksAPI(window, browserDetails);
                safariShim.shimLocalStreamsAPI(window, browserDetails);
                safariShim.shimRemoteStreamsAPI(window, browserDetails);
                safariShim.shimTrackEventTransceiver(window, browserDetails);
                safariShim.shimGetUserMedia(window, browserDetails);
                safariShim.shimAudioContext(window, browserDetails);
                commonShim.shimRTCIceCandidate(window, browserDetails);
                commonShim.shimMaxMessageSize(window, browserDetails);
                commonShim.shimSendThrowTypeError(window, browserDetails);
                commonShim.removeExtmapAllowMixed(window, browserDetails);
                break;

              default:
                logging('Unsupported browser!');
                break;
            }

            return adapter;
          } // Browser shims.
        },
        {
          './chrome/chrome_shim': 14,
          './common_shim': 17,
          './edge/edge_shim': 18,
          './firefox/firefox_shim': 22,
          './safari/safari_shim': 25,
          './utils': 26,
        },
      ],
      14: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          function _typeof2(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.shimGetDisplayMedia = exports.shimGetUserMedia = undefined;

          const _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol'
            ? function (obj) {
              return _typeof2(obj);
            }
            : function (obj) {
              return obj
                    && typeof Symbol === 'function'
                    && obj.constructor === Symbol
                    && obj !== Symbol.prototype
                ? 'symbol'
                : _typeof2(obj);
            };

          const _getusermedia = require('./getusermedia');

          Object.defineProperty(exports, 'shimGetUserMedia', {
            enumerable: true,
            get: function get() {
              return _getusermedia.shimGetUserMedia;
            },
          });

          const _getdisplaymedia = require('./getdisplaymedia');

          Object.defineProperty(exports, 'shimGetDisplayMedia', {
            enumerable: true,
            get: function get() {
              return _getdisplaymedia.shimGetDisplayMedia;
            },
          });
          exports.shimMediaStream = shimMediaStream;
          exports.shimOnTrack = shimOnTrack;
          exports.shimGetSendersWithDtmf = shimGetSendersWithDtmf;
          exports.shimGetStats = shimGetStats;
          exports.shimSenderReceiverGetStats = shimSenderReceiverGetStats;
          exports.shimAddTrackRemoveTrackWithNative = shimAddTrackRemoveTrackWithNative;
          exports.shimAddTrackRemoveTrack = shimAddTrackRemoveTrack;
          exports.shimPeerConnection = shimPeerConnection;
          exports.fixNegotiationNeeded = fixNegotiationNeeded;

          const _utils = require('../utils.js');

          const utils = _interopRequireWildcard(_utils);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function shimMediaStream(window) {
            window.MediaStream = window.MediaStream || window.webkitMediaStream;
          }

          function shimOnTrack(window) {
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
              && window.RTCPeerConnection
              && !('ontrack' in window.RTCPeerConnection.prototype)
            ) {
              Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
                get: function get() {
                  return this._ontrack;
                },
                set: function set(f) {
                  if (this._ontrack) {
                    this.removeEventListener('track', this._ontrack);
                  }

                  this.addEventListener('track', (this._ontrack = f));
                },
                enumerable: true,
                configurable: true,
              });
              const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;

              window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
                const _this = this;

                if (!this._ontrackpoly) {
                  this._ontrackpoly = function (e) {
                    // onaddstream does not fire when a track is added to an existing
                    // stream. But stream.onaddtrack is implemented so we use that.
                    e.stream.addEventListener('addtrack', (te) => {
                      let receiver = void 0;

                      if (window.RTCPeerConnection.prototype.getReceivers) {
                        receiver = _this.getReceivers().find((r) => r.track && r.track.id === te.track.id);
                      } else {
                        receiver = {
                          track: te.track,
                        };
                      }

                      const event = new Event('track');
                      event.track = te.track;
                      event.receiver = receiver;
                      event.transceiver = {
                        receiver,
                      };
                      event.streams = [e.stream];

                      _this.dispatchEvent(event);
                    });
                    e.stream.getTracks().forEach((track) => {
                      let receiver = void 0;

                      if (window.RTCPeerConnection.prototype.getReceivers) {
                        receiver = _this.getReceivers().find((r) => r.track && r.track.id === track.id);
                      } else {
                        receiver = {
                          track,
                        };
                      }

                      const event = new Event('track');
                      event.track = track;
                      event.receiver = receiver;
                      event.transceiver = {
                        receiver,
                      };
                      event.streams = [e.stream];

                      _this.dispatchEvent(event);
                    });
                  };

                  this.addEventListener('addstream', this._ontrackpoly);
                }

                return origSetRemoteDescription.apply(this, arguments);
              };
            } else {
              // even if RTCRtpTransceiver is in window, it is only used and
              // emitted in unified-plan. Unfortunately this means we need
              // to unconditionally wrap the event.
              utils.wrapPeerConnectionEvent(window, 'track', (e) => {
                if (!e.transceiver) {
                  Object.defineProperty(e, 'transceiver', {
                    value: {
                      receiver: e.receiver,
                    },
                  });
                }

                return e;
              });
            }
          }

          function shimGetSendersWithDtmf(window) {
            // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
              && window.RTCPeerConnection
              && !('getSenders' in window.RTCPeerConnection.prototype)
              && 'createDTMFSender' in window.RTCPeerConnection.prototype
            ) {
              const shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {
                return {
                  track,

                  get dtmf() {
                    if (this._dtmf === undefined) {
                      if (track.kind === 'audio') {
                        this._dtmf = pc.createDTMFSender(track);
                      } else {
                        this._dtmf = null;
                      }
                    }

                    return this._dtmf;
                  },

                  _pc: pc,
                };
              }; // augment addTrack when getSenders is not available.

              if (!window.RTCPeerConnection.prototype.getSenders) {
                window.RTCPeerConnection.prototype.getSenders = function getSenders() {
                  this._senders = this._senders || [];
                  return this._senders.slice(); // return a copy of the internal state.
                };

                const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

                window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
                  let sender = origAddTrack.apply(this, arguments);

                  if (!sender) {
                    sender = shimSenderWithDtmf(this, track);

                    this._senders.push(sender);
                  }

                  return sender;
                };

                const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;

                window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
                  origRemoveTrack.apply(this, arguments);

                  const idx = this._senders.indexOf(sender);

                  if (idx !== -1) {
                    this._senders.splice(idx, 1);
                  }
                };
              }

              const origAddStream = window.RTCPeerConnection.prototype.addStream;

              window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
                const _this2 = this;

                this._senders = this._senders || [];
                origAddStream.apply(this, [stream]);
                stream.getTracks().forEach((track) => {
                  _this2._senders.push(shimSenderWithDtmf(_this2, track));
                });
              };

              const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;

              window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
                const _this3 = this;

                this._senders = this._senders || [];
                origRemoveStream.apply(this, [stream]);
                stream.getTracks().forEach((track) => {
                  const sender = _this3._senders.find((s) => s.track === track);

                  if (sender) {
                    // remove sender
                    _this3._senders.splice(_this3._senders.indexOf(sender), 1);
                  }
                });
              };
            } else if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
              && window.RTCPeerConnection
              && 'getSenders' in window.RTCPeerConnection.prototype
              && 'createDTMFSender' in window.RTCPeerConnection.prototype
              && window.RTCRtpSender
              && !('dtmf' in window.RTCRtpSender.prototype)
            ) {
              const origGetSenders = window.RTCPeerConnection.prototype.getSenders;

              window.RTCPeerConnection.prototype.getSenders = function getSenders() {
                const _this4 = this;

                const senders = origGetSenders.apply(this, []);
                senders.forEach((sender) => (sender._pc = _this4));
                return senders;
              };

              Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
                get: function get() {
                  if (this._dtmf === undefined) {
                    if (this.track.kind === 'audio') {
                      this._dtmf = this._pc.createDTMFSender(this.track);
                    } else {
                      this._dtmf = null;
                    }
                  }

                  return this._dtmf;
                },
              });
            }
          }

          function shimGetStats(window) {
            if (!window.RTCPeerConnection) {
              return;
            }

            const origGetStats = window.RTCPeerConnection.prototype.getStats;

            window.RTCPeerConnection.prototype.getStats = function getStats() {
              const _this5 = this;

              const _arguments = Array.prototype.slice.call(arguments);
              const selector = _arguments[0];
              const onSucc = _arguments[1];
              const onErr = _arguments[2]; // If selector is a function then we are in the old style stats so just
              // pass back the original getStats format to avoid breaking old users.

              if (arguments.length > 0 && typeof selector === 'function') {
                return origGetStats.apply(this, arguments);
              } // When spec-style getStats is supported, return those when called with
              // either no arguments or the selector argument is null.

              if (
                origGetStats.length === 0
                && (arguments.length === 0 || typeof selector !== 'function')
              ) {
                return origGetStats.apply(this, []);
              }

              const fixChromeStats_ = function fixChromeStats_(response) {
                const standardReport = {};
                const reports = response.result();
                reports.forEach((report) => {
                  const standardStats = {
                    id: report.id,
                    timestamp: report.timestamp,
                    type:
                      {
                        localcandidate: 'local-candidate',
                        remotecandidate: 'remote-candidate',
                      }[report.type] || report.type,
                  };
                  report.names().forEach((name) => {
                    standardStats[name] = report.stat(name);
                  });
                  standardReport[standardStats.id] = standardStats;
                });
                return standardReport;
              }; // shim getStats with maplike support

              const makeMapStats = function makeMapStats(stats) {
                return new Map(
                  Object.keys(stats).map((key) => [key, stats[key]]),
                );
              };

              if (arguments.length >= 2) {
                const successCallbackWrapper_ = function successCallbackWrapper_(response) {
                  onSucc(makeMapStats(fixChromeStats_(response)));
                };

                return origGetStats.apply(this, [successCallbackWrapper_, selector]);
              } // promise-support

              return new Promise(((resolve, reject) => {
                origGetStats.apply(_this5, [
                  function (response) {
                    resolve(makeMapStats(fixChromeStats_(response)));
                  },
                  reject,
                ]);
              })).then(onSucc, onErr);
            };
          }

          function shimSenderReceiverGetStats(window) {
            if (
              !(
                (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
                && window.RTCPeerConnection
                && window.RTCRtpSender
                && window.RTCRtpReceiver
              )
            ) {
              return;
            } // shim sender stats.

            if (!('getStats' in window.RTCRtpSender.prototype)) {
              const origGetSenders = window.RTCPeerConnection.prototype.getSenders;

              if (origGetSenders) {
                window.RTCPeerConnection.prototype.getSenders = function getSenders() {
                  const _this6 = this;

                  const senders = origGetSenders.apply(this, []);
                  senders.forEach((sender) => (sender._pc = _this6));
                  return senders;
                };
              }

              const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

              if (origAddTrack) {
                window.RTCPeerConnection.prototype.addTrack = function addTrack() {
                  const sender = origAddTrack.apply(this, arguments);
                  sender._pc = this;
                  return sender;
                };
              }

              window.RTCRtpSender.prototype.getStats = function getStats() {
                const sender = this;
                return this._pc.getStats().then((result) => (
                  /* Note: this will include stats of all senders that
                     *   send a track with the same id as sender.track as
                     *   it is not possible to identify the RTCRtpSender.
                     */
                  utils.filterStats(result, sender.track, true)
                ));
              };
            } // shim receiver stats.

            if (!('getStats' in window.RTCRtpReceiver.prototype)) {
              const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;

              if (origGetReceivers) {
                window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
                  const _this7 = this;

                  const receivers = origGetReceivers.apply(this, []);
                  receivers.forEach((receiver) => (receiver._pc = _this7));
                  return receivers;
                };
              }

              utils.wrapPeerConnectionEvent(window, 'track', (e) => {
                e.receiver._pc = e.srcElement;
                return e;
              });

              window.RTCRtpReceiver.prototype.getStats = function getStats() {
                const receiver = this;
                return this._pc.getStats().then((result) => utils.filterStats(result, receiver.track, false));
              };
            }

            if (
              !(
                'getStats' in window.RTCRtpSender.prototype
                && 'getStats' in window.RTCRtpReceiver.prototype
              )
            ) {
              return;
            } // shim RTCPeerConnection.getStats(track).

            const origGetStats = window.RTCPeerConnection.prototype.getStats;

            window.RTCPeerConnection.prototype.getStats = function getStats() {
              if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
                const track = arguments[0];
                let sender = void 0;
                let receiver = void 0;
                let err = void 0;
                this.getSenders().forEach((s) => {
                  if (s.track === track) {
                    if (sender) {
                      err = true;
                    } else {
                      sender = s;
                    }
                  }
                });
                this.getReceivers().forEach((r) => {
                  if (r.track === track) {
                    if (receiver) {
                      err = true;
                    } else {
                      receiver = r;
                    }
                  }

                  return r.track === track;
                });

                if (err || (sender && receiver)) {
                  return Promise.reject(
                    new DOMException(
                      'There are more than one sender or receiver for the track.',
                      'InvalidAccessError',
                    ),
                  );
                } if (sender) {
                  return sender.getStats();
                } if (receiver) {
                  return receiver.getStats();
                }

                return Promise.reject(
                  new DOMException(
                    'There is no sender or receiver for the track.',
                    'InvalidAccessError',
                  ),
                );
              }

              return origGetStats.apply(this, arguments);
            };
          }

          function shimAddTrackRemoveTrackWithNative(window) {
            // shim addTrack/removeTrack with native variants in order to make
            // the interactions with legacy getLocalStreams behave as in other browsers.
            // Keeps a mapping stream.id => [stream, rtpsenders...]
            window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
              const _this8 = this;

              this._shimmedLocalStreams = this._shimmedLocalStreams || {};
              return Object.keys(this._shimmedLocalStreams).map((streamId) => _this8._shimmedLocalStreams[streamId][0]);
            };

            const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

            window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
              if (!stream) {
                return origAddTrack.apply(this, arguments);
              }

              this._shimmedLocalStreams = this._shimmedLocalStreams || {};
              const sender = origAddTrack.apply(this, arguments);

              if (!this._shimmedLocalStreams[stream.id]) {
                this._shimmedLocalStreams[stream.id] = [stream, sender];
              } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
                this._shimmedLocalStreams[stream.id].push(sender);
              }

              return sender;
            };

            const origAddStream = window.RTCPeerConnection.prototype.addStream;

            window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
              const _this9 = this;

              this._shimmedLocalStreams = this._shimmedLocalStreams || {};
              stream.getTracks().forEach((track) => {
                const alreadyExists = _this9.getSenders().find((s) => s.track === track);

                if (alreadyExists) {
                  throw new DOMException('Track already exists.', 'InvalidAccessError');
                }
              });
              const existingSenders = this.getSenders();
              origAddStream.apply(this, arguments);
              const newSenders = this.getSenders().filter((newSender) => existingSenders.indexOf(newSender) === -1);
              this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
            };

            const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;

            window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
              this._shimmedLocalStreams = this._shimmedLocalStreams || {};
              delete this._shimmedLocalStreams[stream.id];
              return origRemoveStream.apply(this, arguments);
            };

            const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;

            window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
              const _this10 = this;

              this._shimmedLocalStreams = this._shimmedLocalStreams || {};

              if (sender) {
                Object.keys(this._shimmedLocalStreams).forEach((streamId) => {
                  const idx = _this10._shimmedLocalStreams[streamId].indexOf(sender);

                  if (idx !== -1) {
                    _this10._shimmedLocalStreams[streamId].splice(idx, 1);
                  }

                  if (_this10._shimmedLocalStreams[streamId].length === 1) {
                    delete _this10._shimmedLocalStreams[streamId];
                  }
                });
              }

              return origRemoveTrack.apply(this, arguments);
            };
          }

          function shimAddTrackRemoveTrack(window, browserDetails) {
            if (!window.RTCPeerConnection) {
              return;
            } // shim addTrack and removeTrack.

            if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
              return shimAddTrackRemoveTrackWithNative(window);
            } // also shim pc.getLocalStreams when addTrack is shimmed
            // to return the original streams.

            const origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;

            window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
              const _this11 = this;

              const nativeStreams = origGetLocalStreams.apply(this);
              this._reverseStreams = this._reverseStreams || {};
              return nativeStreams.map((stream) => _this11._reverseStreams[stream.id]);
            };

            const origAddStream = window.RTCPeerConnection.prototype.addStream;

            window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
              const _this12 = this;

              this._streams = this._streams || {};
              this._reverseStreams = this._reverseStreams || {};
              stream.getTracks().forEach((track) => {
                const alreadyExists = _this12.getSenders().find((s) => s.track === track);

                if (alreadyExists) {
                  throw new DOMException('Track already exists.', 'InvalidAccessError');
                }
              }); // Add identity mapping for consistency with addTrack.
              // Unless this is being used with a stream from addTrack.

              if (!this._reverseStreams[stream.id]) {
                const newStream = new window.MediaStream(stream.getTracks());
                this._streams[stream.id] = newStream;
                this._reverseStreams[newStream.id] = stream;
                stream = newStream;
              }

              origAddStream.apply(this, [stream]);
            };

            const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;

            window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
              this._streams = this._streams || {};
              this._reverseStreams = this._reverseStreams || {};
              origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
              delete this._reverseStreams[
                this._streams[stream.id] ? this._streams[stream.id].id : stream.id
              ];
              delete this._streams[stream.id];
            };

            window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
              const _this13 = this;

              if (this.signalingState === 'closed') {
                throw new DOMException(
                  "The RTCPeerConnection's signalingState is 'closed'.",
                  'InvalidStateError',
                );
              }

              const streams = [].slice.call(arguments, 1);

              if (
                streams.length !== 1
                || !streams[0].getTracks().find((t) => t === track)
              ) {
                // this is not fully correct but all we can manage without
                // [[associated MediaStreams]] internal slot.
                throw new DOMException(
                  'The adapter.js addTrack polyfill only supports a single '
                    + ' stream which is associated with the specified track.',
                  'NotSupportedError',
                );
              }

              const alreadyExists = this.getSenders().find((s) => s.track === track);

              if (alreadyExists) {
                throw new DOMException('Track already exists.', 'InvalidAccessError');
              }

              this._streams = this._streams || {};
              this._reverseStreams = this._reverseStreams || {};
              const oldStream = this._streams[stream.id];

              if (oldStream) {
                // this is using odd Chrome behaviour, use with caution:
                // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
                // Note: we rely on the high-level addTrack/dtmf shim to
                // create the sender with a dtmf sender.
                oldStream.addTrack(track); // Trigger ONN async.

                Promise.resolve().then(() => {
                  _this13.dispatchEvent(new Event('negotiationneeded'));
                });
              } else {
                const newStream = new window.MediaStream([track]);
                this._streams[stream.id] = newStream;
                this._reverseStreams[newStream.id] = stream;
                this.addStream(newStream);
              }

              return this.getSenders().find((s) => s.track === track);
            }; // replace the internal stream id with the external one and
            // vice versa.

            function replaceInternalStreamId(pc, description) {
              let { sdp } = description;
              Object.keys(pc._reverseStreams || []).forEach((internalId) => {
                const externalStream = pc._reverseStreams[internalId];
                const internalStream = pc._streams[externalStream.id];
                sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);
              });
              return new RTCSessionDescription({
                type: description.type,
                sdp,
              });
            }

            function replaceExternalStreamId(pc, description) {
              let { sdp } = description;
              Object.keys(pc._reverseStreams || []).forEach((internalId) => {
                const externalStream = pc._reverseStreams[internalId];
                const internalStream = pc._streams[externalStream.id];
                sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);
              });
              return new RTCSessionDescription({
                type: description.type,
                sdp,
              });
            }

            ['createOffer', 'createAnswer'].forEach((method) => {
              const nativeMethod = window.RTCPeerConnection.prototype[method];

              const methodObj = _defineProperty({}, method, function () {
                const _this14 = this;

                const args = arguments;
                const isLegacyCall = arguments.length && typeof arguments[0] === 'function';

                if (isLegacyCall) {
                  return nativeMethod.apply(this, [
                    function (description) {
                      const desc = replaceInternalStreamId(_this14, description);
                      args[0].apply(null, [desc]);
                    },
                    function (err) {
                      if (args[1]) {
                        args[1].apply(null, err);
                      }
                    },
                    arguments[2],
                  ]);
                }

                return nativeMethod.apply(this, arguments).then((description) => replaceInternalStreamId(_this14, description));
              });

              window.RTCPeerConnection.prototype[method] = methodObj[method];
            });
            const origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;

            window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
              if (!arguments.length || !arguments[0].type) {
                return origSetLocalDescription.apply(this, arguments);
              }

              arguments[0] = replaceExternalStreamId(this, arguments[0]);
              return origSetLocalDescription.apply(this, arguments);
            }; // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

            const origLocalDescription = Object.getOwnPropertyDescriptor(
              window.RTCPeerConnection.prototype,
              'localDescription',
            );
            Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {
              get: function get() {
                const description = origLocalDescription.get.apply(this);

                if (description.type === '') {
                  return description;
                }

                return replaceInternalStreamId(this, description);
              },
            });

            window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
              const _this15 = this;

              if (this.signalingState === 'closed') {
                throw new DOMException(
                  "The RTCPeerConnection's signalingState is 'closed'.",
                  'InvalidStateError',
                );
              } // We can not yet check for sender instanceof RTCRtpSender
              // since we shim RTPSender. So we check if sender._pc is set.

              if (!sender._pc) {
                throw new DOMException(
                  'Argument 1 of RTCPeerConnection.removeTrack '
                    + 'does not implement interface RTCRtpSender.',
                  'TypeError',
                );
              }

              const isLocal = sender._pc === this;

              if (!isLocal) {
                throw new DOMException(
                  'Sender was not created by this connection.',
                  'InvalidAccessError',
                );
              } // Search for the native stream the senders track belongs to.

              this._streams = this._streams || {};
              let stream = void 0;
              Object.keys(this._streams).forEach((streamid) => {
                const hasTrack = _this15._streams[streamid].getTracks().find((track) => sender.track === track);

                if (hasTrack) {
                  stream = _this15._streams[streamid];
                }
              });

              if (stream) {
                if (stream.getTracks().length === 1) {
                  // if this is the last track of the stream, remove the stream. This
                  // takes care of any shimmed _senders.
                  this.removeStream(this._reverseStreams[stream.id]);
                } else {
                  // relying on the same odd chrome behaviour as above.
                  stream.removeTrack(sender.track);
                }

                this.dispatchEvent(new Event('negotiationneeded'));
              }
            };
          }

          function shimPeerConnection(window, browserDetails) {
            if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
              // very basic support for old versions.
              window.RTCPeerConnection = window.webkitRTCPeerConnection;
            }

            if (!window.RTCPeerConnection) {
              return;
            } // shim implicit creation of RTCSessionDescription/RTCIceCandidate

            if (browserDetails.version < 53) {
              ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach((
                method,
              ) => {
                const nativeMethod = window.RTCPeerConnection.prototype[method];

                const methodObj = _defineProperty({}, method, function () {
                  arguments[0] = new (method === 'addIceCandidate'
                    ? window.RTCIceCandidate
                    : window.RTCSessionDescription)(arguments[0]);
                  return nativeMethod.apply(this, arguments);
                });

                window.RTCPeerConnection.prototype[method] = methodObj[method];
              });
            }
          } // Attempt to fix ONN in plan-b mode.

          function fixNegotiationNeeded(window, browserDetails) {
            utils.wrapPeerConnectionEvent(window, 'negotiationneeded', (e) => {
              const pc = e.target;

              if (
                browserDetails.version < 72
                || (pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b')
              ) {
                if (pc.signalingState !== 'stable') {
                  return;
                }
              }

              return e;
            });
          }
        },
        { '../utils.js': 26, './getdisplaymedia': 15, './getusermedia': 16 },
      ],
      15: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.shimGetDisplayMedia = shimGetDisplayMedia;

          function shimGetDisplayMedia(window, getSourceId) {
            if (
              window.navigator.mediaDevices
              && 'getDisplayMedia' in window.navigator.mediaDevices
            ) {
              return;
            }

            if (!window.navigator.mediaDevices) {
              return;
            } // getSourceId is a function that returns a promise resolving with
            // the sourceId of the screen/window/tab to be shared.

            if (typeof getSourceId !== 'function') {
              console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');
              return;
            }

            window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
              return getSourceId(constraints).then((sourceId) => {
                const widthSpecified = constraints.video && constraints.video.width;
                const heightSpecified = constraints.video && constraints.video.height;
                const frameRateSpecified = constraints.video && constraints.video.frameRate;
                constraints.video = {
                  mandatory: {
                    chromeMediaSource: 'desktop',
                    chromeMediaSourceId: sourceId,
                    maxFrameRate: frameRateSpecified || 3,
                  },
                };

                if (widthSpecified) {
                  constraints.video.mandatory.maxWidth = widthSpecified;
                }

                if (heightSpecified) {
                  constraints.video.mandatory.maxHeight = heightSpecified;
                }

                return window.navigator.mediaDevices.getUserMedia(constraints);
              });
            };
          }
        },
        {},
      ],
      16: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          function _typeof2(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });

          const _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol'
            ? function (obj) {
              return _typeof2(obj);
            }
            : function (obj) {
              return obj
                    && typeof Symbol === 'function'
                    && obj.constructor === Symbol
                    && obj !== Symbol.prototype
                ? 'symbol'
                : _typeof2(obj);
            };

          exports.shimGetUserMedia = shimGetUserMedia;

          const _utils = require('../utils.js');

          const utils = _interopRequireWildcard(_utils);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }

          const logging = utils.log;

          function shimGetUserMedia(window, browserDetails) {
            const navigator = window && window.navigator;

            if (!navigator.mediaDevices) {
              return;
            }

            const constraintsToChrome_ = function constraintsToChrome_(c) {
              if (
                (typeof c === 'undefined' ? 'undefined' : _typeof(c)) !== 'object'
                || c.mandatory
                || c.optional
              ) {
                return c;
              }

              const cc = {};
              Object.keys(c).forEach((key) => {
                if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
                  return;
                }

                const r = _typeof(c[key]) === 'object'
                  ? c[key]
                  : {
                    ideal: c[key],
                  };

                if (r.exact !== undefined && typeof r.exact === 'number') {
                  r.min = r.max = r.exact;
                }

                const oldname_ = function oldname_(prefix, name) {
                  if (prefix) {
                    return prefix + name.charAt(0).toUpperCase() + name.slice(1);
                  }

                  return name === 'deviceId' ? 'sourceId' : name;
                };

                if (r.ideal !== undefined) {
                  cc.optional = cc.optional || [];
                  let oc = {};

                  if (typeof r.ideal === 'number') {
                    oc[oldname_('min', key)] = r.ideal;
                    cc.optional.push(oc);
                    oc = {};
                    oc[oldname_('max', key)] = r.ideal;
                    cc.optional.push(oc);
                  } else {
                    oc[oldname_('', key)] = r.ideal;
                    cc.optional.push(oc);
                  }
                }

                if (r.exact !== undefined && typeof r.exact !== 'number') {
                  cc.mandatory = cc.mandatory || {};
                  cc.mandatory[oldname_('', key)] = r.exact;
                } else {
                  ['min', 'max'].forEach((mix) => {
                    if (r[mix] !== undefined) {
                      cc.mandatory = cc.mandatory || {};
                      cc.mandatory[oldname_(mix, key)] = r[mix];
                    }
                  });
                }
              });

              if (c.advanced) {
                cc.optional = (cc.optional || []).concat(c.advanced);
              }

              return cc;
            };

            const shimConstraints_ = function shimConstraints_(constraints, func) {
              if (browserDetails.version >= 61) {
                return func(constraints);
              }

              constraints = JSON.parse(JSON.stringify(constraints));

              if (constraints && _typeof(constraints.audio) === 'object') {
                const remap = function remap(obj, a, b) {
                  if (a in obj && !(b in obj)) {
                    obj[b] = obj[a];
                    delete obj[a];
                  }
                };

                constraints = JSON.parse(JSON.stringify(constraints));
                remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
                remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
                constraints.audio = constraintsToChrome_(constraints.audio);
              }

              if (constraints && _typeof(constraints.video) === 'object') {
                // Shim facingMode for mobile & surface pro.
                let face = constraints.video.facingMode;
                face = face
                  && ((typeof face === 'undefined' ? 'undefined' : _typeof(face)) === 'object'
                    ? face
                    : {
                      ideal: face,
                    });
                const getSupportedFacingModeLies = browserDetails.version < 66;

                if (
                  face
                  && (face.exact === 'user'
                    || face.exact === 'environment'
                    || face.ideal === 'user'
                    || face.ideal === 'environment')
                  && !(
                    navigator.mediaDevices.getSupportedConstraints
                    && navigator.mediaDevices.getSupportedConstraints().facingMode
                    && !getSupportedFacingModeLies
                  )
                ) {
                  delete constraints.video.facingMode;
                  let matches = void 0;

                  if (face.exact === 'environment' || face.ideal === 'environment') {
                    matches = ['back', 'rear'];
                  } else if (face.exact === 'user' || face.ideal === 'user') {
                    matches = ['front'];
                  }

                  if (matches) {
                    // Look for matches in label, or use last cam for back (typical).
                    return navigator.mediaDevices.enumerateDevices().then((devices) => {
                      devices = devices.filter((d) => d.kind === 'videoinput');
                      let dev = devices.find((d) => matches.some((match) => d.label.toLowerCase().includes(match)));

                      if (!dev && devices.length && matches.includes('back')) {
                        dev = devices[devices.length - 1]; // more likely the back cam
                      }

                      if (dev) {
                        constraints.video.deviceId = face.exact
                          ? {
                            exact: dev.deviceId,
                          }
                          : {
                            ideal: dev.deviceId,
                          };
                      }

                      constraints.video = constraintsToChrome_(constraints.video);
                      logging(`chrome: ${JSON.stringify(constraints)}`);
                      return func(constraints);
                    });
                  }
                }

                constraints.video = constraintsToChrome_(constraints.video);
              }

              logging(`chrome: ${JSON.stringify(constraints)}`);
              return func(constraints);
            };

            const shimError_ = function shimError_(e) {
              if (browserDetails.version >= 64) {
                return e;
              }

              return {
                name:
                  {
                    PermissionDeniedError: 'NotAllowedError',
                    PermissionDismissedError: 'NotAllowedError',
                    InvalidStateError: 'NotAllowedError',
                    DevicesNotFoundError: 'NotFoundError',
                    ConstraintNotSatisfiedError: 'OverconstrainedError',
                    TrackStartError: 'NotReadableError',
                    MediaDeviceFailedDueToShutdown: 'NotAllowedError',
                    MediaDeviceKillSwitchOn: 'NotAllowedError',
                    TabCaptureError: 'AbortError',
                    ScreenCaptureError: 'AbortError',
                    DeviceCaptureError: 'AbortError',
                  }[e.name] || e.name,
                message: e.message,
                constraint: e.constraint || e.constraintName,
                toString: function toString() {
                  return this.name + (this.message && ': ') + this.message;
                },
              };
            };

            const getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {
              shimConstraints_(constraints, (c) => {
                navigator.webkitGetUserMedia(c, onSuccess, (e) => {
                  if (onError) {
                    onError(shimError_(e));
                  }
                });
              });
            };

            navigator.getUserMedia = getUserMedia_.bind(navigator); // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
            // function which returns a Promise, it does not accept spec-style
            // constraints.

            if (navigator.mediaDevices.getUserMedia) {
              const origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(
                navigator.mediaDevices,
              );

              navigator.mediaDevices.getUserMedia = function (cs) {
                return shimConstraints_(cs, (c) => origGetUserMedia(c).then(
                  (stream) => {
                    if (
                      (c.audio && !stream.getAudioTracks().length)
                        || (c.video && !stream.getVideoTracks().length)
                    ) {
                      stream.getTracks().forEach((track) => {
                        track.stop();
                      });
                      throw new DOMException('', 'NotFoundError');
                    }

                    return stream;
                  },
                  (e) => Promise.reject(shimError_(e)),
                ));
              };
            }
          }
        },
        { '../utils.js': 26 },
      ],
      17: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          function _typeof2(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });

          const _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol'
            ? function (obj) {
              return _typeof2(obj);
            }
            : function (obj) {
              return obj
                    && typeof Symbol === 'function'
                    && obj.constructor === Symbol
                    && obj !== Symbol.prototype
                ? 'symbol'
                : _typeof2(obj);
            };

          exports.shimRTCIceCandidate = shimRTCIceCandidate;
          exports.shimMaxMessageSize = shimMaxMessageSize;
          exports.shimSendThrowTypeError = shimSendThrowTypeError;
          exports.shimConnectionState = shimConnectionState;
          exports.removeExtmapAllowMixed = removeExtmapAllowMixed;
          exports.shimAddIceCandidateNullOrEmpty = shimAddIceCandidateNullOrEmpty;

          const _sdp = require('sdp');

          const _sdp2 = _interopRequireDefault(_sdp);

          const _utils = require('./utils');

          const utils = _interopRequireWildcard(_utils);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                default: obj,
              };
          }

          function shimRTCIceCandidate(window) {
            // foundation is arbitrarily chosen as an indicator for full support for
            // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
            if (
              !window.RTCIceCandidate
              || (window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype)
            ) {
              return;
            }

            const NativeRTCIceCandidate = window.RTCIceCandidate;

            window.RTCIceCandidate = function RTCIceCandidate(args) {
              // Remove the a= which shouldn't be part of the candidate string.
              if (
                (typeof args === 'undefined' ? 'undefined' : _typeof(args)) === 'object'
                && args.candidate
                && args.candidate.indexOf('a=') === 0
              ) {
                args = JSON.parse(JSON.stringify(args));
                args.candidate = args.candidate.substr(2);
              }

              if (args.candidate && args.candidate.length) {
                // Augment the native candidate with the parsed fields.
                const nativeCandidate = new NativeRTCIceCandidate(args);

                const parsedCandidate = _sdp2.default.parseCandidate(args.candidate);

                const augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate); // Add a serializer that does not serialize the extra attributes.

                augmentedCandidate.toJSON = function toJSON() {
                  return {
                    candidate: augmentedCandidate.candidate,
                    sdpMid: augmentedCandidate.sdpMid,
                    sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
                    usernameFragment: augmentedCandidate.usernameFragment,
                  };
                };

                return augmentedCandidate;
              }

              return new NativeRTCIceCandidate(args);
            };

            window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype; // Hook up the augmented candidate in onicecandidate and
            // addEventListener('icecandidate', ...)

            utils.wrapPeerConnectionEvent(window, 'icecandidate', (e) => {
              if (e.candidate) {
                Object.defineProperty(e, 'candidate', {
                  value: new window.RTCIceCandidate(e.candidate),
                  writable: 'false',
                });
              }

              return e;
            });
          }

          function shimMaxMessageSize(window, browserDetails) {
            if (!window.RTCPeerConnection) {
              return;
            }

            if (!('sctp' in window.RTCPeerConnection.prototype)) {
              Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
                get: function get() {
                  return typeof this._sctp === 'undefined' ? null : this._sctp;
                },
              });
            }

            const sctpInDescription = function sctpInDescription(description) {
              if (!description || !description.sdp) {
                return false;
              }

              const sections = _sdp2.default.splitSections(description.sdp);

              sections.shift();
              return sections.some((mediaSection) => {
                const mLine = _sdp2.default.parseMLine(mediaSection);

                return (
                  mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1
                );
              });
            };

            const getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {
              // TODO: Is there a better solution for detecting Firefox?
              const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);

              if (match === null || match.length < 2) {
                return -1;
              }

              const version = parseInt(match[1], 10); // Test for NaN (yes, this is ugly)

              return version !== version ? -1 : version;
            };

            const getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {
              // Every implementation we know can send at least 64 KiB.
              // Note: Although Chrome is technically able to send up to 256 KiB, the
              //       data does not reach the other peer reliably.
              //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
              let canSendMaxMessageSize = 65536;

              if (browserDetails.browser === 'firefox') {
                if (browserDetails.version < 57) {
                  if (remoteIsFirefox === -1) {
                    // FF < 57 will send in 16 KiB chunks using the deprecated PPID
                    // fragmentation.
                    canSendMaxMessageSize = 16384;
                  } else {
                    // However, other FF (and RAWRTC) can reassemble PPID-fragmented
                    // messages. Thus, supporting ~2 GiB when sending.
                    canSendMaxMessageSize = 2147483637;
                  }
                } else if (browserDetails.version < 60) {
                  // Currently, all FF >= 57 will reset the remote maximum message size
                  // to the default value when a data channel is created at a later
                  // stage. :(
                  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
                  canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
                } else {
                  // FF >= 60 supports sending ~2 GiB
                  canSendMaxMessageSize = 2147483637;
                }
              }

              return canSendMaxMessageSize;
            };

            const getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {
              // Note: 65536 bytes is the default value from the SDP spec. Also,
              //       every implementation we know supports receiving 65536 bytes.
              let maxMessageSize = 65536; // FF 57 has a slightly incorrect default remote max message size, so
              // we need to adjust it here to avoid a failure when sending.
              // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697

              if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {
                maxMessageSize = 65535;
              }

              const match = _sdp2.default.matchPrefix(description.sdp, 'a=max-message-size:');

              if (match.length > 0) {
                maxMessageSize = parseInt(match[0].substr(19), 10);
              } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {
                // If the maximum message size is not present in the remote SDP and
                // both local and remote are Firefox, the remote peer can receive
                // ~2 GiB.
                maxMessageSize = 2147483637;
              }

              return maxMessageSize;
            };

            const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;

            window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
              this._sctp = null; // Chrome decided to not expose .sctp in plan-b mode.
              // As usual, adapter.js has to do an 'ugly worakaround'
              // to cover up the mess.

              if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {
                const _getConfiguration = this.getConfiguration();
                const { sdpSemantics } = _getConfiguration;

                if (sdpSemantics === 'plan-b') {
                  Object.defineProperty(this, 'sctp', {
                    get: function get() {
                      return typeof this._sctp === 'undefined' ? null : this._sctp;
                    },
                    enumerable: true,
                    configurable: true,
                  });
                }
              }

              if (sctpInDescription(arguments[0])) {
                // Check if the remote is FF.
                const isFirefox = getRemoteFirefoxVersion(arguments[0]); // Get the maximum message size the local peer is capable of sending

                const canSendMMS = getCanSendMaxMessageSize(isFirefox); // Get the maximum message size of the remote peer.

                const remoteMMS = getMaxMessageSize(arguments[0], isFirefox); // Determine final maximum message size

                let maxMessageSize = void 0;

                if (canSendMMS === 0 && remoteMMS === 0) {
                  maxMessageSize = Number.POSITIVE_INFINITY;
                } else if (canSendMMS === 0 || remoteMMS === 0) {
                  maxMessageSize = Math.max(canSendMMS, remoteMMS);
                } else {
                  maxMessageSize = Math.min(canSendMMS, remoteMMS);
                } // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
                // attribute.

                const sctp = {};
                Object.defineProperty(sctp, 'maxMessageSize', {
                  get: function get() {
                    return maxMessageSize;
                  },
                });
                this._sctp = sctp;
              }

              return origSetRemoteDescription.apply(this, arguments);
            };
          }

          function shimSendThrowTypeError(window) {
            if (
              !(
                window.RTCPeerConnection
                && 'createDataChannel' in window.RTCPeerConnection.prototype
              )
            ) {
              return;
            } // Note: Although Firefox >= 57 has a native implementation, the maximum
            //       message size can be reset for all data channels at a later stage.
            //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

            function wrapDcSend(dc, pc) {
              const origDataChannelSend = dc.send;

              dc.send = function send() {
                const data = arguments[0];
                const length = data.length || data.size || data.byteLength;

                if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {
                  throw new TypeError(
                    `Message too large (can send a maximum of ${pc.sctp.maxMessageSize} bytes)`,
                  );
                }

                return origDataChannelSend.apply(dc, arguments);
              };
            }

            const origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;

            window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
              const dataChannel = origCreateDataChannel.apply(this, arguments);
              wrapDcSend(dataChannel, this);
              return dataChannel;
            };

            utils.wrapPeerConnectionEvent(window, 'datachannel', (e) => {
              wrapDcSend(e.channel, e.target);
              return e;
            });
          }
          /* shims RTCConnectionState by pretending it is the same as iceConnectionState.
           * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12
           * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect
           * since DTLS failures would be hidden. See
           * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827
           * for the Firefox tracking bug.
           */

          function shimConnectionState(window) {
            if (
              !window.RTCPeerConnection
              || 'connectionState' in window.RTCPeerConnection.prototype
            ) {
              return;
            }

            const proto = window.RTCPeerConnection.prototype;
            Object.defineProperty(proto, 'connectionState', {
              get: function get() {
                return (
                  {
                    completed: 'connected',
                    checking: 'connecting',
                  }[this.iceConnectionState] || this.iceConnectionState
                );
              },
              enumerable: true,
              configurable: true,
            });
            Object.defineProperty(proto, 'onconnectionstatechange', {
              get: function get() {
                return this._onconnectionstatechange || null;
              },
              set: function set(cb) {
                if (this._onconnectionstatechange) {
                  this.removeEventListener('connectionstatechange', this._onconnectionstatechange);
                  delete this._onconnectionstatechange;
                }

                if (cb) {
                  this.addEventListener(
                    'connectionstatechange',
                    (this._onconnectionstatechange = cb),
                  );
                }
              },
              enumerable: true,
              configurable: true,
            });
            ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {
              const origMethod = proto[method];

              proto[method] = function () {
                if (!this._connectionstatechangepoly) {
                  this._connectionstatechangepoly = function (e) {
                    const pc = e.target;

                    if (pc._lastConnectionState !== pc.connectionState) {
                      pc._lastConnectionState = pc.connectionState;
                      const newEvent = new Event('connectionstatechange', e);
                      pc.dispatchEvent(newEvent);
                    }

                    return e;
                  };

                  this.addEventListener(
                    'iceconnectionstatechange',
                    this._connectionstatechangepoly,
                  );
                }

                return origMethod.apply(this, arguments);
              };
            });
          }

          function removeExtmapAllowMixed(window, browserDetails) {
            /* remove a=extmap-allow-mixed for webrtc.org < M71 */
            if (!window.RTCPeerConnection) {
              return;
            }

            if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {
              return;
            }

            if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {
              return;
            }

            const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;

            window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(
              desc,
            ) {
              if (desc && desc.sdp && desc.sdp.indexOf('\na=extmap-allow-mixed') !== -1) {
                const sdp = desc.sdp
                  .split('\n')
                  .filter((line) => line.trim() !== 'a=extmap-allow-mixed')
                  .join('\n'); // Safari enforces read-only-ness of RTCSessionDescription fields.

                if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {
                  arguments[0] = new window.RTCSessionDescription({
                    type: desc.type,
                    sdp,
                  });
                } else {
                  desc.sdp = sdp;
                }
              }

              return nativeSRD.apply(this, arguments);
            };
          }

          function shimAddIceCandidateNullOrEmpty(window, browserDetails) {
            // Support for addIceCandidate(null or undefined)
            // as well as addIceCandidate({candidate: "", ...})
            // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
            // Note: must be called before other polyfills which change the signature.
            if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {
              return;
            }

            const nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;

            if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
              return;
            }

            window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
              if (!arguments[0]) {
                if (arguments[1]) {
                  arguments[1].apply(null);
                }

                return Promise.resolve();
              } // Firefox 68+ emits and processes {candidate: "", ...}, ignore
              // in older versions.
              // Native support for ignoring exists for Chrome M77+.
              // Safari ignores as well, exact version unknown but works in the same
              // version that also ignores addIceCandidate(null).

              if (
                ((browserDetails.browser === 'chrome' && browserDetails.version < 78)
                  || (browserDetails.browser === 'firefox' && browserDetails.version < 68)
                  || browserDetails.browser === 'safari')
                && arguments[0]
                && arguments[0].candidate === ''
              ) {
                return Promise.resolve();
              }

              return nativeAddIceCandidate.apply(this, arguments);
            };
          }
        },
        { './utils': 26, sdp: 6 },
      ],
      18: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.shimGetDisplayMedia = exports.shimGetUserMedia = undefined;

          const _getusermedia = require('./getusermedia');

          Object.defineProperty(exports, 'shimGetUserMedia', {
            enumerable: true,
            get: function get() {
              return _getusermedia.shimGetUserMedia;
            },
          });

          const _getdisplaymedia = require('./getdisplaymedia');

          Object.defineProperty(exports, 'shimGetDisplayMedia', {
            enumerable: true,
            get: function get() {
              return _getdisplaymedia.shimGetDisplayMedia;
            },
          });
          exports.shimPeerConnection = shimPeerConnection;
          exports.shimReplaceTrack = shimReplaceTrack;

          const _utils = require('../utils');

          const utils = _interopRequireWildcard(_utils);

          const _filtericeservers = require('./filtericeservers');

          const _rtcpeerconnectionShim = require('rtcpeerconnection-shim');

          const _rtcpeerconnectionShim2 = _interopRequireDefault(_rtcpeerconnectionShim);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                default: obj,
              };
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }

          function shimPeerConnection(window, browserDetails) {
            if (window.RTCIceGatherer) {
              if (!window.RTCIceCandidate) {
                window.RTCIceCandidate = function RTCIceCandidate(args) {
                  return args;
                };
              }

              if (!window.RTCSessionDescription) {
                window.RTCSessionDescription = function RTCSessionDescription(args) {
                  return args;
                };
              } // this adds an additional event listener to MediaStrackTrack that signals
              // when a tracks enabled property was changed. Workaround for a bug in
              // addStream, see below. No longer required in 15025+

              if (browserDetails.version < 15025) {
                const origMSTEnabled = Object.getOwnPropertyDescriptor(
                  window.MediaStreamTrack.prototype,
                  'enabled',
                );
                Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
                  set: function set(value) {
                    origMSTEnabled.set.call(this, value);
                    const ev = new Event('enabled');
                    ev.enabled = value;
                    this.dispatchEvent(ev);
                  },
                });
              }
            } // ORTC defines the DTMF sender a bit different.
            // https://github.com/w3c/ortc/issues/714

            if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
              Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
                get: function get() {
                  if (this._dtmf === undefined) {
                    if (this.track.kind === 'audio') {
                      this._dtmf = new window.RTCDtmfSender(this);
                    } else if (this.track.kind === 'video') {
                      this._dtmf = null;
                    }
                  }

                  return this._dtmf;
                },
              });
            } // Edge currently only implements the RTCDtmfSender, not the
            // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*

            if (window.RTCDtmfSender && !window.RTCDTMFSender) {
              window.RTCDTMFSender = window.RTCDtmfSender;
            }

            const RTCPeerConnectionShim = (0, _rtcpeerconnectionShim2.default)(
              window,
              browserDetails.version,
            );

            window.RTCPeerConnection = function RTCPeerConnection(config) {
              if (config && config.iceServers) {
                config.iceServers = (0, _filtericeservers.filterIceServers)(
                  config.iceServers,
                  browserDetails.version,
                );
                utils.log('ICE servers after filtering:', config.iceServers);
              }

              return new RTCPeerConnectionShim(config);
            };

            window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
          }

          function shimReplaceTrack(window) {
            // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
            if (window.RTCRtpSender && !('replaceTrack' in window.RTCRtpSender.prototype)) {
              window.RTCRtpSender.prototype.replaceTrack = window.RTCRtpSender.prototype.setTrack;
            }
          }
        },
        {
          '../utils': 26,
          './filtericeservers': 19,
          './getdisplaymedia': 20,
          './getusermedia': 21,
          'rtcpeerconnection-shim': 5,
        },
      ],
      19: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.filterIceServers = filterIceServers;

          const _utils = require('../utils');

          const utils = _interopRequireWildcard(_utils);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          } // Edge does not like
          // 1) stun: filtered after 14393 unless ?transport=udp is present
          // 2) turn: that does not have all of turn:host:port?transport=udp
          // 3) turn: with ipv6 addresses
          // 4) turn: occurring muliple times

          function filterIceServers(iceServers, edgeVersion) {
            let hasTurn = false;
            iceServers = JSON.parse(JSON.stringify(iceServers));
            return iceServers.filter((server) => {
              if (server && (server.urls || server.url)) {
                let urls = server.urls || server.url;

                if (server.url && !server.urls) {
                  utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
                }

                const isString = typeof urls === 'string';

                if (isString) {
                  urls = [urls];
                }

                urls = urls.filter((url) => {
                  // filter STUN unconditionally.
                  if (url.indexOf('stun:') === 0) {
                    return false;
                  }

                  const validTurn = url.startsWith('turn')
                    && !url.startsWith('turn:[')
                    && url.includes('transport=udp');

                  if (validTurn && !hasTurn) {
                    hasTurn = true;
                    return true;
                  }

                  return validTurn && !hasTurn;
                });
                delete server.url;
                server.urls = isString ? urls[0] : urls;
                return !!urls.length;
              }
            });
          }
        },
        { '../utils': 26 },
      ],
      20: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.shimGetDisplayMedia = shimGetDisplayMedia;

          function shimGetDisplayMedia(window) {
            if (!('getDisplayMedia' in window.navigator)) {
              return;
            }

            if (!window.navigator.mediaDevices) {
              return;
            }

            if (
              window.navigator.mediaDevices
              && 'getDisplayMedia' in window.navigator.mediaDevices
            ) {
              return;
            }

            window.navigator.mediaDevices.getDisplayMedia = window.navigator.getDisplayMedia.bind(
              window.navigator,
            );
          }
        },
        {},
      ],
      21: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.shimGetUserMedia = shimGetUserMedia;

          function shimGetUserMedia(window) {
            const navigator = window && window.navigator;

            const shimError_ = function shimError_(e) {
              return {
                name:
                  {
                    PermissionDeniedError: 'NotAllowedError',
                  }[e.name] || e.name,
                message: e.message,
                constraint: e.constraint,
                toString: function toString() {
                  return this.name;
                },
              };
            }; // getUserMedia error shim.

            const origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);

            navigator.mediaDevices.getUserMedia = function (c) {
              return origGetUserMedia(c).catch((e) => Promise.reject(shimError_(e)));
            };
          }
        },
        {},
      ],
      22: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          function _typeof2(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.shimGetDisplayMedia = exports.shimGetUserMedia = undefined;

          const _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol'
            ? function (obj) {
              return _typeof2(obj);
            }
            : function (obj) {
              return obj
                    && typeof Symbol === 'function'
                    && obj.constructor === Symbol
                    && obj !== Symbol.prototype
                ? 'symbol'
                : _typeof2(obj);
            };

          const _getusermedia = require('./getusermedia');

          Object.defineProperty(exports, 'shimGetUserMedia', {
            enumerable: true,
            get: function get() {
              return _getusermedia.shimGetUserMedia;
            },
          });

          const _getdisplaymedia = require('./getdisplaymedia');

          Object.defineProperty(exports, 'shimGetDisplayMedia', {
            enumerable: true,
            get: function get() {
              return _getdisplaymedia.shimGetDisplayMedia;
            },
          });
          exports.shimOnTrack = shimOnTrack;
          exports.shimPeerConnection = shimPeerConnection;
          exports.shimSenderGetStats = shimSenderGetStats;
          exports.shimReceiverGetStats = shimReceiverGetStats;
          exports.shimRemoveStream = shimRemoveStream;
          exports.shimRTCDataChannel = shimRTCDataChannel;
          exports.shimAddTransceiver = shimAddTransceiver;
          exports.shimGetParameters = shimGetParameters;
          exports.shimCreateOffer = shimCreateOffer;
          exports.shimCreateAnswer = shimCreateAnswer;

          const _utils = require('../utils');

          const utils = _interopRequireWildcard(_utils);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function shimOnTrack(window) {
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
              && window.RTCTrackEvent
              && 'receiver' in window.RTCTrackEvent.prototype
              && !('transceiver' in window.RTCTrackEvent.prototype)
            ) {
              Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
                get: function get() {
                  return {
                    receiver: this.receiver,
                  };
                },
              });
            }
          }

          function shimPeerConnection(window, browserDetails) {
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object'
              || !(window.RTCPeerConnection || window.mozRTCPeerConnection)
            ) {
              return; // probably media.peerconnection.enabled=false in about:config
            }

            if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {
              // very basic support for old versions.
              window.RTCPeerConnection = window.mozRTCPeerConnection;
            }

            if (browserDetails.version < 53) {
              // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
              ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach((
                method,
              ) => {
                const nativeMethod = window.RTCPeerConnection.prototype[method];

                const methodObj = _defineProperty({}, method, function () {
                  arguments[0] = new (method === 'addIceCandidate'
                    ? window.RTCIceCandidate
                    : window.RTCSessionDescription)(arguments[0]);
                  return nativeMethod.apply(this, arguments);
                });

                window.RTCPeerConnection.prototype[method] = methodObj[method];
              });
            }

            const modernStatsTypes = {
              inboundrtp: 'inbound-rtp',
              outboundrtp: 'outbound-rtp',
              candidatepair: 'candidate-pair',
              localcandidate: 'local-candidate',
              remotecandidate: 'remote-candidate',
            };
            const nativeGetStats = window.RTCPeerConnection.prototype.getStats;

            window.RTCPeerConnection.prototype.getStats = function getStats() {
              const _arguments = Array.prototype.slice.call(arguments);
              const selector = _arguments[0];
              const onSucc = _arguments[1];
              const onErr = _arguments[2];

              return nativeGetStats
                .apply(this, [selector || null])
                .then((stats) => {
                  if (browserDetails.version < 53 && !onSucc) {
                    // Shim only promise getStats with spec-hyphens in type names
                    // Leave callback version alone; misc old uses of forEach before Map
                    try {
                      stats.forEach((stat) => {
                        stat.type = modernStatsTypes[stat.type] || stat.type;
                      });
                    } catch (e) {
                      if (e.name !== 'TypeError') {
                        throw e;
                      } // Avoid TypeError: "type" is read-only, in old versions. 34-43ish

                      stats.forEach((stat, i) => {
                        stats.set(
                          i,
                          { ...stat, type: modernStatsTypes[stat.type] || stat.type },
                        );
                      });
                    }
                  }

                  return stats;
                })
                .then(onSucc, onErr);
            };
          }

          function shimSenderGetStats(window) {
            if (
              !(
                (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
                && window.RTCPeerConnection
                && window.RTCRtpSender
              )
            ) {
              return;
            }

            if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
              return;
            }

            const origGetSenders = window.RTCPeerConnection.prototype.getSenders;

            if (origGetSenders) {
              window.RTCPeerConnection.prototype.getSenders = function getSenders() {
                const _this = this;

                const senders = origGetSenders.apply(this, []);
                senders.forEach((sender) => (sender._pc = _this));
                return senders;
              };
            }

            const origAddTrack = window.RTCPeerConnection.prototype.addTrack;

            if (origAddTrack) {
              window.RTCPeerConnection.prototype.addTrack = function addTrack() {
                const sender = origAddTrack.apply(this, arguments);
                sender._pc = this;
                return sender;
              };
            }

            window.RTCRtpSender.prototype.getStats = function getStats() {
              return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
            };
          }

          function shimReceiverGetStats(window) {
            if (
              !(
                (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
                && window.RTCPeerConnection
                && window.RTCRtpSender
              )
            ) {
              return;
            }

            if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
              return;
            }

            const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;

            if (origGetReceivers) {
              window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
                const _this2 = this;

                const receivers = origGetReceivers.apply(this, []);
                receivers.forEach((receiver) => (receiver._pc = _this2));
                return receivers;
              };
            }

            utils.wrapPeerConnectionEvent(window, 'track', (e) => {
              e.receiver._pc = e.srcElement;
              return e;
            });

            window.RTCRtpReceiver.prototype.getStats = function getStats() {
              return this._pc.getStats(this.track);
            };
          }

          function shimRemoveStream(window) {
            if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {
              return;
            }

            window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
              const _this3 = this;

              utils.deprecated('removeStream', 'removeTrack');
              this.getSenders().forEach((sender) => {
                if (sender.track && stream.getTracks().includes(sender.track)) {
                  _this3.removeTrack(sender);
                }
              });
            };
          }

          function shimRTCDataChannel(window) {
            // rename DataChannel to RTCDataChannel (native fix in FF60):
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
            if (window.DataChannel && !window.RTCDataChannel) {
              window.RTCDataChannel = window.DataChannel;
            }
          }

          function shimAddTransceiver(window) {
            // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
            // Firefox ignores the init sendEncodings options passed to addTransceiver
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
            if (
              !(
                (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
                && window.RTCPeerConnection
              )
            ) {
              return;
            }

            const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;

            if (origAddTransceiver) {
              window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
                this.setParametersPromises = [];
                const initParameters = arguments[1];
                const shouldPerformCheck = initParameters && 'sendEncodings' in initParameters;

                if (shouldPerformCheck) {
                  // If sendEncodings params are provided, validate grammar
                  initParameters.sendEncodings.forEach((encodingParam) => {
                    if ('rid' in encodingParam) {
                      const ridRegex = /^[a-z0-9]{0,16}$/i;

                      if (!ridRegex.test(encodingParam.rid)) {
                        throw new TypeError('Invalid RID value provided.');
                      }
                    }

                    if ('scaleResolutionDownBy' in encodingParam) {
                      if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {
                        throw new RangeError('scale_resolution_down_by must be >= 1.0');
                      }
                    }

                    if ('maxFramerate' in encodingParam) {
                      if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
                        throw new RangeError('max_framerate must be >= 0.0');
                      }
                    }
                  });
                }

                const transceiver = origAddTransceiver.apply(this, arguments);

                if (shouldPerformCheck) {
                  // Check if the init options were applied. If not we do this in an
                  // asynchronous way and save the promise reference in a global object.
                  // This is an ugly hack, but at the same time is way more robust than
                  // checking the sender parameters before and after the createOffer
                  // Also note that after the createoffer we are not 100% sure that
                  // the params were asynchronously applied so we might miss the
                  // opportunity to recreate offer.
                  const { sender } = transceiver;
                  const params = sender.getParameters();

                  if (
                    !('encodings' in params) // Avoid being fooled by patched getParameters() below.
                    || (params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0)
                  ) {
                    params.encodings = initParameters.sendEncodings;
                    sender.sendEncodings = initParameters.sendEncodings;
                    this.setParametersPromises.push(
                      sender
                        .setParameters(params)
                        .then(() => {
                          delete sender.sendEncodings;
                        })
                        .catch(() => {
                          delete sender.sendEncodings;
                        }),
                    );
                  }
                }

                return transceiver;
              };
            }
          }

          function shimGetParameters(window) {
            if (
              !(
                (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
                && window.RTCRtpSender
              )
            ) {
              return;
            }

            const origGetParameters = window.RTCRtpSender.prototype.getParameters;

            if (origGetParameters) {
              window.RTCRtpSender.prototype.getParameters = function getParameters() {
                const params = origGetParameters.apply(this, arguments);

                if (!('encodings' in params)) {
                  params.encodings = [].concat(this.sendEncodings || [{}]);
                }

                return params;
              };
            }
          }

          function shimCreateOffer(window) {
            // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
            // Firefox ignores the init sendEncodings options passed to addTransceiver
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
            if (
              !(
                (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
                && window.RTCPeerConnection
              )
            ) {
              return;
            }

            const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;

            window.RTCPeerConnection.prototype.createOffer = function createOffer() {
              const _this4 = this;
              const _arguments2 = arguments;

              if (this.setParametersPromises && this.setParametersPromises.length) {
                return Promise.all(this.setParametersPromises)
                  .then(() => origCreateOffer.apply(_this4, _arguments2))
                  .finally(() => {
                    _this4.setParametersPromises = [];
                  });
              }

              return origCreateOffer.apply(this, arguments);
            };
          }

          function shimCreateAnswer(window) {
            // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
            // Firefox ignores the init sendEncodings options passed to addTransceiver
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
            if (
              !(
                (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
                && window.RTCPeerConnection
              )
            ) {
              return;
            }

            const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;

            window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
              const _this5 = this;
              const _arguments3 = arguments;

              if (this.setParametersPromises && this.setParametersPromises.length) {
                return Promise.all(this.setParametersPromises)
                  .then(() => origCreateAnswer.apply(_this5, _arguments3))
                  .finally(() => {
                    _this5.setParametersPromises = [];
                  });
              }

              return origCreateAnswer.apply(this, arguments);
            };
          }
        },
        { '../utils': 26, './getdisplaymedia': 23, './getusermedia': 24 },
      ],
      23: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });
          exports.shimGetDisplayMedia = shimGetDisplayMedia;

          function shimGetDisplayMedia(window, preferredMediaSource) {
            if (
              window.navigator.mediaDevices
              && 'getDisplayMedia' in window.navigator.mediaDevices
            ) {
              return;
            }

            if (!window.navigator.mediaDevices) {
              return;
            }

            window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
              if (!(constraints && constraints.video)) {
                const err = new DOMException(
                  'getDisplayMedia without video ' + 'constraints is undefined',
                );
                err.name = 'NotFoundError'; // from https://heycam.github.io/webidl/#idl-DOMException-error-names

                err.code = 8;
                return Promise.reject(err);
              }

              if (constraints.video === true) {
                constraints.video = {
                  mediaSource: preferredMediaSource,
                };
              } else {
                constraints.video.mediaSource = preferredMediaSource;
              }

              return window.navigator.mediaDevices.getUserMedia(constraints);
            };
          }
        },
        {},
      ],
      24: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          function _typeof2(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });

          const _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol'
            ? function (obj) {
              return _typeof2(obj);
            }
            : function (obj) {
              return obj
                    && typeof Symbol === 'function'
                    && obj.constructor === Symbol
                    && obj !== Symbol.prototype
                ? 'symbol'
                : _typeof2(obj);
            };

          exports.shimGetUserMedia = shimGetUserMedia;

          const _utils = require('../utils');

          const utils = _interopRequireWildcard(_utils);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }

          function shimGetUserMedia(window, browserDetails) {
            const navigator = window && window.navigator;
            const MediaStreamTrack = window && window.MediaStreamTrack;

            navigator.getUserMedia = function (constraints, onSuccess, onError) {
              // Replace Firefox 44+'s deprecation warning with unprefixed version.
              utils.deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');
              navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
            };

            if (
              !(
                browserDetails.version > 55
                && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints()
              )
            ) {
              const remap = function remap(obj, a, b) {
                if (a in obj && !(b in obj)) {
                  obj[b] = obj[a];
                  delete obj[a];
                }
              };

              const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(
                navigator.mediaDevices,
              );

              navigator.mediaDevices.getUserMedia = function (c) {
                if (
                  (typeof c === 'undefined' ? 'undefined' : _typeof(c)) === 'object'
                  && _typeof(c.audio) === 'object'
                ) {
                  c = JSON.parse(JSON.stringify(c));
                  remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
                  remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
                }

                return nativeGetUserMedia(c);
              };

              if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
                const nativeGetSettings = MediaStreamTrack.prototype.getSettings;

                MediaStreamTrack.prototype.getSettings = function () {
                  const obj = nativeGetSettings.apply(this, arguments);
                  remap(obj, 'mozAutoGainControl', 'autoGainControl');
                  remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
                  return obj;
                };
              }

              if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
                const nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;

                MediaStreamTrack.prototype.applyConstraints = function (c) {
                  if (
                    this.kind === 'audio'
                    && (typeof c === 'undefined' ? 'undefined' : _typeof(c)) === 'object'
                  ) {
                    c = JSON.parse(JSON.stringify(c));
                    remap(c, 'autoGainControl', 'mozAutoGainControl');
                    remap(c, 'noiseSuppression', 'mozNoiseSuppression');
                  }

                  return nativeApplyConstraints.apply(this, [c]);
                };
              }
            }
          }
        },
        { '../utils': 26 },
      ],
      25: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          function _typeof2(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });

          const _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol'
            ? function (obj) {
              return _typeof2(obj);
            }
            : function (obj) {
              return obj
                    && typeof Symbol === 'function'
                    && obj.constructor === Symbol
                    && obj !== Symbol.prototype
                ? 'symbol'
                : _typeof2(obj);
            };

          exports.shimLocalStreamsAPI = shimLocalStreamsAPI;
          exports.shimRemoteStreamsAPI = shimRemoteStreamsAPI;
          exports.shimCallbacksAPI = shimCallbacksAPI;
          exports.shimGetUserMedia = shimGetUserMedia;
          exports.shimConstraints = shimConstraints;
          exports.shimRTCIceServerUrls = shimRTCIceServerUrls;
          exports.shimTrackEventTransceiver = shimTrackEventTransceiver;
          exports.shimCreateOfferLegacy = shimCreateOfferLegacy;
          exports.shimAudioContext = shimAudioContext;

          const _utils = require('../utils');

          const utils = _interopRequireWildcard(_utils);

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            }
            const newObj = {};

            if (obj != null) {
              for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }

          function shimLocalStreamsAPI(window) {
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object'
              || !window.RTCPeerConnection
            ) {
              return;
            }

            if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
              window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
                if (!this._localStreams) {
                  this._localStreams = [];
                }

                return this._localStreams;
              };
            }

            if (!('addStream' in window.RTCPeerConnection.prototype)) {
              const _addTrack = window.RTCPeerConnection.prototype.addTrack;

              window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
                const _this = this;

                if (!this._localStreams) {
                  this._localStreams = [];
                }

                if (!this._localStreams.includes(stream)) {
                  this._localStreams.push(stream);
                } // Try to emulate Chrome's behaviour of adding in audio-video order.
                // Safari orders by track id.

                stream.getAudioTracks().forEach((track) => _addTrack.call(_this, track, stream));
                stream.getVideoTracks().forEach((track) => _addTrack.call(_this, track, stream));
              };

              window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
                const _this2 = this;

                for (
                  var _len = arguments.length, streams = Array(_len > 1 ? _len - 1 : 0), _key = 1;
                  _key < _len;
                  _key++
                ) {
                  streams[_key - 1] = arguments[_key];
                }

                if (streams) {
                  streams.forEach((stream) => {
                    if (!_this2._localStreams) {
                      _this2._localStreams = [stream];
                    } else if (!_this2._localStreams.includes(stream)) {
                      _this2._localStreams.push(stream);
                    }
                  });
                }

                return _addTrack.apply(this, arguments);
              };
            }

            if (!('removeStream' in window.RTCPeerConnection.prototype)) {
              window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
                const _this3 = this;

                if (!this._localStreams) {
                  this._localStreams = [];
                }

                const index = this._localStreams.indexOf(stream);

                if (index === -1) {
                  return;
                }

                this._localStreams.splice(index, 1);

                const tracks = stream.getTracks();
                this.getSenders().forEach((sender) => {
                  if (tracks.includes(sender.track)) {
                    _this3.removeTrack(sender);
                  }
                });
              };
            }
          }

          function shimRemoteStreamsAPI(window) {
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object'
              || !window.RTCPeerConnection
            ) {
              return;
            }

            if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
              window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
                return this._remoteStreams ? this._remoteStreams : [];
              };
            }

            if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
              Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
                get: function get() {
                  return this._onaddstream;
                },
                set: function set(f) {
                  const _this4 = this;

                  if (this._onaddstream) {
                    this.removeEventListener('addstream', this._onaddstream);
                    this.removeEventListener('track', this._onaddstreampoly);
                  }

                  this.addEventListener('addstream', (this._onaddstream = f));
                  this.addEventListener(
                    'track',
                    (this._onaddstreampoly = function (e) {
                      e.streams.forEach((stream) => {
                        if (!_this4._remoteStreams) {
                          _this4._remoteStreams = [];
                        }

                        if (_this4._remoteStreams.includes(stream)) {
                          return;
                        }

                        _this4._remoteStreams.push(stream);

                        const event = new Event('addstream');
                        event.stream = stream;

                        _this4.dispatchEvent(event);
                      });
                    }),
                  );
                },
              });
              const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;

              window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
                const pc = this;

                if (!this._onaddstreampoly) {
                  this.addEventListener(
                    'track',
                    (this._onaddstreampoly = function (e) {
                      e.streams.forEach((stream) => {
                        if (!pc._remoteStreams) {
                          pc._remoteStreams = [];
                        }

                        if (pc._remoteStreams.indexOf(stream) >= 0) {
                          return;
                        }

                        pc._remoteStreams.push(stream);

                        const event = new Event('addstream');
                        event.stream = stream;
                        pc.dispatchEvent(event);
                      });
                    }),
                  );
                }

                return origSetRemoteDescription.apply(pc, arguments);
              };
            }
          }

          function shimCallbacksAPI(window) {
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object'
              || !window.RTCPeerConnection
            ) {
              return;
            }

            const { prototype } = window.RTCPeerConnection;
            const origCreateOffer = prototype.createOffer;
            const origCreateAnswer = prototype.createAnswer;
            const { setLocalDescription } = prototype;
            const { setRemoteDescription } = prototype;
            const { addIceCandidate } = prototype;

            prototype.createOffer = function createOffer(successCallback, failureCallback) {
              const options = arguments.length >= 2 ? arguments[2] : arguments[0];
              const promise = origCreateOffer.apply(this, [options]);

              if (!failureCallback) {
                return promise;
              }

              promise.then(successCallback, failureCallback);
              return Promise.resolve();
            };

            prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
              const options = arguments.length >= 2 ? arguments[2] : arguments[0];
              const promise = origCreateAnswer.apply(this, [options]);

              if (!failureCallback) {
                return promise;
              }

              promise.then(successCallback, failureCallback);
              return Promise.resolve();
            };

            let withCallback = function withCallback(
              description,
              successCallback,
              failureCallback,
            ) {
              const promise = setLocalDescription.apply(this, [description]);

              if (!failureCallback) {
                return promise;
              }

              promise.then(successCallback, failureCallback);
              return Promise.resolve();
            };

            prototype.setLocalDescription = withCallback;

            withCallback = function withCallback(description, successCallback, failureCallback) {
              const promise = setRemoteDescription.apply(this, [description]);

              if (!failureCallback) {
                return promise;
              }

              promise.then(successCallback, failureCallback);
              return Promise.resolve();
            };

            prototype.setRemoteDescription = withCallback;

            withCallback = function withCallback(candidate, successCallback, failureCallback) {
              const promise = addIceCandidate.apply(this, [candidate]);

              if (!failureCallback) {
                return promise;
              }

              promise.then(successCallback, failureCallback);
              return Promise.resolve();
            };

            prototype.addIceCandidate = withCallback;
          }

          function shimGetUserMedia(window) {
            const navigator = window && window.navigator;

            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
              // shim not needed in Safari 12.1
              const { mediaDevices } = navigator;

              const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);

              navigator.mediaDevices.getUserMedia = function (constraints) {
                return _getUserMedia(shimConstraints(constraints));
              };
            }

            if (
              !navigator.getUserMedia
              && navigator.mediaDevices
              && navigator.mediaDevices.getUserMedia
            ) {
              navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {
                navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
              };
            }
          }

          function shimConstraints(constraints) {
            if (constraints && constraints.video !== undefined) {
              return { ...constraints, video: utils.compactObject(constraints.video) };
            }

            return constraints;
          }

          function shimRTCIceServerUrls(window) {
            if (!window.RTCPeerConnection) {
              return;
            } // migrate from non-spec RTCIceServer.url to RTCIceServer.urls

            const OrigPeerConnection = window.RTCPeerConnection;

            window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
              if (pcConfig && pcConfig.iceServers) {
                const newIceServers = [];

                for (let i = 0; i < pcConfig.iceServers.length; i++) {
                  let server = pcConfig.iceServers[i];

                  if (!server.hasOwnProperty('urls') && server.hasOwnProperty('url')) {
                    utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
                    server = JSON.parse(JSON.stringify(server));
                    server.urls = server.url;
                    delete server.url;
                    newIceServers.push(server);
                  } else {
                    newIceServers.push(pcConfig.iceServers[i]);
                  }
                }

                pcConfig.iceServers = newIceServers;
              }

              return new OrigPeerConnection(pcConfig, pcConstraints);
            };

            window.RTCPeerConnection.prototype = OrigPeerConnection.prototype; // wrap static methods. Currently just generateCertificate.

            if ('generateCertificate' in OrigPeerConnection) {
              Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
                get: function get() {
                  return OrigPeerConnection.generateCertificate;
                },
              });
            }
          }

          function shimTrackEventTransceiver(window) {
            // Add event.transceiver member over deprecated event.receiver
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object'
              && window.RTCTrackEvent
              && 'receiver' in window.RTCTrackEvent.prototype
              && !('transceiver' in window.RTCTrackEvent.prototype)
            ) {
              Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
                get: function get() {
                  return {
                    receiver: this.receiver,
                  };
                },
              });
            }
          }

          function shimCreateOfferLegacy(window) {
            const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;

            window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
              if (offerOptions) {
                if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
                  // support bit values
                  offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
                }

                const audioTransceiver = this.getTransceivers().find((transceiver) => transceiver.receiver.track.kind === 'audio');

                if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
                  if (audioTransceiver.direction === 'sendrecv') {
                    if (audioTransceiver.setDirection) {
                      audioTransceiver.setDirection('sendonly');
                    } else {
                      audioTransceiver.direction = 'sendonly';
                    }
                  } else if (audioTransceiver.direction === 'recvonly') {
                    if (audioTransceiver.setDirection) {
                      audioTransceiver.setDirection('inactive');
                    } else {
                      audioTransceiver.direction = 'inactive';
                    }
                  }
                } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
                  this.addTransceiver('audio');
                }

                if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
                  // support bit values
                  offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
                }

                const videoTransceiver = this.getTransceivers().find((transceiver) => transceiver.receiver.track.kind === 'video');

                if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
                  if (videoTransceiver.direction === 'sendrecv') {
                    if (videoTransceiver.setDirection) {
                      videoTransceiver.setDirection('sendonly');
                    } else {
                      videoTransceiver.direction = 'sendonly';
                    }
                  } else if (videoTransceiver.direction === 'recvonly') {
                    if (videoTransceiver.setDirection) {
                      videoTransceiver.setDirection('inactive');
                    } else {
                      videoTransceiver.direction = 'inactive';
                    }
                  }
                } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
                  this.addTransceiver('video');
                }
              }

              return origCreateOffer.apply(this, arguments);
            };
          }

          function shimAudioContext(window) {
            if (
              (typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object'
              || window.AudioContext
            ) {
              return;
            }

            window.AudioContext = window.webkitAudioContext;
          }
        },
        { '../utils': 26 },
      ],
      26: [
        function (require, module, exports) {
          /*
           *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
           *
           *  Use of this source code is governed by a BSD-style license
           *  that can be found in the LICENSE file in the root of the source
           *  tree.
           */

          /* eslint-env node */

          function _typeof2(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof2 = function _typeof2(obj) {
                return typeof obj;
              };
            } else {
              _typeof2 = function _typeof2(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof2(obj);
          }

          Object.defineProperty(exports, '__esModule', {
            value: true,
          });

          const _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol'
            ? function (obj) {
              return _typeof2(obj);
            }
            : function (obj) {
              return obj
                    && typeof Symbol === 'function'
                    && obj.constructor === Symbol
                    && obj !== Symbol.prototype
                ? 'symbol'
                : _typeof2(obj);
            };

          exports.extractVersion = extractVersion;
          exports.wrapPeerConnectionEvent = wrapPeerConnectionEvent;
          exports.disableLog = disableLog;
          exports.disableWarnings = disableWarnings;
          exports.log = log;
          exports.deprecated = deprecated;
          exports.detectBrowser = detectBrowser;
          exports.compactObject = compactObject;
          exports.walkStats = walkStats;
          exports.filterStats = filterStats;

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true,
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          let logDisabled_ = true;
          let deprecationWarnings_ = true;
          /**
           * Extract browser version out of the provided user agent string.
           *
           * @param {!string} uastring userAgent string.
           * @param {!string} expr Regular expression used as match criteria.
           * @param {!number} pos position in the version string to be returned.
           * @return {!number} browser version.
           */

          function extractVersion(uastring, expr, pos) {
            const match = uastring.match(expr);
            return match && match.length >= pos && parseInt(match[pos], 10);
          } // Wraps the peerconnection event eventNameToWrap in a function
          // which returns the modified event object (or false to prevent
          // the event).

          function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
            if (!window.RTCPeerConnection) {
              return;
            }

            const proto = window.RTCPeerConnection.prototype;
            const nativeAddEventListener = proto.addEventListener;

            proto.addEventListener = function (nativeEventName, cb) {
              if (nativeEventName !== eventNameToWrap) {
                return nativeAddEventListener.apply(this, arguments);
              }

              const wrappedCallback = function wrappedCallback(e) {
                const modifiedEvent = wrapper(e);

                if (modifiedEvent) {
                  if (cb.handleEvent) {
                    cb.handleEvent(modifiedEvent);
                  } else {
                    cb(modifiedEvent);
                  }
                }
              };

              this._eventMap = this._eventMap || {};

              if (!this._eventMap[eventNameToWrap]) {
                this._eventMap[eventNameToWrap] = new Map();
              }

              this._eventMap[eventNameToWrap].set(cb, wrappedCallback);

              return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);
            };

            const nativeRemoveEventListener = proto.removeEventListener;

            proto.removeEventListener = function (nativeEventName, cb) {
              if (
                nativeEventName !== eventNameToWrap
                || !this._eventMap
                || !this._eventMap[eventNameToWrap]
              ) {
                return nativeRemoveEventListener.apply(this, arguments);
              }

              if (!this._eventMap[eventNameToWrap].has(cb)) {
                return nativeRemoveEventListener.apply(this, arguments);
              }

              const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);

              this._eventMap[eventNameToWrap].delete(cb);

              if (this._eventMap[eventNameToWrap].size === 0) {
                delete this._eventMap[eventNameToWrap];
              }

              if (Object.keys(this._eventMap).length === 0) {
                delete this._eventMap;
              }

              return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);
            };

            Object.defineProperty(proto, `on${eventNameToWrap}`, {
              get: function get() {
                return this[`_on${eventNameToWrap}`];
              },
              set: function set(cb) {
                if (this[`_on${eventNameToWrap}`]) {
                  this.removeEventListener(eventNameToWrap, this[`_on${eventNameToWrap}`]);
                  delete this[`_on${eventNameToWrap}`];
                }

                if (cb) {
                  this.addEventListener(eventNameToWrap, (this[`_on${eventNameToWrap}`] = cb));
                }
              },
              enumerable: true,
              configurable: true,
            });
          }

          function disableLog(bool) {
            if (typeof bool !== 'boolean') {
              return new Error(
                `Argument type: ${
                  typeof bool === 'undefined' ? 'undefined' : _typeof(bool)
                }. Please use a boolean.`,
              );
            }

            logDisabled_ = bool;
            return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';
          }
          /**
           * Disable or enable deprecation warnings
           * @param {!boolean} bool set to true to disable warnings.
           */

          function disableWarnings(bool) {
            if (typeof bool !== 'boolean') {
              return new Error(
                `Argument type: ${
                  typeof bool === 'undefined' ? 'undefined' : _typeof(bool)
                }. Please use a boolean.`,
              );
            }

            deprecationWarnings_ = !bool;
            return `adapter.js deprecation warnings ${bool ? 'disabled' : 'enabled'}`;
          }

          function log() {
            if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
              if (logDisabled_) {
                return;
              }

              if (typeof console !== 'undefined' && typeof console.log === 'function') {
                console.log.apply(console, arguments);
              }
            }
          }
          /**
           * Shows a deprecation warning suggesting the modern and spec-compatible API.
           */

          function deprecated(oldMethod, newMethod) {
            if (!deprecationWarnings_) {
              return;
            }

            console.warn(`${oldMethod} is deprecated, please use ${newMethod} instead.`);
          }
          /**
           * Browser detector.
           *
           * @return {object} result containing browser and version
           *     properties.
           */

          function detectBrowser(window) {
            // Returned result object.
            const result = {
              browser: null,
              version: null,
            }; // Fail early if it's not a browser

            if (typeof window === 'undefined' || !window.navigator) {
              result.browser = 'Not a browser.';
              return result;
            }

            const { navigator } = window;

            if (navigator.mozGetUserMedia) {
              // Firefox.
              result.browser = 'firefox';
              result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
            } else if (
              navigator.webkitGetUserMedia
              || (window.isSecureContext === false
                && window.webkitRTCPeerConnection
                && !window.RTCIceGatherer)
            ) {
              // Chrome, Chromium, Webview, Opera.
              // Version matches Chrome/WebRTC version.
              // Chrome 74 removed webkitGetUserMedia on http as well so we need the
              // more complicated fallback to webkitRTCPeerConnection.
              result.browser = 'chrome';
              result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
            } else if (navigator.mediaDevices && navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) {
              // Edge.
              result.browser = 'edge';
              result.version = extractVersion(navigator.userAgent, /Edge\/(\d+).(\d+)$/, 2);
            } else if (
              window.RTCPeerConnection
              && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)
            ) {
              // Safari.
              result.browser = 'safari';
              result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
              result.supportsUnifiedPlan = window.RTCRtpTransceiver
                && 'currentDirection' in window.RTCRtpTransceiver.prototype;
            } else {
              // Default fallthrough: not supported.
              result.browser = 'Not a supported browser.';
              return result;
            }

            return result;
          }
          /**
           * Checks if something is an object.
           *
           * @param {*} val The something you want to check.
           * @return true if val is an object, false otherwise.
           */

          function isObject(val) {
            return Object.prototype.toString.call(val) === '[object Object]';
          }
          /**
           * Remove all empty objects and undefined values
           * from a nested object -- an enhanced and vanilla version
           * of Lodash's `compact`.
           */

          function compactObject(data) {
            if (!isObject(data)) {
              return data;
            }

            return Object.keys(data).reduce((accumulator, key) => {
              const isObj = isObject(data[key]);
              const value = isObj ? compactObject(data[key]) : data[key];
              const isEmptyObject = isObj && !Object.keys(value).length;

              if (value === undefined || isEmptyObject) {
                return accumulator;
              }

              return Object.assign(accumulator, _defineProperty({}, key, value));
            }, {});
          }
          /* iterates the stats graph recursively. */

          function walkStats(stats, base, resultSet) {
            if (!base || resultSet.has(base.id)) {
              return;
            }

            resultSet.set(base.id, base);
            Object.keys(base).forEach((name) => {
              if (name.endsWith('Id')) {
                walkStats(stats, stats.get(base[name]), resultSet);
              } else if (name.endsWith('Ids')) {
                base[name].forEach((id) => {
                  walkStats(stats, stats.get(id), resultSet);
                });
              }
            });
          }
          /* filter getStats for a sender/receiver track. */

          function filterStats(result, track, outbound) {
            const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
            const filteredResult = new Map();

            if (track === null) {
              return filteredResult;
            }

            const trackStats = [];
            result.forEach((value) => {
              if (value.type === 'track' && value.trackIdentifier === track.id) {
                trackStats.push(value);
              }
            });
            trackStats.forEach((trackStat) => {
              result.forEach((stats) => {
                if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
                  walkStats(result, stats, filteredResult);
                }
              });
            });
            return filteredResult;
          }
        },
        {},
      ],
      27: [
        function (require, module, exports) {
          function _typeof(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof = function _typeof(obj) {
                return typeof obj;
              };
            } else {
              _typeof = function _typeof(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof(obj);
          }

          const _0x8674 = [
            'feedDecoder',
            'postMessage',
            'now',
            'getBufferTimeLength',
            'Unknown\x20request',
            'bind',
            'audioChunkLength',
            'context',
            'sampleRate',
            'videoWidth',
            'videoHeight',
            'token',
            'dropDelayMultiplier',
            'Failed\x20to\x20init\x20stream\x20receiver\x20',
            'videoDecoder',
            'decoderPath',
            'onmessage',
            'No\x20timestamp\x20available\x20for\x20decoded\x20picture,\x20discarding',
            'shift',
            'STOPPED',
            'audioBuffer',
            'sync',
            'start',
            'setVolume',
            'requestVideoFrameCallback',
            'Failed\x20to\x20init\x20video\x20decoder\x20',
            'fps',
            'framesRendered',
            'noDataSince',
            'prototype',
            'receivedIframe',
            'lastPlayedVideoTime',
            'kframe',
            'decode',
            'payload',
            'play',
            'stream',
            'STARTUP',
            'playFirstSound',
            'createBuffer',
            'getChannelData',
            'random',
            'createBufferSource',
            'buffer',
            'connect',
            'destination',
            'mute',
            'PAUSED',
            'unmute',
            'resume',
            'getVolume',
            'lastFpsTime',
            'lastPlayedVideoTimestamp',
            'log',
            'trace',
            'requestVideoFrameCallback,\x20audio\x20player\x20time\x20',
            '\x20callback\x20timestamp\x20',
            'render',
            'playing',
            'dispatchEvent',
            'riseApiEvent',
            'lastEventRised',
            'PLAYBACK_PROBLEM',
            'logToCanvas',
            'ctx2D',
            'height',
            'fillStyle',
            'black',
            'font',
            'textAlign',
            'center',
            'width',
            '40pt',
            'fillText',
            'initLogger',
            'verbosity',
            'console',
            'apply',
            'warn',
            'wsLogger',
            'debug',
            'renderFunction',
            'force2D',
            'YTexture',
            'CBTexture',
            'CRTexture',
            'RGBTexture',
            'rgbaBuffer',
            'mbWidth',
            'codedWidth',
            'halfWidth',
            'precision\x20mediump\x20float;',
            'uniform\x20sampler2D\x20CBTexture;',
            'void\x20main()\x20{',
            'float\x20y\x20=\x20texture2D(YTexture,\x20texCoord).r;',
            'float\x20cb\x20=\x20texture2D(CBTexture,\x20texCoord).r\x20-\x200.5;',
            'gl_FragColor\x20=\x20vec4(',
            'y\x20+\x20-0.343\x20*\x20cb\x20-\x200.711\x20*\x20cr,',
            '1.0',
            'join',
            'attribute\x20vec2\x20vertex;',
            'varying\x20vec2\x20texCoord;',
            'texCoord\x20=\x20vertex;',
            'gl_Position\x20=\x20vec4((vertex\x20*\x202.0\x20-\x201.0)\x20*\x20vec2(1,\x20-1),\x200.0,\x201.0);',
            'SHADER_VERTEX_IDENTITY_RGBA',
            'varying\x20vec2\x20tc;',
            'void\x20main(){',
            'gl_Position\x20=\x20vertex;',
            'SHADER_FRAGMENT_RGBA',
            'uniform\x20sampler2D\x20RGBTexture;',
            'gl_FragColor\x20=\x20texture2D(RGBTexture,\x20tc);',
            'getContext',
            'experimental-webgl',
            'inputFormat',
            'rgba',
            'initWebGLRGB',
            'initWebGLYUV',
            'renderFrame2D',
            'bindBuffer',
            'ARRAY_BUFFER',
            'bufferData',
            'STATIC_DRAW',
            'program',
            'attachShader',
            'compileShader',
            'SHADER_VERTEX_IDENTITY_YUV',
            'FRAGMENT_SHADER',
            'SHADER_FRAGMENT_YCBCRTORGBA',
            'linkProgram',
            'getProgramParameter',
            'Failed\x20to\x20init\x20WebGL!\x20Message\x20',
            'getProgramInfoLog',
            'useProgram',
            'createTexture',
            'getAttribLocation',
            'vertex',
            'enableVertexAttribArray',
            'vertexAttribPointer',
            'createProgram',
            'bindAttribLocation',
            'FLOAT',
            'renderFrameGLRGB',
            'undefined',
            'createImageData',
            'putImageData',
            'clear',
            'COLOR_BUFFER_BIT',
            'DEPTH_BUFFER_BIT',
            'TEXTURE_2D',
            'texParameteri',
            'TEXTURE_MAG_FILTER',
            'LINEAR',
            'TEXTURE_MIN_FILTER',
            'CLAMP_TO_EDGE',
            'TEXTURE_WRAP_T',
            'getUniformLocation',
            'createShader',
            'getShaderParameter',
            'COMPILE_STATUS',
            'getShaderInfoLog',
            'isUsingWebGL',
            'activeTexture',
            'bindTexture',
            'texImage2D',
            'LUMINANCE',
            'UNSIGNED_BYTE',
            'TEXTURE1',
            'TEXTURE2',
            'drawArrays',
            'TRIANGLE_STRIP',
            'TEXTURE0',
            'RGBA',
            'TRIANGLES',
            'type',
            'YCbCrToRGBA',
            'set',
            'Changing\x20canvas\x20resolution\x20from\x20',
            '\x20to\x20',
            'lastTimeRendered',
            'getLastTimeRendered',
            'nodeConnected',
            'gainNode',
            'createGain',
            'abs',
            'Audio\x20node\x20buffer\x20size\x20',
            'internalBufferSize',
            'createScriptProcessor',
            'audioJSNode',
            'previousSync',
            'lastSync',
            'lastSyncTime',
            'playbackTime',
            'value',
            'disconnect',
            'resetBuffers',
            'playAudio',
            'getBufferLength',
            'currentTime',
            'audioChunkTimeLength',
            'No\x20audio!\x20',
            'previousSyncTime',
            'Audio\x20player\x20mute',
            'gain',
            'Audio\x20player\x20resume',
            'setTimeout',
            'state',
            'initialized',
            'init',
            'canvas',
            'api',
            'configuration',
            'initBuffers',
            'initialVolume',
            'audioPlayer',
            'error',
            'Failed\x20to\x20init\x20audio\x20player\x20',
            'yuv',
            'videoRenderer',
            'Failed\x20to\x20init\x20video\x20renderer\x20',
            'receiver',
            'terminate',
            'receiverPath',
            'addEventListener',
            'message',
            'data',
            'status',
            'failed',
            'closed',
            'stop',
            'AVData',
            'audioLength',
            'audioReceived',
            'audio',
            'length',
            'videoLength',
            'Received\x20video,\x20frames:',
            'videoReceived',
            'video',
            'videoBuffer',
            'push',
            'videoFrameTimeLength',
            'getCurrentSync',
            'PLAYING',
            'muted',
            'decodedVideoBuffer',
            'tsVideoWaitingList',
          ];

          (function (_0x56e2ba, _0x54ffbb) {
            const _0x53abc2 = function _0x53abc2(_0x5bd6fa) {
              while (--_0x5bd6fa) {
                _0x56e2ba.push(_0x56e2ba.shift());
              }
            };

            _0x53abc2(++_0x54ffbb);
          }(_0x8674, 0x1c2));

          const _0x162a = function _0x162a(_0x289e5c, _0x18e4c1) {
            _0x289e5c -= 0x0;
            const _0x1d4b0e = _0x8674[_0x289e5c];
            return _0x1d4b0e;
          };

          const requestAnimFrame = (function () {
            return function (_0x452c50) {
              window[_0x162a('0x0')](_0x452c50, 0x3e8 / 0x1e);
            };
          }());

          function WSPlayer() {
            this[_0x162a('0x1')] = WSPlayerState.STOPPED;
            this[_0x162a('0x2')] = ![];
          }

          WSPlayer.prototype[_0x162a('0x3')] = function (_0x566b31, _0x2633b5, _0x439354) {
            this.canvas = _0x566b31[_0x162a('0x4')];
            this[_0x162a('0x5')] = _0x566b31[_0x162a('0x5')];
            this[_0x162a('0x6')] = _0x566b31;

            this[_0x162a('0x7')]();

            this[_0x162a('0x8')] = -0x1;

            try {
              this[_0x162a('0x9')] = new AudioPlayer(_0x2633b5);
            } catch (_0x388ad2) {
              wsLogger[_0x162a('0xa')](_0x162a('0xb') + _0x388ad2);

              return;
            }

            try {
              this.videoRenderer = new VideoRenderer(this[_0x162a('0x4')], ![], _0x162a('0xc'));

              this[_0x162a('0xd')].init();
            } catch (_0x4a3ba3) {
              wsLogger.error(_0x162a('0xe') + _0x4a3ba3);
              return;
            }

            if (!_0x439354) {
              try {
                if (this[_0x162a('0xf')]) {
                  this[_0x162a('0xf')][_0x162a('0x10')]();
                }

                this[_0x162a('0xf')] = new Worker(_0x566b31[_0x162a('0x11')]);

                this.receiver[_0x162a('0x12')](
                  _0x162a('0x13'),
                  function (_0xd32be3) {
                    switch (_0xd32be3[_0x162a('0x14')][_0x162a('0x13')]) {
                      case 'connection':
                        if (
                          _0xd32be3[_0x162a('0x14')][_0x162a('0x15')] == _0x162a('0x16')
                          || _0xd32be3[_0x162a('0x14')][_0x162a('0x15')] == _0x162a('0x17')
                        ) {
                          this[_0x162a('0x18')]();

                          this[_0x162a('0x2')] = ![];
                        }

                        break;

                      case _0x162a('0x19'):
                        var _0x223990;

                        if (_0xd32be3[_0x162a('0x14')][_0x162a('0x1a')] > 0x0) {
                          this[_0x162a('0x1b')] = !![];

                          for (
                            _0x223990 = 0x0;
                            _0x223990
                            < _0xd32be3[_0x162a('0x14')][_0x162a('0x1c')][_0x162a('0x1d')];
                            _0x223990++
                          ) {
                            this[_0x162a('0x9')].playAudio(
                              _0xd32be3.data.audio[_0x223990],
                            );
                          }
                        }

                        if (_0xd32be3[_0x162a('0x14')][_0x162a('0x1e')] > 0x0) {
                          wsLogger.debug(
                            _0x162a('0x1f') + _0xd32be3[_0x162a('0x14')].videoLength,
                          );
                          this[_0x162a('0x20')] = !![];

                          for (
                            _0x223990 = 0x0;
                            _0x223990
                            < _0xd32be3[_0x162a('0x14')][_0x162a('0x21')][_0x162a('0x1d')];
                            _0x223990++
                          ) {
                            this[_0x162a('0x22')][_0x162a('0x23')](
                              _0xd32be3[_0x162a('0x14')].video[_0x223990],
                            );
                          }

                          this[_0x162a('0x24')] = _0xd32be3[_0x162a('0x14')][_0x162a('0x1e')]
                            / _0xd32be3.data.video[_0x162a('0x1d')];
                        }

                        var _0x3677b1 = this[_0x162a('0x9')][_0x162a('0x25')]();

                        if (this[_0x162a('0x22')][_0x162a('0x1d')] > 0x0) {
                          if (this[_0x162a('0x1')] == WSPlayerState[_0x162a('0x26')]) {
                            if (this[_0x162a('0xd')][_0x162a('0x27')]) {
                              this[_0x162a('0x28')][_0x162a('0x1d')] = 0x0;
                              this[_0x162a('0x29')][_0x162a('0x1d')] = 0x0;

                              while (this[_0x162a('0x22')][_0x162a('0x1d')] > 0x0) {
                                if (this.videoBuffer[0x0].ts < _0x3677b1 + 0x32) {
                                  this.feedDecoder();
                                } else {
                                  break;
                                }
                              }
                            } else if (this[_0x162a('0x29')][_0x162a('0x1d')] < 0x2) {
                              this.feedDecoder();
                            }
                          } else {
                            while (this[_0x162a('0x2a')]()) {}
                          }
                        }

                        this.receiver[_0x162a('0x2b')]({
                          message: 'ack',
                          data: {
                            seq: _0xd32be3[_0x162a('0x14')].seq,
                            time: Date[_0x162a('0x2c')](),
                            audioReceivedLength: _0xd32be3[_0x162a('0x14')][_0x162a('0x1a')],
                            videoReceivedLength: _0xd32be3[_0x162a('0x14')][_0x162a('0x1e')],
                            audioCurrentTime: _0x3677b1,
                            audioBufferTimeLength: this.audioPlayer[_0x162a('0x2d')](),
                            videoBufferTimeLength:
                              (this[_0x162a('0x22')].length
                                + this[_0x162a('0x29')][_0x162a('0x1d')]
                                + this[_0x162a('0x28')].length)
                              * this[_0x162a('0x24')],
                          },
                        });

                        break;

                      default:
                        wsLogger[_0x162a('0xa')](_0x162a('0x2e'));
                    }
                  }[_0x162a('0x2f')](this),
                  ![],
                );

                const _0x56370c = {};
                _0x56370c[_0x162a('0x30')] = this[_0x162a('0x9')].internalBufferSize;
                _0x56370c.audioContextSampleRate = this[_0x162a('0x9')][_0x162a('0x31')][
                  _0x162a('0x32')
                ];
                _0x56370c[_0x162a('0x33')] = _0x566b31[_0x162a('0x33')];
                _0x56370c[_0x162a('0x34')] = _0x566b31[_0x162a('0x34')];
                _0x56370c.urlWsServer = _0x566b31.urlWsServer;
                _0x56370c[_0x162a('0x35')] = _0x566b31[_0x162a('0x35')];
                _0x56370c.audioBufferWaitFor = _0x566b31.audioBufferWaitFor;
                _0x56370c.videoBufferWaitFor = _0x566b31.videoBufferWaitFor;
                _0x56370c.dropDelayMultiplier = _0x566b31[_0x162a('0x36')];

                this[_0x162a('0xf')][_0x162a('0x2b')]({
                  message: _0x162a('0x3'),
                  data: _0x56370c,
                });
              } catch (_0x2e5046) {
                wsLogger[_0x162a('0xa')](_0x162a('0x37') + _0x2e5046);

                return;
              }
            }

            try {
              if (this[_0x162a('0x38')]) {
                this[_0x162a('0x38')][_0x162a('0x10')]();
              }

              this[_0x162a('0x38')] = new Worker(_0x566b31[_0x162a('0x39')]);

              this.videoDecoder[_0x162a('0x3a')] = function (_0x67846e) {
                if (this[_0x162a('0x29')][_0x162a('0x1d')] == 0x0) {
                  wsLogger.warn(_0x162a('0x3b'));
                  return;
                }

                _0x67846e.data.sync = this[_0x162a('0x29')][_0x162a('0x3c')]();
                this.decodedVideoBuffer.push(_0x67846e[_0x162a('0x14')]);

                if (
                  this.state != WSPlayerState.PLAYING
                  && this[_0x162a('0x1')] != WSPlayerState[_0x162a('0x3d')]
                ) {
                  if (this[_0x162a('0x28')][_0x162a('0x1d')] < 0x5) {
                    if (
                      this[_0x162a('0x28')].length > 0x1
                      && this[_0x162a('0x9')][_0x162a('0x3e')][_0x162a('0x1d')] > 0x0
                    ) {
                      if (
                        this[_0x162a('0x9')][_0x162a('0x3e')][0x0][_0x162a('0x3f')]
                        > this.decodedVideoBuffer[0x0].sync
                      ) {
                        this[_0x162a('0x28')][0x0] = null;

                        this[_0x162a('0x28')].shift();
                      }
                    }

                    this[_0x162a('0x2a')]();
                  } else {
                    this[_0x162a('0x1')] = WSPlayerState.PLAYING;

                    this.audioPlayer[_0x162a('0x40')]();

                    if (this[_0x162a('0x8')] != -0x1) {
                      this[_0x162a('0x41')](this[_0x162a('0x8')]);

                      this[_0x162a('0x8')] = -0x1;
                    }

                    requestAnimFrame(this[_0x162a('0x42')].bind(this));
                  }
                } else if (this[_0x162a('0x29')][_0x162a('0x1d')] < 0x2) {
                  this.feedDecoder();
                }
              }[_0x162a('0x2f')](this);

              this[_0x162a('0x38')][_0x162a('0x2b')]({
                message: 'init',
                width: _0x566b31[_0x162a('0x33')],
                height: _0x566b31[_0x162a('0x34')],
                outputGl: !![],
              });
            } catch (_0x5236ab) {
              wsLogger[_0x162a('0xa')](_0x162a('0x43') + _0x5236ab);

              return;
            }

            this[_0x162a('0x44')] = 0x0;
            this.lastFpsTime = 0x0;
            this[_0x162a('0x45')] = 0x0;
            this.noDataFlag = ![];
            this[_0x162a('0x46')] = 0x0;
            this.initialized = !![];
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x7')] = function () {
            this[_0x162a('0x1b')] = ![];
            this[_0x162a('0x20')] = ![];

            if (this[_0x162a('0x22')]) {
              this[_0x162a('0x22')][_0x162a('0x1d')] = 0x0;
            } else {
              this[_0x162a('0x22')] = [];
            }

            if (this.tsVideoWaitingList) {
              this[_0x162a('0x29')][_0x162a('0x1d')] = 0x0;
            } else {
              this[_0x162a('0x29')] = [];
            }

            if (this.decodedVideoBuffer) {
              this[_0x162a('0x28')].length = 0x0;
            } else {
              this[_0x162a('0x28')] = [];
            }

            this[_0x162a('0x48')] = ![];
            this[_0x162a('0x49')] = 0x0;
            this.lastPlayedVideoTimestamp = 0x0;
          };

          WSPlayer.prototype[_0x162a('0x2a')] = function () {
            if (this[_0x162a('0x22')][_0x162a('0x1d')] > 0x0) {
              if (this[_0x162a('0x48')] || this[_0x162a('0x22')][0x0][_0x162a('0x4a')]) {
                this[_0x162a('0x48')] = !![];

                if (!this.videoRenderer[_0x162a('0x27')]) {
                  this.tsVideoWaitingList[_0x162a('0x23')](this[_0x162a('0x22')][0x0].ts);
                }

                this.videoDecoder[_0x162a('0x2b')](
                  {
                    message: _0x162a('0x4b'),
                    skip: this[_0x162a('0xd')][_0x162a('0x27')],
                    data: this[_0x162a('0x22')][0x0][_0x162a('0x4c')],
                  },
                  [this.videoBuffer[0x0][_0x162a('0x4c')].buffer],
                );

                this[_0x162a('0x22')][0x0] = null;

                this[_0x162a('0x22')][_0x162a('0x3c')]();

                return !![];
              }

              this[_0x162a('0x22')][0x0] = null;

              this.videoBuffer[_0x162a('0x3c')]();
            }
          };

          WSPlayer.prototype[_0x162a('0x4d')] = function (_0x394048) {
            if (!this.initialized) {
              wsLogger.error('Can\x27t\x20play\x20stream,\x20player\x20not\x20initialized!');
              return;
            }

            this[_0x162a('0x7')]();

            this.receiver[_0x162a('0x2b')]({
              message: _0x162a('0x4d'),
            });

            this[_0x162a('0x4e')] = _0x394048;
            this.unmute();
            this[_0x162a('0x1')] = WSPlayerState[_0x162a('0x4f')];
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x50')] = function () {
            const _0x17a93a = this[_0x162a('0x9')][_0x162a('0x31')][_0x162a('0x51')](
              0x1,
              0x1b9,
              0xac44,
            );

            const _0x311ab3 = _0x17a93a[_0x162a('0x52')](0x0);

            for (let _0x455a72 = 0x0; _0x455a72 < _0x311ab3.length; _0x455a72++) {
              _0x311ab3[_0x455a72] = Math[_0x162a('0x53')]() * 0x2 - 0x1;
            }

            const _0x2b7b90 = this[_0x162a('0x9')][_0x162a('0x31')][_0x162a('0x54')]();

            _0x2b7b90[_0x162a('0x55')] = _0x17a93a;

            _0x2b7b90[_0x162a('0x56')](this.audioPlayer[_0x162a('0x31')][_0x162a('0x57')]);

            _0x2b7b90[_0x162a('0x40')](0x0);
          };

          WSPlayer[_0x162a('0x47')].pause = function () {
            this[_0x162a('0x58')]();

            this[_0x162a('0xf')][_0x162a('0x2b')]({
              message: 'pause',
            });

            this[_0x162a('0x1')] = WSPlayerState[_0x162a('0x59')];
          };

          WSPlayer.prototype[_0x162a('0x58')] = function () {
            if (this[_0x162a('0x9')]) {
              this[_0x162a('0x9')][_0x162a('0x58')](!![]);
            }

            if (this[_0x162a('0xd')]) {
              this[_0x162a('0xd')][_0x162a('0x58')](!![]);
            }
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x5a')] = function () {
            if (this.audioPlayer) {
              this[_0x162a('0x9')].mute(![]);
            }

            if (this.videoRenderer) {
              this[_0x162a('0xd')][_0x162a('0x58')](![]);
            }
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x5b')] = function () {
            this[_0x162a('0x7')]();

            this[_0x162a('0x1')] = WSPlayerState[_0x162a('0x4f')];

            this[_0x162a('0xf')][_0x162a('0x2b')]({
              message: _0x162a('0x5b'),
            });

            this.unmute();
          };

          WSPlayer.prototype.setVolume = function (_0x5a1f09) {
            if (this[_0x162a('0x1')] == WSPlayerState[_0x162a('0x26')]) {
              this[_0x162a('0x9')][_0x162a('0x41')](_0x5a1f09);
            } else {
              this[_0x162a('0x8')] = _0x5a1f09;
            }
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x5c')] = function () {
            return this[_0x162a('0x9')].getVolume();
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x18')] = function () {
            this.state = WSPlayerState[_0x162a('0x3d')];

            if (this[_0x162a('0xf')]) {
              this[_0x162a('0xf')][_0x162a('0x2b')]({
                message: _0x162a('0x18'),
              });
            }

            if (this[_0x162a('0x9')]) {
              this[_0x162a('0x9')].stop();
            }

            if (this[_0x162a('0xd')]) {
              this[_0x162a('0xd')][_0x162a('0x18')]();
            }

            this.fps = 0x0;
            this[_0x162a('0x5d')] = 0x0;
            this[_0x162a('0x45')] = 0x0;
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x42')] = function (_0x253d91) {
            if (this[_0x162a('0x1')] != WSPlayerState[_0x162a('0x26')]) {
              return;
            }

            if (this[_0x162a('0x28')][_0x162a('0x1d')] > 0x0) {
              let _0x813081 = this[_0x162a('0x9')][_0x162a('0x25')]();

              if (_0x813081 == -0x1) {
                const _0x44a14e = Date[_0x162a('0x2c')]();

                if (this[_0x162a('0x49')] == 0x0) {
                  _0x813081 = this[_0x162a('0x28')][0x0].sync;
                  this[_0x162a('0x49')] = _0x44a14e;
                  this[_0x162a('0x5e')] = _0x813081;

                  wsLogger[_0x162a('0x5f')](
                    `Init\x20Video\x20playout\x20without\x20sync,\x20currentTime\x20${
                      _0x44a14e
                    },\x20timestamp\x20${
                      this.lastPlayedVideoTimestamp}`,
                  );
                } else {
                  const _0x393d46 = _0x44a14e - this[_0x162a('0x49')];

                  const _0x160d46 = this.decodedVideoBuffer[0x0][_0x162a('0x3f')]
                    - this.lastPlayedVideoTimestamp;

                  if (_0x393d46 >= _0x160d46) {
                    _0x813081 = this[_0x162a('0x28')][0x0].sync;
                    this[_0x162a('0x49')] += _0x160d46;
                    this[_0x162a('0x5e')] = _0x813081;
                  } else {
                    _0x813081 = this[_0x162a('0x28')][0x0][_0x162a('0x3f')] - 0x1;
                  }
                }
              }

              wsLogger[_0x162a('0x60')](_0x162a('0x61') + _0x813081 + _0x162a('0x62') + _0x253d91);

              if (
                _0x813081 - this[_0x162a('0x28')][0x0][_0x162a('0x3f')] > 0x64
                && this[_0x162a('0x28')].length > 0x1
              ) {
                this[_0x162a('0x28')][_0x162a('0x3c')]();
              }

              if (this[_0x162a('0x28')][0x0][_0x162a('0x3f')] <= _0x813081) {
                this.videoRenderer[_0x162a('0x63')](this[_0x162a('0x28')].shift());

                this.framesRendered++;

                if (this[_0x162a('0x45')] == 0x1) {
                  const _0x2e90ca = this[_0x162a('0x4')];

                  setTimeout(() => {
                    const _0x1e1c6f = new CustomEvent(_0x162a('0x64'));

                    _0x2e90ca[_0x162a('0x65')](_0x1e1c6f);
                  }, 0xa);
                }
              }
            }

            if (this[_0x162a('0x29')][_0x162a('0x1d')] < 0x3) {
              this.feedDecoder();
            }

            requestAnimFrame(this[_0x162a('0x42')].bind(this));
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x66')] = function (_0x35dabe) {
            if (this[_0x162a('0x67')]) {
              if (Date[_0x162a('0x2c')]() - this.lastEventRised < 0x3e8) {
                return;
              }
            }

            const _0x54b410 = {
              status: _0x162a('0x68'),
              info: _0x35dabe,
            };

            this[_0x162a('0x5')](_0x54b410);

            this[_0x162a('0x67')] = Date.now();
          };

          WSPlayer[_0x162a('0x47')][_0x162a('0x69')] = function (_0x3c7c23) {
            const _0x248bc3 = this[_0x162a('0xd')][_0x162a('0x6a')];

            if (_0x248bc3) {
              const _0x2635b7 = _0x248bc3.measureText(_0x3c7c23);

              _0x248bc3.fillStyle = 'white';
              const _0x4db686 = 0x1e;

              _0x248bc3.fillRect(
                0x0,
                this.canvas[_0x162a('0x6b')] / 0x2 - _0x4db686 / 0x2,
                this[_0x162a('0x4')].width,
                _0x4db686,
              );

              _0x248bc3[_0x162a('0x6c')] = _0x162a('0x6d');
              _0x248bc3[_0x162a('0x6e')] = '30pt';
              _0x248bc3[_0x162a('0x6f')] = _0x162a('0x70');

              _0x248bc3.fillText(
                _0x3c7c23,
                this[_0x162a('0x4')][_0x162a('0x71')] / 0x2,
                this[_0x162a('0x4')][_0x162a('0x6b')] / 0x2,
              );
            } else {
            }
          };

          WSPlayer[_0x162a('0x47')].fpsToCanvas = function (_0x48eb03) {
            const _0x4b03da = this[_0x162a('0xd')][_0x162a('0x6a')];

            if (_0x4b03da) {
              _0x4b03da[_0x162a('0x6c')] = 'red';
              _0x4b03da[_0x162a('0x6e')] = _0x162a('0x72');

              _0x4b03da[_0x162a('0x73')](_0x48eb03, 0x14, this.canvas[_0x162a('0x6b')] - 0x14);
            } else {
            }
          };

          WSPlayer.prototype[_0x162a('0x74')] = function (_0x43edeb) {
            this[_0x162a('0x75')] = _0x43edeb || 0x2;

            const _0x556035 = this;

            if (window.wsLogger == undefined) {
              window.wsLogger = {
                log: function log() {
                  if (_0x556035[_0x162a('0x75')] >= 0x2) {
                    window[_0x162a('0x76')][_0x162a('0x5f')][_0x162a('0x77')](
                      window[_0x162a('0x76')],
                      arguments,
                    );
                  }
                },
                warn: function warn() {
                  if (_0x556035[_0x162a('0x75')] >= 0x1) {
                    window[_0x162a('0x76')][_0x162a('0x78')][_0x162a('0x77')](
                      window[_0x162a('0x76')],
                      arguments,
                    );
                  }
                },
                error: function error() {
                  if (_0x556035[_0x162a('0x75')] >= 0x0) {
                    window[_0x162a('0x76')][_0x162a('0xa')][_0x162a('0x77')](
                      window[_0x162a('0x76')],
                      arguments,
                    );
                  }
                },
                debug: function debug() {
                  if (_0x556035[_0x162a('0x75')] >= 0x3) {
                    window.console[_0x162a('0x5f')][_0x162a('0x77')](
                      window.console,
                      arguments,
                    );
                  }
                },
                trace: function trace() {
                  if (_0x556035[_0x162a('0x75')] >= 0x4) {
                    window.console[_0x162a('0x5f')].apply(window[_0x162a('0x76')], arguments);
                  }
                },
              };
            }

            if (window[_0x162a('0x79')][_0x162a('0x7a')] == undefined) {
              window.wsLogger.debug = function () {
                if (_0x556035[_0x162a('0x75')] >= 0x3) {
                  window[_0x162a('0x76')][_0x162a('0x5f')][_0x162a('0x77')](
                    window[_0x162a('0x76')],
                    arguments,
                  );
                }
              };
            }

            if (window.wsLogger[_0x162a('0x60')] == undefined) {
              window.wsLogger[_0x162a('0x60')] = function () {
                if (_0x556035[_0x162a('0x75')] >= 0x4) {
                  window[_0x162a('0x76')][_0x162a('0x5f')].apply(
                    window[_0x162a('0x76')],
                    arguments,
                  );
                }
              };
            }
          };

          WSPlayer[_0x162a('0x47')].getStreamStatistics = function (_0x351dd5) {
            if (_0x351dd5 == _0x162a('0x1c')) {
              return this.audioReceived;
            } if (_0x351dd5 == _0x162a('0x21')) {
              return this[_0x162a('0x20')];
            }
          };

          var VideoRenderer = function VideoRenderer(_0x2008fb, _0x328799, _0x5c39da) {
            this[_0x162a('0x4')] = _0x2008fb;
            this[_0x162a('0x71')] = _0x2008fb[_0x162a('0x71')];
            this.height = _0x2008fb.height;
            this[_0x162a('0x7b')] = null;
            this[_0x162a('0x6a')] = null;
            this[_0x162a('0x7c')] = _0x328799;
            this.inputFormat = _0x5c39da;
            this.gl = null;
            this.program = null;
            this[_0x162a('0x55')] = null;
            this[_0x162a('0x7d')] = null;
            this[_0x162a('0x7e')] = null;
            this[_0x162a('0x7f')] = null;
            this[_0x162a('0x80')] = null;
            this[_0x162a('0x81')] = null;
            this[_0x162a('0x82')] = null;
            this[_0x162a('0x83')] = null;
            this[_0x162a('0x84')] = null;
            this.muted = ![];
            this.SHADER_FRAGMENT_YCBCRTORGBA = [
              _0x162a('0x85'),
              'uniform\x20sampler2D\x20YTexture;',
              _0x162a('0x86'),
              'uniform\x20sampler2D\x20CRTexture;',
              'varying\x20vec2\x20texCoord;',
              _0x162a('0x87'),
              _0x162a('0x88'),
              'float\x20cr\x20=\x20texture2D(CRTexture,\x20texCoord).r\x20-\x200.5;',
              _0x162a('0x89'),
              _0x162a('0x8a'),
              'y\x20+\x201.4\x20*\x20cr,',
              _0x162a('0x8b'),
              'y\x20+\x201.765\x20*\x20cb,',
              _0x162a('0x8c'),
              ');',
              '}',
            ][_0x162a('0x8d')]('\x0a');
            this.SHADER_VERTEX_IDENTITY_YUV = [
              _0x162a('0x8e'),
              _0x162a('0x8f'),
              'void\x20main()\x20{',
              _0x162a('0x90'),
              _0x162a('0x91'),
              '}',
            ][_0x162a('0x8d')]('\x0a');
            this[_0x162a('0x92')] = [
              'attribute\x20vec4\x20vertex;',
              _0x162a('0x93'),
              _0x162a('0x94'),
              _0x162a('0x95'),
              'tc\x20=\x20vertex.xy*0.5+0.5;',
              '}',
            ][_0x162a('0x8d')]('\x0a');
            this[_0x162a('0x96')] = [
              'precision\x20mediump\x20float;',
              _0x162a('0x97'),
              'varying\x20vec2\x20tc;',
              'void\x20main(){',
              _0x162a('0x98'),
              '}',
            ][_0x162a('0x8d')]('\x0a');
          };

          VideoRenderer[_0x162a('0x47')].init = function () {
            if (!this[_0x162a('0x7c')]) {
              try {
                var _0x1a7035 = (this.gl = this[_0x162a('0x4')][_0x162a('0x99')]('webgl')
                  || this[_0x162a('0x4')][_0x162a('0x99')](_0x162a('0x9a')));
              } catch (_0x1fa2db) {
                wsLogger[_0x162a('0xa')](
                  `Failed\x20to\x20get\x20webgl\x20context,\x20error\x20${_0x1fa2db}`,
                );
              }
            }

            if (_0x1a7035) {
              if (this[_0x162a('0x9b')] == _0x162a('0x9c')) {
                this[_0x162a('0x9d')](_0x1a7035);
              } else {
                this[_0x162a('0x9e')](_0x1a7035);
              }
            } else {
              this[_0x162a('0x6a')] = this[_0x162a('0x4')][_0x162a('0x99')]('2d');
              this.renderFunction = this[_0x162a('0x9f')];
            }

            this[_0x162a('0x7')]();
          };

          VideoRenderer[_0x162a('0x47')][_0x162a('0x9e')] = function (_0x4f5fef) {
            this[_0x162a('0x55')] = _0x4f5fef[_0x162a('0x51')]();

            _0x4f5fef[_0x162a('0xa0')](_0x4f5fef[_0x162a('0xa1')], this.buffer);

            _0x4f5fef[_0x162a('0xa2')](
              _0x4f5fef[_0x162a('0xa1')],
              new Float32Array([0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1, 0x1]),
              _0x4f5fef[_0x162a('0xa3')],
            );

            this[_0x162a('0xa4')] = _0x4f5fef.createProgram();

            _0x4f5fef[_0x162a('0xa5')](
              this.program,
              this[_0x162a('0xa6')](_0x4f5fef.VERTEX_SHADER, this[_0x162a('0xa7')]),
            );

            _0x4f5fef[_0x162a('0xa5')](
              this[_0x162a('0xa4')],
              this[_0x162a('0xa6')](_0x4f5fef[_0x162a('0xa8')], this[_0x162a('0xa9')]),
            );

            _0x4f5fef[_0x162a('0xaa')](this[_0x162a('0xa4')]);

            if (!_0x4f5fef[_0x162a('0xab')](this.program, _0x4f5fef.LINK_STATUS)) {
              wsLogger[_0x162a('0xa')](
                _0x162a('0xac') + _0x4f5fef[_0x162a('0xad')](this[_0x162a('0xa4')]),
              );

              this.ctx2D = this[_0x162a('0x4')][_0x162a('0x99')]('2d');
              this.renderFunction = this[_0x162a('0x9f')];
              return;
            }

            _0x4f5fef[_0x162a('0xae')](this[_0x162a('0xa4')]);

            this.YTexture = this.createTexture(0x0, _0x162a('0x7d'));
            this[_0x162a('0x7f')] = this[_0x162a('0xaf')](0x1, _0x162a('0x7f'));
            this[_0x162a('0x7e')] = this.createTexture(0x2, 'CBTexture');

            const _0x441c07 = _0x4f5fef[_0x162a('0xb0')](this[_0x162a('0xa4')], _0x162a('0xb1'));

            _0x4f5fef[_0x162a('0xb2')](_0x441c07);

            _0x4f5fef[_0x162a('0xb3')](_0x441c07, 0x2, _0x4f5fef.FLOAT, ![], 0x0, 0x0);

            this[_0x162a('0x7b')] = this.renderFrameGLYUV;
          };

          VideoRenderer[_0x162a('0x47')][_0x162a('0x9d')] = function (_0x45a8b0) {
            this[_0x162a('0x55')] = _0x45a8b0[_0x162a('0x51')]();

            _0x45a8b0.bindBuffer(_0x45a8b0[_0x162a('0xa1')], this[_0x162a('0x55')]);

            _0x45a8b0[_0x162a('0xa2')](
              _0x45a8b0[_0x162a('0xa1')],
              new Float32Array([-0x1, -0x1, 0x1, -0x1, 0x1, 0x1, 0x1, 0x1, -0x1, 0x1, -0x1, -0x1]),
              _0x45a8b0[_0x162a('0xa3')],
            );

            this[_0x162a('0xa4')] = _0x45a8b0[_0x162a('0xb4')]();

            _0x45a8b0.attachShader(
              this[_0x162a('0xa4')],
              this[_0x162a('0xa6')](_0x45a8b0.VERTEX_SHADER, this[_0x162a('0x92')]),
            );

            _0x45a8b0.attachShader(
              this[_0x162a('0xa4')],
              this.compileShader(_0x45a8b0[_0x162a('0xa8')], this.SHADER_FRAGMENT_RGBA),
            );

            _0x45a8b0[_0x162a('0xb5')](this[_0x162a('0xa4')], 0x0, _0x162a('0xb1'));

            _0x45a8b0[_0x162a('0xaa')](this.program);

            if (
              !_0x45a8b0.getProgramParameter(this[_0x162a('0xa4')], _0x45a8b0.LINK_STATUS)
            ) {
              wsLogger.error(
                _0x162a('0xac') + _0x45a8b0[_0x162a('0xad')](this[_0x162a('0xa4')]),
              );
              this[_0x162a('0x6a')] = this[_0x162a('0x4')][_0x162a('0x99')]('2d');
              this[_0x162a('0x7b')] = this[_0x162a('0x9f')];
              return;
            }

            _0x45a8b0[_0x162a('0xae')](this[_0x162a('0xa4')]);

            _0x45a8b0[_0x162a('0xb2')](0x0);

            _0x45a8b0[_0x162a('0xb3')](0x0, 0x2, _0x45a8b0[_0x162a('0xb6')], ![], 0x0, 0x0);

            this.RGBTexture = this[_0x162a('0xaf')](0x0, 'RGBTexture');
            this.renderFunction = this[_0x162a('0xb7')];
          };

          VideoRenderer[_0x162a('0x47')][_0x162a('0x7')] = function () {
            this[_0x162a('0x71')] = this[_0x162a('0x4')].width;
            this[_0x162a('0x6b')] = this[_0x162a('0x4')][_0x162a('0x6b')];
            this[_0x162a('0x82')] = (parseInt(this[_0x162a('0x71')]) + 0xf) >> 0x4;
            this[_0x162a('0x83')] = this.mbWidth << 0x4;
            this[_0x162a('0x84')] = this[_0x162a('0x82')] << 0x3;

            let _0xe37a89;

            if (
              (typeof Uint8ClampedArray === 'undefined'
                ? 'undefined'
                : _typeof(Uint8ClampedArray)) !== _0x162a('0xb8')
            ) {
              _0xe37a89 = Uint8ClampedArray;
            } else {
              _0xe37a89 = Uint8Array;
            }

            if (this.ctx2D) {
              this[_0x162a('0x81')] = new _0xe37a89(
                this.canvas.width * this.canvas.height * 0x4,
              );

              for (
                let _0x46edaf = 0x0, _0x9090eb = this[_0x162a('0x81')][_0x162a('0x1d')];
                _0x46edaf < _0x9090eb;
                _0x46edaf++
              ) {
                this[_0x162a('0x81')][_0x46edaf] = 0xff;
              }
            } else if (this.gl) {
              this.gl.viewport(0x0, 0x0, this[_0x162a('0x71')], this.height);
            }
          };

          VideoRenderer[_0x162a('0x47')][_0x162a('0x18')] = function () {
            if (this[_0x162a('0x6a')]) {
              const _0x2083e7 = this[_0x162a('0x6a')][_0x162a('0xb9')](
                this[_0x162a('0x71')],
                this[_0x162a('0x6b')],
              );

              this.ctx2D[_0x162a('0xba')](_0x2083e7, 0x0, 0x0);
            } else if (this.gl) {
              this.gl[_0x162a('0xbb')](
                this.gl[_0x162a('0xbc')] | this.gl[_0x162a('0xbd')],
              );
            }
          };

          VideoRenderer[_0x162a('0x47')][_0x162a('0xaf')] = function (_0x10fdad, _0x34889c) {
            const _0x6b3e76 = this.gl;

            const _0x18fcea = _0x6b3e76[_0x162a('0xaf')]();

            _0x6b3e76.bindTexture(_0x6b3e76[_0x162a('0xbe')], _0x18fcea);

            _0x6b3e76[_0x162a('0xbf')](
              _0x6b3e76[_0x162a('0xbe')],
              _0x6b3e76[_0x162a('0xc0')],
              _0x6b3e76[_0x162a('0xc1')],
            );

            _0x6b3e76.texParameteri(
              _0x6b3e76[_0x162a('0xbe')],
              _0x6b3e76[_0x162a('0xc2')],
              _0x6b3e76[_0x162a('0xc1')],
            );

            _0x6b3e76[_0x162a('0xbf')](
              _0x6b3e76[_0x162a('0xbe')],
              _0x6b3e76.TEXTURE_WRAP_S,
              _0x6b3e76[_0x162a('0xc3')],
            );

            _0x6b3e76[_0x162a('0xbf')](
              _0x6b3e76.TEXTURE_2D,
              _0x6b3e76[_0x162a('0xc4')],
              _0x6b3e76[_0x162a('0xc3')],
            );

            _0x6b3e76.uniform1i(
              _0x6b3e76[_0x162a('0xc5')](this.program, _0x34889c),
              _0x10fdad,
            );

            return _0x18fcea;
          };

          VideoRenderer.prototype.compileShader = function (_0x41c03b, _0x5f4578) {
            const _0x4f8efd = this.gl;

            const _0x57e0eb = _0x4f8efd[_0x162a('0xc6')](_0x41c03b);

            _0x4f8efd.shaderSource(_0x57e0eb, _0x5f4578);

            _0x4f8efd[_0x162a('0xa6')](_0x57e0eb);

            if (!_0x4f8efd[_0x162a('0xc7')](_0x57e0eb, _0x4f8efd[_0x162a('0xc8')])) {
              throw new Error(_0x4f8efd[_0x162a('0xc9')](_0x57e0eb));
            }

            return _0x57e0eb;
          };

          VideoRenderer[_0x162a('0x47')][_0x162a('0xca')] = function () {
            return (
              (this.gl !== null || this.gl !== undefined)
              && (this.ctx2D == null || this[_0x162a('0x6a')] == undefined)
            );
          };

          VideoRenderer[_0x162a('0x47')].renderFrameGLYUV = function (_0x24528e) {
            const _0x5c538d = this.gl;

            _0x5c538d[_0x162a('0xcb')](_0x5c538d.TEXTURE0);

            _0x5c538d[_0x162a('0xcc')](_0x5c538d[_0x162a('0xbe')], this[_0x162a('0x7d')]);

            _0x5c538d[_0x162a('0xcd')](
              _0x5c538d[_0x162a('0xbe')],
              0x0,
              _0x5c538d[_0x162a('0xce')],
              this[_0x162a('0x83')],
              this[_0x162a('0x6b')],
              0x0,
              _0x5c538d[_0x162a('0xce')],
              _0x5c538d[_0x162a('0xcf')],
              _0x24528e.y,
            );

            _0x5c538d[_0x162a('0xcb')](_0x5c538d[_0x162a('0xd0')]);

            _0x5c538d.bindTexture(_0x5c538d[_0x162a('0xbe')], this.CRTexture);

            _0x5c538d[_0x162a('0xcd')](
              _0x5c538d.TEXTURE_2D,
              0x0,
              _0x5c538d[_0x162a('0xce')],
              this[_0x162a('0x84')],
              this[_0x162a('0x6b')] / 0x2,
              0x0,
              _0x5c538d[_0x162a('0xce')],
              _0x5c538d[_0x162a('0xcf')],
              _0x24528e.cr,
            );

            _0x5c538d[_0x162a('0xcb')](_0x5c538d[_0x162a('0xd1')]);

            _0x5c538d[_0x162a('0xcc')](_0x5c538d.TEXTURE_2D, this[_0x162a('0x7e')]);

            _0x5c538d[_0x162a('0xcd')](
              _0x5c538d[_0x162a('0xbe')],
              0x0,
              _0x5c538d.LUMINANCE,
              this[_0x162a('0x84')],
              this.height / 0x2,
              0x0,
              _0x5c538d[_0x162a('0xce')],
              _0x5c538d[_0x162a('0xcf')],
              _0x24528e.cb,
            );

            _0x5c538d[_0x162a('0xd2')](_0x5c538d[_0x162a('0xd3')], 0x0, 0x4);
          };

          VideoRenderer.prototype[_0x162a('0xb7')] = function (_0x5982ea) {
            const _0x36021f = this.gl;

            _0x36021f[_0x162a('0xcb')](_0x36021f[_0x162a('0xd4')]);

            _0x36021f.bindTexture(_0x36021f[_0x162a('0xbe')], this.RGBTexture);

            _0x36021f[_0x162a('0xcd')](
              _0x36021f.TEXTURE_2D,
              0x0,
              _0x36021f[_0x162a('0xd5')],
              _0x5982ea[_0x162a('0x71')],
              _0x5982ea.height,
              0x0,
              _0x36021f[_0x162a('0xd5')],
              _0x36021f.UNSIGNED_BYTE,
              _0x5982ea[_0x162a('0x14')],
            );

            _0x36021f[_0x162a('0xd2')](_0x36021f[_0x162a('0xd6')], 0x0, 0x6);
          };

          VideoRenderer[_0x162a('0x47')].renderFrame2D = function (_0x4d5a01) {
            const _0x84c411 = this[_0x162a('0x6a')][_0x162a('0xb9')](
              _0x4d5a01.width,
              _0x4d5a01[_0x162a('0x6b')],
            );

            if (_0x4d5a01[_0x162a('0xd7')] == _0x162a('0xc')) {
              this[_0x162a('0xd8')](_0x4d5a01);

              _0x84c411.data[_0x162a('0xd9')](this[_0x162a('0x81')]);
            } else {
              _0x84c411[_0x162a('0x14')].set(_0x4d5a01[_0x162a('0x14')]);
            }

            this[_0x162a('0x6a')][_0x162a('0xba')](_0x84c411, 0x0, 0x0);
          };

          VideoRenderer[_0x162a('0x47')].render = function (_0x467dad) {
            if (!this[_0x162a('0x27')]) {
              if (
                this[_0x162a('0x4')][_0x162a('0x71')] != _0x467dad.width
                || this[_0x162a('0x4')][_0x162a('0x6b')] != _0x467dad[_0x162a('0x6b')]
              ) {
                wsLogger[_0x162a('0x5f')](
                  `${_0x162a('0xda')
                    + this[_0x162a('0x4')][_0x162a('0x71')]
                  }x${
                    this[_0x162a('0x4')].height
                  }${_0x162a('0xdb')
                  }${_0x467dad[_0x162a('0x71')]
                  }x${
                    _0x467dad[_0x162a('0x6b')]}`,
                );

                this[_0x162a('0x4')].width = _0x467dad[_0x162a('0x71')];
                this[_0x162a('0x4')][_0x162a('0x6b')] = _0x467dad[_0x162a('0x6b')];

                const _0x44e234 = new Event('resize');

                this[_0x162a('0x4')][_0x162a('0x65')](_0x44e234);

                this[_0x162a('0x7')]();
              }

              this[_0x162a('0x7b')](_0x467dad);
            }

            this[_0x162a('0xdc')] = Date[_0x162a('0x2c')]();
          };

          VideoRenderer[_0x162a('0x47')].YCbCrToRGBA = function (_0x3a6afc) {
            const _0x2d188b = _0x3a6afc.y;
            const _0x31895c = _0x3a6afc.cb;
            const _0x1a9970 = _0x3a6afc.cr;

            const _0x410b7d = this[_0x162a('0x81')];

            let _0x599197 = 0x0;

            let _0x7186b7 = this[_0x162a('0x83')];

            const _0xfec764 = this.codedWidth + (this[_0x162a('0x83')] - _0x3a6afc[_0x162a('0x71')]);

            let _0x48cdb2 = 0x0;

            const _0x5adcf1 = this[_0x162a('0x84')] - (_0x3a6afc.width >> 0x1);

            let _0x1efcdf = 0x0;

            let _0x306a15 = _0x3a6afc[_0x162a('0x71')] * 0x4;

            const _0x5b89c9 = _0x3a6afc[_0x162a('0x71')] * 0x4;

            const _0x83a94e = _0x3a6afc[_0x162a('0x71')] >> 0x1;

            const _0x46e569 = _0x3a6afc[_0x162a('0x6b')] >> 0x1;

            let _0x170074; let _0x356f54; let _0x42843a; let _0x402f62; let _0x1fe8a6; let
              _0xb3c8fd;

            for (let _0x4574e3 = 0x0; _0x4574e3 < _0x46e569; _0x4574e3++) {
              for (let _0x33b5b4 = 0x0; _0x33b5b4 < _0x83a94e; _0x33b5b4++) {
                _0x356f54 = _0x31895c[_0x48cdb2];
                _0x42843a = _0x1a9970[_0x48cdb2];
                _0x48cdb2++;
                _0x402f62 = _0x42843a + ((_0x42843a * 0x67) >> 0x8) - 0xb3;
                _0x1fe8a6 = ((_0x356f54 * 0x58) >> 0x8) - 0x2c + ((_0x42843a * 0xb7) >> 0x8) - 0x5b;
                _0xb3c8fd = _0x356f54 + ((_0x356f54 * 0xc6) >> 0x8) - 0xe3;
                const _0xba7424 = _0x2d188b[_0x599197++];
                const _0x5ab42c = _0x2d188b[_0x599197++];
                _0x410b7d[_0x1efcdf] = _0xba7424 + _0x402f62;
                _0x410b7d[_0x1efcdf + 0x1] = _0xba7424 - _0x1fe8a6;
                _0x410b7d[_0x1efcdf + 0x2] = _0xba7424 + _0xb3c8fd;
                _0x410b7d[_0x1efcdf + 0x4] = _0x5ab42c + _0x402f62;
                _0x410b7d[_0x1efcdf + 0x5] = _0x5ab42c - _0x1fe8a6;
                _0x410b7d[_0x1efcdf + 0x6] = _0x5ab42c + _0xb3c8fd;
                _0x1efcdf += 0x8;
                const _0x2dbbbe = _0x2d188b[_0x7186b7++];
                const _0x1e85ab = _0x2d188b[_0x7186b7++];
                _0x410b7d[_0x306a15] = _0x2dbbbe + _0x402f62;
                _0x410b7d[_0x306a15 + 0x1] = _0x2dbbbe - _0x1fe8a6;
                _0x410b7d[_0x306a15 + 0x2] = _0x2dbbbe + _0xb3c8fd;
                _0x410b7d[_0x306a15 + 0x4] = _0x1e85ab + _0x402f62;
                _0x410b7d[_0x306a15 + 0x5] = _0x1e85ab - _0x1fe8a6;
                _0x410b7d[_0x306a15 + 0x6] = _0x1e85ab + _0xb3c8fd;
                _0x306a15 += 0x8;
              }

              _0x599197 += _0xfec764;
              _0x7186b7 += _0xfec764;
              _0x1efcdf += _0x5b89c9;
              _0x306a15 += _0x5b89c9;
              _0x48cdb2 += _0x5adcf1;
            }
          };

          VideoRenderer.prototype[_0x162a('0xdd')] = function () {
            return this.lastTimeRendered;
          };

          VideoRenderer[_0x162a('0x47')][_0x162a('0x58')] = function (_0x282d57) {
            if (_0x282d57) {
              this.muted = !![];
            } else {
              this[_0x162a('0x27')] = ![];
            }
          };

          function AudioPlayer(_0x21395c) {
            const _0xfdbf8 = this;

            this[_0x162a('0x7')]();

            this[_0x162a('0xde')] = ![];
            this[_0x162a('0x31')] = _0x21395c;
            this[_0x162a('0xdf')] = _0x21395c[_0x162a('0xe0')]();

            this[_0x162a('0xdf')][_0x162a('0x56')](_0x21395c.destination);

            this[_0x162a('0x58')](!![]);

            wsLogger[_0x162a('0x5f')](
              `Sample\x20rate\x20${this[_0x162a('0x31')][_0x162a('0x32')]}`,
            );

            const _0x363810 = [];

            let _0x4a5353;

            for (_0x4a5353 = 0x100; _0x4a5353 <= 0x4000; _0x4a5353 *= 0x2) {
              _0x363810[_0x162a('0x23')](_0x4a5353);
            }

            const _0x4d6dd9 = this[_0x162a('0x31')][_0x162a('0x32')] / 0x1;

            let _0x3b65d4 = _0x363810[0x0];

            let _0x4e4e5e = Math[_0x162a('0xe1')](_0x4d6dd9 - _0x3b65d4);

            for (_0x4a5353 = 0x0; _0x4a5353 < _0x363810.length; _0x4a5353++) {
              const _0xec6c77 = Math[_0x162a('0xe1')](_0x4d6dd9 - _0x363810[_0x4a5353]);

              if (_0xec6c77 < _0x4e4e5e) {
                _0x4e4e5e = _0xec6c77;
                _0x3b65d4 = _0x363810[_0x4a5353];
              }
            }

            wsLogger[_0x162a('0x5f')](_0x162a('0xe2') + _0x3b65d4);

            this[_0x162a('0xe3')] = _0x3b65d4;
            this.audioChunkTimeLength = (this.internalBufferSize / this[_0x162a('0x31')][_0x162a('0x32')]) * 0x3e8;

            try {
              this[_0x162a('0x31')][_0x162a('0xe4')] = this[_0x162a('0x31')].createScriptProcessor
                || this.context.createJavaScriptNode;
              this.audioJSNode = this[_0x162a('0x31')].createScriptProcessor(
                this[_0x162a('0xe3')],
                0x1,
                0x1,
              );
            } catch (_0x5e2288) {
              wsLogger[_0x162a('0xa')](
                `JS\x20Audio\x20Node\x20is\x20not\x20supported\x20in\x20this\x20browser${_0x5e2288}`,
              );
            }

            this[_0x162a('0xe5')].onaudioprocess = function (_0x26db61) {
              const _0x163877 = _0x26db61.outputBuffer[_0x162a('0x52')](0x0);

              let _0x4a5353;

              if (_0xfdbf8[_0x162a('0x3e')][_0x162a('0x1d')] > 0x0) {
                const _0x1d8762 = _0xfdbf8[_0x162a('0x3e')][_0x162a('0x3c')]();

                for (_0x4a5353 = 0x0; _0x4a5353 < _0x163877.length; _0x4a5353++) {
                  _0x163877[_0x4a5353] = _0x1d8762[_0x162a('0x4c')][_0x4a5353];
                }

                if (!_0xfdbf8.lastSync) {
                  _0xfdbf8.previousSync = _0x1d8762[_0x162a('0x3f')];
                } else {
                  _0xfdbf8[_0x162a('0xe6')] = _0xfdbf8[_0x162a('0xe7')];
                }

                _0xfdbf8.lastSync = _0x1d8762[_0x162a('0x3f')];

                if (!_0xfdbf8[_0x162a('0xe8')]) {
                  _0xfdbf8.previousSyncTime = _0x26db61[_0x162a('0xe9')] * 0x3e8;
                } else {
                  _0xfdbf8.previousSyncTime = _0xfdbf8[_0x162a('0xe8')];
                }

                _0xfdbf8.lastSyncTime = _0x26db61[_0x162a('0xe9')] * 0x3e8;
                _0xfdbf8.bufferExhausted = ![];
              } else {
                for (_0x4a5353 = 0x0; _0x4a5353 < _0x163877.length; _0x4a5353++) {
                  _0x163877[_0x4a5353] = 0x0;
                }

                _0xfdbf8.bufferExhausted = !![];

                if (_0xfdbf8[_0x162a('0xdf')].gain[_0x162a('0xea')] != 0x0) {
                  wsLogger[_0x162a('0x7a')]('No\x20audio\x20in\x20audio\x20buffer!');
                }
              }
            };
          }

          AudioPlayer[_0x162a('0x47')][_0x162a('0x40')] = function () {
            if (!this[_0x162a('0xde')]) {
              this.audioJSNode[_0x162a('0x56')](this.gainNode);

              this[_0x162a('0xde')] = !![];
            }

            this[_0x162a('0x58')](![]);
          };

          AudioPlayer[_0x162a('0x47')].stop = function () {
            this.audioJSNode[_0x162a('0xeb')]();

            this[_0x162a('0xde')] = ![];
            this[_0x162a('0xe7')] = undefined;
            this[_0x162a('0xe8')] = undefined;
            this[_0x162a('0x3e')] = [];
            this.mute(!![]);
          };

          AudioPlayer[_0x162a('0x47')][_0x162a('0x7')] = function () {
            if (this[_0x162a('0x3e')]) {
              this[_0x162a('0x3e')].length = 0x0;
            } else {
              this[_0x162a('0x3e')] = [];
            }
          };

          AudioPlayer[_0x162a('0x47')][_0x162a('0xec')] = function () {
            this.initBuffers();
          };

          AudioPlayer[_0x162a('0x47')][_0x162a('0xed')] = function (_0x554ebf) {
            this.audioBuffer[_0x162a('0x23')](_0x554ebf);
          };

          AudioPlayer[_0x162a('0x47')][_0x162a('0xee')] = function () {
            return this[_0x162a('0x3e')].length;
          };

          AudioPlayer[_0x162a('0x47')][_0x162a('0x25')] = function () {
            if (this[_0x162a('0xe7')] && this.lastSyncTime) {
              const _0x21f724 = this[_0x162a('0x31')][_0x162a('0xef')] * 0x3e8;

              if (_0x21f724 >= this[_0x162a('0xe8')]) {
                if (_0x21f724 - this[_0x162a('0xe8')] > this[_0x162a('0xf0')]) {
                  wsLogger[_0x162a('0x7a')](
                    _0x162a('0xf1') + (_0x21f724 - this[_0x162a('0xf0')] - this[_0x162a('0xe8')]),
                  );

                  return this.lastSync + this[_0x162a('0xf0')];
                }

                return _0x21f724 - this[_0x162a('0xe8')] + this.lastSync;
              }
              return _0x21f724 - this[_0x162a('0xf2')] + this[_0x162a('0xe6')];
            }

            return -0x1;
          };

          AudioPlayer[_0x162a('0x47')][_0x162a('0x2d')] = function () {
            const _0x4d5368 = this[_0x162a('0x31')][_0x162a('0xef')] * 0x3e8 - this[_0x162a('0xe8')];

            const _0xd6ff56 = this[_0x162a('0xf0')] - _0x4d5368;

            return _0xd6ff56 > 0x0
              ? this.audioChunkTimeLength * this[_0x162a('0x3e')].length + _0xd6ff56
              : this[_0x162a('0xf0')] * this.audioBuffer[_0x162a('0x1d')];
          };

          AudioPlayer[_0x162a('0x47')].getLastTimePlayed = function () {
            return this[_0x162a('0xe8')];
          };

          AudioPlayer.prototype[_0x162a('0x58')] = function (_0x197c70) {
            if (_0x197c70) {
              wsLogger[_0x162a('0x5f')](_0x162a('0xf3'));

              this.gainNode[_0x162a('0xf4')].value = 0x0;
            } else {
              wsLogger.log(_0x162a('0xf5'));
              this[_0x162a('0xdf')][_0x162a('0xf4')][_0x162a('0xea')] = 0x1;
            }
          };

          AudioPlayer.prototype[_0x162a('0x41')] = function (_0x36b36f) {
            this[_0x162a('0xdf')][_0x162a('0xf4')][_0x162a('0xea')] = _0x36b36f / 0x64;
          };

          AudioPlayer.prototype[_0x162a('0x5c')] = function () {
            return this.gainNode[_0x162a('0xf4')][_0x162a('0xea')] * 0x64;
          };

          var WSPlayerState = function WSPlayerState() {};

          WSPlayerState[_0x162a('0x3d')] = _0x162a('0x3d');
          WSPlayerState[_0x162a('0x26')] = 'PLAYING';
          WSPlayerState[_0x162a('0x59')] = 'PAUSED';
          WSPlayerState.STARTUP = 'STARTUP';
          exports.WSPlayer = WSPlayer;
        },
        {},
      ],
      28: [
        function (require, module, exports) {
          /**
           * @namespace Flashphoner.constants.SESSION_STATUS
           * @see Session
           */

          const sessionStatus = {};
          /**
           * Fires when {@link Session} ws socket opens.
           * @event CONNECTED
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'CONNECTED', 'CONNECTED');
          /**
           * Fires when {@link Session} receives connect ack from REST App.
           * @event ESTABLISHED
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'ESTABLISHED', 'ESTABLISHED');
          /**
           * Fires when {@link Session} disconnects.
           * @event DISCONNECTED
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'DISCONNECTED', 'DISCONNECTED');
          /**
           * Fires if {@link Session} call of rest method error.
           * @event WARN
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'WARN', 'WARN');
          /**
           * Fires if {@link Session} connection failed.
           * Some of the reasons can be network connection failed, REST App failed
           * @event FAILED
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'FAILED', 'FAILED');
          /**
           * Fires wneh {@link Session} receives debug event
           * @event DEBUG
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'DEBUG', 'DEBUG');
          /**
           * Fires when {@link Session} receives custom REST App message.
           *
           * @event APP_DATA
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'APP_DATA', 'APP_DATA');
          /**
           * Fires when {@link Session} receives status of sendData operation.
           *
           * @event SEND_DATA_STATUS
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'SEND_DATA_STATUS', 'SEND_DATA_STATUS'); // State of newly created Session

          define(sessionStatus, 'PENDING', 'PENDING');
          /**
           * Fires when {@link Session} registers as sip client.
           *
           * @event APP_DATA
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'REGISTERED', 'REGISTERED');
          /**
           * Fires when {@link Session} unregisters as sip client.
           *
           * @event APP_DATA
           * @memberof Flashphoner.constants.SESSION_STATUS
           */

          define(sessionStatus, 'UNREGISTERED', 'UNREGISTERED');
          define(sessionStatus, 'INCOMING_CALL', 'INCOMING_CALL');
          /**
           * @namespace Flashphoner.constants.STREAM_STATUS
           * @see Stream
           */

          const streamStatus = {}; // State of newly created Stream

          define(streamStatus, 'NEW', 'NEW'); // State between publish/play and server response

          define(streamStatus, 'PENDING', 'PENDING');
          /**
           * Fires when {@link Stream} starts publishing.
           * @event PUBLISHING
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'PUBLISHING', 'PUBLISHING');
          /**
           * Fires when {@link Stream} starts playing.
           * @event PLAYING
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'PLAYING', 'PLAYING');
          /**
           * Fires if {@link Stream} paused.
           * @event PAUSED
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'PAUSED', 'PAUSED');
          /**
           * Fires if {@link Stream} was unpublished.
           * @event UNPUBLISHING
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'UNPUBLISHED', 'UNPUBLISHED');
          /**
           * Fires if {@link Stream} was stopped.
           * @event STOPPED
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'STOPPED', 'STOPPED');
          /**
           * Fires if {@link Stream} failed.
           * @event FAILED
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'FAILED', 'FAILED');
          /**
           * Fires if {@link Stream} playback problem.
           * @event PLAYBACK_PROBLEM
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'PLAYBACK_PROBLEM', 'PLAYBACK_PROBLEM');
          /**
           * Fires if {@link Stream} resize.
           * @event RESIZE
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'RESIZE', 'RESIZE');
          /**
           * Fires when {@link Stream} snapshot becomes available.
           * Snapshot is base64 encoded png available through {@link Stream.getInfo}
           * @event SNAPSHOT_COMPLETE
           * @memberof Flashphoner.constants.STREAM_STATUS
           */

          define(streamStatus, 'SNAPSHOT_COMPLETE', 'SNAPSHOT_COMPLETE');
          /**
           * Fires on subscribe {@link Stream} if bitrate is higher than available network bandwidth.
           * @event NOT_ENOUGH_BANDWIDTH
           * @memberof Flashphoner.constants.NOT_ENOUGH_BANDWIDTH
           */

          define(streamStatus, 'NOT_ENOUGH_BANDWIDTH', 'NOT_ENOUGH_BANDWIDTH');
          /**
           * @namespace Flashphoner.constants.CALL_STATUS
           * @see Call
           */

          const callStatus = {}; // State of newly created Call

          define(callStatus, 'NEW', 'NEW');
          define(callStatus, 'RING', 'RING');
          define(callStatus, 'RING_MEDIA', 'RING_MEDIA');
          define(callStatus, 'HOLD', 'HOLD');
          define(callStatus, 'ESTABLISHED', 'ESTABLISHED');
          define(callStatus, 'FINISH', 'FINISH');
          define(callStatus, 'BUSY', 'BUSY');
          define(callStatus, 'SESSION_PROGRESS', 'SESSION_PROGRESS');
          define(callStatus, 'FAILED', 'FAILED');
          define(callStatus, 'PENDING', 'PENDING');
          define(callStatus, 'TRYING', 'TRYING');
          /**
           * @namespace Flashphoner.constants.STREAM_STATUS_INFO
           * @see Stream
           */

          const streamStatusInfo = {};
          /**
           * Indicates general error during ICE negotiation. Usually occurs if client is behind some exotic nat/firewall.
           * @event FAILED_BY_ICE_ERROR
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_ICE_ERROR', 'Failed by ICE error');
          /**
           * Timeout has been reached during ICE establishment.
           * @event FAILED_BY_ICE_TIMEOUT
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_ICE_TIMEOUT', 'Failed by ICE timeout');
          /**
           * ICE refresh failed on session.
           * @event FAILED_BY_KEEP_ALIVE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_KEEP_ALIVE', 'Failed by ICE keep alive');
          /**
           * DTLS has wrong fingerprint.
           * @event FAILED_BY_DTLS_FINGERPRINT_ERROR
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_DTLS_FINGERPRINT_ERROR', 'Failed by DTLS fingerprint error');
          /**
           * Client did not send DTLS packets or packets were lost/corrupted during transmission.
           * @event FAILED_BY_DTLS_ERROR
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_DTLS_ERROR', 'Failed by DTLS error');
          /**
           * Indicates general HLS packetizer error, can occur during initialization or packetization (wrong input or out of disk space).
           * @event FAILED_BY_HLS_WRITER_ERROR
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_HLS_WRITER_ERROR', 'Failed by HLS writer error');
          /**
           * Indicates general RTMP republishing error, can occur during initialization or rtmp packetization.
           * @event FAILED_BY_RTMP_WRITER_ERROR
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_RTMP_WRITER_ERROR', 'Failed by RTMP writer error');
          /**
           * RTP session failed by RTP activity timer.
           * @event FAILED_BY_RTP_ACTIVITY
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_RTP_ACTIVITY', 'Failed by RTP activity');
          /**
           * Related session was disconnected.
           * @event STOPPED_BY_SESSION_DISCONNECT
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'STOPPED_BY_SESSION_DISCONNECT', 'Stopped by session disconnect');
          /**
           * Stream was stopped by rest terminate request.
           * @event STOPPED_BY_REST_TERMINATE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'STOPPED_BY_REST_TERMINATE', 'Stopped by rest /terminate');
          /**
           * Related publisher stopped its stream or lost connection.
           * @event STOPPED_BY_PUBLISHER_STOP
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'STOPPED_BY_PUBLISHER_STOP', 'Stopped by publisher stop');
          /**
           * Stop the media session by user after call was finished or unpublish stream.
           * @event STOPPED_BY_USER
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'STOPPED_BY_USER', 'Stopped by user');
          /**
           * Error occurred on the stream.
           * @event FAILED_BY_ERROR
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_BY_ERROR', 'Failed by error');
          /**
           * Indicates that error occurred during media session creation. This might be SDP parsing error, all ports are busy, wrong session related config etc.
           * @event FAILED_TO_ADD_STREAM_TO_PROXY
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_TO_ADD_STREAM_TO_PROXY', 'Failed to add stream to proxy');
          /**
           * Stopped shapshot distributor.
           * @event DISTRIBUTOR_STOPPED
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'DISTRIBUTOR_STOPPED', 'Distributor stopped');
          /**
           * Publish stream is not ready, try again later.
           * @event PUBLISH_STREAM_IS_NOT_READY
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'PUBLISH_STREAM_IS_NOT_READY', 'Publish stream is not ready');
          /**
           * Stream with this name is not found, check the correct of the name.
           * @event STREAM_NOT_FOUND
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'STREAM_NOT_FOUND', 'Stream not found');
          /**
           * Server already has a publish stream with the same name, try using different one.
           * @event STREAM_NAME_ALREADY_IN_USE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'STREAM_NAME_ALREADY_IN_USE', 'Stream name is already in use');
          /**
           * Error indicates that stream object received by server has empty mediaSessionId field.
           * @event MEDIASESSION_ID_NULL
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'MEDIASESSION_ID_NULL', 'MediaSessionId is null');
          /**
           * Published or subscribed sessions used this MediaSessionId.
           * @event MEDIASESSION_ID_ALREADY_IN_USE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'MEDIASESSION_ID_ALREADY_IN_USE', 'MediaSessionId is already in use');
          /**
           * Session is not initialized or terminated on play ordinary stream.
           * @event SESSION_NOT_READY
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'SESSION_NOT_READY', 'Session not ready');
          /**
           * Actual session does not exist.
           * @event SESSION_DOES_NOT_EXIST
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'SESSION_DOES_NOT_EXIST', 'Session does not exist');
          /**
           * RTSP has wrong format on play stream, check correct of the RTSP url.
           * @event RTSP_HAS_WRONG_FORMAT
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'RTSP_HAS_WRONG_FORMAT', 'Rtsp has wrong format');
          /**
           * Failed to play vod stream, this format is not supported.
           * @event FILE_HAS_WRONG_FORMAT
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FILE_HAS_WRONG_FORMAT', 'File has wrong format');
          /**
           * Failed to connect to rtsp stream.
           * @event FAILED_TO_CONNECT_TO_RTSP_STREAM
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_TO_CONNECT_TO_RTSP_STREAM', 'Failed to connect to rtsp stream');
          /**
           * Rtsp stream is not found, agent received "404-Not Found".
           * @event RTSP_STREAM_NOT_FOUND
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'RTSP_STREAM_NOT_FOUND', 'Rtsp stream not found');
          /**
           * On shutdown RTSP agent.
           * @event RTSPAGENT_SHUTDOWN
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'RTSPAGENT_SHUTDOWN', 'RtspAgent shutdown');
          /**
           * Stream failed
           * @event STREAM_FAILED
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'STREAM_FAILED', 'Stream failed');
          /**
           * No common codecs on setup track, did not found corresponding trackId->mediaPort.
           * @event NO_COMMON_CODECS
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'NO_COMMON_CODECS', 'No common codecs');
          /**
           * Bad referenced rtsp link, check for correct, example: rtsp://user:b@d_password@127.0.0.1/stream.
           * @event BAD_URI
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'BAD_URI', 'Bad URI');
          /**
           * General VOD error, indicates that Exception occurred while reading/processing media file.
           * @event GOT_EXCEPTION_WHILE_STREAMING_FILE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'GOT_EXCEPTION_WHILE_STREAMING_FILE', 'Got exception while streaming file');
          /**
           * Requested stream shutdown.
           * @event REQUESTED_STREAM_SHUTDOWN
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'REQUESTED_STREAM_SHUTDOWN', 'Requested stream shutdown');
          /**
           * Failed to create movie, file can not be read.
           * @event FAILED_TO_READ_FILE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_TO_READ_FILE', 'Failed to read file');
          /**
           * File does not exist, check filename.
           * @event FILE_NOT_FOUND
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FILE_NOT_FOUND', 'File not found');
          /**
           * Server failed to establish websocket connection with origin server.
           * @event FAILED_TO_CONNECT_TO_ORIGIN_STREAM
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_TO_CONNECT_TO_ORIGIN_STREAM', 'Failed to connect to origin stream');
          /**
           * CDN stream not found.
           * @event CDN_STREAM_NOT_FOUND
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'CDN_STREAM_NOT_FOUND', 'CDN stream not found');
          /**
           * Indicates that provided URL protocol in stream name is invalid.
           * Valid: vod://file.mp4
           * Invalid: dov://file.mp4
           * @event FAILED_TO_GET_AGENT_STORAGE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'FAILED_TO_GET_AGENT_STORAGE', 'Failed to get agent storage');
          /**
           * Shutdown agent servicing origin stream.
           * @event AGENT_SERVICING_ORIGIN_STREAM_IS_SHUTTING_DOWN
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'AGENT_SERVICING_ORIGIN_STREAM_IS_SHUTTING_DOWN', 'Agent servicing origin stream is shutting down');
          /**
           * Terminated by keep-alive on walk through subscribers.
           * @event TERMINATED_BY_KEEP_ALIVE
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'TERMINATED_BY_KEEP_ALIVE', 'Terminated by keep-alive');
          /**
           * Transcoding required, but disabled in settings
           * @event TRANSCODING_REQUIRED_BUT_DISABLED
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'TRANSCODING_REQUIRED_BUT_DISABLED', 'Transcoding required, but disabled');
          /**
           * Access restricted by access list
           * @event RESTRICTED_ACCESS
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'RESTRICTED_ACCESS', 'Restricted access');
          /**
           * No available transcoders for stream
           * @event RESTRICTED_ACCESS
           * @memberof Flashphoner.constants.STREAM_STATUS_INFO
           */

          define(streamStatusInfo, 'NO_AVAILABLE_TRANSCODERS', 'No available transcoders');
          /**
           * @namespace Flashphoner.constants.CALL_STATUS_INFO
           * @see Call
           */

          const callStatusInfo = {};
          /**
           * Normal call hangup.
           * @event NORMAL_CALL_CLEARING
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'NORMAL_CALL_CLEARING', 'Normal call clearing');
          /**
           * Error occurred on session creation.
           * @event FAILED_BY_SESSION_CREATION
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_SESSION_CREATION', 'Failed by session creation');
          /**
           * Failed by error during ICE establishment.
           * @event FAILED_BY_ICE_ERROR
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_ICE_ERROR', 'Failed by ICE error');
          /**
           * RTP session failed by RTP activity timer.
           * @event FAILED_BY_RTP_ACTIVITY
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_RTP_ACTIVITY', 'Failed by RTP activity');
          /**
           * FF writer was failed on RTMP.
           * @event FAILED_BY_RTMP_WRITER_ERROR
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_RTMP_WRITER_ERROR', 'Failed by RTMP writer error');
          /**
           * DTLS wrong fingerprint.
           * @event FAILED_BY_DTLS_FINGERPRINT_ERROR
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_DTLS_FINGERPRINT_ERROR', 'Failed by DTLS fingerprint error');
          /**
           * No common codecs in sdp
           * @event NO_COMMON_CODECS
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'NO_COMMON_CODECS', 'No common codecs');
          /**
           * Client did not send DTLS packets or packets were lost/corrupted during transmission.
           * @event FAILED_BY_DTLS_ERROR
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_DTLS_ERROR', 'Failed by DTLS error');
          /**
           * Error occurred during call
           * @event FAILED_BY_ERROR
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_ERROR', 'Failed by error');
          /**
           * Call failed by request timeout
           * @event FAILED_BY_REQUEST_TIMEOUT
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'FAILED_BY_REQUEST_TIMEOUT', 'Failed by request timeout');
          /**
           * Transcoding required, but disabled in settings
           * @event TRANSCODING_REQUIRED_BUT_DISABLED
           * @memberof Flashphoner.constants.CALL_STATUS_INFO
           */

          define(callStatusInfo, 'TRANSCODING_REQUIRED_BUT_DISABLED', 'Transcoding required, but disabled');
          /**
           * @namespace Flashphoner.constants.ERROR_INFO
           */

          const errorInfo = {};
          /**
           * Error if none of MediaProviders available
           * @event NONE_OF_MEDIAPROVIDERS_AVAILABLE
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'NONE_OF_MEDIAPROVIDERS_AVAILABLE', 'None of MediaProviders available');
          /**
           * Error if none of preferred MediaProviders available
           * @event NONE_OF_PREFERRED_MEDIAPROVIDERS_AVAILABLE
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'NONE_OF_PREFERRED_MEDIAPROVIDERS_AVAILABLE', 'None of preferred MediaProviders available');
          /**
           * Error if API is not initialized
           * @event FLASHPHONER_API_NOT_INITIALIZED
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'FLASHPHONER_API_NOT_INITIALIZED', 'Flashphoner API is not initialized');
          /**
           * Error if options.urlServer is not specified
           * @event OPTIONS_URLSERVER_MUST_BE_PROVIDED
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'OPTIONS_URLSERVER_MUST_BE_PROVIDED', 'options.urlServer must be provided');
          /**
           * Error if session state is not REGISTERED
           * @event INVALID_SESSION_STATE
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'INVALID_SESSION_STATE', 'Invalid session state');
          /**
           * Error if no options provided
           * @event OPTIONS_MUST_BE_PROVIDED
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'OPTIONS_MUST_BE_PROVIDED', 'options must be provided');
          /**
           * Error if call status is not {@link Flashphoner.constants.CALL_STATUS.NEW}
           * @event INVALID_CALL_STATE
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'INVALID_CALL_STATE', 'Invalid call state');
          /**
           * Error if event is not specified
           * @event EVENT_CANT_BE_NULL
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'EVENT_CANT_BE_NULL', "Event can't be null");
          /**
           * Error if callback is not a valid function
           * @event CALLBACK_NEEDS_TO_BE_A_VALID_FUNCTION
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'CALLBACK_NEEDS_TO_BE_A_VALID_FUNCTION', 'Callback needs to be a valid function');
          /**
           * Error if session state is not ESTABLISHED
           * @event INVALID_SESSION_STATE
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'INVALID_SESSION_STATE', 'Invalid session state');
          /**
           * Error if options.name is not specified
           * @event OPTIONS_NAME_MUST_BE_PROVIDED
           * @memberof Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'OPTIONS_NAME_MUST_BE_PROVIDED', 'options.name must be provided');
          /**
           * Error if number of cams is less than 2 or already used custom stream
           * @event CAN_NOT_SWITCH_CAM
           * @memberOf Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'CAN_NOT_SWITCH_CAM', 'Number of cams is less than 2 or already used custom stream');
          /**
           * Error if number of mics is less than 2 or already used custom stream
           * @event CAN_NOT_SWITCH_MIC
           * @memberOf Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'CAN_NOT_SWITCH_MIC', 'Number of mics is less than 2 or already used custom stream');
          /**
           * Error if recived local error
           * @event CAN_NOT_SWITCH_MIC
           * @memberOf Flashphoner.constants.ERROR_INFO
           */

          define(errorInfo, 'LOCAL_ERROR', 'Local error');
          const mediaDeviceKind = {};
          define(mediaDeviceKind, 'OUTPUT', 'output');
          define(mediaDeviceKind, 'INPUT', 'input');
          define(mediaDeviceKind, 'ALL', 'all');
          const transportType = {};
          define(transportType, 'UDP', 'UDP');
          define(transportType, 'TCP', 'TCP');
          const connectionQuality = {};
          define(connectionQuality, 'PERFECT', 'PERFECT');
          define(connectionQuality, 'GOOD', 'GOOD');
          define(connectionQuality, 'BAD', 'BAD');
          define(connectionQuality, 'UNKNOWN', 'UNKNOWN');
          define(connectionQuality, 'UPDATE', 'UPDATE');
          const streamEventType = {};
          define(streamEventType, 'AUDIO_MUTED', 'audioMuted');
          define(streamEventType, 'AUDIO_UNMUTED', 'audioUnmuted');
          define(streamEventType, 'VIDEO_MUTED', 'videoMuted');
          define(streamEventType, 'VIDEO_UNMUTED', 'videoUnmuted');
          define(streamEventType, 'DATA', 'data');
          const constants = {};
          define(constants, 'SESSION_STATUS', sessionStatus);
          define(constants, 'STREAM_EVENT_TYPE', streamEventType);
          define(constants, 'STREAM_EVENT', 'STREAM_EVENT');
          define(constants, 'STREAM_STATUS', streamStatus);
          define(constants, 'CALL_STATUS', callStatus);
          define(constants, 'STREAM_STATUS_INFO', streamStatusInfo);
          define(constants, 'CALL_STATUS_INFO', callStatusInfo);
          define(constants, 'ERROR_INFO', errorInfo);
          define(constants, 'MEDIA_DEVICE_KIND', mediaDeviceKind);
          define(constants, 'TRANSPORT_TYPE', transportType);
          define(constants, 'CONNECTION_QUALITY', connectionQuality); // define helper

          function define(obj, name, value) {
            Object.defineProperty(obj, name, {
              value,
              enumerable: true,
            });
          }

          module.exports = constants;
        },
        {},
      ],
      29: [
        function (require, module, exports) {
          function _typeof(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof = function _typeof(obj) {
                return typeof obj;
              };
            } else {
              _typeof = function _typeof(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof(obj);
          }

          const swfobject = require('swfobject');

          const Promise = require('promise-polyfill');

          const uuid_v1 = require('uuid/v1');

          const connections = {};
          let flashScope;
          let swfLocation = 'media-provider.swf';
          const DEFAULT_SDP = 'v=0\r\n'
            + 'o=- 1988962254 1988962254 IN IP4 0.0.0.0\r\n'
            + 'c=IN IP4 0.0.0.0\r\n'
            + 't=0 0\r\n'
            + 'a=sdplang:en\r\n'
            + 'm=video 0 RTP/AVP 112\r\n'
            + 'a=rtpmap:112 H264/90000\r\n'
            + 'a=fmtp:112 packetization-mode=1; profile-level-id=420020\r\n'
            + 'a=VIDEO_STATE\r\n'
            + 'm=audio 0 RTP/AVP 8 0 100 102 103 104 105 106 107 108 109 110\r\n'
            + 'a=rtpmap:0 PCMU/8000\r\n'
            + 'a=rtpmap:8 PCMA/8000\r\n'
            + 'a=rtpmap:100 SPEEX/16000\r\n'
            + 'a=rtpmap:102 mpeg4-generic/48000/1\r\n'
            + 'a=rtpmap:103 mpeg4-generic/8000/1\r\n'
            + 'a=rtpmap:104 mpeg4-generic/11025/1\r\n'
            + 'a=rtpmap:105 mpeg4-generic/12000/1\r\n'
            + 'a=rtpmap:106 mpeg4-generic/16000/1\r\n'
            + 'a=rtpmap:107 mpeg4-generic/22050/1\r\n'
            + 'a=rtpmap:108 mpeg4-generic/24000/1\r\n'
            + 'a=rtpmap:109 mpeg4-generic/32000/1\r\n'
            + 'a=rtpmap:110 mpeg4-generic/44100/1\r\n'
            + 'a=AUDIO_STATE\r\n';
          const CACHED_INSTANCE_POSTFIX = 'CACHED_FLASH_INSTANCE';
          let defaultConstraints;
          let logger;
          const LOG_PREFIX = 'flash';

          const createConnection = function createConnection(options) {
            return new Promise(((resolve, reject) => {
              const { id } = options;
              const { authToken } = options;
              const display = options.display || options.localDisplay;
              const flashBufferTime = options.flashBufferTime || 0;
              const url = getConnectionUrl(options.mainUrl, options.flashProto, options.flashPort); // todo state from flash instance

              const state = function state() {
                return 'new';
              };

              let flash = getCacheInstance(display);

              if (flash) {
                flash.reset(id);
                flash.id = id;
                installCallback(flash, 'addLogMessage', (message) => {
                  logger.info(LOG_PREFIX, `Flash[${id}]:${message}`);
                });
                installCallback(flash, 'connectionStatus', (status) => {
                  removeCallback(flash, 'connectionStatus');

                  if (status === 'Success') {
                    connections[id] = exports;
                    resolve(exports);
                  } else {
                    reject(new Error(`Flash connection returned status ${status}`));
                  }
                });
                flash.connect(url, authToken, options.login);
              } else {
                loadSwf(id, display, options.flashShowFullScreenButton || 'false')
                  .then((swf) => {
                    installCallback(swf, 'connectionStatus', (status) => {
                      removeCallback(swf, 'connectionStatus');

                      if (status === 'Success') {
                        connections[id] = exports;
                        resolve(exports);
                      } else {
                        reject(new Error(`Flash connection returned status ${status}`));
                      }
                    });
                    flash = swf;
                    flash.connect(url, authToken, options.login);
                  })
                  .catch(reject);
              }

              const createOffer = function createOffer(options) {
                return new Promise(((resolve, reject) => {
                  const receiveAudio = options.receiveAudio == undefined ? false : options.receiveAudio;
                  const receiveVideo = options.receiveVideo == undefined ? false : options.receiveVideo;
                  const sendAudio = flash.isHasAudio();
                  const sendVideo = flash.isHasVideo();
                  let sdp = DEFAULT_SDP;

                  if (receiveAudio && sendAudio) {
                    sdp = sdp.replace('AUDIO_STATE', 'sendrecv');
                  } else if (receiveAudio && !sendAudio) {
                    sdp = sdp.replace('AUDIO_STATE', 'recvonly');
                  } else if (!receiveAudio && sendAudio) {
                    sdp = sdp.replace('AUDIO_STATE', 'sendonly');
                  } else {
                    sdp = sdp.replace('AUDIO_STATE', 'inactive');
                  }

                  if (receiveVideo && sendVideo) {
                    sdp = sdp.replace('VIDEO_STATE', 'sendrecv');
                  } else if (receiveVideo && !sendVideo) {
                    sdp = sdp.replace('VIDEO_STATE', 'recvonly');
                  } else if (!receiveVideo && sendVideo) {
                    sdp = sdp.replace('VIDEO_STATE', 'sendonly');
                  } else {
                    sdp = sdp.replace('VIDEO_STATE', 'inactive');
                  }

                  const o = {};
                  o.sdp = sdp;
                  o.hasAudio = flash.isHasAudio();
                  o.hasVideo = flash.isHasVideo();
                  resolve(o);
                }));
              };

              const createAnswer = function createAnswer(options) {
                return new Promise(((resolve, reject) => {
                  const receiveAudio = options.receiveAudio == undefined ? true : options.receiveAudio;
                  const receiveVideo = options.receiveVideo == undefined ? false : options.receiveVideo;
                  const sendAudio = flash.isHasAudio();
                  const sendVideo = flash.isHasVideo();
                  let sdp = DEFAULT_SDP;

                  if (receiveAudio && sendAudio) {
                    sdp = sdp.replace('AUDIO_STATE', 'sendrecv');
                  } else if (receiveAudio && !sendAudio) {
                    sdp = sdp.replace('AUDIO_STATE', 'recvonly');
                  } else if (!receiveAudio && sendAudio) {
                    sdp = sdp.replace('AUDIO_STATE', 'sendonly');
                  } else {
                    sdp = sdp.replace('AUDIO_STATE', 'inactive');
                  }

                  if (receiveVideo && sendVideo) {
                    sdp = sdp.replace('VIDEO_STATE', 'sendrecv');
                  } else if (receiveVideo && !sendVideo) {
                    sdp = sdp.replace('VIDEO_STATE', 'recvonly');
                  } else if (!receiveVideo && sendVideo) {
                    sdp = sdp.replace('VIDEO_STATE', 'sendonly');
                  } else {
                    sdp = sdp.replace('VIDEO_STATE', 'inactive');
                  }

                  resolve(sdp);
                }));
              };

              const changeAudioCodec = function changeAudioCodec(codec) {
                flash.changeAudioCodec(codec);
              };

              const setRemoteSdp = function setRemoteSdp(sdp, reinit, id) {
                logger.debug(LOG_PREFIX, 'setRemoteSDP:');
                logger.debug(LOG_PREFIX, sdp);
                return new Promise(((resolve, reject) => {
                  const state = extractMediaState(sdp);
                  if (reinit) flash.updateId(id);
                  flash.setup(
                    state.incoming,
                    state.outgoing,
                    flash.isHasAudio(),
                    flash.isHasVideo(),
                    flashBufferTime,
                    reinit,
                  );
                  resolve(connections[id]);
                }));
              };

              const close = function close(cacheCamera) {
                if (flash) {
                  flash.disconnect();

                  if (!getCacheInstance(display) && flash.hasAccessToAudio() && cacheCamera) {
                    cacheInstance(flash);
                  } else {
                    clearCallbacks(flash);
                    swfobject.removeSWF(flash.id);
                  }

                  flash = null;
                }
              };

              const getVolume = function getVolume() {
                if (flash) {
                  return flash.getVolume();
                }

                return -1;
              };

              const setVolume = function setVolume(volume) {
                if (flash) {
                  flash.setVolume(volume);
                }
              };

              const muteAudio = function muteAudio() {
                if (flash) {
                  flash.muteAudio();
                }
              };

              const unmuteAudio = function unmuteAudio() {
                if (flash) {
                  flash.unmuteAudio();
                }
              };

              const isAudioMuted = function isAudioMuted() {
                if (flash) {
                  return flash.isAudioMuted();
                }

                return true;
              };

              const muteVideo = function muteVideo() {
                if (flash) {
                  flash.muteVideo();
                }
              };

              const unmuteVideo = function unmuteVideo() {
                if (flash) {
                  flash.unmuteVideo();
                }
              };

              const isVideoMuted = function isVideoMuted() {
                if (flash) {
                  return flash.isVideoMuted();
                }

                return true;
              };

              const getStats = function getStats(callbackFn) {
                if (flash) {
                  const statistics = flash.getStats();
                  let param;

                  if (statistics.hasOwnProperty('incoming')) {
                    for (param in statistics.incoming.info) {
                      if (param.indexOf('audio') > -1) {
                        statistics.incoming.audio[param] = statistics.incoming.info[param];
                      }

                      if (param.indexOf('video') > -1) {
                        statistics.incoming.video[param] = statistics.incoming.info[param];
                      }
                    }

                    delete statistics.incoming.info;
                  }

                  if (statistics.hasOwnProperty('outgoing')) {
                    for (param in statistics.outgoing.info) {
                      if (param.indexOf('audio') > -1) {
                        statistics.outgoing.audio[param] = statistics.outgoing.info[param];
                      }

                      if (param.indexOf('video') > -1) {
                        statistics.outgoing.video[param] = statistics.outgoing.info[param];
                      }
                    }

                    delete statistics.outgoing.info;
                  }

                  statistics.type = 'flash';
                  callbackFn(statistics);
                }
              };

              const fullScreen = function fullScreen() {
                if (flash) {
                  flash.fullScreen();
                }
              };

              const switchCam = function switchCam() {};

              const switchMic = function switchMic() {};

              const setMicrophoneGain = function setMicrophoneGain(volume) {};

              const switchToScreen = function switchToScreen() {};

              const switchToCam = function switchToCam() {};

              var exports = {};
              exports.state = state;
              exports.createOffer = createOffer;
              exports.createAnswer = createAnswer;
              exports.setRemoteSdp = setRemoteSdp;
              exports.changeAudioCodec = changeAudioCodec;
              exports.close = close;
              exports.setVolume = setVolume;
              exports.setMicrophoneGain = setMicrophoneGain;
              exports.getVolume = getVolume;
              exports.muteAudio = muteAudio;
              exports.unmuteAudio = unmuteAudio;
              exports.isAudioMuted = isAudioMuted;
              exports.muteVideo = muteVideo;
              exports.unmuteVideo = unmuteVideo;
              exports.isVideoMuted = isVideoMuted;
              exports.getStats = getStats;
              exports.fullScreen = fullScreen;
              exports.switchCam = switchCam;
              exports.switchMic = switchMic;
              exports.switchToScreen = switchToScreen;
              exports.switchToCam = switchToCam;
            }));
          }; // install global part to use flash ExternalInterface

          function installFlashScope() {
            if (flashScope == undefined) {
              const globalApiObject = window.Flashphoner;

              if (globalApiObject == undefined) {
                throw new Error(
                  "Can't install global scope, there is no window.Flashphoner variable.",
                );
              }

              globalApiObject.FlashApiScope = {};
              flashScope = window.Flashphoner.FlashApiScope;
            }
          }
          /**
           *
           * @param id This can be string representing scopeId or object element (swf)
           * @param name callback name
           * @param value callback function
           */

          function installCallback(id, name, value) {
            installFlashScope();
            const scopeId = getInstanceScopeId(id);

            if (flashScope[scopeId] == undefined) {
              flashScope[scopeId] = {};
            }

            flashScope[scopeId][name] = value;
          }
          /**
           *
           * @param id This can be string representing scopeId or object element (swf)
           * @param name callback name
           */

          function removeCallback(id, name) {
            delete flashScope[getInstanceScopeId(id)][name];
          }

          function cacheInstance(flash) {
            installCallback(flash, 'addLogMessage', (message) => {
              logger.info(LOG_PREFIX, `Flash[${flash.id}]:${message}`);
            });
            removeCallback(flash, 'connectionStatus');
            flash.reset(flash.id + CACHED_INSTANCE_POSTFIX);
            flash.id += CACHED_INSTANCE_POSTFIX;
          }
          /**
           *
           * @param id This can be string representing scopeId or object element (swf)
           */

          function clearCallbacks(id) {
            delete flashScope[getInstanceScopeId(id)];
          }

          function getInstanceScopeId(flash) {
            if (typeof flash === 'string') {
              return flash;
            }

            for (let i = 0; i < flash.children.length; i++) {
              if (flash.children[i].name == 'scopeId') {
                return flash.children[i].value;
              }
            }
          }

          const getMediaAccess = function getMediaAccess(constraints, display) {
            return new Promise(((resolve, reject) => {
              const flash = getCacheInstance(display);

              if (!flash) {
                const id = uuid_v1() + CACHED_INSTANCE_POSTFIX;
                loadSwf(id, display).then((swf) => {
                  // todo return camera and mic id
                  installCallback(swf, 'accessGranted', () => {
                    removeCallback(swf, 'accessGranted');
                    resolve(display);
                  });
                  installCallback(swf, 'accessDenied', () => {
                    removeCallback(swf, 'accessDenied');
                    reject(new Error('Failed to get access to audio and video'));
                  });

                  if (!constraints) {
                    constraints = defaultConstraints;
                  }

                  if (!swf.getMediaAccess(normalizeConstraints(constraints))) {
                    reject(new Error('Failed to get access to audio and video'));
                  }
                });
              } else {
                installCallback(flash, 'accessGranted', () => {
                  removeCallback(flash, 'accessGranted');
                  resolve(display);
                });
                installCallback(flash, 'accessDenied', () => {
                  removeCallback(flash, 'accessDenied');
                  reject(new Error('Failed to get access to audio and video'));
                });

                if (!flash.getMediaAccess(normalizeConstraints(constraints))) {
                  reject(new Error('Failed to get access to audio and video'));
                }
              }
            }));
          };

          const releaseMedia = function releaseMedia(display) {
            const flash = getCacheInstance(display);

            if (flash) {
              clearCallbacks(flash);
              swfobject.removeSWF(flash.id);
              return true;
            }

            return false;
          }; // swf helpers
          // TODO wrap params to object

          var loadSwf = function loadSwf(id, display, showFullScreenButton) {
            return new Promise(((resolve, reject) => {
              let swf;
              const divWrapper = document.createElement('div');
              divWrapper.id = id;
              display.appendChild(divWrapper);
              const flashvars = {
                id,
                showFullScreenButton: showFullScreenButton || 'false',
              };
              const params = {};
              params.menu = 'true';
              params.swliveconnect = 'true';
              params.allowFullScreen = 'true';
              params.allowscriptaccess = 'always';
              params.wmode = 'opaque';
              params.scopeId = id;
              const attributes = {};
              attributes.allowfullscreen = 'true';
              installCallback(id, 'addLogMessage', (message) => {
                logger.info(LOG_PREFIX, `Flash[${id}]:${message}`);
              });
              installCallback(id, 'initialized', () => {
                resolve(swf);
              });
              installCallback(id, 'videoResolution', (width, height) => {
                swf.videoWidth = width;
                swf.videoHeight = height;
                setTimeout(() => {
                  const event = new CustomEvent('resize');
                  swf.dispatchEvent(event);
                }, 10);
                setTimeout(() => {
                  const event = new CustomEvent('playing');
                  swf.dispatchEvent(event);
                }, 10);
              }); // todo switch from id to element (divWrapper)

              swfobject.embedSWF(
                swfLocation,
                id,
                '100%',
                '100%',
                '11.2.0',
                'expressInstall.swf',
                flashvars,
                params,
                attributes,
                (ret) => {
                  swf = ret.ref;

                  if (!ret.success) {
                    reject(new Error(`Failed to load flash media provider swf with id ${id}`));
                  }
                },
              );
            }));
          };

          function getCacheInstance(display) {
            let i;

            for (i = 0; i < display.children.length; i++) {
              if (
                display.children[i]
                && display.children[i].id.indexOf(CACHED_INSTANCE_POSTFIX) != -1
              ) {
                logger.info(
                  LOG_PREFIX,
                  `FOUND FLASH CACHED INSTANCE, id ${display.children[i].id}`,
                );
                return display.children[i];
              }
            }
          } // sdp helper, extract state from server sdp

          function extractMediaState(sdp) {
            const state = {
              incoming: false,
              outgoing: false,
            };

            if (sdp.indexOf('a=sendrecv') != -1) {
              state.incoming = true;
              state.outgoing = true;
            } else if (sdp.indexOf('a=recvonly') != -1) {
              state.outgoing = true;
            } else if (sdp.indexOf('a=sendonly') != -1) {
              state.incoming = true;
            }

            return state;
          } // connection ip

          function getConnectionUrl(mainUrl, proto, port) {
            const a = document.createElement('a');
            a.href = mainUrl;
            return `${proto}://${a.hostname}:${port}/`;
          }
          /**
           * Check Flash Player available
           *
           * @returns {boolean} flash player available
           */

          const available = function available() {
            return swfobject.hasFlashPlayerVersion('11.2.0');
          };

          const listDevices = function listDevices() {
            return new Promise(((resolve, reject) => {
              const display = document.createElement('div');
              display.setAttribute('style', 'width:1px;height:1px');
              const id = uuid_v1(); // attach display to document, otherwise swf won't be loaded

              document.body.appendChild(display);
              loadSwf(id, display).then((swf) => {
                const list = swf.listDevices(); // remove swf, display

                swfobject.removeSWF(id);
                document.body.removeChild(display);
                resolve(list);
              }, reject);
            }));
          };

          function normalizeConstraints(constraints) {
            if (constraints && typeof constraints.video !== 'undefined') {
              if (
                constraints.video.hasOwnProperty('frameRate')
                && constraints.video.frameRate !== 'object'
              ) {
                const { frameRate } = constraints.video;

                if (frameRate == 0 || isNaN(frameRate)) {
                  delete constraints.video.frameRate;
                }
              }

              if (constraints.video === false) {
                delete constraints.video;
              } else if (constraints.video === true) {
                // Set default video constraints
                constraints.video = {
                  width: 320,
                  height: 240,
                };
              } else {
                if (constraints.video.hasOwnProperty('width')) {
                  const { width } = constraints.video;

                  if (isNaN(width) || width == 0) {
                    logger.warn(
                      LOG_PREFIX,
                      'Width or height property has zero/NaN value, set default resolution 320x240',
                    );
                    constraints.video.width = 320;
                    constraints.video.height = 240;
                  }

                  if (_typeof(width) == 'object') {
                    constraints.video.width = constraints.video.width.exact
                      || constraints.video.width.max
                      || constraints.video.width.min;
                  }
                }

                if (constraints.video.hasOwnProperty('height')) {
                  const { height } = constraints.video;

                  if (isNaN(height) || height == 0) {
                    logger.warn(
                      LOG_PREFIX,
                      'Width or height property has zero/NaN value, set default resolution 320x240',
                    );
                    constraints.video.width = 320;
                    constraints.video.height = 240;
                  }

                  if (_typeof(height) == 'object') {
                    constraints.video.height = constraints.video.height.exact
                      || constraints.video.height.max
                      || constraints.video.height.min;
                  }
                }
              }
            }

            return constraints;
          } // CustomEvent IE polyfill

          (function () {
            function CustomEvent(event, params) {
              params = params || {
                bubbles: false,
                cancelable: false,
                detail: undefined,
              };
              const evt = document.createEvent('CustomEvent');
              evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
              return evt;
            }

            CustomEvent.prototype = window.Event.prototype;
            window.CustomEvent = CustomEvent;
          }());

          const playFirstSound = function playFirstSound() {
            return true;
          };

          const playFirstVideo = function playFirstVideo() {
            return new Promise(((resolve, reject) => {
              resolve();
            }));
          };

          module.exports = {
            createConnection,
            getMediaAccess,
            releaseMedia,
            available,
            listDevices,
            playFirstSound,
            playFirstVideo,
            configure: function configure(configuration) {
              swfLocation = configuration.flashMediaProviderSwfLocation;
              defaultConstraints = configuration.constraints;
              logger = configuration.logger;
              logger.info(LOG_PREFIX, 'Initialized');
            },
          };
        },
        { 'promise-polyfill': 4, swfobject: 7, 'uuid/v1': 11 },
      ],
      30: [
        function (require, module, exports) {
          function _typeof(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof = function _typeof(obj) {
                return typeof obj;
              };
            } else {
              _typeof = function _typeof(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof(obj);
          }

          const uuid_v1 = require('uuid/v1');

          const constants = require('./constants');

          const util = require('./util');

          const { logger } = require('./util');

          let loggerConf = {
            push: false,
            severity: 'INFO',
          };

          const Promise = require('promise-polyfill');

          const KalmanFilter = require('kalmanjs');

          const { browserDetails } = require('webrtc-adapter').default;

          const LOG_PREFIX = 'core';
          let isUsingTemasysPlugin = false;
          /**
           * @namespace Flashphoner
           */

          const { SESSION_STATUS } = constants;
          const { STREAM_EVENT } = constants;
          const { STREAM_EVENT_TYPE } = constants;
          const { STREAM_STATUS } = constants;
          const { CALL_STATUS } = constants;
          const { TRANSPORT_TYPE } = constants;
          const { CONNECTION_QUALITY } = constants;
          const { ERROR_INFO } = constants;
          const VIDEO_RATE_GOOD_QUALITY_PERCENT_DIFFERENCE = 20;
          const VIDEO_RATE_BAD_QUALITY_PERCENT_DIFFERENCE = 50;
          const LOW_VIDEO_RATE_THRESHOLD_BAD_PERFECT = 50000;
          const LOW_VIDEO_RATE_BAD_QUALITY_PERCENT_DIFFERENCE = 150;
          const OUTBOUND_VIDEO_RATE = 'outboundVideoRate';
          const INBOUND_VIDEO_RATE = 'inboundVideoRate';
          let MediaProvider = {};
          const sessions = {};
          let initialized = false;
          let disableConnectionQualityCalculation;
          /**
           * Static initializer.
           *
           * @param {Object} options Global api options
           * @param {Function=} options.mediaProvidersReadyCallback Callback of initialized WebRTC Plugin
           * @param {String=} options.flashMediaProviderSwfLocation Location of media-provider.swf file
           * @param {string=} options.preferredMediaProvider DEPRECATED: Use preferred media provider if available
           * @param {Array=} options.preferredMediaProviders Use preferred media providers order
           * @param {String=} options.receiverLocation Location of WSReceiver.js file
           * @param {String=} options.decoderLocation Location of video-worker2.js file
           * @param {String=} options.screenSharingExtensionId Chrome screen sharing extension id
           * @param {Object=} options.constraints Default local media constraints
           * @param {Object=} options.logger Enable logging
           * @throws {Error} Error if none of MediaProviders available
           * @memberof Flashphoner
           */

          const init = function init(options) {
            if (!initialized) {
              if (!options) {
                options = {};
              }

              loggerConf = options.logger || loggerConf;

              if (options.logger !== null) {
                loggerConf.enableLogs = true;
              } // init logger

              logger.init(
                loggerConf.severity || 'INFO',
                loggerConf.push || false,
                loggerConf.customLogger,
                loggerConf.enableLogs,
              );
              let waitingTemasys = false;

              try {
                var audioContext = new (window.AudioContext || window.webkitAudioContext)();
              } catch (e) {
                console.warn('Failed to create audio context');
              }

              disableConnectionQualityCalculation = options.disableConnectionQualityCalculation;

              let webRtcProvider = require('./webrtc-media-provider');

              if (
                webRtcProvider
                && webRtcProvider.hasOwnProperty('available')
                && webRtcProvider.available()
              ) {
                MediaProvider.WebRTC = webRtcProvider; // WCS-2996 Fix audio-video out of sync in case of using Samsung browser

                const enableGainNode = util.Browser.isSamsungBrowser() || util.Browser.isAndroidFirefox()
                  ? false
                  : options.createMicGainNode;
                const webRtcConf = {
                  constraints: options.constraints || getDefaultMediaConstraints(),
                  extensionId: options.screenSharingExtensionId,
                  audioContext,
                  logger,
                  createMicGainNode: enableGainNode,
                };
                webRtcProvider.configure(webRtcConf);
              } else {
                webRtcProvider = require('./temasys-media-provider');

                if (webRtcProvider && webRtcProvider.hasOwnProperty('available') && AdapterJS) {
                  waitingTemasys = true;
                  AdapterJS.webRTCReady((isUsingPlugin) => {
                    isUsingTemasysPlugin = isUsingPlugin;

                    if (isUsingPlugin || webRtcProvider.available()) {
                      MediaProvider.WebRTC = webRtcProvider;
                      const webRtcConf = {
                        constraints: options.constraints || getDefaultMediaConstraints(),
                        extensionId: options.screenSharingExtensionId,
                        logger,
                      };
                      webRtcProvider.configure(webRtcConf); // Just reorder media provider list

                      const _MediaProvider = {};
                      _MediaProvider.WebRTC = MediaProvider.WebRTC;

                      for (const p in MediaProvider) {
                        _MediaProvider[p] = MediaProvider[p];
                      }

                      MediaProvider = _MediaProvider;
                    }

                    if (options.mediaProvidersReadyCallback) {
                      options.mediaProvidersReadyCallback(Object.keys(MediaProvider));
                    }
                  });
                }
              }

              const flashProvider = require('./flash-media-provider');

              if (
                flashProvider
                && flashProvider.hasOwnProperty('available')
                && flashProvider.available()
                && (!MediaProvider.WebRTC
                  || (options.preferredMediaProviders
                    && options.preferredMediaProviders.indexOf('Flash') >= 0))
              ) {
                MediaProvider.Flash = flashProvider;
                const flashConf = {
                  constraints: options.constraints || getDefaultMediaConstraints(),
                  flashMediaProviderSwfLocation: options.flashMediaProviderSwfLocation,
                  logger,
                };
                flashProvider.configure(flashConf);
              }

              const mediaSourceMediaProvider = require('./media-source-media-provider');

              if (
                mediaSourceMediaProvider
                && mediaSourceMediaProvider.hasOwnProperty('available')
                && mediaSourceMediaProvider.available()
              ) {
                MediaProvider.MSE = mediaSourceMediaProvider;
                const mseConf = {
                  audioContext,
                  browserDetails: browserDetails.browser,
                };
                mediaSourceMediaProvider.configure(mseConf);
              }

              const websocketProvider = require('./websocket-media-provider');

              if (
                websocketProvider
                && websocketProvider.hasOwnProperty('available')
                && websocketProvider.available(audioContext)
              ) {
                MediaProvider.WSPlayer = websocketProvider;
                const wsConf = {
                  receiverLocation: options.receiverLocation,
                  decoderLocation: options.decoderLocation,
                  audioContext,
                  logger,
                };
                websocketProvider.configure(wsConf);
              } // check at least 1 provider available

              if (getMediaProviders().length == 0) {
                throw new Error('None of MediaProviders available');
              } else if (options.preferredMediaProvider) {
                if (MediaProvider.hasOwnProperty(options.preferredMediaProvider)) {
                  if (getMediaProviders()[0] != options.preferredMediaProvider) {
                    // Just reorder media provider list
                    const _MediaProvider = {};
                    _MediaProvider[options.preferredMediaProvider] = MediaProvider[options.preferredMediaProvider];

                    for (const p in MediaProvider) {
                      _MediaProvider[p] = MediaProvider[p];
                    }

                    MediaProvider = _MediaProvider;
                  }
                } else {
                  logger.warn(LOG_PREFIX, 'Preferred media provider is not available.');
                }
              }

              if (options.preferredMediaProviders && options.preferredMediaProviders.length > 0) {
                const newMediaProvider = {};

                for (const i in options.preferredMediaProviders) {
                  if (options.preferredMediaProviders.hasOwnProperty(i)) {
                    const pMP = options.preferredMediaProviders[i];

                    if (MediaProvider.hasOwnProperty(pMP)) {
                      newMediaProvider[pMP] = MediaProvider[pMP];
                    }
                  }
                }

                if (util.isEmptyObject(newMediaProvider)) {
                  throw new Error('None of preferred MediaProviders available');
                } else {
                  MediaProvider = newMediaProvider;
                }
              }

              if (!waitingTemasys && options.mediaProvidersReadyCallback) {
                options.mediaProvidersReadyCallback(Object.keys(MediaProvider));
              }

              logger.info(LOG_PREFIX, 'Initialized');
              initialized = true;
            }
          };
          /**
           * Get available MediaProviders.
           *
           * @returns {Array} Available MediaProviders
           * @memberof Flashphoner
           */

          var getMediaProviders = function getMediaProviders() {
            return Object.keys(MediaProvider);
          };
          /**
           * Play audio chunk
           * @param {boolean} noise Use noise in playing
           * @memberof Flashphoner
           */

          const playFirstSound = function playFirstSound(noise) {
            const mediaProvider = getMediaProviders()[0];
            MediaProvider[mediaProvider].playFirstSound(noise);
          };
          /**
           * Play video chunk
           *
           * @memberof Flashphoner
           */

          const playFirstVideo = function playFirstVideo(display, isLocal, src) {
            for (const mp in MediaProvider) {
              return MediaProvider[mp].playFirstVideo(display, isLocal, src);
            }
          };
          /**
           * Get logger
           *
           * @returns {Object} Logger
           * @memberof Flashphoner
           */

          const getLogger = function getLogger() {
            if (!initialized) {
              console.warn('Initialize API first.');
            } else {
              return logger;
            }
          };
          /**
           * @typedef Flashphoner.MediaDeviceList
           * @type Object
           * @property {Flashphoner.MediaDevice[]} audio Audio devices (microphones)
           * @property {Flashphoner.MediaDevice[]} video Video devices (cameras)
           */

          /**
           * @typedef Flashphoner.MediaDevice
           * @type Object
           * @property {String} type Type of device: mic, camera, screen
           * @property {String} id Unique id
           * @property {String} label Device label
           */

          /**
           * Get available local media devices
           *
           * @param {String=} mediaProvider Media provider that will be asked for device list
           * @param {Boolean=} labels Ask user for microphone access before getting device list.
           * This will make device label available.
           * @param {Flashphoner.constants.MEDIA_DEVICE_KIND} kind Media devices kind to access:
           * MEDIA_DEVICE_KIND.INPUT (default) get access to input devices only (camera, mic).
           * MEDIA_DEVICE_KIND.OUTPUT get access to output devices only (speaker, headphone).
           * MEDIA_DEVICE_KIND.ALL get access to all devices (cam, mic, speaker, headphone).
           * @param {Object=} deviceConstraints If labels == true.
           * If {audio: true, video: false}, then access to the camera will not be requested.
           * If {audio: false, video: true}, then access to the microphone will not be requested.
           * @returns {Promise.<Flashphoner.MediaDeviceList>} Promise with media device list on fulfill
           * @throws {Error} Error if API is not initialized
           * @memberof Flashphoner
           */

          const getMediaDevices = function getMediaDevices(
            mediaProvider,
            labels,
            kind,
            deviceConstraints,
          ) {
            if (!initialized) {
              throw new Error('Flashphoner API is not initialized');
            }

            if (!mediaProvider) {
              mediaProvider = getMediaProviders()[0];
            }

            return MediaProvider[mediaProvider].listDevices(labels, kind, deviceConstraints);
          };
          /**
           * Get access to local media
           *
           * @param {Object} constraints Media constraints
           * @param {Object} constraints.audio Audio constraints
           * @param {String=} constraints.audio.deviceId Audio device id
           * @param {Object} constraints.video Video constraints
           * @param {String=} constraints.video.deviceId Video device id
           * @param {number} constraints.video.width Video width
           * @param {number} constraints.video.height Video height
           * @param {number} constraints.video.frameRate Video fps
           * @param {String} constraints.video.type Video device type: camera, screen
           * @param {String} constraints.video.mediaSource Video source type for FF: screen, window
           * @param {HTMLElement} display Div element local media should be displayed in
           * @param {String} mediaProvider Media provider type
           * @param {Boolean} disableConstraintsNormalization Disable constraints normalization
           * @returns {Promise.<HTMLElement>} Promise with display on fulfill
           * @throws {Error} Error if API is not initialized
           * @memberof Flashphoner
           */

          const getMediaAccess = function getMediaAccess(
            constraints,
            display,
            mediaProvider,
            disableConstraintsNormalization,
          ) {
            if (!initialized) {
              throw new Error('Flashphoner API is not initialized');
            }

            if (!mediaProvider) {
              mediaProvider = getMediaProviders()[0];
            }

            return MediaProvider[mediaProvider].getMediaAccess(
              constraints,
              display,
              disableConstraintsNormalization,
            );
          }; // default constraints helper
          // WCS-3016 16:9 ratio

          var getDefaultMediaConstraints = function getDefaultMediaConstraints() {
            if (browserDetails.browser == 'safari') {
              return {
                audio: true,
                video: {
                  width: {
                    min: 320,
                    max: 640,
                  },
                  height: {
                    min: 180,
                    max: 360,
                  },
                },
              };
            }
            return {
              audio: true,
              video: {
                width: 320,
                height: 240,
              },
            };
          };

          function getConstraintsProperty(constraints, property, defaultValue) {
            if (!constraints || !property) return defaultValue;
            let res;
            const properties = property.split('.');

            for (const prop in constraints) {
              if (prop == properties[0]) {
                res = constraints[prop];
                if (properties.length > 1) res = getConstraintsProperty(constraints[prop], properties[1], defaultValue);
              } else if (_typeof(constraints[prop]) === 'object') {
                for (const p in constraints[prop]) {
                  if (p == property) res = constraints[prop][p];
                }
              }
            }

            if (typeof res === 'boolean') return res;
            return res || defaultValue;
          }
          /**
           * Release local media
           *
           * @param {HTMLElement} display Div element with local media
           * @param {String=} mediaProvider Media provider type
           * @returns {Boolean} True if media was found and released
           * @throws {Error} Error if API is not initialized
           * @memberof Flashphoner
           */

          const releaseLocalMedia = function releaseLocalMedia(display, mediaProvider) {
            if (!initialized) {
              throw new Error('Flashphoner API is not initialized');
            }

            if (!mediaProvider) {
              mediaProvider = getMediaProviders()[0];
            }

            return MediaProvider[mediaProvider].releaseMedia(display);
          };
          /**
           * Get active sessions.
           *
           * @returns {Session[]} Array containing active sessions
           * @memberof Flashphoner
           */

          const getSessions = function getSessions() {
            return util.copyObjectToArray(sessions);
          };
          /**
           * Get session by id.
           *
           * @param {string} id Session id
           * @returns {Session} Session
           * @memberof Flashphoner
           */

          const getSession = function getSession(id) {
            return sessions[id];
          };
          /**
           * Create new session and connect to server.
           *
           * @param {Object} options Session options
           * @param {string} options.urlServer Server address in form of [ws,wss]://host.domain:port
           * @param {string} options.authToken Token for auth on server with keepalived client
           * @param {Boolean=} options.keepAlive Keep alive client on server after disconnect
           * @param {string=} options.lbUrl Load-balancer address
           * @param {string=} options.flashProto Flash protocol [rtmp,rtmfp]
           * @param {Integer=} options.flashPort Flash server port [1935]
           * @param {string=} options.appKey REST App key
           * @param {Object=} options.custom User provided custom object that will be available in REST App code
           * @param {Object=} options.sipOptions Sip configuration
           * @param {Object=} options.mediaOptions Media connection configuration
           * @param {Integer=} options.timeout Connection timeout in milliseconds
           * @returns {Session} Created session
           * @throws {Error} Error if API is not initialized
           * @throws {TypeError} Error if options.urlServer is not specified
           * @memberof Flashphoner
           */

          const createSession = function createSession(options) {
            if (!initialized) {
              throw new Error('Flashphoner API is not initialized');
            }

            if (!options || !options.urlServer) {
              throw new TypeError('options.urlServer must be provided');
            }

            const id_ = uuid_v1();
            let sessionStatus = SESSION_STATUS.PENDING;
            let { urlServer } = options;
            const { lbUrl } = options;
            const flashProto = options.flashProto || 'rtmfp';
            let flashPort = options.flashPort || 1935;
            const appKey = options.appKey || 'defaultApp';
            const { mediaOptions } = options;
            const { keepAlive } = options;
            const { timeout } = options;
            let connectionTimeout;
            let cConfig; // SIP config

            let sipConfig;

            if (options.sipOptions) {
              sipConfig = {
                sipLogin: options.sipOptions.login,
                sipAuthenticationName: options.sipOptions.authenticationName,
                sipPassword: options.sipOptions.password,
                sipDomain: options.sipOptions.domain,
                sipOutboundProxy: options.sipOptions.outboundProxy,
                sipProxy: options.sipOptions.proxy,
                sipPort: options.sipOptions.port,
                sipRegisterRequired: options.sipOptions.registerRequired,
              };
            } // media provider auth token received from server

            let { authToken } = options; // object for storing new and active streams

            const streams = {};
            const calls = {};
            const mediaConnections = {}; // session to stream event callbacks

            const streamEventRefreshHandlers = {}; // session to stream callbacks

            const streamRefreshHandlers = {}; // session to call callbacks

            const callRefreshHandlers = {};
            /**
             * Represents connection to REST App.
             * Can create and store Streams.
             *
             * @see Flashphoner.createSession
             * @namespace Session
             */

            const session = {}; // callbacks added using session.on()

            const callbacks = {};
            let wsConnection;

            if (lbUrl) {
              requestURL(lbUrl);
            } else {
              createWS(urlServer);
            } // todo remove

            const remoteSdpCache = {}; // Request URL from load-balancer

            function requestURL(url) {
              const request = new XMLHttpRequest();
              request.open('GET', url, true);
              request.timeout = 5000;

              request.ontimeout = function () {
                logger.warn(LOG_PREFIX, 'Timeout during geting url from balancer!');
                createWS(urlServer);
              };

              request.error = function () {
                logger.warn(LOG_PREFIX, 'Error during geting url from balancer!');
                createWS(urlServer);
              };

              request.onload = function (e) {
                if (request.status == 200 && request.readyState == 4) {
                  const result = JSON.parse(request.responseText);

                  if (urlServer.indexOf('wss://') !== -1) {
                    urlServer = `wss://${result.server}:${result.wss}`;
                  } else {
                    urlServer = `ws://${result.server}:${result.ws}`;
                  }

                  flashPort = result.flash;
                  logger.debug(LOG_PREFIX, `Got url from load balancer ${result.server}`);
                  createWS(urlServer);
                }
              };

              request.send();
            } // connect session to server

            function createWS(url) {
              wsConnection = new WebSocket(url);

              if (timeout != undefined && timeout > 0) {
                connectionTimeout = setTimeout(() => {
                  if (wsConnection.readyState == 0) {
                    console.log('WS connection timeout');
                    wsConnection.close();
                  }
                }, timeout);
              }

              wsConnection.onerror = function () {
                onSessionStatusChange(SESSION_STATUS.FAILED);
              };

              wsConnection.onclose = function () {
                if (sessionStatus !== SESSION_STATUS.FAILED) {
                  onSessionStatusChange(SESSION_STATUS.DISCONNECTED);
                }
              };

              wsConnection.onopen = function () {
                onSessionStatusChange(SESSION_STATUS.CONNECTED);
                clearTimeout(connectionTimeout);
                cConfig = {
                  appKey,
                  mediaProviders: Object.keys(MediaProvider),
                  keepAlive,
                  authToken,
                  clientVersion: '2.0.171',
                  clientOSVersion: window.navigator.appVersion,
                  clientBrowserVersion: window.navigator.userAgent,
                  msePacketizationVersion: 2,
                  custom: options.custom,
                };

                if (sipConfig) {
                  util.copyObjectPropsToAnotherObject(sipConfig, cConfig);
                } // connect to REST App

                send('connection', cConfig);
                logger.setConnection(wsConnection);
              };

              wsConnection.onmessage = function (event) {
                let data = {};

                if (event.data instanceof Blob) {
                  data.message = 'binaryData';
                } else {
                  data = JSON.parse(event.data);
                  var obj = data.data[0];
                }

                switch (data.message) {
                  case 'ping':
                    send('pong', null);
                    break;

                  case 'getUserData':
                    authToken = obj.authToken;
                    cConfig = obj;
                    onSessionStatusChange(SESSION_STATUS.ESTABLISHED, obj);
                    break;

                  case 'setRemoteSDP':
                    var mediaSessionId = data.data[0];
                    var sdp = data.data[1];

                    if (streamRefreshHandlers[mediaSessionId]) {
                      // pass server's sdp to stream
                      streamRefreshHandlers[mediaSessionId](null, sdp);
                    } else if (callRefreshHandlers[mediaSessionId]) {
                      // pass server's sdp to call
                      callRefreshHandlers[mediaSessionId](null, sdp);
                    } else {
                      remoteSdpCache[mediaSessionId] = sdp;
                      logger.info(LOG_PREFIX, `Media not found, id ${mediaSessionId}`);
                    }

                    break;

                  case 'notifyVideoFormat':
                  case 'notifyStreamStatusEvent':
                    if (streamRefreshHandlers[obj.mediaSessionId]) {
                      // update stream status
                      streamRefreshHandlers[obj.mediaSessionId](obj);
                    }

                    break;

                  case 'notifyStreamEvent':
                    if (streamEventRefreshHandlers[obj.mediaSessionId]) {
                      // update stream status
                      streamEventRefreshHandlers[obj.mediaSessionId](obj);
                    }

                    break;

                  case 'DataStatusEvent':
                    restAppCommunicator.resolveData(obj);
                    break;

                  case 'OnDataEvent':
                    if (callbacks[SESSION_STATUS.APP_DATA]) {
                      callbacks[SESSION_STATUS.APP_DATA](obj);
                    }

                    break;

                  case 'fail':
                    if (obj.apiMethod && obj.apiMethod == 'StreamStatusEvent') {
                      if (streamRefreshHandlers[obj.id]) {
                        // update stream status
                        streamRefreshHandlers[obj.id](obj);
                      }
                    }

                    if (callbacks[SESSION_STATUS.WARN]) {
                      callbacks[SESSION_STATUS.WARN](obj);
                    }

                    break;

                  case 'registered':
                    onSessionStatusChange(SESSION_STATUS.REGISTERED);
                    break;

                  case 'notifyAudioCodec':
                    // This case for Flash only
                    var mediaSessionId = data.data[0];
                    var codec = data.data[1];

                    if (callRefreshHandlers[mediaSessionId]) {
                      callRefreshHandlers[mediaSessionId](null, null, codec);
                    }

                    break;

                  case 'notifyTransferEvent':
                    callRefreshHandlers[obj.callId](null, null, null, obj);
                    break;

                  case 'notifyTryingResponse':
                  case 'hold':
                  case 'ring':
                  case 'talk':
                  case 'finish':
                    if (callRefreshHandlers[obj.callId]) {
                      // update call status
                      callRefreshHandlers[obj.callId](obj);
                    }

                    break;

                  case 'notifyIncomingCall':
                    if (callRefreshHandlers[obj.callId]) {
                      logger.error(LOG_PREFIX, `Call already exists, id ${obj.callId}`);
                    }

                    if (callbacks[SESSION_STATUS.INCOMING_CALL]) {
                      callbacks[SESSION_STATUS.INCOMING_CALL](createCall(obj));
                    } else {
                      // todo hangup call
                    }

                    break;

                  case 'notifySessionDebugEvent':
                    logger.info(LOG_PREFIX, `Session debug status ${obj.status}`);

                    if (callbacks[SESSION_STATUS.DEBUG]) {
                      callbacks[SESSION_STATUS.DEBUG](obj);
                    }

                    break;

                  case 'availableStream':
                    var availableStream = {};
                    availableStream.mediaSessionId = obj.id;
                    availableStream.available = obj.status;
                    availableStream.reason = obj.info;

                    if (streamRefreshHandlers[availableStream.mediaSessionId]) {
                      streamRefreshHandlers[availableStream.mediaSessionId](availableStream);
                    }

                    break;

                  case OUTBOUND_VIDEO_RATE:
                  case INBOUND_VIDEO_RATE:
                    if (streamRefreshHandlers[obj.mediaSessionId]) {
                      obj.status = data.message;
                      streamRefreshHandlers[obj.mediaSessionId](obj);
                    }

                    break;

                  default: // logger.info(LOG_PREFIX, "Unknown server message " + data.message);
                }
              };
            } // WebSocket send helper

            function send(message, data) {
              wsConnection.send(
                JSON.stringify({
                  message,
                  data: [data],
                }),
              );
            } // Session status update helper

            function onSessionStatusChange(newStatus, obj) {
              sessionStatus = newStatus;

              if (
                sessionStatus == SESSION_STATUS.DISCONNECTED
                || sessionStatus == SESSION_STATUS.FAILED
              ) {
                // remove streams
                for (const prop in streamRefreshHandlers) {
                  if (
                    streamRefreshHandlers.hasOwnProperty(prop)
                    && typeof streamRefreshHandlers[prop] === 'function'
                  ) {
                    streamRefreshHandlers[prop]({
                      status: STREAM_STATUS.FAILED,
                    });
                  }
                } // remove session from list

                delete sessions[id_];
              }

              if (callbacks[sessionStatus]) {
                callbacks[sessionStatus](session, obj);
              }
            }
            /**
             * @callback sdpHook
             * @param {Object} sdp Callback options
             * @param {String} sdp.sdpString Sdp from the server
             * @returns {String} sdp New sdp
             */

            /**
             * Create call.
             *
             * @param {Object} options Call options
             * @param {string} options.callee Call remote party id
             * @param {string=} options.visibleName Call caller visible name
             * @param {Object} options.constraints Call constraints
             * @param {string} options.mediaProvider MediaProvider type to use with this call
             * @param {Boolean=} options.receiveAudio Receive audio
             * @param {Boolean=} options.receiveVideo Receive video
             * @param {Boolean=} options.cacheLocalResources Display will contain local video after call release
             * @param {HTMLElement} options.localVideoDisplay Div element local video should be displayed in
             * @param {HTMLElement} options.remoteVideoDisplay Div element remote video should be displayed in
             * @param {Object=} options.custom User provided custom object that will be available in REST App code
             * @param {Array<string>=} options.stripCodecs Array of codecs which should be stripped from SDP (WebRTC)
             * @param {Array<string>=} options.sipSDP Array of custom SDP params (ex. bandwidth (b=))
             * @param {Array<string>=} options.sipHeaders Array of custom SIP headers
             * @param {sdpHook} sdpHook The callback that handles sdp from the server
             * @returns {Call} Call
             * @throws {TypeError} Error if no options provided
             * @throws {Error} Error if session state is not REGISTERED
             * @memberof Session
             * @inner
             */

            var createCall = function createCall(options) {
              // check session state
              if (
                sessionStatus !== SESSION_STATUS.REGISTERED
                && sessionStatus !== SESSION_STATUS.ESTABLISHED
              ) {
                logger.info(LOG_PREFIX, `Status is ${sessionStatus}`);
                throw new Error('Invalid session state');
              } // check options

              if (!options) {
                throw new TypeError('options must be provided');
              }

              const login = appKey == 'clickToCallApp' ? '' : cConfig.sipLogin;
              const caller_ = options.incoming ? options.caller : login;
              const callee_ = options.callee;
              const visibleName_ = options.visibleName || login;
              const id_ = options.callId || uuid_v1();
              const mediaProvider = options.mediaProvider || getMediaProviders()[0];
              let mediaConnection;
              let localDisplay = options.localVideoDisplay;
              let remoteDisplay = options.remoteVideoDisplay;
              let info_;
              let errorInfo_; // Constraints

              if (options.constraints) {
                var { constraints } = options;
              }

              if (options.disableConstraintsNormalization) {
                var { disableConstraintsNormalization } = options;
              }

              let audioOutputId;
              const audioProperty = getConstraintsProperty(constraints, 'audio', undefined);

              if (_typeof(audioProperty) === 'object') {
                audioOutputId = getConstraintsProperty(audioProperty, 'outputId', 0);
              }

              const stripCodecs = options.stripCodecs || []; // Receive media

              const receiveAudio = typeof options.receiveAudio !== 'undefined' ? options.receiveAudio : true;
              const receiveVideo = typeof options.receiveVideo !== 'undefined' ? options.receiveVideo : true;
              const { cacheLocalResources } = options;
              let status_ = CALL_STATUS.NEW;
              const callbacks = {};
              let hasTransferredCall = false;
              const { sdpHook } = options;
              let { sipSDP } = options;
              let { sipHeaders } = options;
              /**
               * Represents sip call.
               *
               * @namespace Call
               * @see Session~createCall
               */

              const call = {};

              callRefreshHandlers[id_] = function (callInfo, sdp, codec, transfer) {
                if (transfer) {
                  if (!mediaConnections[id_]) {
                    mediaConnections[id_] = mediaConnection;
                  }

                  if (transfer.status == 'COMPLETED') {
                    delete mediaConnections[id_];
                  }

                  return;
                } // transferred call

                if (!mediaConnection && Object.keys(mediaConnections).length != 0) {
                  for (const mc in mediaConnections) {
                    mediaConnection = mediaConnections[mc];
                    hasTransferredCall = true;
                    delete mediaConnections[mc];
                  }
                } // set audio codec (Flash only)

                if (codec) {
                  if (mediaProvider == 'Flash') {
                    mediaConnection.changeAudioCodec(codec.name);
                  }

                  return;
                } // set remote sdp

                if (sdp && sdp !== '') {
                  sdp = sdpHookHandler(sdp, sdpHook);
                  mediaConnection.setRemoteSdp(sdp, hasTransferredCall, id_).then(() => {});
                  return;
                }

                const event = callInfo.status;
                status_ = event; // release call

                if (
                  event == CALL_STATUS.FAILED
                  || event == CALL_STATUS.FINISH
                  || event == CALL_STATUS.BUSY
                ) {
                  delete calls[id_];
                  delete callRefreshHandlers[id_];

                  if (Object.keys(calls).length == 0) {
                    if (mediaConnection) mediaConnection.close(cacheLocalResources);
                  }
                } // fire call event

                if (callbacks[event]) {
                  callbacks[event](call);
                }
              };
              /**
               * Initiate outgoing call.
               *
               * @throws {Error} Error if call status is not {@link Flashphoner.constants.CALL_STATUS.NEW}
               * @memberof Call
               * @name call
               * @inner
               */

              const call_ = function call_() {
                if (status_ !== CALL_STATUS.NEW) {
                  throw new Error('Invalid call state');
                }

                status_ = CALL_STATUS.PENDING;
                const hasAudio = true; // get access to camera

                MediaProvider[mediaProvider]
                  .getMediaAccess(constraints, localDisplay, disableConstraintsNormalization)
                  .then(() => {
                    if (status_ == CALL_STATUS.FAILED) {
                      // call failed while we were waiting for media access, release media
                      if (!cacheLocalResources) {
                        releaseLocalMedia(localDisplay, mediaProvider);
                      }

                      return;
                    } // create mediaProvider connection

                    MediaProvider[mediaProvider]
                      .createConnection({
                        id: id_,
                        localDisplay,
                        remoteDisplay,
                        authToken,
                        mainUrl: urlServer,
                        flashProto,
                        flashPort,
                        bidirectional: true,
                        login,
                        constraints,
                        connectionConfig: mediaOptions,
                        audioOutputId,
                      })
                      .then((newConnection) => {
                        mediaConnection = newConnection;
                        return mediaConnection.createOffer({
                          sendAudio: true,
                          sendVideo: true,
                          receiveAudio,
                          receiveVideo,
                          stripCodecs,
                        });
                      })
                      .then((offer) => {
                        send('call', {
                          callId: id_,
                          incoming: false,
                          hasVideo: offer.hasVideo,
                          hasAudio: offer.hasAudio,
                          status: status_,
                          mediaProvider,
                          sdp: offer.sdp,
                          sipSDP,
                          caller: login,
                          callee: callee_,
                          custom: options.custom,
                          visibleName: visibleName_,
                        });
                      });
                  })
                  .catch((error) => {
                    logger.error(LOG_PREFIX, error);
                    status_ = CALL_STATUS.FAILED;
                    info_ = ERROR_INFO.LOCAL_ERROR;
                    errorInfo_ = error.message;
                    callRefreshHandlers[id_]({
                      status: CALL_STATUS.FAILED,
                    });
                    hangup();
                  });
              };
              /**
               * Hangup call.
               *
               * @memberof Call
               * @inner
               */

              var hangup = function hangup() {
                if (status_ == CALL_STATUS.NEW) {
                  callRefreshHandlers[id_]({
                    status: CALL_STATUS.FAILED,
                  });
                  return;
                } if (status_ == CALL_STATUS.PENDING) {
                  if (!cacheLocalResources) {
                    releaseLocalMedia(localDisplay, mediaProvider);
                  }

                  callRefreshHandlers[id_]({
                    status: CALL_STATUS.FAILED,
                  });

                  if (options.incoming) {
                    send('hangup', {
                      callId: id_,
                    });
                  }

                  return;
                }

                send('hangup', {
                  callId: id_,
                }); // free media provider

                if (mediaConnection) {
                  mediaConnection.close(cacheLocalResources);
                }
              };
              /**
               * @callback sdpHook
               * @param {Object} sdp Callback options
               * @param {String} sdp.sdpString Sdp from the server
               * @returns {String} sdp New sdp
               */

              /**
               * Answer incoming call.
               * @param {Object} answerOptions Call options
               * @param {HTMLElement} answerOptions.localVideoDisplay Div element local video should be displayed in
               * @param {HTMLElement} answerOptions.remoteVideoDisplay Div element remote video should be displayed in
               * @param {Boolean=} answerOptions.receiveAudio Receive audio
               * @param {Boolean=} answerOptions.receiveVideo Receive video
               * @param {String=} answerOptions.constraints Answer call with constraints
               * @param {Array<string>=} answerOptions.stripCodecs Array of codecs which should be stripped from SDP (WebRTC)
               * @param {Array<string>=} answerOptions.sipSDP Array of custom SDP params (ex. bandwidth (b=))
               * @param {Array<string>=} answerOptions.sipHeaders Array of custom SIP headers
               * @param {sdpHook} sdpHook The callback that handles sdp from the server
               * @throws {Error} Error if call status is not {@link Flashphoner.constants.CALL_STATUS.NEW}
               * @memberof Call
               * @name call
               * @inner
               */

              const answer = function answer(answerOptions) {
                if (status_ !== CALL_STATUS.NEW && status_ !== CALL_STATUS.RING) {
                  throw new Error('Invalid call state');
                }

                localDisplay = answerOptions.localVideoDisplay;
                remoteDisplay = answerOptions.remoteVideoDisplay;
                constraints = answerOptions.constraints || getDefaultMediaConstraints();
                status_ = CALL_STATUS.PENDING;
                let sdp;
                const { sdpHook } = answerOptions;
                sipSDP = answerOptions.sipSDP;
                sipHeaders = answerOptions.sipHeaders;

                if (!remoteSdpCache[id_]) {
                  logger.error(LOG_PREFIX, 'No remote sdp available');
                  throw new Error('No remote sdp available');
                } else {
                  sdp = sdpHookHandler(remoteSdpCache[id_], sdpHook);
                  delete remoteSdpCache[id_];
                }

                if (util.SDP.matchPrefix(sdp, 'm=video').length == 0) {
                  constraints.video = false;
                }

                const stripCodecs = answerOptions.stripCodecs || [];
                const hasAudio = true; // get access to camera

                MediaProvider[mediaProvider]
                  .getMediaAccess(constraints, localDisplay, disableConstraintsNormalization)
                  .then(() => {
                    if (status_ == CALL_STATUS.FAILED) {
                      // call failed while we were waiting for media access, release media
                      if (!cacheLocalResources) {
                        releaseLocalMedia(localDisplay, mediaProvider);
                      }

                      return;
                    } // create mediaProvider connection

                    MediaProvider[mediaProvider]
                      .createConnection({
                        id: id_,
                        localDisplay,
                        remoteDisplay,
                        authToken,
                        mainUrl: urlServer,
                        flashProto,
                        flashPort,
                        bidirectional: true,
                        login: cConfig.sipLogin,
                        constraints,
                        connectionConfig: mediaOptions,
                        audioOutputId,
                      })
                      .then((newConnection) => {
                        mediaConnection = newConnection;
                        return mediaConnection.setRemoteSdp(sdp);
                      })
                      .then(() => mediaConnection.createAnswer({
                        receiveAudio: options.receiveAudio,
                        receiveVideo: options.receiveVideo,
                        stripCodecs,
                      }))
                      .then((sdp) => {
                        if (status_ != CALL_STATUS.FINISH && status_ != CALL_STATUS.FAILED) {
                          send('answer', {
                            callId: id_,
                            incoming: true,
                            hasVideo: true,
                            hasAudio,
                            status: status_,
                            mediaProvider,
                            sdp,
                            sipSDP,
                            caller: cConfig.login,
                            callee: callee_,
                            custom: options.custom,
                          });
                        } else {
                          hangup();
                        }
                      });
                  })
                  .catch((error) => {
                    logger.error(LOG_PREFIX, error);
                    info_ = ERROR_INFO.LOCAL_ERROR;
                    errorInfo_ = error.message;
                    status_ = CALL_STATUS.FAILED;
                    callRefreshHandlers[id_]({
                      status: CALL_STATUS.FAILED,
                    });
                  });
              };
              /**
               * Get call status.
               *
               * @returns {string} One of {@link Flashphoner.constants.CALL_STATUS}
               * @memberof Call
               * @inner
               */

              const status = function status() {
                return status_;
              };
              /**
               * Get call id.
               *
               * @returns {string} Call id
               * @memberof Call
               * @inner
               */

              const id = function id() {
                return id_;
              };
              /**
               * Get caller id.
               *
               * @returns {string} Caller id
               * @memberof Call
               * @inner
               */

              const caller = function caller() {
                return caller_;
              };
              /**
               * Get callee id.
               *
               * @returns {string} Callee id
               * @memberof Call
               * @inner
               */

              const callee = function callee() {
                return callee_;
              };
              /**
               * Get caller visible name.
               *
               * @returns {string} Caller visible name
               * @memberof Call
               * @inner
               */

              const visibleName = function visibleName() {
                return visibleName_;
              };
              /**
               * Media controls
               */

              /**
               * Set other oupout audio device
               *
               * @param {string} id Id of output device
               * @memberof Call
               * @inner
               */

              const setAudioOutputId = function setAudioOutputId(id) {
                audioOutputId = id;

                if (mediaConnection && mediaConnection.setAudioOutputId) {
                  return mediaConnection.setAudioOutputId(id);
                }
              };
              /**
               * Set volume of remote media
               *
               * @param {number} volume Volume between 0 and 100
               * @memberof Call
               * @inner
               */

              const setVolume = function setVolume(volume) {
                if (mediaConnection) {
                  mediaConnection.setVolume(volume);
                }
              };
              /**
               * Get current volume
               *
               * @returns {number} Volume or -1 if audio is not available
               * @memberof Call
               * @inner
               */

              const getVolume = function getVolume() {
                if (mediaConnection) {
                  return mediaConnection.getVolume();
                }

                return -1;
              };
              /**
               * Mute outgoing audio
               *
               * @memberof Call
               * @inner
               */

              const muteAudio = function muteAudio() {
                if (mediaConnection) {
                  mediaConnection.muteAudio();
                }
              };
              /**
               * Unmute outgoing audio
               *
               * @memberof Call
               * @inner
               */

              const unmuteAudio = function unmuteAudio() {
                if (mediaConnection) {
                  mediaConnection.unmuteAudio();
                }
              };
              /**
               * Check outgoing audio mute state
               *
               * @returns {boolean} True if audio is muted or not available
               * @memberof Call
               * @inner
               */

              const isAudioMuted = function isAudioMuted() {
                if (mediaConnection) {
                  return mediaConnection.isAudioMuted();
                }

                return true;
              };
              /**
               * Mute outgoing video
               *
               * @memberof Call
               * @inner
               */

              const muteVideo = function muteVideo() {
                if (mediaConnection) {
                  mediaConnection.muteVideo();
                }
              };
              /**
               * Unmute outgoing video
               *
               * @memberof Call
               * @inner
               */

              const unmuteVideo = function unmuteVideo() {
                if (mediaConnection) {
                  mediaConnection.unmuteVideo();
                }
              };
              /**
               * Check outgoing video mute state
               *
               * @returns {boolean} True if video is muted or not available
               * @memberof Call
               * @inner
               */

              const isVideoMuted = function isVideoMuted() {
                if (mediaConnection) {
                  return mediaConnection.isVideoMuted();
                }

                return true;
              };
              /**
               * @callback callbackFn
               * @param {Object} result
               */

              /**
               * Get statistics
               *
               * @param {callbackFn} callbackFn The callback that handles response
               * @param {Boolean} nativeStats  If true, use native browser statistics
               * @returns {Object} Call audio\video statistics
               * @memberof Call
               * @inner
               */

              const getStats = function getStats(callbackFn, nativeStats) {
                if (mediaConnection) {
                  mediaConnection.getStats(callbackFn, nativeStats);
                }
              };
              /**
               * Place call on hold
               *
               * @memberof Call
               * @inner
               */

              const hold = function hold() {
                send('hold', {
                  callId: id_,
                });
              };
              /**
               * Place call on hold for transfer
               *
               * @memberof Call
               * @inner
               */

              const holdForTransfer = function holdForTransfer() {
                send('hold', {
                  callId: id_,
                  holdForTransfer: true,
                });
              };
              /**
               * Unhold the call
               *
               * @memberof Call
               * @inner
               */

              const unhold = function unhold() {
                send('unhold', {
                  callId: id_,
                });
              };
              /**
               * Send DTMF
               *
               * @param {number} number Number
               * @param {string=} type DTMF Type (RFC2833, INFO, INFO_RELAY)
               * @memberof Call
               * @inner
               */

              const sendDTMF = function sendDTMF(number, type) {
                send('sendDtmf', {
                  callId: id_,
                  type: type || 'RFC2833',
                  dtmf: number,
                });
              };
              /**
               * Transfer call
               *
               * @param {String} traget Transfer target
               * @memberof Call
               * @inner
               */

              const transfer = function transfer(target) {
                send('transfer', {
                  callId: id_,
                  target,
                });
              };
              /**
               * Call event callback.
               *
               * @callback Call~eventCallback
               * @param {Call} call Call that corresponds to the event
               */

              /**
               * Add call event callback.
               *
               * @param {string} event One of {@link Flashphoner.constants.CALL_STATUS} events
               * @param {Call~eventCallback} callback Callback function
               * @returns {Call} Call callback was attached to
               * @throws {TypeError} Error if event is not specified
               * @throws {Error} Error if callback is not a valid function
               * @memberof Call
               * @inner
               */

              const on = function on(event, callback) {
                if (!event) {
                  throw new TypeError("Event can't be null");
                }

                if (!callback || typeof callback !== 'function') {
                  throw new Error('Callback needs to be a valid function');
                }

                callbacks[event] = callback;
                return call;
              };
              /**
               * Switch camera in real-time.
               * Works only with WebRTC
               *
               * @memberOf Call
               * @inner
               * @throws {Error} Error if call status is not {@link Flashphoner.constants.CALL_STATUS.ESTABLISHED} and not {@link Flashphoner.constants.CALL_STATUS.HOLD}
               */

              const switchCam = function switchCam(deviceId) {
                if (
                  status_ !== CALL_STATUS.ESTABLISHED
                  && !constraints.video
                  && status_ !== CALL_STATUS.HOLD
                ) {
                  throw new Error('Invalid call state');
                }

                return mediaConnection.switchCam(deviceId);
              };
              /**
               * Switch mic in real-time.
               * Works only with WebRTC
               *
               * @memberOf Call
               * @inner
               * @throws {Error} Error if call status is not {@link Flashphoner.constants.CALL_STATUS.ESTABLISHED} and not {@link Flashphoner.constants.CALL_STATUS.HOLD}
               */

              const switchMic = function switchMic(deviceId) {
                if (status_ !== CALL_STATUS.ESTABLISHED && status_ !== CALL_STATUS.HOLD) {
                  throw new Error('Invalid call state');
                }

                return mediaConnection.switchMic(deviceId);
              };
              /**
               * Switch to screen in real-time.
               * Works only with WebRTC
               *
               * @param {String} source Screen sharing source (for firefox)
               * @param {Boolean} woExtension Screen sharing without extension (for chrome)
               * @memberOf Call
               * @inner
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               */

              const switchToScreen = function switchToScreen(source, woExtension) {
                if (status_ !== CALL_STATUS.ESTABLISHED && status_ !== CALL_STATUS.HOLD) {
                  throw new Error('Invalid call state');
                }

                return mediaConnection.switchToScreen(source, woExtension);
              };
              /**
               * Switch to cam in real-time.
               * Works only with WebRTC
               *
               * @memberOf Call
               * @inner
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               */

              const switchToCam = function switchToCam() {
                if (status_ !== CALL_STATUS.ESTABLISHED && status_ !== CALL_STATUS.HOLD) {
                  throw new Error('Invalid call state');
                }

                mediaConnection.switchToCam();
              };
              /**
               * Get call info
               * @returns {string} Info
               * @memberof Stream
               * @inner
               */

              const getInfo = function getInfo() {
                return info_;
              };
              /**
               * Get stream error info
               * @returns {string} Error info
               * @memberof Stream
               * @inner
               */

              const getErrorInfo = function getErrorInfo() {
                return errorInfo_;
              };

              call.call = call_;
              call.answer = answer;
              call.hangup = hangup;
              call.id = id;
              call.getInfo = getInfo;
              call.getErrorInfo = getErrorInfo;
              call.status = status;
              call.getStats = getStats;
              call.setAudioOutputId = setAudioOutputId;
              call.setVolume = setVolume;
              call.getVolume = getVolume;
              call.muteAudio = muteAudio;
              call.unmuteAudio = unmuteAudio;
              call.isAudioMuted = isAudioMuted;
              call.muteVideo = muteVideo;
              call.unmuteVideo = unmuteVideo;
              call.isVideoMuted = isVideoMuted;
              call.caller = caller;
              call.callee = callee;
              call.visibleName = visibleName;
              call.hold = hold;
              call.holdForTransfer = holdForTransfer;
              call.unhold = unhold;
              call.sendDTMF = sendDTMF;
              call.transfer = transfer;
              call.on = on;
              call.switchCam = switchCam;
              call.switchMic = switchMic;
              call.switchToScreen = switchToScreen;
              call.switchToCam = switchToCam;
              calls[id_] = call;
              return call;
            };
            /**
             * @callback sdpHook
             * @param {Object} sdp Callback options
             * @param {String} sdp.sdpString Sdp from the server
             * @returns {String} sdp New sdp
             */

            /**
             * Create stream.
             *
             * @param {Object} options Stream options
             * @param {string} options.name Stream name
             * @param {Object=} options.constraints Stream constraints
             * @param {Boolean|Object} [options.constraints.audio=true] Specifies if published stream should have audio. Played stream always should have audio: the property should not be set to false in that case.
             * @param {string=} [options.constraints.audio.outputId] Set width to publish or play stream with this value
             * @param {Boolean|Object} [options.constraints.video=true] Specifies if published or played stream should have video, or sets video constraints
             * @param {Integer} [options.constraints.video.width=0] Set width to publish or play stream with this value
             * @param {Integer} [options.constraints.video.height=0] Set height to publish or play stream with this value
             * @param {Integer} [options.constraints.video.bitrate=0] DEPRECATED FOR PUBLISH: Set bitrate to publish or play stream with this value
             * @param {Integer} [options.constraints.video.minBitrate=0] Set minimal bitrate to publish stream with this value
             * @param {Integer} [options.constraints.video.maxBitrate=0] Set maximal bitrate to publish stream with this value
             * @param {Integer} [options.constraints.video.quality=0] Set quality to play stream with this value
             * @param {MediaStream} [options.constraints.customStream] Set a MediaStream  for publish stream from canvas.
             * @param {Boolean=} options.receiveAudio DEPRECATED: Receive audio
             * @param {Boolean=} options.receiveVideo DEPRECATED: Receive video
             * @param {Integer=} options.playWidth DEPRECATED: Set width to play stream with this value
             * @param {Integer=} options.playHeight DEPRECATED: Set height to play stream with this value
             * @param {string=} options.mediaProvider MediaProvider type to use with this stream
             * @param {Boolean} [options.record=false] Enable stream recording
             * @param {Boolean=} options.cacheLocalResources Display will contain local video after stream release
             * @param {HTMLElement} options.display Div element stream should be displayed in
             * @param {Object=} options.custom User provided custom object that will be available in REST App code
             * @param {Integer} [options.flashBufferTime=0] Specifies how long to buffer messages before starting to display the stream (Flash-only)
             * @param {Array<string>=} options.stripCodecs Array of codecs which should be stripped from SDP (WebRTC)
             * @param {string=} options.rtmpUrl Rtmp url stream should be forwarded to
             * @param {Object=} options.mediaConnectionConstraints Stream specific constraints for underlying RTCPeerConnection
             * @param {Boolean=} options.flashShowFullScreenButton Show full screen button in flash
             * @param {string=} options.transport Transport to be used by server for WebRTC media, {@link Flashphoner.constants.TRANSPORT_TYPE}
             * @param {Boolean=} options.cvoExtension Enable rtp video orientation extension
             * @param {Integer=} options.playoutDelay Time delay between network reception of media and playout
             * @param {string=} options.useCanvasMediaStream EXPERIMENTAL: when publish bind browser's media stream to the canvas. It can be useful for image filtering
             * @param {sdpHook} sdpHook The callback that handles sdp from the server
             * @returns {Stream} Stream
             * @throws {TypeError} Error if no options provided
             * @throws {TypeError} Error if options.name is not specified
             * @throws {Error} Error if session state is not ESTABLISHED
             * @memberof Session
             * @inner
             */

            const createStream = function createStream(options) {
              // Array to transmit promises from stream.available() to streamRefreshHandlers
              let availableCallbacks = []; // check session state

              if (sessionStatus !== SESSION_STATUS.ESTABLISHED) {
                throw new Error('Invalid session state');
              } // check options

              if (!options) {
                throw new TypeError('options must be provided');
              }

              if (!options.name) {
                throw new TypeError('options.name must be provided');
              }

              const clientKf = new KalmanFilter();
              const serverKf = new KalmanFilter();
              const id_ = uuid_v1();
              const name_ = options.name;
              const mediaProvider = options.mediaProvider || getMediaProviders()[0];
              let mediaConnection;
              const { display } = options; // Constraints

              if (options.constraints && Object.keys(options.constraints).length != 0) {
                var { constraints } = options;
              }

              if (options.disableConstraintsNormalization) {
                var { disableConstraintsNormalization } = options;
              }

              const { mediaConnectionConstraints } = options; // Receive media

              let receiveAudio;
              let audioOutputId;
              const audioProperty = getConstraintsProperty(constraints, 'audio', undefined);

              if (typeof audioProperty === 'boolean') {
                receiveAudio = audioProperty;
              } else if (_typeof(audioProperty) === 'object') {
                receiveAudio = true;

                var _stereo = getConstraintsProperty(audioProperty, 'stereo', 0);

                const _bitrate = getConstraintsProperty(audioProperty, 'bitrate', 0);

                const _fec = getConstraintsProperty(audioProperty, 'fec', 0);

                audioOutputId = getConstraintsProperty(audioProperty, 'outputId', 0);
                var _codecOptions = '';
                if (_bitrate) _codecOptions += `maxaveragebitrate=${_bitrate};`;
                if (_stereo) _codecOptions += 'stereo=1;sprop-stereo=1;';
                if (_fec) _codecOptions += 'useinbandfec=1;';
              } else {
                receiveAudio = typeof options.receiveAudio !== 'undefined' ? options.receiveAudio : true;
              }

              let receiveVideo;
              const videoProperty = getConstraintsProperty(constraints, 'video', undefined);

              if (typeof videoProperty === 'boolean') {
                receiveVideo = videoProperty;
              } else if (_typeof(videoProperty) === 'object') {
                receiveVideo = true;
              } else {
                receiveVideo = typeof options.receiveVideo !== 'undefined' ? options.receiveVideo : true;
              } // Bitrate

              const bitrate = getConstraintsProperty(constraints, 'video.bitrate', 0);
              const minBitrate = getConstraintsProperty(constraints, 'video.minBitrate', 0);
              const maxBitrate = getConstraintsProperty(constraints, 'video.maxBitrate', 0); // Quality

              let quality = getConstraintsProperty(constraints, 'video.quality', 0);
              if (quality > 100) quality = 100; // Play resolution

              const playWidth = typeof options.playWidth !== 'undefined'
                ? options.playWidth
                : getConstraintsProperty(constraints, 'video.width', 0);
              const playHeight = typeof options.playHeight !== 'undefined'
                ? options.playHeight
                : getConstraintsProperty(constraints, 'video.height', 0);
              const stripCodecs = options.stripCodecs || [];
              const resolution = {};
              let published_ = false;
              const record_ = options.record || false;
              let recordFileName = null;
              const { cacheLocalResources } = options;
              let status_ = STREAM_STATUS.NEW;
              const { rtmpUrl } = options;
              let info_;
              let errorInfo_;
              let remoteBitrate = -1;
              let networkBandwidth = -1;
              const { sdpHook } = options;
              const transportType = options.transport;
              const { cvoExtension } = options;
              const { remoteVideo } = options; // callbacks added using stream.on()

              const callbacks = {};
              const { playoutDelay } = options;
              const { useCanvasMediaStream } = options;
              let audioState_;
              let videoState_;
              let connectionQuality;
              let videoBytes = 0;
              /**
               * Represents media stream.
               *
               * @namespace Stream
               * @see Session~createStream
               */

              const stream = {};

              streamEventRefreshHandlers[id_] = function (streamEvent) {
                if (callbacks[STREAM_EVENT]) {
                  callbacks[STREAM_EVENT](streamEvent);
                }
              };

              streamRefreshHandlers[id_] = function (streamInfo, sdp) {
                // set remote sdp
                if (sdp && sdp !== '') {
                  let _sdp = sdp;
                  if (_codecOptions) _sdp = util.SDP.writeFmtp(sdp, _codecOptions, 'opus');
                  _sdp = sdpHookHandler(_sdp, sdpHook);
                  mediaConnection.setRemoteSdp(_sdp).then(() => {});
                  return;
                }

                if (streamInfo.available != undefined) {
                  for (let i = 0; i < availableCallbacks.length; i++) {
                    info_ = streamInfo.reason;

                    if (streamInfo.available == 'true') {
                      availableCallbacks[i].resolve(stream);
                    } else {
                      availableCallbacks[i].reject(stream);
                    }
                  }

                  availableCallbacks = [];
                  return;
                }

                const event = streamInfo.status;

                if (event == INBOUND_VIDEO_RATE || event == OUTBOUND_VIDEO_RATE) {
                  detectConnectionQuality(event, streamInfo);
                  return;
                }

                if (event == STREAM_STATUS.RESIZE) {
                  resolution.width = streamInfo.streamerVideoWidth;
                  resolution.height = streamInfo.streamerVideoHeight;
                } else if (event == STREAM_STATUS.SNAPSHOT_COMPLETE) {
                } else if (event == STREAM_STATUS.NOT_ENOUGH_BANDWIDTH) {
                  const info = streamInfo.info.split('/');
                  remoteBitrate = info[0];
                  networkBandwidth = info[1];
                } else {
                  status_ = event;
                }

                audioState_ = streamInfo.audioState;
                videoState_ = streamInfo.videoState;
                if (streamInfo.info) info_ = streamInfo.info; // release stream

                if (
                  event == STREAM_STATUS.FAILED
                  || event == STREAM_STATUS.STOPPED
                  || event == STREAM_STATUS.UNPUBLISHED
                ) {
                  delete streams[id_];
                  delete streamRefreshHandlers[id_];
                  delete streamEventRefreshHandlers[id_];

                  if (mediaConnection) {
                    mediaConnection.close(cacheLocalResources);
                  }
                }

                if (record_ && typeof streamInfo.recordName !== 'undefined') {
                  recordFileName = streamInfo.recordName;
                } // fire stream event

                if (callbacks[event]) {
                  callbacks[event](stream);
                }
              };

              var detectConnectionQuality = function detectConnectionQuality(event, streamInfo) {
                if (disableConnectionQualityCalculation) {
                  return;
                }

                mediaConnection.getStats((stats) => {
                  let bytesSentReceived = 0;

                  if (stats) {
                    if (
                      event == OUTBOUND_VIDEO_RATE
                      && stats.inboundStream
                      && stats.inboundStream.video
                      && stats.inboundStream.video.bytesReceived > 0
                    ) {
                      bytesSentReceived = stats.inboundStream.video.bytesReceived;
                    } else if (
                      stats.outboundStream
                      && stats.outboundStream.video
                      && stats.outboundStream.video.bytesSent > 0
                    ) {
                      bytesSentReceived = stats.outboundStream.video.bytesSent;
                    } else {
                      return;
                    }
                  }

                  if (!videoBytes) {
                    videoBytes = bytesSentReceived;
                    return;
                  }

                  const currentVideoRate = (bytesSentReceived - videoBytes) * 8;

                  if (currentVideoRate == 0) {
                    return;
                  }

                  const clientFiltered = clientKf.filter(currentVideoRate);
                  const serverFiltered = serverKf.filter(streamInfo.videoRate);
                  const videoRateDifference = Math.abs(
                    (serverFiltered - clientFiltered) / ((serverFiltered + clientFiltered) / 2),
                  ) * 100;
                  let currentQuality;

                  if (
                    serverFiltered < LOW_VIDEO_RATE_THRESHOLD_BAD_PERFECT
                    || clientFiltered < LOW_VIDEO_RATE_THRESHOLD_BAD_PERFECT
                  ) {
                    if (videoRateDifference > LOW_VIDEO_RATE_BAD_QUALITY_PERCENT_DIFFERENCE) {
                      currentQuality = CONNECTION_QUALITY.BAD;
                    } else {
                      currentQuality = CONNECTION_QUALITY.PERFECT;
                    }
                  } else if (videoRateDifference > VIDEO_RATE_BAD_QUALITY_PERCENT_DIFFERENCE) {
                    currentQuality = CONNECTION_QUALITY.BAD;
                  } else if (videoRateDifference > VIDEO_RATE_GOOD_QUALITY_PERCENT_DIFFERENCE) {
                    currentQuality = CONNECTION_QUALITY.GOOD;
                  } else {
                    currentQuality = CONNECTION_QUALITY.PERFECT;
                  }

                  if (callbacks[CONNECTION_QUALITY.UPDATE]) {
                    connectionQuality = currentQuality;
                    callbacks[CONNECTION_QUALITY.UPDATE](
                      connectionQuality,
                      clientFiltered,
                      serverFiltered,
                    );
                  }

                  videoBytes = bytesSentReceived;
                });
              };
              /**
               * Play stream.
               *
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.NEW}
               * @memberof Stream
               * @inner
               */

              const play = function play() {
                logger.debug(LOG_PREFIX, `Play stream ${name_}`);

                if (status_ !== STREAM_STATUS.NEW) {
                  throw new Error('Invalid stream state');
                }

                status_ = STREAM_STATUS.PENDING; // create mediaProvider connection

                MediaProvider[mediaProvider]
                  .createConnection(
                    {
                      id: id_,
                      display,
                      authToken,
                      mainUrl: urlServer,
                      flashProto,
                      flashPort,
                      flashBufferTime: options.flashBufferTime || 0,
                      flashShowFullScreenButton: options.flashShowFullScreenButton || false,
                      connectionConfig: mediaOptions,
                      connectionConstraints: mediaConnectionConstraints,
                      audioOutputId,
                      remoteVideo,
                      playoutDelay,
                    },
                    streamRefreshHandlers[id_],
                  )
                  .then((newConnection) => {
                    mediaConnection = newConnection;

                    try {
                      streamRefreshHandlers[id_]({
                        status: status_,
                      });
                    } catch (e) {
                      console.warn(e);
                    }

                    return mediaConnection.createOffer({
                      receiveAudio,
                      receiveVideo,
                      stripCodecs,
                      stereo: _stereo,
                    });
                  })
                  .then((offer) => {
                    logger.debug(LOG_PREFIX, `Offer SDP:\n${offer.sdp}`); // request stream with offer sdp from server

                    send('playStream', {
                      mediaSessionId: id_,
                      name: name_,
                      published: published_,
                      hasVideo: true,
                      hasAudio: true,
                      status: status_,
                      record: false,
                      width: playWidth,
                      height: playHeight,
                      mediaProvider,
                      sdp: offer.sdp,
                      custom: options.custom,
                      bitrate,
                      minBitrate,
                      maxBitrate,
                      quality,
                      constraints,
                      transport: transportType,
                      cvoExtension,
                    });

                    if (offer.player) {
                      offer.player.play(id_);
                    }
                  })
                  .catch((error) => {
                    // todo fire stream failed status
                    throw error;
                  });
              };
              /**
               * Publish stream.
               *
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.NEW}
               * @memberof Stream
               * @inner
               */

              const publish = function publish() {
                logger.debug(LOG_PREFIX, `Publish stream ${name_}`);

                if (status_ !== STREAM_STATUS.NEW) {
                  throw new Error('Invalid stream state');
                }

                status_ = STREAM_STATUS.PENDING;
                published_ = true;
                let hasAudio = true;

                if (
                  constraints
                  && constraints.video
                  && constraints.video.type
                  && constraints.video.type == 'screen'
                ) {
                  hasAudio = false;
                } // get access to camera

                MediaProvider[mediaProvider]
                  .getMediaAccess(
                    constraints,
                    display,
                    disableConstraintsNormalization,
                    useCanvasMediaStream,
                  )
                  .then(() => {
                    if (status_ == STREAM_STATUS.FAILED) {
                      // stream failed while we were waiting for media access, release media
                      if (!cacheLocalResources) {
                        releaseLocalMedia(display, mediaProvider);
                      }

                      return;
                    } // create mediaProvider connection

                    MediaProvider[mediaProvider]
                      .createConnection({
                        id: id_,
                        display,
                        authToken,
                        mainUrl: urlServer,
                        flashProto,
                        flashPort,
                        constraints,
                        connectionConfig: mediaOptions,
                        connectionConstraints: mediaConnectionConstraints,
                        customStream:
                          constraints && constraints.customStream ? constraints.customStream : false,
                      })
                      .then((newConnection) => {
                        mediaConnection = newConnection;
                        return mediaConnection.createOffer({
                          stripCodecs,
                        });
                      })
                      .then((offer) => {
                        logger.debug(LOG_PREFIX, `Offer SDP:\n${offer.sdp}`); // publish stream with offer sdp to server

                        send('publishStream', {
                          mediaSessionId: id_,
                          name: name_,
                          published: published_,
                          hasVideo: offer.hasVideo,
                          hasAudio: offer.hasAudio,
                          status: status_,
                          record: record_,
                          mediaProvider,
                          sdp: offer.sdp,
                          custom: options.custom,
                          bitrate,
                          minBitrate,
                          maxBitrate,
                          rtmpUrl,
                          constraints,
                          transport: transportType,
                          cvoExtension,
                        });
                      });
                  })
                  .catch((error) => {
                    logger.warn(LOG_PREFIX, error);
                    info_ = ERROR_INFO.LOCAL_ERROR;
                    errorInfo_ = error.message;
                    status_ = STREAM_STATUS.FAILED; // fire stream event

                    if (callbacks[status_]) {
                      callbacks[status_](stream);
                    }
                  });
              };
              /**
               * Switch camera in real-time.
               * Works only with WebRTC
               *
               * @memberOf Stream
               * @inner
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               */

              const switchCam = function switchCam(deviceId) {
                if (status_ !== STREAM_STATUS.PUBLISHING) {
                  throw new Error('Invalid stream state');
                }

                return mediaConnection.switchCam(deviceId);
              };
              /**
               * Switch microphone in real-time.
               * Works only with WebRTC
               *
               * @memberOf Stream
               * @inner
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               */

              const switchMic = function switchMic(deviceId) {
                if (status_ !== STREAM_STATUS.PUBLISHING) {
                  throw new Error('Invalid stream state');
                }

                return mediaConnection.switchMic(deviceId);
              };
              /**
               * Switch to screen in real-time.
               * Works only with WebRTC
               *
               * @param {String} source Screen sharing source (for firefox)
               * @param {Boolean} woExtension Screen sharing without extension (for chrome)
               * @memberOf Stream
               * @inner
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               */

              const switchToScreen = function switchToScreen(source, woExtension) {
                if (status_ !== STREAM_STATUS.PUBLISHING) {
                  throw new Error('Invalid stream state');
                }

                return mediaConnection.switchToScreen(source, woExtension);
              };
              /**
               * Switch to cam in real-time.
               * Works only with WebRTC
               *
               * @memberOf Stream
               * @inner
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               */

              const switchToCam = function switchToCam() {
                if (status_ !== STREAM_STATUS.PUBLISHING) {
                  throw new Error('Invalid stream state');
                }

                mediaConnection.switchToCam();
              };
              /**
               * Send data from published stream.
               *
               * @param {Object} payload Any object
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               * @memberof Stream
               * @inner
               */

              const sendData = function sendData(payload) {
                if (status_ !== STREAM_STATUS.PUBLISHING) {
                  throw new Error('Invalid stream state');
                }

                sendStreamEvent(STREAM_EVENT_TYPE.DATA, payload);
              };
              /**
               * Unmute remote audio
               *
               * @memberOf Stream
               * @inner
               */

              const unmuteRemoteAudio = function unmuteRemoteAudio() {
                if (mediaConnection && mediaProvider != 'Flash') {
                  mediaConnection.unmuteRemoteAudio();
                }
              };
              /**
               * Mute remote audio
               *
               * @memberOf Stream
               * @inner
               */

              const muteRemoteAudio = function muteRemoteAudio() {
                if (mediaConnection && mediaProvider != 'Flash') {
                  mediaConnection.muteRemoteAudio();
                }
              };
              /**
               * Is remote audio muted
               *
               * @memberOf Stream
               * @inner
               */

              const isRemoteAudioMuted = function isRemoteAudioMuted() {
                if (mediaConnection && mediaProvider != 'Flash') {
                  return mediaConnection.isRemoteAudioMuted();
                }

                return false;
              };
              /**
               * Set Microphone Gain
               *
               * @memberOf Stream
               * @inner
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.PUBLISHING}
               */

              const setMicrophoneGain = function setMicrophoneGain(volume) {
                if (status_ !== STREAM_STATUS.PUBLISHING) {
                  throw new Error('Invalid stream state');
                }

                mediaConnection.setMicrophoneGain(volume);
              };
              /**
               * Stop stream.
               *
               * @memberof Stream
               * @inner
               */

              const stop = function stop() {
                logger.debug(LOG_PREFIX, `Stop stream ${name_}`);

                if (status_ == STREAM_STATUS.NEW) {
                  // trigger FAILED status
                  streamRefreshHandlers[id_]({
                    status: STREAM_STATUS.FAILED,
                  });
                  return;
                } if (status_ == STREAM_STATUS.PENDING) {
                  logger.warn(LOG_PREFIX, `Stopping stream before server response ${id_}`);
                  setTimeout(stop, 200);
                  return;
                } if (status_ == STREAM_STATUS.FAILED) {
                  logger.warn(LOG_PREFIX, 'Stream status FAILED');
                  return;
                }

                if (published_) {
                  send('unPublishStream', {
                    mediaSessionId: id_,
                    name: name_,
                    published: published_,
                    hasVideo: true,
                    hasAudio: true,
                    status: status_,
                    record: false,
                  });
                } else {
                  send('stopStream', {
                    mediaSessionId: id_,
                    name: name_,
                    published: published_,
                    hasVideo: true,
                    hasAudio: true,
                    status: status_,
                    record: false,
                  });
                } // free media provider

                if (mediaConnection) {
                  mediaConnection.close(cacheLocalResources);
                }
              };
              /**
               * Request remote stream snapshot.
               * @throws {Error} Error if stream status is not {@link Flashphoner.constants.STREAM_STATUS.NEW}
               * @memberof Stream
               * @inner
               */

              const snapshot = function snapshot() {
                logger.debug(LOG_PREFIX, `Request snapshot, stream ${name_}`);

                if (
                  status_ !== STREAM_STATUS.NEW
                  && status_ !== STREAM_STATUS.PLAYING
                  && status_ !== STREAM_STATUS.PUBLISHING
                ) {
                  throw new Error('Invalid stream state');
                }

                send('snapshot', {
                  name: name_,
                  mediaSessionId: id_,
                });
              };
              /**
               * Get stream status.
               *
               * @returns {string} One of {@link Flashphoner.constants.STREAM_STATUS}
               * @memberof Stream
               * @inner
               */

              const status = function status() {
                return status_;
              };
              /**
               * Get stream id.
               *
               * @returns {string} Stream id
               * @memberof Stream
               * @inner
               */

              const id = function id() {
                return id_;
              };
              /**
               * Get stream name.
               *
               * @returns {string} Stream name
               * @memberof Stream
               * @inner
               */

              const name = function name() {
                return name_;
              };
              /**
               * Is stream published.
               *
               * @returns {Boolean} True if stream published, otherwise false
               * @memberof Stream
               * @inner
               */

              const published = function published() {
                return published_;
              };
              /**
               * Get record file name
               * @returns {string} File name
               * @memberof Stream
               * @inner
               */

              const getRecordInfo = function getRecordInfo() {
                return recordFileName;
              };
              /**
               * Get stream info
               * @returns {string} Info
               * @memberof Stream
               * @inner
               */

              const getInfo = function getInfo() {
                return info_;
              };
              /**
               * Get stream error info
               * @returns {string} Error info
               * @memberof Stream
               * @inner
               */

              const getErrorInfo = function getErrorInfo() {
                return errorInfo_;
              };
              /**
               * Get stream video size
               * @returns {Object} Video size
               * @memberof Stream
               * @inner
               */

              const videoResolution = function videoResolution() {
                if (!published_) {
                  return resolution;
                }
                throw new Error('This function available only on playing stream');
              };
              /**
               * Media controls
               */

              /**
               * Set other oupout audio device
               *
               * @param {string} id Id of output device
               * @memberof Call
               * @inner
               */

              const setAudioOutputId = function setAudioOutputId(id) {
                audioOutputId = id;

                if (mediaConnection && mediaConnection.setAudioOutputId) {
                  return mediaConnection.setAudioOutputId(id);
                }
              };
              /**
               * Set volume of remote media
               *
               * @param {number} volume Volume between 0 and 100
               * @memberof Stream
               * @inner
               */

              const setVolume = function setVolume(volume) {
                if (mediaConnection) {
                  mediaConnection.setVolume(volume);
                }
              };
              /**
               * Get current volume
               *
               * @returns {number} Volume or -1 if audio is not available
               * @memberof Stream
               * @inner
               */

              const getVolume = function getVolume() {
                if (mediaConnection) {
                  return mediaConnection.getVolume();
                }

                return -1;
              };

              function sendStreamEvent(type, payload) {
                send('sendStreamEvent', {
                  mediaSessionId: id_,
                  type,
                  payload,
                });
              }
              /**
               * Mute outgoing audio
               *
               * @memberof Stream
               * @inner
               */

              const muteAudio = function muteAudio() {
                if (mediaConnection) {
                  mediaConnection.muteAudio();
                  sendStreamEvent(STREAM_EVENT_TYPE.AUDIO_MUTED);
                }
              };
              /**
               * Unmute outgoing audio
               *
               * @memberof Stream
               * @inner
               */

              const unmuteAudio = function unmuteAudio() {
                if (mediaConnection) {
                  mediaConnection.unmuteAudio();
                  sendStreamEvent(STREAM_EVENT_TYPE.AUDIO_UNMUTED);
                }
              };
              /**
               * Check outgoing audio mute state
               *
               * @returns {boolean} True if audio is muted or not available
               * @memberof Stream
               * @inner
               */

              const isAudioMuted = function isAudioMuted() {
                if (mediaConnection) {
                  return mediaConnection.isAudioMuted();
                }

                return true;
              };
              /**
               * Mute outgoing video
               *
               * @memberof Stream
               * @inner
               */

              const muteVideo = function muteVideo() {
                if (mediaConnection) {
                  mediaConnection.muteVideo();
                  sendStreamEvent(STREAM_EVENT_TYPE.VIDEO_MUTED);
                }
              };
              /**
               * Unmute outgoing video
               *
               * @memberof Stream
               * @inner
               */

              const unmuteVideo = function unmuteVideo() {
                if (mediaConnection) {
                  mediaConnection.unmuteVideo();
                  sendStreamEvent(STREAM_EVENT_TYPE.VIDEO_UNMUTED);
                }
              };
              /**
               * Check outgoing video mute state
               *
               * @returns {boolean} True if video is muted or not available
               * @memberof Stream
               * @inner
               */

              const isVideoMuted = function isVideoMuted() {
                if (mediaConnection) {
                  return mediaConnection.isVideoMuted();
                }

                return true;
              };
              /**
               * Get statistics
               *
               * @param {callbackFn} callbackFn The callback that handles response
               * @param {Boolean} nativeStats If true, use native browser statistics
               * @returns {Object} Stream audio\video statistics
               * @memberof Stream
               * @inner
               */

              const getStats = function getStats(callbackFn, nativeStats) {
                if (mediaConnection) {
                  mediaConnection.getStats(callbackFn, nativeStats);
                }
              };
              /**
               * Get remote bitrate reported by server, works only for subscribe Stream
               *
               * @returns {number} Remote bitrate in bps or -1
               * @memberof Stream
               * @inner
               */

              const getRemoteBitrate = function getRemoteBitrate() {
                return remoteBitrate;
              };
              /**
               * Get network bandwidth reported by server, works only for subscribe Stream
               *
               * @returns {number} Network bandwidth in bps or -1
               * @memberof Stream
               * @inner
               */

              const getNetworkBandwidth = function getNetworkBandwidth() {
                return networkBandwidth;
              };
              /**
               * Get audio state (muted)
               *
               * @returns AudioState
               * @memberof Stream
               * @inner
               */

              const getAudioState = function getAudioState() {
                return audioState_;
              };
              /**
               * Get video state (muted)
               *
               * @returns VideoState
               * @memberof Stream
               * @inner
               */

              const getVideoState = function getVideoState() {
                return videoState_;
              };
              /**
               * Request full screen for player stream
               * @memberof Stream
               * @inner
               */

              const fullScreen = function fullScreen() {
                if (published()) {
                  logger.warn(LOG_PREFIX, 'Full screen is allowed only for played streams');
                } else if (mediaConnection) mediaConnection.fullScreen();
              };
              /**
               * Stream status event callback.
               *
               * @callback Stream~eventCallback
               * @param {Stream} stream Stream that corresponds to the event
               */

              /**
               * Add stream status event callback.
               *
               * @param {string} event One of {@link Flashphoner.constants.STREAM_STATUS} events
               * @param {Stream~eventCallback} callback Callback function
               * @returns {Stream} Stream callback was attached to
               * @throws {TypeError} Error if event is not specified
               * @throws {Error} Error if callback is not a valid function
               * @memberof Stream
               * @inner
               */

              const on = function on(event, callback) {
                if (!event) {
                  throw new TypeError("Event can't be null");
                }

                if (!callback || typeof callback !== 'function') {
                  throw new Error('Callback needs to be a valid function');
                }

                callbacks[event] = callback;
                return stream;
              };
              /**
               * Ð¡hecks the availability of stream on the server
               *
               * @returns {Promise} Resolves if is stream available, otherwise rejects
               * @memberof Stream
               * @inner
               */

              const available = function available() {
                return new Promise(((resolve, reject) => {
                  send('availableStream', {
                    mediaSessionId: id_,
                    name: name_,
                  });
                  const promise = {};
                  promise.resolve = resolve;
                  promise.reject = reject;
                  availableCallbacks.push(promise);
                }));
              };

              stream.play = play;
              stream.publish = publish;
              stream.stop = stop;
              stream.id = id;
              stream.status = status;
              stream.name = name;
              stream.published = published;
              stream.getRecordInfo = getRecordInfo;
              stream.getInfo = getInfo;
              stream.getErrorInfo = getErrorInfo;
              stream.videoResolution = videoResolution;
              stream.setAudioOutputId = setAudioOutputId;
              stream.setVolume = setVolume;
              stream.unmuteRemoteAudio = unmuteRemoteAudio;
              stream.muteRemoteAudio = muteRemoteAudio;
              stream.isRemoteAudioMuted = isRemoteAudioMuted;
              stream.setMicrophoneGain = setMicrophoneGain;
              stream.getVolume = getVolume;
              stream.muteAudio = muteAudio;
              stream.unmuteAudio = unmuteAudio;
              stream.isAudioMuted = isAudioMuted;
              stream.muteVideo = muteVideo;
              stream.unmuteVideo = unmuteVideo;
              stream.isVideoMuted = isVideoMuted;
              stream.getStats = getStats;
              stream.snapshot = snapshot;
              stream.getAudioState = getAudioState;
              stream.getVideoState = getVideoState;
              stream.getNetworkBandwidth = getNetworkBandwidth;
              stream.getRemoteBitrate = getRemoteBitrate;
              stream.fullScreen = fullScreen;
              stream.on = on;
              stream.available = available;
              stream.switchCam = switchCam;
              stream.switchMic = switchMic;
              stream.switchToScreen = switchToScreen;
              stream.switchToCam = switchToCam;
              stream.sendData = sendData;
              streams[id_] = stream;
              return stream;
            };
            /**
             * Disconnect session.
             *
             * @memberof Session
             * @inner
             */

            const disconnect = function disconnect() {
              if (wsConnection) {
                wsConnection.close();
              }
            };
            /**
             * Get session id
             *
             * @returns {string} session id
             * @memberof Session
             * @inner
             */

            const id = function id() {
              return id_;
            };
            /**
             * Get server address
             *
             * @returns {string} Server url
             * @memberof Session
             * @inner
             */

            const getServerUrl = function getServerUrl() {
              return urlServer;
            };
            /**
             * Get session status
             *
             * @returns {string} One of {@link Flashphoner.constants.SESSION_STATUS}
             * @memberof Session
             * @inner
             */

            const status = function status() {
              return sessionStatus;
            };
            /**
             * Get stream by id.
             *
             * @param {string} streamId Stream id
             * @returns {Stream} Stream
             * @memberof Session
             * @inner
             */

            const getStream = function getStream(streamId) {
              return streams[streamId];
            };
            /**
             * Get streams.
             *
             * @returns {Array<Stream>} Streams
             * @memberof Session
             * @inner
             */

            const getStreams = function getStreams() {
              return util.copyObjectToArray(streams);
            };
            /**
             * Submit bug report.
             *
             * @param {Object} reportObject Report object
             * @memberof Session
             * @inner
             */

            const submitBugReport = function submitBugReport(reportObject) {
              send('submitBugReport', reportObject);
            };
            /**
             * Start session debug
             * @memberof Session
             * @inner
             */

            const startDebug = function startDebug() {
              logger.setPushLogs(true);
              logger.setLevel('DEBUG');
              send('sessionDebug', {
                command: 'start',
              });
            };
            /**
             * Stop session debug
             * @memberof Session
             * @inner
             */

            const stopDebug = function stopDebug() {
              logger.setLevel('INFO');
              send('sessionDebug', {
                command: 'stop',
              });
            };
            /**
             * Session event callback.
             *
             * @callback Session~eventCallback
             * @param {Session} session Session that corresponds to the event
             */

            /**
             * Add session event callback.
             *
             * @param {string} event One of {@link Flashphoner.constants.SESSION_STATUS} events
             * @param {Session~eventCallback} callback Callback function
             * @returns {Session} Session
             * @throws {TypeError} Error if event is not specified
             * @throws {Error} Error if callback is not a valid function
             * @memberof Session
             * @inner
             */

            const on = function on(event, callback) {
              if (!event) {
                throw new Error("Event can't be null", 'TypeError');
              }

              if (!callback || typeof callback !== 'function') {
                throw new Error('Callback needs to be a valid function');
              }

              callbacks[event] = callback;
              return session;
            };

            var restAppCommunicator = (function () {
              const pending = {};
              const exports = {};
              /**
               * Send data to REST App
               *
               * @param {Object} data Object to send
               * @returns {Promise} Resolves if data accepted, otherwise rejects
               * @memberof Session
               * @name sendData
               * @method
               * @inner
               */

              exports.sendData = function (data) {
                return new Promise(((resolve, reject) => {
                  const obj = {
                    operationId: uuid_v1(),
                    payload: data,
                  };
                  pending[obj.operationId] = {
                    FAILED: function FAILED(info) {
                      reject(info);
                    },
                    ACCEPTED: function ACCEPTED(info) {
                      resolve(info);
                    },
                  };
                  send('sendData', obj);
                }));
              };

              exports.resolveData = function (data) {
                if (pending[data.operationId]) {
                  const handler = pending[data.operationId];
                  delete pending[data.operationId];
                  delete data.operationId;
                  handler[data.status](data);
                }
              };

              return exports;
            }());

            var sdpHookHandler = function sdpHookHandler(sdp, sdpHook) {
              if (sdpHook != undefined && typeof sdpHook === 'function') {
                const sdpObject = {
                  sdpString: sdp,
                };
                const newSdp = sdpHook(sdpObject);

                if (newSdp != null && newSdp != '') {
                  return newSdp;
                }

                return sdp;
              }

              return sdp;
            }; // export Session

            session.id = id;
            session.status = status;
            session.getServerUrl = getServerUrl;
            session.createStream = createStream;
            session.createCall = createCall;
            session.getStream = getStream;
            session.getStreams = getStreams;
            session.sendData = restAppCommunicator.sendData;
            session.disconnect = disconnect;
            session.submitBugReport = submitBugReport;
            session.startDebug = startDebug;
            session.stopDebug = stopDebug;
            session.on = on; // save interface to global map

            sessions[id_] = session;
            return session;
          };

          const isUsingTemasys = function isUsingTemasys() {
            return isUsingTemasysPlugin;
          };

          module.exports = {
            init,
            isUsingTemasys,
            getMediaProviders,
            getMediaDevices,
            getMediaAccess,
            releaseLocalMedia,
            getSessions,
            getSession,
            createSession,
            playFirstSound,
            playFirstVideo,
            getLogger,
            roomApi: require('./room-module'),
            constants,

            /**
             * The Screensharing whitelist is no longer needed to share your screen or windows starting Firefox 52
             * https://wiki.mozilla.org/Screensharing
             */
            firefoxScreenSharingExtensionInstalled: true,
          };
        },
        {
          './constants': 28,
          './flash-media-provider': 29,
          './media-source-media-provider': 31,
          './room-module': 32,
          './temasys-media-provider': 1,
          './util': 33,
          './webrtc-media-provider': 34,
          './websocket-media-provider': 35,
          kalmanjs: 2,
          'promise-polyfill': 4,
          'uuid/v1': 11,
          'webrtc-adapter': 12,
        },
      ],
      31: [
        function (require, module, exports) {
          (function (global) {
            (function () {
              !(function (t) {
                if (typeof exports === 'object' && typeof module !== 'undefined') module.exports = t();
                else if (typeof define === 'function' && define.amd) define([], t);
                else {
                  (typeof window !== 'undefined'
                    ? window
                    : typeof global !== 'undefined'
                      ? global
                      : typeof self !== 'undefined'
                        ? self
                        : this
                  ).MediaSourceMediaProvider = t();
                }
              }(() => (function t(e, r, n) {
                function i(a, s) {
                  if (!r[a]) {
                    if (!e[a]) {
                      const f = typeof require === 'function' && require;
                      if (!s && f) return f(a, !0);
                      if (o) return o(a, !0);
                      const u = new Error(`Cannot find module '${a}'`);
                      throw ((u.code = 'MODULE_NOT_FOUND'), u);
                    }
                    const c = (r[a] = { exports: {} });
                    e[a][0].call(
                      c.exports,
                      (t) => i(e[a][1][t] || t),
                      c,
                      c.exports,
                      t,
                      e,
                      r,
                      n,
                    );
                  }
                  return r[a].exports;
                }
                for (var o = typeof require === 'function' && require, a = 0; a < n.length; a++) i(n[a]);
                return i;
              }(
                {
                  1: [
                    function (t, e, r) {
                      e.exports = function (t, e) {
                        if (t === e) return !0;
                        if (t.byteLength !== e.byteLength) return !1;
                        for (
                          let r = new DataView(t), n = new DataView(e), i = t.byteLength;
                          i--;

                        ) if (r.getUint8(i) !== n.getUint8(i)) return !1;
                        return !0;
                      };
                    },
                    {},
                  ],
                  2: [
                    function (t, e, r) {
                      const n = r;
                      (n.bignum = t(16)),
                      (n.define = t(3).define),
                      (n.base = t(5)),
                      (n.constants = t(9)),
                      (n.decoders = t(11)),
                      (n.encoders = t(14));
                    },
                    {
                      11: 11, 14: 14, 16: 16, 3: 3, 5: 5, 9: 9,
                    },
                  ],
                  3: [
                    function (t, e, r) {
                      const n = t(14);
                      const i = t(11);
                      const o = t(467);
                      function a(t, e) {
                        (this.name = t),
                        (this.body = e),
                        (this.decoders = {}),
                        (this.encoders = {});
                      }
                      (r.define = function (t, e) {
                        return new a(t, e);
                      }),
                      (a.prototype._createNamed = function (t) {
                        const e = this.name;
                        function r(t) {
                          this._initNamed(t, e);
                        }
                        return (
                          o(r, t),
                          (r.prototype._initNamed = function (e, r) {
                            t.call(this, e, r);
                          }),
                          new r(this)
                        );
                      }),
                      (a.prototype._getDecoder = function (t) {
                        return (
                          (t = t || 'der'),
                          this.decoders.hasOwnProperty(t)
                                || (this.decoders[t] = this._createNamed(i[t])),
                          this.decoders[t]
                        );
                      }),
                      (a.prototype.decode = function (t, e, r) {
                        return this._getDecoder(e).decode(t, r);
                      }),
                      (a.prototype._getEncoder = function (t) {
                        return (
                          (t = t || 'der'),
                          this.encoders.hasOwnProperty(t)
                                || (this.encoders[t] = this._createNamed(n[t])),
                          this.encoders[t]
                        );
                      }),
                      (a.prototype.encode = function (t, e, r) {
                        return this._getEncoder(e).encode(t, r);
                      });
                    },
                    { 11: 11, 14: 14, 467: 467 },
                  ],
                  4: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(7).Reporter;
                      const o = t(515).Buffer;
                      function a(t, e) {
                        i.call(this, e),
                        o.isBuffer(t)
                          ? ((this.base = t), (this.offset = 0), (this.length = t.length))
                          : this.error('Input not Buffer');
                      }
                      function s(t, e) {
                        if (Array.isArray(t)) {
                          (this.length = 0),
                          (this.value = t.map(function (t) {
                            return (
                              s.isEncoderBuffer(t) || (t = new s(t, e)),
                              (this.length += t.length),
                              t
                            );
                          }, this));
                        } else if (typeof t === 'number') {
                          if (!(t >= 0 && t <= 255)) return e.error('non-byte EncoderBuffer value');
                          (this.value = t), (this.length = 1);
                        } else if (typeof t === 'string') (this.value = t), (this.length = o.byteLength(t));
                        else {
                          if (!o.isBuffer(t)) return e.error(`Unsupported type: ${typeof t}`);
                          (this.value = t), (this.length = t.length);
                        }
                      }
                      n(a, i),
                      (r.DecoderBuffer = a),
                      (a.isDecoderBuffer = function (t) {
                        if (t instanceof a) return !0;
                        return (
                          typeof t === 'object'
                              && o.isBuffer(t.base)
                              && t.constructor.name === 'DecoderBuffer'
                              && typeof t.offset === 'number'
                              && typeof t.length === 'number'
                              && typeof t.save === 'function'
                              && typeof t.restore === 'function'
                              && typeof t.isEmpty === 'function'
                              && typeof t.readUInt8 === 'function'
                              && typeof t.skip === 'function'
                              && typeof t.raw === 'function'
                        );
                      }),
                      (a.prototype.save = function () {
                        return { offset: this.offset, reporter: i.prototype.save.call(this) };
                      }),
                      (a.prototype.restore = function (t) {
                        const e = new a(this.base);
                        return (
                          (e.offset = t.offset),
                          (e.length = this.offset),
                          (this.offset = t.offset),
                          i.prototype.restore.call(this, t.reporter),
                          e
                        );
                      }),
                      (a.prototype.isEmpty = function () {
                        return this.offset === this.length;
                      }),
                      (a.prototype.readUInt8 = function (t) {
                        return this.offset + 1 <= this.length
                          ? this.base.readUInt8(this.offset++, !0)
                          : this.error(t || 'DecoderBuffer overrun');
                      }),
                      (a.prototype.skip = function (t, e) {
                        if (!(this.offset + t <= this.length)) return this.error(e || 'DecoderBuffer overrun');
                        const r = new a(this.base);
                        return (
                          (r._reporterState = this._reporterState),
                          (r.offset = this.offset),
                          (r.length = this.offset + t),
                          (this.offset += t),
                          r
                        );
                      }),
                      (a.prototype.raw = function (t) {
                        return this.base.slice(t ? t.offset : this.offset, this.length);
                      }),
                      (r.EncoderBuffer = s),
                      (s.isEncoderBuffer = function (t) {
                        if (t instanceof s) return !0;
                        return (
                          typeof t === 'object'
                              && t.constructor.name === 'EncoderBuffer'
                              && typeof t.length === 'number'
                              && typeof t.join === 'function'
                        );
                      }),
                      (s.prototype.join = function (t, e) {
                        return (
                          t || (t = o.alloc(this.length)),
                          e || (e = 0),
                          this.length === 0
                                || (Array.isArray(this.value)
                                  ? this.value.forEach((r) => {
                                    r.join(t, e), (e += r.length);
                                  })
                                  : (typeof this.value === 'number'
                                    ? (t[e] = this.value)
                                    : typeof this.value === 'string'
                                      ? t.write(this.value, e)
                                      : o.isBuffer(this.value) && this.value.copy(t, e),
                                  (e += this.length))),
                          t
                        );
                      });
                    },
                    { 467: 467, 515: 515, 7: 7 },
                  ],
                  5: [
                    function (t, e, r) {
                      const n = r;
                      (n.Reporter = t(7).Reporter),
                      (n.DecoderBuffer = t(4).DecoderBuffer),
                      (n.EncoderBuffer = t(4).EncoderBuffer),
                      (n.Node = t(6));
                    },
                    { 4: 4, 6: 6, 7: 7 },
                  ],
                  6: [
                    function (t, e, r) {
                      const n = t(7).Reporter;
                      const i = t(4).EncoderBuffer;
                      const o = t(4).DecoderBuffer;
                      const a = t(473);
                      const s = [
                        'seq',
                        'seqof',
                        'set',
                        'setof',
                        'objid',
                        'bool',
                        'gentime',
                        'utctime',
                        'null_',
                        'enum',
                        'int',
                        'objDesc',
                        'bitstr',
                        'bmpstr',
                        'charstr',
                        'genstr',
                        'graphstr',
                        'ia5str',
                        'iso646str',
                        'numstr',
                        'octstr',
                        'printstr',
                        't61str',
                        'unistr',
                        'utf8str',
                        'videostr',
                      ];
                      const f = [
                        'key',
                        'obj',
                        'use',
                        'optional',
                        'explicit',
                        'implicit',
                        'def',
                        'choice',
                        'any',
                        'contains',
                      ].concat(s);
                      function u(t, e, r) {
                        const n = {};
                        (this._baseState = n),
                        (n.name = r),
                        (n.enc = t),
                        (n.parent = e || null),
                        (n.children = null),
                        (n.tag = null),
                        (n.args = null),
                        (n.reverseArgs = null),
                        (n.choice = null),
                        (n.optional = !1),
                        (n.any = !1),
                        (n.obj = !1),
                        (n.use = null),
                        (n.useDecoder = null),
                        (n.key = null),
                        (n.default = null),
                        (n.explicit = null),
                        (n.implicit = null),
                        (n.contains = null),
                        n.parent || ((n.children = []), this._wrap());
                      }
                      e.exports = u;
                      const c = [
                        'enc',
                        'parent',
                        'children',
                        'tag',
                        'args',
                        'reverseArgs',
                        'choice',
                        'optional',
                        'any',
                        'obj',
                        'use',
                        'alteredUse',
                        'key',
                        'default',
                        'explicit',
                        'implicit',
                        'contains',
                      ];
                      (u.prototype.clone = function () {
                        const t = this._baseState;
                        const e = {};
                        c.forEach((r) => {
                          e[r] = t[r];
                        });
                        const r = new this.constructor(e.parent);
                        return (r._baseState = e), r;
                      }),
                      (u.prototype._wrap = function () {
                        const t = this._baseState;
                        f.forEach(function (e) {
                          this[e] = function () {
                            const r = new this.constructor(this);
                            return t.children.push(r), r[e].apply(r, arguments);
                          };
                        }, this);
                      }),
                      (u.prototype._init = function (t) {
                        const e = this._baseState;
                        a(e.parent === null),
                        t.call(this),
                        (e.children = e.children.filter(function (t) {
                          return t._baseState.parent === this;
                        }, this)),
                        a.equal(e.children.length, 1, 'Root node can have only one child');
                      }),
                      (u.prototype._useArgs = function (t) {
                        const e = this._baseState;
                        const r = t.filter(function (t) {
                          return t instanceof this.constructor;
                        }, this);
                        (t = t.filter(function (t) {
                          return !(t instanceof this.constructor);
                        }, this)),
                        r.length !== 0
                                && (a(e.children === null),
                                (e.children = r),
                                r.forEach(function (t) {
                                  t._baseState.parent = this;
                                }, this)),
                        t.length !== 0
                                && (a(e.args === null),
                                (e.args = t),
                                (e.reverseArgs = t.map((t) => {
                                  if (typeof t !== 'object' || t.constructor !== Object) return t;
                                  const e = {};
                                  return (
                                    Object.keys(t).forEach((r) => {
                                      r == (0 | r) && (r |= 0);
                                      const n = t[r];
                                      e[n] = r;
                                    }),
                                    e
                                  );
                                })));
                      }),
                      [
                        '_peekTag',
                        '_decodeTag',
                        '_use',
                        '_decodeStr',
                        '_decodeObjid',
                        '_decodeTime',
                        '_decodeNull',
                        '_decodeInt',
                        '_decodeBool',
                        '_decodeList',
                        '_encodeComposite',
                        '_encodeStr',
                        '_encodeObjid',
                        '_encodeTime',
                        '_encodeNull',
                        '_encodeInt',
                        '_encodeBool',
                      ].forEach((t) => {
                        u.prototype[t] = function () {
                          const e = this._baseState;
                          throw new Error(`${t} not implemented for encoding: ${e.enc}`);
                        };
                      }),
                      s.forEach((t) => {
                        u.prototype[t] = function () {
                          const e = this._baseState;
                          const r = Array.prototype.slice.call(arguments);
                          return a(e.tag === null), (e.tag = t), this._useArgs(r), this;
                        };
                      }),
                      (u.prototype.use = function (t) {
                        a(t);
                        const e = this._baseState;
                        return a(e.use === null), (e.use = t), this;
                      }),
                      (u.prototype.optional = function () {
                        return (this._baseState.optional = !0), this;
                      }),
                      (u.prototype.def = function (t) {
                        const e = this._baseState;
                        return a(e.default === null), (e.default = t), (e.optional = !0), this;
                      }),
                      (u.prototype.explicit = function (t) {
                        const e = this._baseState;
                        return (
                          a(e.explicit === null && e.implicit === null), (e.explicit = t), this
                        );
                      }),
                      (u.prototype.implicit = function (t) {
                        const e = this._baseState;
                        return (
                          a(e.explicit === null && e.implicit === null), (e.implicit = t), this
                        );
                      }),
                      (u.prototype.obj = function () {
                        const t = this._baseState;
                        const e = Array.prototype.slice.call(arguments);
                        return (t.obj = !0), e.length !== 0 && this._useArgs(e), this;
                      }),
                      (u.prototype.key = function (t) {
                        const e = this._baseState;
                        return a(e.key === null), (e.key = t), this;
                      }),
                      (u.prototype.any = function () {
                        return (this._baseState.any = !0), this;
                      }),
                      (u.prototype.choice = function (t) {
                        const e = this._baseState;
                        return (
                          a(e.choice === null),
                          (e.choice = t),
                          this._useArgs(
                            Object.keys(t).map((e) => t[e]),
                          ),
                          this
                        );
                      }),
                      (u.prototype.contains = function (t) {
                        const e = this._baseState;
                        return a(e.use === null), (e.contains = t), this;
                      }),
                      (u.prototype._decode = function (t, e) {
                        const r = this._baseState;
                        if (r.parent === null) return t.wrapResult(r.children[0]._decode(t, e));
                        let n;
                        let i = r.default;
                        let a = !0;
                        let s = null;
                        if ((r.key !== null && (s = t.enterKey(r.key)), r.optional)) {
                          let n = null;
                          if (
                            (r.explicit !== null
                              ? (n = r.explicit)
                              : r.implicit !== null
                                ? (n = r.implicit)
                                : r.tag !== null && (n = r.tag),
                            n !== null || r.any)
                          ) {
                            if (((a = this._peekTag(t, n, r.any)), t.isError(a))) return a;
                          } else {
                            const n = t.save();
                            try {
                              r.choice === null
                                ? this._decodeGeneric(r.tag, t, e)
                                : this._decodeChoice(t, e),
                              (a = !0);
                            } catch (t) {
                              a = !1;
                            }
                            t.restore(n);
                          }
                        }
                        if ((r.obj && a && (n = t.enterObject()), a)) {
                          if (r.explicit !== null) {
                            const e = this._decodeTag(t, r.explicit);
                            if (t.isError(e)) return e;
                            t = e;
                          }
                          const n = t.offset;
                          if (r.use === null && r.choice === null) {
                            let e;
                            r.any && (e = t.save());
                            const n = this._decodeTag(
                              t,
                              r.implicit !== null ? r.implicit : r.tag,
                              r.any,
                            );
                            if (t.isError(n)) return n;
                            r.any ? (i = t.raw(e)) : (t = n);
                          }
                          if (
                            (e
                                  && e.track
                                  && r.tag !== null
                                  && e.track(t.path(), n, t.length, 'tagged'),
                            e
                                  && e.track
                                  && r.tag !== null
                                  && e.track(t.path(), t.offset, t.length, 'content'),
                            r.any
                                  || (i = r.choice === null
                                    ? this._decodeGeneric(r.tag, t, e)
                                    : this._decodeChoice(t, e)),
                            t.isError(i))
                          ) return i;
                          if (
                            (r.any
                                  || r.choice !== null
                                  || r.children === null
                                  || r.children.forEach((r) => {
                                    r._decode(t, e);
                                  }),
                            r.contains && (r.tag === 'octstr' || r.tag === 'bitstr'))
                          ) {
                            const n = new o(i);
                            i = this._getUse(r.contains, t._reporterState.obj)._decode(n, e);
                          }
                        }
                        return (
                          r.obj && a && (i = t.leaveObject(n)),
                          r.key === null || (i === null && !0 !== a)
                            ? s !== null && t.exitKey(s)
                            : t.leaveKey(s, r.key, i),
                          i
                        );
                      }),
                      (u.prototype._decodeGeneric = function (t, e, r) {
                        const n = this._baseState;
                        return t === 'seq' || t === 'set'
                          ? null
                          : t === 'seqof' || t === 'setof'
                            ? this._decodeList(e, t, n.args[0], r)
                            : /str$/.test(t)
                              ? this._decodeStr(e, t, r)
                              : t === 'objid' && n.args
                                ? this._decodeObjid(e, n.args[0], n.args[1], r)
                                : t === 'objid'
                                  ? this._decodeObjid(e, null, null, r)
                                  : t === 'gentime' || t === 'utctime'
                                    ? this._decodeTime(e, t, r)
                                    : t === 'null_'
                                      ? this._decodeNull(e, r)
                                      : t === 'bool'
                                        ? this._decodeBool(e, r)
                                        : t === 'objDesc'
                                          ? this._decodeStr(e, t, r)
                                          : t === 'int' || t === 'enum'
                                            ? this._decodeInt(e, n.args && n.args[0], r)
                                            : n.use !== null
                                              ? this._getUse(n.use, e._reporterState.obj)._decode(e, r)
                                              : e.error(`unknown tag: ${t}`);
                      }),
                      (u.prototype._getUse = function (t, e) {
                        const r = this._baseState;
                        return (
                          (r.useDecoder = this._use(t, e)),
                          a(r.useDecoder._baseState.parent === null),
                          (r.useDecoder = r.useDecoder._baseState.children[0]),
                          r.implicit !== r.useDecoder._baseState.implicit
                                && ((r.useDecoder = r.useDecoder.clone()),
                                (r.useDecoder._baseState.implicit = r.implicit)),
                          r.useDecoder
                        );
                      }),
                      (u.prototype._decodeChoice = function (t, e) {
                        const r = this._baseState;
                        let n = null;
                        let i = !1;
                        return (
                          Object.keys(r.choice).some((o) => {
                            const a = t.save();
                            const s = r.choice[o];
                            try {
                              const r = s._decode(t, e);
                              if (t.isError(r)) return !1;
                              (n = { type: o, value: r }), (i = !0);
                            } catch (e) {
                              return t.restore(a), !1;
                            }
                            return !0;
                          }, this),
                          i ? n : t.error('Choice not matched')
                        );
                      }),
                      (u.prototype._createEncoderBuffer = function (t) {
                        return new i(t, this.reporter);
                      }),
                      (u.prototype._encode = function (t, e, r) {
                        const n = this._baseState;
                        if (n.default !== null && n.default === t) return;
                        const i = this._encodeValue(t, e, r);
                        return void 0 === i || this._skipDefault(i, e, r) ? void 0 : i;
                      }),
                      (u.prototype._encodeValue = function (t, e, r) {
                        const i = this._baseState;
                        if (i.parent === null) return i.children[0]._encode(t, e || new n());
                        let o = null;
                        if (((this.reporter = e), i.optional && void 0 === t)) {
                          if (i.default === null) return;
                          t = i.default;
                        }
                        let a = null;
                        let s = !1;
                        if (i.any) o = this._createEncoderBuffer(t);
                        else if (i.choice) o = this._encodeChoice(t, e);
                        else if (i.contains) (a = this._getUse(i.contains, r)._encode(t, e)), (s = !0);
                        else if (i.children) {
                          (a = i.children
                            .map((r) => {
                              if (r._baseState.tag === 'null_') return r._encode(null, e, t);
                              if (r._baseState.key === null) return e.error('Child should have a key');
                              const n = e.enterKey(r._baseState.key);
                              if (typeof t !== 'object') return e.error('Child expected, but input is not object');
                              const i = r._encode(t[r._baseState.key], e, t);
                              return e.leaveKey(n), i;
                            }, this)
                            .filter((t) => t)),
                          (a = this._createEncoderBuffer(a));
                        } else if (i.tag === 'seqof' || i.tag === 'setof') {
                          if (!i.args || i.args.length !== 1) return e.error(`Too many args for : ${i.tag}`);
                          if (!Array.isArray(t)) return e.error('seqof/setof, but data is not Array');
                          const r = this.clone();
                          (r._baseState.implicit = null),
                          (a = this._createEncoderBuffer(
                            t.map(function (r) {
                              const n = this._baseState;
                              return this._getUse(n.args[0], t)._encode(r, e);
                            }, r),
                          ));
                        } else {
                          i.use !== null
                            ? (o = this._getUse(i.use, r)._encode(t, e))
                            : ((a = this._encodePrimitive(i.tag, t)), (s = !0));
                        }
                        if (!i.any && i.choice === null) {
                          const t = i.implicit !== null ? i.implicit : i.tag;
                          const r = i.implicit === null ? 'universal' : 'context';
                          t === null
                            ? i.use === null && e.error('Tag could be omitted only for .use()')
                            : i.use === null && (o = this._encodeComposite(t, s, r, a));
                        }
                        return (
                          i.explicit !== null
                                && (o = this._encodeComposite(i.explicit, !1, 'context', o)),
                          o
                        );
                      }),
                      (u.prototype._encodeChoice = function (t, e) {
                        const r = this._baseState;
                        const n = r.choice[t.type];
                        return (
                          n
                                || a(
                                  !1,
                                  `${t.type} not found in ${JSON.stringify(Object.keys(r.choice))}`,
                                ),
                          n._encode(t.value, e)
                        );
                      }),
                      (u.prototype._encodePrimitive = function (t, e) {
                        const r = this._baseState;
                        if (/str$/.test(t)) return this._encodeStr(e, t);
                        if (t === 'objid' && r.args) return this._encodeObjid(e, r.reverseArgs[0], r.args[1]);
                        if (t === 'objid') return this._encodeObjid(e, null, null);
                        if (t === 'gentime' || t === 'utctime') return this._encodeTime(e, t);
                        if (t === 'null_') return this._encodeNull();
                        if (t === 'int' || t === 'enum') return this._encodeInt(e, r.args && r.reverseArgs[0]);
                        if (t === 'bool') return this._encodeBool(e);
                        if (t === 'objDesc') return this._encodeStr(e, t);
                        throw new Error(`Unsupported tag: ${t}`);
                      }),
                      (u.prototype._isNumstr = function (t) {
                        return /^[0-9 ]*$/.test(t);
                      }),
                      (u.prototype._isPrintstr = function (t) {
                        return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(t);
                      });
                    },
                    { 4: 4, 473: 473, 7: 7 },
                  ],
                  7: [
                    function (t, e, r) {
                      const n = t(467);
                      function i(t) {
                        this._reporterState = {
                          obj: null,
                          path: [],
                          options: t || {},
                          errors: [],
                        };
                      }
                      function o(t, e) {
                        (this.path = t), this.rethrow(e);
                      }
                      (r.Reporter = i),
                      (i.prototype.isError = function (t) {
                        return t instanceof o;
                      }),
                      (i.prototype.save = function () {
                        const t = this._reporterState;
                        return { obj: t.obj, pathLen: t.path.length };
                      }),
                      (i.prototype.restore = function (t) {
                        const e = this._reporterState;
                        (e.obj = t.obj), (e.path = e.path.slice(0, t.pathLen));
                      }),
                      (i.prototype.enterKey = function (t) {
                        return this._reporterState.path.push(t);
                      }),
                      (i.prototype.exitKey = function (t) {
                        const e = this._reporterState;
                        e.path = e.path.slice(0, t - 1);
                      }),
                      (i.prototype.leaveKey = function (t, e, r) {
                        const n = this._reporterState;
                        this.exitKey(t), n.obj !== null && (n.obj[e] = r);
                      }),
                      (i.prototype.path = function () {
                        return this._reporterState.path.join('/');
                      }),
                      (i.prototype.enterObject = function () {
                        const t = this._reporterState;
                        const e = t.obj;
                        return (t.obj = {}), e;
                      }),
                      (i.prototype.leaveObject = function (t) {
                        const e = this._reporterState;
                        const r = e.obj;
                        return (e.obj = t), r;
                      }),
                      (i.prototype.error = function (t) {
                        let e;
                        const r = this._reporterState;
                        const n = t instanceof o;
                        if (
                          ((e = n
                            ? t
                            : new o(
                              r.path
                                .map((t) => `[${JSON.stringify(t)}]`)
                                .join(''),
                              t.message || t,
                              t.stack,
                            )),
                          !r.options.partial)
                        ) throw e;
                        return n || r.errors.push(e), e;
                      }),
                      (i.prototype.wrapResult = function (t) {
                        const e = this._reporterState;
                        return e.options.partial
                          ? { result: this.isError(t) ? null : t, errors: e.errors }
                          : t;
                      }),
                      n(o, Error),
                      (o.prototype.rethrow = function (t) {
                        if (
                          ((this.message = `${t} at: ${this.path || '(shallow)'}`),
                          Error.captureStackTrace && Error.captureStackTrace(this, o),
                          !this.stack)
                        ) {
                          try {
                            throw new Error(this.message);
                          } catch (t) {
                            this.stack = t.stack;
                          }
                        }
                        return this;
                      });
                    },
                    { 467: 467 },
                  ],
                  8: [
                    function (t, e, r) {
                      function n(t) {
                        const e = {};
                        return (
                          Object.keys(t).forEach((r) => {
                            (0 | r) == r && (r |= 0);
                            const n = t[r];
                            e[n] = r;
                          }),
                          e
                        );
                      }
                      (r.tagClass = {
                        0: 'universal',
                        1: 'application',
                        2: 'context',
                        3: 'private',
                      }),
                      (r.tagClassByName = n(r.tagClass)),
                      (r.tag = {
                        0: 'end',
                        1: 'bool',
                        2: 'int',
                        3: 'bitstr',
                        4: 'octstr',
                        5: 'null_',
                        6: 'objid',
                        7: 'objDesc',
                        8: 'external',
                        9: 'real',
                        10: 'enum',
                        11: 'embed',
                        12: 'utf8str',
                        13: 'relativeOid',
                        16: 'seq',
                        17: 'set',
                        18: 'numstr',
                        19: 'printstr',
                        20: 't61str',
                        21: 'videostr',
                        22: 'ia5str',
                        23: 'utctime',
                        24: 'gentime',
                        25: 'graphstr',
                        26: 'iso646str',
                        27: 'genstr',
                        28: 'unistr',
                        29: 'charstr',
                        30: 'bmpstr',
                      }),
                      (r.tagByName = n(r.tag));
                    },
                    {},
                  ],
                  9: [
                    function (t, e, r) {
                      const n = r;
                      (n._reverse = function (t) {
                        const e = {};
                        return (
                          Object.keys(t).forEach((r) => {
                            (0 | r) == r && (r |= 0);
                            const n = t[r];
                            e[n] = r;
                          }),
                          e
                        );
                      }),
                      (n.der = t(8));
                    },
                    { 8: 8 },
                  ],
                  10: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(16);
                      const o = t(4).DecoderBuffer;
                      const a = t(6);
                      const s = t(8);
                      function f(t) {
                        (this.enc = 'der'),
                        (this.name = t.name),
                        (this.entity = t),
                        (this.tree = new u()),
                        this.tree._init(t.body);
                      }
                      function u(t) {
                        a.call(this, 'der', t);
                      }
                      function c(t, e) {
                        let r = t.readUInt8(e);
                        if (t.isError(r)) return r;
                        const n = s.tagClass[r >> 6];
                        const i = (32 & r) == 0;
                        if ((31 & r) == 31) {
                          let n = r;
                          for (r = 0; (128 & n) == 128;) {
                            if (((n = t.readUInt8(e)), t.isError(n))) return n;
                            (r <<= 7), (r |= 127 & n);
                          }
                        } else r &= 31;
                        return {
                          cls: n, primitive: i, tag: r, tagStr: s.tag[r],
                        };
                      }
                      function h(t, e, r) {
                        let n = t.readUInt8(r);
                        if (t.isError(n)) return n;
                        if (!e && n === 128) return null;
                        if ((128 & n) == 0) return n;
                        const i = 127 & n;
                        if (i > 4) return t.error('length octect is too long');
                        n = 0;
                        for (let e = 0; e < i; e++) {
                          n <<= 8;
                          const e = t.readUInt8(r);
                          if (t.isError(e)) return e;
                          n |= e;
                        }
                        return n;
                      }
                      (e.exports = f),
                      (f.prototype.decode = function (t, e) {
                        return (
                          o.isDecoderBuffer(t) || (t = new o(t, e)), this.tree._decode(t, e)
                        );
                      }),
                      n(u, a),
                      (u.prototype._peekTag = function (t, e, r) {
                        if (t.isEmpty()) return !1;
                        const n = t.save();
                        const i = c(t, `Failed to peek tag: "${e}"`);
                        return t.isError(i)
                          ? i
                          : (t.restore(n),
                          i.tag === e || i.tagStr === e || `${i.tagStr}of` === e || r);
                      }),
                      (u.prototype._decodeTag = function (t, e, r) {
                        const n = c(t, `Failed to decode tag of "${e}"`);
                        if (t.isError(n)) return n;
                        let i = h(t, n.primitive, `Failed to get length of "${e}"`);
                        if (t.isError(i)) return i;
                        if (!r && n.tag !== e && n.tagStr !== e && `${n.tagStr}of` !== e) return t.error(`Failed to match tag: "${e}"`);
                        if (n.primitive || i !== null) return t.skip(i, `Failed to match body of: "${e}"`);
                        const o = t.save();
                        const a = this._skipUntilEnd(
                          t,
                          `Failed to skip indefinite length body: "${this.tag}"`,
                        );
                        return t.isError(a)
                          ? a
                          : ((i = t.offset - o.offset),
                          t.restore(o),
                          t.skip(i, `Failed to match body of: "${e}"`));
                      }),
                      (u.prototype._skipUntilEnd = function (t, e) {
                        for (;;) {
                          const r = c(t, e);
                          if (t.isError(r)) return r;
                          const n = h(t, r.primitive, e);
                          if (t.isError(n)) return n;
                          let i;
                          if (
                            ((i = r.primitive || n !== null ? t.skip(n) : this._skipUntilEnd(t, e)),
                            t.isError(i))
                          ) return i;
                          if (r.tagStr === 'end') break;
                        }
                      }),
                      (u.prototype._decodeList = function (t, e, r, n) {
                        const i = [];
                        for (; !t.isEmpty();) {
                          const e = this._peekTag(t, 'end');
                          if (t.isError(e)) return e;
                          const o = r.decode(t, 'der', n);
                          if (t.isError(o) && e) break;
                          i.push(o);
                        }
                        return i;
                      }),
                      (u.prototype._decodeStr = function (t, e) {
                        if (e === 'bitstr') {
                          const e = t.readUInt8();
                          return t.isError(e) ? e : { unused: e, data: t.raw() };
                        }
                        if (e === 'bmpstr') {
                          const e = t.raw();
                          if (e.length % 2 == 1) return t.error('Decoding of string type: bmpstr length mismatch');
                          let r = '';
                          for (let t = 0; t < e.length / 2; t++) r += String.fromCharCode(e.readUInt16BE(2 * t));
                          return r;
                        }
                        if (e === 'numstr') {
                          const e = t.raw().toString('ascii');
                          return this._isNumstr(e)
                            ? e
                            : t.error('Decoding of string type: numstr unsupported characters');
                        }
                        if (e === 'octstr') return t.raw();
                        if (e === 'objDesc') return t.raw();
                        if (e === 'printstr') {
                          const e = t.raw().toString('ascii');
                          return this._isPrintstr(e)
                            ? e
                            : t.error(
                              'Decoding of string type: printstr unsupported characters',
                            );
                        }
                        return /str$/.test(e)
                          ? t.raw().toString()
                          : t.error(`Decoding of string type: ${e} unsupported`);
                      }),
                      (u.prototype._decodeObjid = function (t, e, r) {
                        let n;
                        const i = [];
                        let o = 0;
                        let a = 0;
                        for (; !t.isEmpty();) {
                          (a = t.readUInt8()),
                          (o <<= 7),
                          (o |= 127 & a),
                          (128 & a) == 0 && (i.push(o), (o = 0));
                        }
                        128 & a && i.push(o);
                        const s = (i[0] / 40) | 0;
                        const f = i[0] % 40;
                        if (((n = r ? i : [s, f].concat(i.slice(1))), e)) {
                          let t = e[n.join(' ')];
                          void 0 === t && (t = e[n.join('.')]), void 0 !== t && (n = t);
                        }
                        return n;
                      }),
                      (u.prototype._decodeTime = function (t, e) {
                        const r = t.raw().toString();
                        let n; let i; let o; let a; let s; let
                          f;
                        if (e === 'gentime') {
                          (n = 0 | r.slice(0, 4)),
                          (i = 0 | r.slice(4, 6)),
                          (o = 0 | r.slice(6, 8)),
                          (a = 0 | r.slice(8, 10)),
                          (s = 0 | r.slice(10, 12)),
                          (f = 0 | r.slice(12, 14));
                        } else {
                          if (e !== 'utctime') return t.error(`Decoding ${e} time is not supported yet`);
                          (n = 0 | r.slice(0, 2)),
                          (i = 0 | r.slice(2, 4)),
                          (o = 0 | r.slice(4, 6)),
                          (a = 0 | r.slice(6, 8)),
                          (s = 0 | r.slice(8, 10)),
                          (f = 0 | r.slice(10, 12)),
                          (n = n < 70 ? 2e3 + n : 1900 + n);
                        }
                        return Date.UTC(n, i - 1, o, a, s, f, 0);
                      }),
                      (u.prototype._decodeNull = function () {
                        return null;
                      }),
                      (u.prototype._decodeBool = function (t) {
                        const e = t.readUInt8();
                        return t.isError(e) ? e : e !== 0;
                      }),
                      (u.prototype._decodeInt = function (t, e) {
                        const r = t.raw();
                        let n = new i(r);
                        return e && (n = e[n.toString(10)] || n), n;
                      }),
                      (u.prototype._use = function (t, e) {
                        return typeof t === 'function' && (t = t(e)), t._getDecoder('der').tree;
                      });
                    },
                    {
                      16: 16, 4: 4, 467: 467, 6: 6, 8: 8,
                    },
                  ],
                  11: [
                    function (t, e, r) {
                      const n = r;
                      (n.der = t(10)), (n.pem = t(12));
                    },
                    { 10: 10, 12: 12 },
                  ],
                  12: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(515).Buffer;
                      const o = t(10);
                      function a(t) {
                        o.call(this, t), (this.enc = 'pem');
                      }
                      n(a, o),
                      (e.exports = a),
                      (a.prototype.decode = function (t, e) {
                        const r = t.toString().split(/[\r\n]+/g);
                        const n = e.label.toUpperCase();
                        const a = /^-----(BEGIN|END) ([^-]+)-----$/;
                        let s = -1;
                        let f = -1;
                        for (let t = 0; t < r.length; t++) {
                          const e = r[t].match(a);
                          if (e !== null && e[2] === n) {
                            if (s !== -1) {
                              if (e[1] !== 'END') break;
                              f = t;
                              break;
                            }
                            if (e[1] !== 'BEGIN') break;
                            s = t;
                          }
                        }
                        if (s === -1 || f === -1) throw new Error(`PEM section not found for: ${n}`);
                        const u = r.slice(s + 1, f).join('');
                        u.replace(/[^a-z0-9+/=]+/gi, '');
                        const c = i.from(u, 'base64');
                        return o.prototype.decode.call(this, c, e);
                      });
                    },
                    { 10: 10, 467: 467, 515: 515 },
                  ],
                  13: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(515).Buffer;
                      const o = t(6);
                      const a = t(8);
                      function s(t) {
                        (this.enc = 'der'),
                        (this.name = t.name),
                        (this.entity = t),
                        (this.tree = new f()),
                        this.tree._init(t.body);
                      }
                      function f(t) {
                        o.call(this, 'der', t);
                      }
                      function u(t) {
                        return t < 10 ? `0${t}` : t;
                      }
                      (e.exports = s),
                      (s.prototype.encode = function (t, e) {
                        return this.tree._encode(t, e).join();
                      }),
                      n(f, o),
                      (f.prototype._encodeComposite = function (t, e, r, n) {
                        const o = (function (t, e, r, n) {
                          let i;
                          t === 'seqof' ? (t = 'seq') : t === 'setof' && (t = 'set');
                          if (a.tagByName.hasOwnProperty(t)) i = a.tagByName[t];
                          else {
                            if (typeof t !== 'number' || (0 | t) !== t) return n.error(`Unknown tag: ${t}`);
                            i = t;
                          }
                          if (i >= 31) return n.error('Multi-octet tag encoding unsupported');
                          e || (i |= 32);
                          return (i |= a.tagClassByName[r || 'universal'] << 6), i;
                        }(t, e, r, this.reporter));
                        if (n.length < 128) {
                          const t = i.alloc(2);
                          return (
                            (t[0] = o), (t[1] = n.length), this._createEncoderBuffer([t, n])
                          );
                        }
                        let s = 1;
                        for (let t = n.length; t >= 256; t >>= 8) s++;
                        const f = i.alloc(2 + s);
                        (f[0] = o), (f[1] = 128 | s);
                        for (let t = 1 + s, e = n.length; e > 0; t--, e >>= 8) f[t] = 255 & e;
                        return this._createEncoderBuffer([f, n]);
                      }),
                      (f.prototype._encodeStr = function (t, e) {
                        if (e === 'bitstr') return this._createEncoderBuffer([0 | t.unused, t.data]);
                        if (e === 'bmpstr') {
                          const e = i.alloc(2 * t.length);
                          for (let r = 0; r < t.length; r++) e.writeUInt16BE(t.charCodeAt(r), 2 * r);
                          return this._createEncoderBuffer(e);
                        }
                        return e === 'numstr'
                          ? this._isNumstr(t)
                            ? this._createEncoderBuffer(t)
                            : this.reporter.error(
                              'Encoding of string type: numstr supports only digits and space',
                            )
                          : e === 'printstr'
                            ? this._isPrintstr(t)
                              ? this._createEncoderBuffer(t)
                              : this.reporter.error(
                                'Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark',
                              )
                            : /str$/.test(e) || e === 'objDesc'
                              ? this._createEncoderBuffer(t)
                              : this.reporter.error(
                                `Encoding of string type: ${e} unsupported`,
                              );
                      }),
                      (f.prototype._encodeObjid = function (t, e, r) {
                        if (typeof t === 'string') {
                          if (!e) {
                            return this.reporter.error(
                              'string objid given, but no values map found',
                            );
                          }
                          if (!e.hasOwnProperty(t)) return this.reporter.error('objid not found in values map');
                          t = e[t].split(/[\s.]+/g);
                          for (let e = 0; e < t.length; e++) t[e] |= 0;
                        } else if (Array.isArray(t)) {
                          t = t.slice();
                          for (let e = 0; e < t.length; e++) t[e] |= 0;
                        }
                        if (!Array.isArray(t)) {
                          return this.reporter.error(
                            `objid() should be either array or string, got: ${
                              JSON.stringify(t)}`,
                          );
                        }
                        if (!r) {
                          if (t[1] >= 40) return this.reporter.error('Second objid identifier OOB');
                          t.splice(0, 2, 40 * t[0] + t[1]);
                        }
                        let n = 0;
                        for (let e = 0; e < t.length; e++) {
                          let r = t[e];
                          for (n++; r >= 128; r >>= 7) n++;
                        }
                        const o = i.alloc(n);
                        let a = o.length - 1;
                        for (let e = t.length - 1; e >= 0; e--) {
                          let r = t[e];
                          for (o[a--] = 127 & r; (r >>= 7) > 0;) o[a--] = 128 | (127 & r);
                        }
                        return this._createEncoderBuffer(o);
                      }),
                      (f.prototype._encodeTime = function (t, e) {
                        let r;
                        const n = new Date(t);
                        return (
                          e === 'gentime'
                            ? (r = [
                              u(n.getUTCFullYear()),
                              u(n.getUTCMonth() + 1),
                              u(n.getUTCDate()),
                              u(n.getUTCHours()),
                              u(n.getUTCMinutes()),
                              u(n.getUTCSeconds()),
                              'Z',
                            ].join(''))
                            : e === 'utctime'
                              ? (r = [
                                u(n.getUTCFullYear() % 100),
                                u(n.getUTCMonth() + 1),
                                u(n.getUTCDate()),
                                u(n.getUTCHours()),
                                u(n.getUTCMinutes()),
                                u(n.getUTCSeconds()),
                                'Z',
                              ].join(''))
                              : this.reporter.error(
                                `Encoding ${e} time is not supported yet`,
                              ),
                          this._encodeStr(r, 'octstr')
                        );
                      }),
                      (f.prototype._encodeNull = function () {
                        return this._createEncoderBuffer('');
                      }),
                      (f.prototype._encodeInt = function (t, e) {
                        if (typeof t === 'string') {
                          if (!e) {
                            return this.reporter.error(
                              'String int or enum given, but no values map',
                            );
                          }
                          if (!e.hasOwnProperty(t)) {
                            return this.reporter.error(
                              `Values map doesn't contain: ${JSON.stringify(t)}`,
                            );
                          }
                          t = e[t];
                        }
                        if (typeof t !== 'number' && !i.isBuffer(t)) {
                          const e = t.toArray();
                          !t.sign && 128 & e[0] && e.unshift(0), (t = i.from(e));
                        }
                        if (i.isBuffer(t)) {
                          let e = t.length;
                          t.length === 0 && e++;
                          const r = i.alloc(e);
                          return (
                            t.copy(r),
                            t.length === 0 && (r[0] = 0),
                            this._createEncoderBuffer(r)
                          );
                        }
                        if (t < 128) return this._createEncoderBuffer(t);
                        if (t < 256) return this._createEncoderBuffer([0, t]);
                        let r = 1;
                        for (let e = t; e >= 256; e >>= 8) r++;
                        const n = new Array(r);
                        for (let e = n.length - 1; e >= 0; e--) (n[e] = 255 & t), (t >>= 8);
                        return 128 & n[0] && n.unshift(0), this._createEncoderBuffer(i.from(n));
                      }),
                      (f.prototype._encodeBool = function (t) {
                        return this._createEncoderBuffer(t ? 255 : 0);
                      }),
                      (f.prototype._use = function (t, e) {
                        return typeof t === 'function' && (t = t(e)), t._getEncoder('der').tree;
                      }),
                      (f.prototype._skipDefault = function (t, e, r) {
                        const n = this._baseState;
                        let i;
                        if (n.default === null) return !1;
                        const o = t.join();
                        if (
                          (void 0 === n.defaultBuffer
                                && (n.defaultBuffer = this._encodeValue(n.default, e, r).join()),
                          o.length !== n.defaultBuffer.length)
                        ) return !1;
                        for (i = 0; i < o.length; i++) if (o[i] !== n.defaultBuffer[i]) return !1;
                        return !0;
                      });
                    },
                    {
                      467: 467, 515: 515, 6: 6, 8: 8,
                    },
                  ],
                  14: [
                    function (t, e, r) {
                      const n = r;
                      (n.der = t(13)), (n.pem = t(15));
                    },
                    { 13: 13, 15: 15 },
                  ],
                  15: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(13);
                      function o(t) {
                        i.call(this, t), (this.enc = 'pem');
                      }
                      n(o, i),
                      (e.exports = o),
                      (o.prototype.encode = function (t, e) {
                        const r = i.prototype.encode.call(this, t).toString('base64');
                        const n = [`-----BEGIN ${e.label}-----`];
                        for (let t = 0; t < r.length; t += 64) n.push(r.slice(t, t + 64));
                        return n.push(`-----END ${e.label}-----`), n.join('\n');
                      });
                    },
                    { 13: 13, 467: 467 },
                  ],
                  16: [
                    function (t, e, r) {
                      !(function (e, r) {
                        function n(t, e) {
                          if (!t) throw new Error(e || 'Assertion failed');
                        }
                        function i(t, e) {
                          t.super_ = e;
                          const r = function () {};
                          (r.prototype = e.prototype),
                          (t.prototype = new r()),
                          (t.prototype.constructor = t);
                        }
                        function o(t, e, r) {
                          if (o.isBN(t)) return t;
                          (this.negative = 0),
                          (this.words = null),
                          (this.length = 0),
                          (this.red = null),
                          t !== null
                                && ((e !== 'le' && e !== 'be') || ((r = e), (e = 10)),
                                this._init(t || 0, e || 10, r || 'be'));
                        }
                        let a;
                        typeof e === 'object' ? (e.exports = o) : (r.BN = o),
                        (o.BN = o),
                        (o.wordSize = 26);
                        try {
                          a = typeof window !== 'undefined' && void 0 !== window.Buffer
                            ? window.Buffer
                            : t(21).Buffer;
                        } catch (t) {}
                        function s(t, e) {
                          const r = t.charCodeAt(e);
                          return r >= 65 && r <= 70
                            ? r - 55
                            : r >= 97 && r <= 102
                              ? r - 87
                              : (r - 48) & 15;
                        }
                        function f(t, e, r) {
                          let n = s(t, r);
                          return r - 1 >= e && (n |= s(t, r - 1) << 4), n;
                        }
                        function u(t, e, r, n) {
                          for (var i = 0, o = Math.min(t.length, r), a = e; a < o; a++) {
                            const s = t.charCodeAt(a) - 48;
                            (i *= n), (i += s >= 49 ? s - 49 + 10 : s >= 17 ? s - 17 + 10 : s);
                          }
                          return i;
                        }
                        (o.isBN = function (t) {
                          return (
                            t instanceof o
                              || (t !== null
                                && typeof t === 'object'
                                && t.constructor.wordSize === o.wordSize
                                && Array.isArray(t.words))
                          );
                        }),
                        (o.max = function (t, e) {
                          return t.cmp(e) > 0 ? t : e;
                        }),
                        (o.min = function (t, e) {
                          return t.cmp(e) < 0 ? t : e;
                        }),
                        (o.prototype._init = function (t, e, r) {
                          if (typeof t === 'number') return this._initNumber(t, e, r);
                          if (typeof t === 'object') return this._initArray(t, e, r);
                          e === 'hex' && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
                          let i = 0;
                          (t = t.toString().replace(/\s+/g, ''))[0] === '-'
                                && (i++, (this.negative = 1)),
                          i < t.length
                                  && (e === 16
                                    ? this._parseHex(t, i, r)
                                    : (this._parseBase(t, e, i),
                                    r === 'le' && this._initArray(this.toArray(), e, r)));
                        }),
                        (o.prototype._initNumber = function (t, e, r) {
                          t < 0 && ((this.negative = 1), (t = -t)),
                          t < 67108864
                            ? ((this.words = [67108863 & t]), (this.length = 1))
                            : t < 4503599627370496
                              ? ((this.words = [67108863 & t, (t / 67108864) & 67108863]),
                              (this.length = 2))
                              : (n(t < 9007199254740992),
                              (this.words = [67108863 & t, (t / 67108864) & 67108863, 1]),
                              (this.length = 3)),
                          r === 'le' && this._initArray(this.toArray(), e, r);
                        }),
                        (o.prototype._initArray = function (t, e, r) {
                          if ((n(typeof t.length === 'number'), t.length <= 0)) return (this.words = [0]), (this.length = 1), this;
                          (this.length = Math.ceil(t.length / 3)),
                          (this.words = new Array(this.length));
                          for (var i = 0; i < this.length; i++) this.words[i] = 0;
                          let o;
                          let a;
                          let s = 0;
                          if (r === 'be') {
                            for (i = t.length - 1, o = 0; i >= 0; i -= 3) {
                              (a = t[i] | (t[i - 1] << 8) | (t[i - 2] << 16)),
                              (this.words[o] |= (a << s) & 67108863),
                              (this.words[o + 1] = (a >>> (26 - s)) & 67108863),
                              (s += 24) >= 26 && ((s -= 26), o++);
                            }
                          } else if (r === 'le') {
                            for (i = 0, o = 0; i < t.length; i += 3) {
                              (a = t[i] | (t[i + 1] << 8) | (t[i + 2] << 16)),
                              (this.words[o] |= (a << s) & 67108863),
                              (this.words[o + 1] = (a >>> (26 - s)) & 67108863),
                              (s += 24) >= 26 && ((s -= 26), o++);
                            }
                          }
                          return this.strip();
                        }),
                        (o.prototype._parseHex = function (t, e, r) {
                          (this.length = Math.ceil((t.length - e) / 6)),
                          (this.words = new Array(this.length));
                          for (var n = 0; n < this.length; n++) this.words[n] = 0;
                          let i;
                          let o = 0;
                          let a = 0;
                          if (r === 'be') {
                            for (n = t.length - 1; n >= e; n -= 2) {
                              (i = f(t, e, n) << o),
                              (this.words[a] |= 67108863 & i),
                              o >= 18
                                ? ((o -= 18), (a += 1), (this.words[a] |= i >>> 26))
                                : (o += 8);
                            }
                          } else {
                            for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) {
                              (i = f(t, e, n) << o),
                              (this.words[a] |= 67108863 & i),
                              o >= 18
                                ? ((o -= 18), (a += 1), (this.words[a] |= i >>> 26))
                                : (o += 8);
                            }
                          }
                          this.strip();
                        }),
                        (o.prototype._parseBase = function (t, e, r) {
                          (this.words = [0]), (this.length = 1);
                          for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
                          n--, (i = (i / e) | 0);
                          for (
                            var o = t.length - r,
                              a = o % n,
                              s = Math.min(o, o - a) + r,
                              f = 0,
                              c = r;
                            c < s;
                            c += n
                          ) {
                            (f = u(t, c, c + n, e)),
                            this.imuln(i),
                            this.words[0] + f < 67108864
                              ? (this.words[0] += f)
                              : this._iaddn(f);
                          }
                          if (a !== 0) {
                            let h = 1;
                            for (f = u(t, c, t.length, e), c = 0; c < a; c++) h *= e;
                            this.imuln(h),
                            this.words[0] + f < 67108864
                              ? (this.words[0] += f)
                              : this._iaddn(f);
                          }
                          this.strip();
                        }),
                        (o.prototype.copy = function (t) {
                          t.words = new Array(this.length);
                          for (let e = 0; e < this.length; e++) t.words[e] = this.words[e];
                          (t.length = this.length),
                          (t.negative = this.negative),
                          (t.red = this.red);
                        }),
                        (o.prototype.clone = function () {
                          const t = new o(null);
                          return this.copy(t), t;
                        }),
                        (o.prototype._expand = function (t) {
                          for (; this.length < t;) this.words[this.length++] = 0;
                          return this;
                        }),
                        (o.prototype.strip = function () {
                          for (; this.length > 1 && this.words[this.length - 1] === 0;) this.length--;
                          return this._normSign();
                        }),
                        (o.prototype._normSign = function () {
                          return (
                            this.length === 1 && this.words[0] === 0 && (this.negative = 0),
                            this
                          );
                        }),
                        (o.prototype.inspect = function () {
                          return `${(this.red ? '<BN-R: ' : '<BN: ') + this.toString(16)}>`;
                        });
                        const c = [
                          '',
                          '0',
                          '00',
                          '000',
                          '0000',
                          '00000',
                          '000000',
                          '0000000',
                          '00000000',
                          '000000000',
                          '0000000000',
                          '00000000000',
                          '000000000000',
                          '0000000000000',
                          '00000000000000',
                          '000000000000000',
                          '0000000000000000',
                          '00000000000000000',
                          '000000000000000000',
                          '0000000000000000000',
                          '00000000000000000000',
                          '000000000000000000000',
                          '0000000000000000000000',
                          '00000000000000000000000',
                          '000000000000000000000000',
                          '0000000000000000000000000',
                        ];
                        const h = [
                          0,
                          0,
                          25,
                          16,
                          12,
                          11,
                          10,
                          9,
                          8,
                          8,
                          7,
                          7,
                          7,
                          7,
                          6,
                          6,
                          6,
                          6,
                          6,
                          6,
                          6,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                        ];
                        const d = [
                          0,
                          0,
                          33554432,
                          43046721,
                          16777216,
                          48828125,
                          60466176,
                          40353607,
                          16777216,
                          43046721,
                          1e7,
                          19487171,
                          35831808,
                          62748517,
                          7529536,
                          11390625,
                          16777216,
                          24137569,
                          34012224,
                          47045881,
                          64e6,
                          4084101,
                          5153632,
                          6436343,
                          7962624,
                          9765625,
                          11881376,
                          14348907,
                          17210368,
                          20511149,
                          243e5,
                          28629151,
                          33554432,
                          39135393,
                          45435424,
                          52521875,
                          60466176,
                        ];
                        function l(t, e, r) {
                          r.negative = e.negative ^ t.negative;
                          let n = (t.length + e.length) | 0;
                          (r.length = n), (n = (n - 1) | 0);
                          let i = 0 | t.words[0];
                          let o = 0 | e.words[0];
                          let a = i * o;
                          const s = 67108863 & a;
                          let f = (a / 67108864) | 0;
                          r.words[0] = s;
                          for (var u = 1; u < n; u++) {
                            for (
                              var c = f >>> 26,
                                h = 67108863 & f,
                                d = Math.min(u, e.length - 1),
                                l = Math.max(0, u - t.length + 1);
                              l <= d;
                              l++
                            ) {
                              const p = (u - l) | 0;
                              (c
                                  += ((a = (i = 0 | t.words[p]) * (o = 0 | e.words[l]) + h)
                                    / 67108864)
                                  | 0),
                              (h = 67108863 & a);
                            }
                            (r.words[u] = 0 | h), (f = 0 | c);
                          }
                          return f !== 0 ? (r.words[u] = 0 | f) : r.length--, r.strip();
                        }
                        (o.prototype.toString = function (t, e) {
                          let r;
                          if (((e = 0 | e || 1), (t = t || 10) === 16 || t === 'hex')) {
                            r = '';
                            for (var i = 0, o = 0, a = 0; a < this.length; a++) {
                              const s = this.words[a];
                              const f = (16777215 & ((s << i) | o)).toString(16);
                              (r = (o = (s >>> (24 - i)) & 16777215) !== 0 || a !== this.length - 1
                                ? c[6 - f.length] + f + r
                                : f + r),
                              (i += 2) >= 26 && ((i -= 26), a--);
                            }
                            for (o !== 0 && (r = o.toString(16) + r); r.length % e != 0;) r = `0${r}`;
                            return this.negative !== 0 && (r = `-${r}`), r;
                          }
                          if (t === (0 | t) && t >= 2 && t <= 36) {
                            const u = h[t];
                            const l = d[t];
                            r = '';
                            let p = this.clone();
                            for (p.negative = 0; !p.isZero();) {
                              const b = p.modn(l).toString(t);
                              r = (p = p.idivn(l)).isZero() ? b + r : c[u - b.length] + b + r;
                            }
                            for (this.isZero() && (r = `0${r}`); r.length % e != 0;) r = `0${r}`;
                            return this.negative !== 0 && (r = `-${r}`), r;
                          }
                          n(!1, 'Base should be between 2 and 36');
                        }),
                        (o.prototype.toNumber = function () {
                          let t = this.words[0];
                          return (
                            this.length === 2
                              ? (t += 67108864 * this.words[1])
                              : this.length === 3 && this.words[2] === 1
                                ? (t += 4503599627370496 + 67108864 * this.words[1])
                                : this.length > 2
                                    && n(!1, 'Number can only safely store up to 53 bits'),
                            this.negative !== 0 ? -t : t
                          );
                        }),
                        (o.prototype.toJSON = function () {
                          return this.toString(16);
                        }),
                        (o.prototype.toBuffer = function (t, e) {
                          return n(void 0 !== a), this.toArrayLike(a, t, e);
                        }),
                        (o.prototype.toArray = function (t, e) {
                          return this.toArrayLike(Array, t, e);
                        }),
                        (o.prototype.toArrayLike = function (t, e, r) {
                          const i = this.byteLength();
                          const o = r || Math.max(1, i);
                          n(i <= o, 'byte array longer than desired length'),
                          n(o > 0, 'Requested array length <= 0'),
                          this.strip();
                          let a;
                          let s;
                          const f = e === 'le';
                          const u = new t(o);
                          const c = this.clone();
                          if (f) {
                            for (s = 0; !c.isZero(); s++) (a = c.andln(255)), c.iushrn(8), (u[s] = a);
                            for (; s < o; s++) u[s] = 0;
                          } else {
                            for (s = 0; s < o - i; s++) u[s] = 0;
                            for (s = 0; !c.isZero(); s++) (a = c.andln(255)), c.iushrn(8), (u[o - s - 1] = a);
                          }
                          return u;
                        }),
                        Math.clz32
                          ? (o.prototype._countBits = function (t) {
                            return 32 - Math.clz32(t);
                          })
                          : (o.prototype._countBits = function (t) {
                            let e = t;
                            let r = 0;
                            return (
                              e >= 4096 && ((r += 13), (e >>>= 13)),
                              e >= 64 && ((r += 7), (e >>>= 7)),
                              e >= 8 && ((r += 4), (e >>>= 4)),
                              e >= 2 && ((r += 2), (e >>>= 2)),
                              r + e
                            );
                          }),
                        (o.prototype._zeroBits = function (t) {
                          if (t === 0) return 26;
                          let e = t;
                          let r = 0;
                          return (
                            (8191 & e) == 0 && ((r += 13), (e >>>= 13)),
                            (127 & e) == 0 && ((r += 7), (e >>>= 7)),
                            (15 & e) == 0 && ((r += 4), (e >>>= 4)),
                            (3 & e) == 0 && ((r += 2), (e >>>= 2)),
                            (1 & e) == 0 && r++,
                            r
                          );
                        }),
                        (o.prototype.bitLength = function () {
                          const t = this.words[this.length - 1];
                          const e = this._countBits(t);
                          return 26 * (this.length - 1) + e;
                        }),
                        (o.prototype.zeroBits = function () {
                          if (this.isZero()) return 0;
                          for (var t = 0, e = 0; e < this.length; e++) {
                            const r = this._zeroBits(this.words[e]);
                            if (((t += r), r !== 26)) break;
                          }
                          return t;
                        }),
                        (o.prototype.byteLength = function () {
                          return Math.ceil(this.bitLength() / 8);
                        }),
                        (o.prototype.toTwos = function (t) {
                          return this.negative !== 0
                            ? this.abs()
                              .inotn(t)
                              .iaddn(1)
                            : this.clone();
                        }),
                        (o.prototype.fromTwos = function (t) {
                          return this.testn(t - 1)
                            ? this.notn(t)
                              .iaddn(1)
                              .ineg()
                            : this.clone();
                        }),
                        (o.prototype.isNeg = function () {
                          return this.negative !== 0;
                        }),
                        (o.prototype.neg = function () {
                          return this.clone().ineg();
                        }),
                        (o.prototype.ineg = function () {
                          return this.isZero() || (this.negative ^= 1), this;
                        }),
                        (o.prototype.iuor = function (t) {
                          for (; this.length < t.length;) this.words[this.length++] = 0;
                          for (let e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
                          return this.strip();
                        }),
                        (o.prototype.ior = function (t) {
                          return n((this.negative | t.negative) == 0), this.iuor(t);
                        }),
                        (o.prototype.or = function (t) {
                          return this.length > t.length
                            ? this.clone().ior(t)
                            : t.clone().ior(this);
                        }),
                        (o.prototype.uor = function (t) {
                          return this.length > t.length
                            ? this.clone().iuor(t)
                            : t.clone().iuor(this);
                        }),
                        (o.prototype.iuand = function (t) {
                          let e;
                          e = this.length > t.length ? t : this;
                          for (let r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
                          return (this.length = e.length), this.strip();
                        }),
                        (o.prototype.iand = function (t) {
                          return n((this.negative | t.negative) == 0), this.iuand(t);
                        }),
                        (o.prototype.and = function (t) {
                          return this.length > t.length
                            ? this.clone().iand(t)
                            : t.clone().iand(this);
                        }),
                        (o.prototype.uand = function (t) {
                          return this.length > t.length
                            ? this.clone().iuand(t)
                            : t.clone().iuand(this);
                        }),
                        (o.prototype.iuxor = function (t) {
                          let e; let
                            r;
                          this.length > t.length
                            ? ((e = this), (r = t))
                            : ((e = t), (r = this));
                          for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
                          if (this !== e) for (; n < e.length; n++) this.words[n] = e.words[n];
                          return (this.length = e.length), this.strip();
                        }),
                        (o.prototype.ixor = function (t) {
                          return n((this.negative | t.negative) == 0), this.iuxor(t);
                        }),
                        (o.prototype.xor = function (t) {
                          return this.length > t.length
                            ? this.clone().ixor(t)
                            : t.clone().ixor(this);
                        }),
                        (o.prototype.uxor = function (t) {
                          return this.length > t.length
                            ? this.clone().iuxor(t)
                            : t.clone().iuxor(this);
                        }),
                        (o.prototype.inotn = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          let e = 0 | Math.ceil(t / 26);
                          const r = t % 26;
                          this._expand(e), r > 0 && e--;
                          for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
                          return (
                            r > 0 && (this.words[i] = ~this.words[i] & (67108863 >> (26 - r))),
                            this.strip()
                          );
                        }),
                        (o.prototype.notn = function (t) {
                          return this.clone().inotn(t);
                        }),
                        (o.prototype.setn = function (t, e) {
                          n(typeof t === 'number' && t >= 0);
                          const r = (t / 26) | 0;
                          const i = t % 26;
                          return (
                            this._expand(r + 1),
                            (this.words[r] = e
                              ? this.words[r] | (1 << i)
                              : this.words[r] & ~(1 << i)),
                            this.strip()
                          );
                        }),
                        (o.prototype.iadd = function (t) {
                          let e; let r; let
                            n;
                          if (this.negative !== 0 && t.negative === 0) {
                            return (
                              (this.negative = 0),
                              (e = this.isub(t)),
                              (this.negative ^= 1),
                              this._normSign()
                            );
                          }
                          if (this.negative === 0 && t.negative !== 0) {
                            return (
                              (t.negative = 0),
                              (e = this.isub(t)),
                              (t.negative = 1),
                              e._normSign()
                            );
                          }
                          this.length > t.length
                            ? ((r = this), (n = t))
                            : ((r = t), (n = this));
                          for (var i = 0, o = 0; o < n.length; o++) {
                            (e = (0 | r.words[o]) + (0 | n.words[o]) + i),
                            (this.words[o] = 67108863 & e),
                            (i = e >>> 26);
                          }
                          for (; i !== 0 && o < r.length; o++) {
                            (e = (0 | r.words[o]) + i),
                            (this.words[o] = 67108863 & e),
                            (i = e >>> 26);
                          }
                          if (((this.length = r.length), i !== 0)) (this.words[this.length] = i), this.length++;
                          else if (r !== this) for (; o < r.length; o++) this.words[o] = r.words[o];
                          return this;
                        }),
                        (o.prototype.add = function (t) {
                          let e;
                          return t.negative !== 0 && this.negative === 0
                            ? ((t.negative = 0), (e = this.sub(t)), (t.negative ^= 1), e)
                            : t.negative === 0 && this.negative !== 0
                              ? ((this.negative = 0), (e = t.sub(this)), (this.negative = 1), e)
                              : this.length > t.length
                                ? this.clone().iadd(t)
                                : t.clone().iadd(this);
                        }),
                        (o.prototype.isub = function (t) {
                          if (t.negative !== 0) {
                            t.negative = 0;
                            var e = this.iadd(t);
                            return (t.negative = 1), e._normSign();
                          }
                          if (this.negative !== 0) {
                            return (
                              (this.negative = 0),
                              this.iadd(t),
                              (this.negative = 1),
                              this._normSign()
                            );
                          }
                          let r;
                          let n;
                          const i = this.cmp(t);
                          if (i === 0) {
                            return (
                              (this.negative = 0), (this.length = 1), (this.words[0] = 0), this
                            );
                          }
                          i > 0 ? ((r = this), (n = t)) : ((r = t), (n = this));
                          for (var o = 0, a = 0; a < n.length; a++) {
                            (o = (e = (0 | r.words[a]) - (0 | n.words[a]) + o) >> 26),
                            (this.words[a] = 67108863 & e);
                          }
                          for (; o !== 0 && a < r.length; a++) {
                            (o = (e = (0 | r.words[a]) + o) >> 26),
                            (this.words[a] = 67108863 & e);
                          }
                          if (o === 0 && a < r.length && r !== this) for (; a < r.length; a++) this.words[a] = r.words[a];
                          return (
                            (this.length = Math.max(this.length, a)),
                            r !== this && (this.negative = 1),
                            this.strip()
                          );
                        }),
                        (o.prototype.sub = function (t) {
                          return this.clone().isub(t);
                        });
                        let p = function (t, e, r) {
                          let n;
                          let i;
                          let o;
                          const a = t.words;
                          const s = e.words;
                          const f = r.words;
                          let u = 0;
                          const c = 0 | a[0];
                          const h = 8191 & c;
                          const d = c >>> 13;
                          const l = 0 | a[1];
                          const p = 8191 & l;
                          const b = l >>> 13;
                          const v = 0 | a[2];
                          const g = 8191 & v;
                          const y = v >>> 13;
                          const m = 0 | a[3];
                          const w = 8191 & m;
                          const _ = m >>> 13;
                          const S = 0 | a[4];
                          const M = 8191 & S;
                          const E = S >>> 13;
                          const k = 0 | a[5];
                          const x = 8191 & k;
                          const A = k >>> 13;
                          const R = 0 | a[6];
                          const I = 8191 & R;
                          const T = R >>> 13;
                          const B = 0 | a[7];
                          const P = 8191 & B;
                          const O = B >>> 13;
                          const C = 0 | a[8];
                          const L = 8191 & C;
                          const j = C >>> 13;
                          const N = 0 | a[9];
                          const D = 8191 & N;
                          const U = N >>> 13;
                          const F = 0 | s[0];
                          const q = 8191 & F;
                          const z = F >>> 13;
                          const W = 0 | s[1];
                          const V = 8191 & W;
                          const H = W >>> 13;
                          const G = 0 | s[2];
                          const K = 8191 & G;
                          const X = G >>> 13;
                          const Z = 0 | s[3];
                          const Y = 8191 & Z;
                          const J = Z >>> 13;
                          const $ = 0 | s[4];
                          const Q = 8191 & $;
                          const tt = $ >>> 13;
                          const et = 0 | s[5];
                          const rt = 8191 & et;
                          const nt = et >>> 13;
                          const it = 0 | s[6];
                          const ot = 8191 & it;
                          const at = it >>> 13;
                          const st = 0 | s[7];
                          const ft = 8191 & st;
                          const ut = st >>> 13;
                          const ct = 0 | s[8];
                          const ht = 8191 & ct;
                          const dt = ct >>> 13;
                          const lt = 0 | s[9];
                          const pt = 8191 & lt;
                          const bt = lt >>> 13;
                          (r.negative = t.negative ^ e.negative), (r.length = 19);
                          let vt = (((u + (n = Math.imul(h, q))) | 0)
                                + ((8191 & (i = ((i = Math.imul(h, z)) + Math.imul(d, q)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = Math.imul(d, z)) + (i >>> 13)) | 0) + (vt >>> 26)) | 0),
                          (vt &= 67108863),
                          (n = Math.imul(p, q)),
                          (i = ((i = Math.imul(p, z)) + Math.imul(b, q)) | 0),
                          (o = Math.imul(b, z));
                          let gt = (((u + (n = (n + Math.imul(h, V)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, H)) | 0) + Math.imul(d, V)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, H)) | 0) + (i >>> 13)) | 0) + (gt >>> 26))
                              | 0),
                          (gt &= 67108863),
                          (n = Math.imul(g, q)),
                          (i = ((i = Math.imul(g, z)) + Math.imul(y, q)) | 0),
                          (o = Math.imul(y, z)),
                          (n = (n + Math.imul(p, V)) | 0),
                          (i = ((i = (i + Math.imul(p, H)) | 0) + Math.imul(b, V)) | 0),
                          (o = (o + Math.imul(b, H)) | 0);
                          let yt = (((u + (n = (n + Math.imul(h, K)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, X)) | 0) + Math.imul(d, K)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, X)) | 0) + (i >>> 13)) | 0) + (yt >>> 26))
                              | 0),
                          (yt &= 67108863),
                          (n = Math.imul(w, q)),
                          (i = ((i = Math.imul(w, z)) + Math.imul(_, q)) | 0),
                          (o = Math.imul(_, z)),
                          (n = (n + Math.imul(g, V)) | 0),
                          (i = ((i = (i + Math.imul(g, H)) | 0) + Math.imul(y, V)) | 0),
                          (o = (o + Math.imul(y, H)) | 0),
                          (n = (n + Math.imul(p, K)) | 0),
                          (i = ((i = (i + Math.imul(p, X)) | 0) + Math.imul(b, K)) | 0),
                          (o = (o + Math.imul(b, X)) | 0);
                          let mt = (((u + (n = (n + Math.imul(h, Y)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, J)) | 0) + Math.imul(d, Y)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, J)) | 0) + (i >>> 13)) | 0) + (mt >>> 26))
                              | 0),
                          (mt &= 67108863),
                          (n = Math.imul(M, q)),
                          (i = ((i = Math.imul(M, z)) + Math.imul(E, q)) | 0),
                          (o = Math.imul(E, z)),
                          (n = (n + Math.imul(w, V)) | 0),
                          (i = ((i = (i + Math.imul(w, H)) | 0) + Math.imul(_, V)) | 0),
                          (o = (o + Math.imul(_, H)) | 0),
                          (n = (n + Math.imul(g, K)) | 0),
                          (i = ((i = (i + Math.imul(g, X)) | 0) + Math.imul(y, K)) | 0),
                          (o = (o + Math.imul(y, X)) | 0),
                          (n = (n + Math.imul(p, Y)) | 0),
                          (i = ((i = (i + Math.imul(p, J)) | 0) + Math.imul(b, Y)) | 0),
                          (o = (o + Math.imul(b, J)) | 0);
                          let wt = (((u + (n = (n + Math.imul(h, Q)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, tt)) | 0) + Math.imul(d, Q)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, tt)) | 0) + (i >>> 13)) | 0)
                                + (wt >>> 26))
                              | 0),
                          (wt &= 67108863),
                          (n = Math.imul(x, q)),
                          (i = ((i = Math.imul(x, z)) + Math.imul(A, q)) | 0),
                          (o = Math.imul(A, z)),
                          (n = (n + Math.imul(M, V)) | 0),
                          (i = ((i = (i + Math.imul(M, H)) | 0) + Math.imul(E, V)) | 0),
                          (o = (o + Math.imul(E, H)) | 0),
                          (n = (n + Math.imul(w, K)) | 0),
                          (i = ((i = (i + Math.imul(w, X)) | 0) + Math.imul(_, K)) | 0),
                          (o = (o + Math.imul(_, X)) | 0),
                          (n = (n + Math.imul(g, Y)) | 0),
                          (i = ((i = (i + Math.imul(g, J)) | 0) + Math.imul(y, Y)) | 0),
                          (o = (o + Math.imul(y, J)) | 0),
                          (n = (n + Math.imul(p, Q)) | 0),
                          (i = ((i = (i + Math.imul(p, tt)) | 0) + Math.imul(b, Q)) | 0),
                          (o = (o + Math.imul(b, tt)) | 0);
                          let _t = (((u + (n = (n + Math.imul(h, rt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, nt)) | 0) + Math.imul(d, rt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, nt)) | 0) + (i >>> 13)) | 0)
                                + (_t >>> 26))
                              | 0),
                          (_t &= 67108863),
                          (n = Math.imul(I, q)),
                          (i = ((i = Math.imul(I, z)) + Math.imul(T, q)) | 0),
                          (o = Math.imul(T, z)),
                          (n = (n + Math.imul(x, V)) | 0),
                          (i = ((i = (i + Math.imul(x, H)) | 0) + Math.imul(A, V)) | 0),
                          (o = (o + Math.imul(A, H)) | 0),
                          (n = (n + Math.imul(M, K)) | 0),
                          (i = ((i = (i + Math.imul(M, X)) | 0) + Math.imul(E, K)) | 0),
                          (o = (o + Math.imul(E, X)) | 0),
                          (n = (n + Math.imul(w, Y)) | 0),
                          (i = ((i = (i + Math.imul(w, J)) | 0) + Math.imul(_, Y)) | 0),
                          (o = (o + Math.imul(_, J)) | 0),
                          (n = (n + Math.imul(g, Q)) | 0),
                          (i = ((i = (i + Math.imul(g, tt)) | 0) + Math.imul(y, Q)) | 0),
                          (o = (o + Math.imul(y, tt)) | 0),
                          (n = (n + Math.imul(p, rt)) | 0),
                          (i = ((i = (i + Math.imul(p, nt)) | 0) + Math.imul(b, rt)) | 0),
                          (o = (o + Math.imul(b, nt)) | 0);
                          let St = (((u + (n = (n + Math.imul(h, ot)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, at)) | 0) + Math.imul(d, ot)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, at)) | 0) + (i >>> 13)) | 0)
                                + (St >>> 26))
                              | 0),
                          (St &= 67108863),
                          (n = Math.imul(P, q)),
                          (i = ((i = Math.imul(P, z)) + Math.imul(O, q)) | 0),
                          (o = Math.imul(O, z)),
                          (n = (n + Math.imul(I, V)) | 0),
                          (i = ((i = (i + Math.imul(I, H)) | 0) + Math.imul(T, V)) | 0),
                          (o = (o + Math.imul(T, H)) | 0),
                          (n = (n + Math.imul(x, K)) | 0),
                          (i = ((i = (i + Math.imul(x, X)) | 0) + Math.imul(A, K)) | 0),
                          (o = (o + Math.imul(A, X)) | 0),
                          (n = (n + Math.imul(M, Y)) | 0),
                          (i = ((i = (i + Math.imul(M, J)) | 0) + Math.imul(E, Y)) | 0),
                          (o = (o + Math.imul(E, J)) | 0),
                          (n = (n + Math.imul(w, Q)) | 0),
                          (i = ((i = (i + Math.imul(w, tt)) | 0) + Math.imul(_, Q)) | 0),
                          (o = (o + Math.imul(_, tt)) | 0),
                          (n = (n + Math.imul(g, rt)) | 0),
                          (i = ((i = (i + Math.imul(g, nt)) | 0) + Math.imul(y, rt)) | 0),
                          (o = (o + Math.imul(y, nt)) | 0),
                          (n = (n + Math.imul(p, ot)) | 0),
                          (i = ((i = (i + Math.imul(p, at)) | 0) + Math.imul(b, ot)) | 0),
                          (o = (o + Math.imul(b, at)) | 0);
                          let Mt = (((u + (n = (n + Math.imul(h, ft)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, ut)) | 0) + Math.imul(d, ft)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, ut)) | 0) + (i >>> 13)) | 0)
                                + (Mt >>> 26))
                              | 0),
                          (Mt &= 67108863),
                          (n = Math.imul(L, q)),
                          (i = ((i = Math.imul(L, z)) + Math.imul(j, q)) | 0),
                          (o = Math.imul(j, z)),
                          (n = (n + Math.imul(P, V)) | 0),
                          (i = ((i = (i + Math.imul(P, H)) | 0) + Math.imul(O, V)) | 0),
                          (o = (o + Math.imul(O, H)) | 0),
                          (n = (n + Math.imul(I, K)) | 0),
                          (i = ((i = (i + Math.imul(I, X)) | 0) + Math.imul(T, K)) | 0),
                          (o = (o + Math.imul(T, X)) | 0),
                          (n = (n + Math.imul(x, Y)) | 0),
                          (i = ((i = (i + Math.imul(x, J)) | 0) + Math.imul(A, Y)) | 0),
                          (o = (o + Math.imul(A, J)) | 0),
                          (n = (n + Math.imul(M, Q)) | 0),
                          (i = ((i = (i + Math.imul(M, tt)) | 0) + Math.imul(E, Q)) | 0),
                          (o = (o + Math.imul(E, tt)) | 0),
                          (n = (n + Math.imul(w, rt)) | 0),
                          (i = ((i = (i + Math.imul(w, nt)) | 0) + Math.imul(_, rt)) | 0),
                          (o = (o + Math.imul(_, nt)) | 0),
                          (n = (n + Math.imul(g, ot)) | 0),
                          (i = ((i = (i + Math.imul(g, at)) | 0) + Math.imul(y, ot)) | 0),
                          (o = (o + Math.imul(y, at)) | 0),
                          (n = (n + Math.imul(p, ft)) | 0),
                          (i = ((i = (i + Math.imul(p, ut)) | 0) + Math.imul(b, ft)) | 0),
                          (o = (o + Math.imul(b, ut)) | 0);
                          let Et = (((u + (n = (n + Math.imul(h, ht)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, dt)) | 0) + Math.imul(d, ht)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, dt)) | 0) + (i >>> 13)) | 0)
                                + (Et >>> 26))
                              | 0),
                          (Et &= 67108863),
                          (n = Math.imul(D, q)),
                          (i = ((i = Math.imul(D, z)) + Math.imul(U, q)) | 0),
                          (o = Math.imul(U, z)),
                          (n = (n + Math.imul(L, V)) | 0),
                          (i = ((i = (i + Math.imul(L, H)) | 0) + Math.imul(j, V)) | 0),
                          (o = (o + Math.imul(j, H)) | 0),
                          (n = (n + Math.imul(P, K)) | 0),
                          (i = ((i = (i + Math.imul(P, X)) | 0) + Math.imul(O, K)) | 0),
                          (o = (o + Math.imul(O, X)) | 0),
                          (n = (n + Math.imul(I, Y)) | 0),
                          (i = ((i = (i + Math.imul(I, J)) | 0) + Math.imul(T, Y)) | 0),
                          (o = (o + Math.imul(T, J)) | 0),
                          (n = (n + Math.imul(x, Q)) | 0),
                          (i = ((i = (i + Math.imul(x, tt)) | 0) + Math.imul(A, Q)) | 0),
                          (o = (o + Math.imul(A, tt)) | 0),
                          (n = (n + Math.imul(M, rt)) | 0),
                          (i = ((i = (i + Math.imul(M, nt)) | 0) + Math.imul(E, rt)) | 0),
                          (o = (o + Math.imul(E, nt)) | 0),
                          (n = (n + Math.imul(w, ot)) | 0),
                          (i = ((i = (i + Math.imul(w, at)) | 0) + Math.imul(_, ot)) | 0),
                          (o = (o + Math.imul(_, at)) | 0),
                          (n = (n + Math.imul(g, ft)) | 0),
                          (i = ((i = (i + Math.imul(g, ut)) | 0) + Math.imul(y, ft)) | 0),
                          (o = (o + Math.imul(y, ut)) | 0),
                          (n = (n + Math.imul(p, ht)) | 0),
                          (i = ((i = (i + Math.imul(p, dt)) | 0) + Math.imul(b, ht)) | 0),
                          (o = (o + Math.imul(b, dt)) | 0);
                          let kt = (((u + (n = (n + Math.imul(h, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, bt)) | 0) + Math.imul(d, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, bt)) | 0) + (i >>> 13)) | 0)
                                + (kt >>> 26))
                              | 0),
                          (kt &= 67108863),
                          (n = Math.imul(D, V)),
                          (i = ((i = Math.imul(D, H)) + Math.imul(U, V)) | 0),
                          (o = Math.imul(U, H)),
                          (n = (n + Math.imul(L, K)) | 0),
                          (i = ((i = (i + Math.imul(L, X)) | 0) + Math.imul(j, K)) | 0),
                          (o = (o + Math.imul(j, X)) | 0),
                          (n = (n + Math.imul(P, Y)) | 0),
                          (i = ((i = (i + Math.imul(P, J)) | 0) + Math.imul(O, Y)) | 0),
                          (o = (o + Math.imul(O, J)) | 0),
                          (n = (n + Math.imul(I, Q)) | 0),
                          (i = ((i = (i + Math.imul(I, tt)) | 0) + Math.imul(T, Q)) | 0),
                          (o = (o + Math.imul(T, tt)) | 0),
                          (n = (n + Math.imul(x, rt)) | 0),
                          (i = ((i = (i + Math.imul(x, nt)) | 0) + Math.imul(A, rt)) | 0),
                          (o = (o + Math.imul(A, nt)) | 0),
                          (n = (n + Math.imul(M, ot)) | 0),
                          (i = ((i = (i + Math.imul(M, at)) | 0) + Math.imul(E, ot)) | 0),
                          (o = (o + Math.imul(E, at)) | 0),
                          (n = (n + Math.imul(w, ft)) | 0),
                          (i = ((i = (i + Math.imul(w, ut)) | 0) + Math.imul(_, ft)) | 0),
                          (o = (o + Math.imul(_, ut)) | 0),
                          (n = (n + Math.imul(g, ht)) | 0),
                          (i = ((i = (i + Math.imul(g, dt)) | 0) + Math.imul(y, ht)) | 0),
                          (o = (o + Math.imul(y, dt)) | 0);
                          let xt = (((u + (n = (n + Math.imul(p, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(p, bt)) | 0) + Math.imul(b, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(b, bt)) | 0) + (i >>> 13)) | 0)
                                + (xt >>> 26))
                              | 0),
                          (xt &= 67108863),
                          (n = Math.imul(D, K)),
                          (i = ((i = Math.imul(D, X)) + Math.imul(U, K)) | 0),
                          (o = Math.imul(U, X)),
                          (n = (n + Math.imul(L, Y)) | 0),
                          (i = ((i = (i + Math.imul(L, J)) | 0) + Math.imul(j, Y)) | 0),
                          (o = (o + Math.imul(j, J)) | 0),
                          (n = (n + Math.imul(P, Q)) | 0),
                          (i = ((i = (i + Math.imul(P, tt)) | 0) + Math.imul(O, Q)) | 0),
                          (o = (o + Math.imul(O, tt)) | 0),
                          (n = (n + Math.imul(I, rt)) | 0),
                          (i = ((i = (i + Math.imul(I, nt)) | 0) + Math.imul(T, rt)) | 0),
                          (o = (o + Math.imul(T, nt)) | 0),
                          (n = (n + Math.imul(x, ot)) | 0),
                          (i = ((i = (i + Math.imul(x, at)) | 0) + Math.imul(A, ot)) | 0),
                          (o = (o + Math.imul(A, at)) | 0),
                          (n = (n + Math.imul(M, ft)) | 0),
                          (i = ((i = (i + Math.imul(M, ut)) | 0) + Math.imul(E, ft)) | 0),
                          (o = (o + Math.imul(E, ut)) | 0),
                          (n = (n + Math.imul(w, ht)) | 0),
                          (i = ((i = (i + Math.imul(w, dt)) | 0) + Math.imul(_, ht)) | 0),
                          (o = (o + Math.imul(_, dt)) | 0);
                          let At = (((u + (n = (n + Math.imul(g, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(g, bt)) | 0) + Math.imul(y, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(y, bt)) | 0) + (i >>> 13)) | 0)
                                + (At >>> 26))
                              | 0),
                          (At &= 67108863),
                          (n = Math.imul(D, Y)),
                          (i = ((i = Math.imul(D, J)) + Math.imul(U, Y)) | 0),
                          (o = Math.imul(U, J)),
                          (n = (n + Math.imul(L, Q)) | 0),
                          (i = ((i = (i + Math.imul(L, tt)) | 0) + Math.imul(j, Q)) | 0),
                          (o = (o + Math.imul(j, tt)) | 0),
                          (n = (n + Math.imul(P, rt)) | 0),
                          (i = ((i = (i + Math.imul(P, nt)) | 0) + Math.imul(O, rt)) | 0),
                          (o = (o + Math.imul(O, nt)) | 0),
                          (n = (n + Math.imul(I, ot)) | 0),
                          (i = ((i = (i + Math.imul(I, at)) | 0) + Math.imul(T, ot)) | 0),
                          (o = (o + Math.imul(T, at)) | 0),
                          (n = (n + Math.imul(x, ft)) | 0),
                          (i = ((i = (i + Math.imul(x, ut)) | 0) + Math.imul(A, ft)) | 0),
                          (o = (o + Math.imul(A, ut)) | 0),
                          (n = (n + Math.imul(M, ht)) | 0),
                          (i = ((i = (i + Math.imul(M, dt)) | 0) + Math.imul(E, ht)) | 0),
                          (o = (o + Math.imul(E, dt)) | 0);
                          let Rt = (((u + (n = (n + Math.imul(w, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(w, bt)) | 0) + Math.imul(_, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(_, bt)) | 0) + (i >>> 13)) | 0)
                                + (Rt >>> 26))
                              | 0),
                          (Rt &= 67108863),
                          (n = Math.imul(D, Q)),
                          (i = ((i = Math.imul(D, tt)) + Math.imul(U, Q)) | 0),
                          (o = Math.imul(U, tt)),
                          (n = (n + Math.imul(L, rt)) | 0),
                          (i = ((i = (i + Math.imul(L, nt)) | 0) + Math.imul(j, rt)) | 0),
                          (o = (o + Math.imul(j, nt)) | 0),
                          (n = (n + Math.imul(P, ot)) | 0),
                          (i = ((i = (i + Math.imul(P, at)) | 0) + Math.imul(O, ot)) | 0),
                          (o = (o + Math.imul(O, at)) | 0),
                          (n = (n + Math.imul(I, ft)) | 0),
                          (i = ((i = (i + Math.imul(I, ut)) | 0) + Math.imul(T, ft)) | 0),
                          (o = (o + Math.imul(T, ut)) | 0),
                          (n = (n + Math.imul(x, ht)) | 0),
                          (i = ((i = (i + Math.imul(x, dt)) | 0) + Math.imul(A, ht)) | 0),
                          (o = (o + Math.imul(A, dt)) | 0);
                          let It = (((u + (n = (n + Math.imul(M, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(M, bt)) | 0) + Math.imul(E, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(E, bt)) | 0) + (i >>> 13)) | 0)
                                + (It >>> 26))
                              | 0),
                          (It &= 67108863),
                          (n = Math.imul(D, rt)),
                          (i = ((i = Math.imul(D, nt)) + Math.imul(U, rt)) | 0),
                          (o = Math.imul(U, nt)),
                          (n = (n + Math.imul(L, ot)) | 0),
                          (i = ((i = (i + Math.imul(L, at)) | 0) + Math.imul(j, ot)) | 0),
                          (o = (o + Math.imul(j, at)) | 0),
                          (n = (n + Math.imul(P, ft)) | 0),
                          (i = ((i = (i + Math.imul(P, ut)) | 0) + Math.imul(O, ft)) | 0),
                          (o = (o + Math.imul(O, ut)) | 0),
                          (n = (n + Math.imul(I, ht)) | 0),
                          (i = ((i = (i + Math.imul(I, dt)) | 0) + Math.imul(T, ht)) | 0),
                          (o = (o + Math.imul(T, dt)) | 0);
                          let Tt = (((u + (n = (n + Math.imul(x, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(x, bt)) | 0) + Math.imul(A, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(A, bt)) | 0) + (i >>> 13)) | 0)
                                + (Tt >>> 26))
                              | 0),
                          (Tt &= 67108863),
                          (n = Math.imul(D, ot)),
                          (i = ((i = Math.imul(D, at)) + Math.imul(U, ot)) | 0),
                          (o = Math.imul(U, at)),
                          (n = (n + Math.imul(L, ft)) | 0),
                          (i = ((i = (i + Math.imul(L, ut)) | 0) + Math.imul(j, ft)) | 0),
                          (o = (o + Math.imul(j, ut)) | 0),
                          (n = (n + Math.imul(P, ht)) | 0),
                          (i = ((i = (i + Math.imul(P, dt)) | 0) + Math.imul(O, ht)) | 0),
                          (o = (o + Math.imul(O, dt)) | 0);
                          let Bt = (((u + (n = (n + Math.imul(I, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(I, bt)) | 0) + Math.imul(T, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(T, bt)) | 0) + (i >>> 13)) | 0)
                                + (Bt >>> 26))
                              | 0),
                          (Bt &= 67108863),
                          (n = Math.imul(D, ft)),
                          (i = ((i = Math.imul(D, ut)) + Math.imul(U, ft)) | 0),
                          (o = Math.imul(U, ut)),
                          (n = (n + Math.imul(L, ht)) | 0),
                          (i = ((i = (i + Math.imul(L, dt)) | 0) + Math.imul(j, ht)) | 0),
                          (o = (o + Math.imul(j, dt)) | 0);
                          let Pt = (((u + (n = (n + Math.imul(P, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(P, bt)) | 0) + Math.imul(O, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(O, bt)) | 0) + (i >>> 13)) | 0)
                                + (Pt >>> 26))
                              | 0),
                          (Pt &= 67108863),
                          (n = Math.imul(D, ht)),
                          (i = ((i = Math.imul(D, dt)) + Math.imul(U, ht)) | 0),
                          (o = Math.imul(U, dt));
                          let Ot = (((u + (n = (n + Math.imul(L, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(L, bt)) | 0) + Math.imul(j, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(j, bt)) | 0) + (i >>> 13)) | 0)
                                + (Ot >>> 26))
                              | 0),
                          (Ot &= 67108863);
                          let Ct = (((u + (n = Math.imul(D, pt))) | 0)
                                + ((8191 & (i = ((i = Math.imul(D, bt)) + Math.imul(U, pt)) | 0))
                                  << 13))
                              | 0;
                          return (
                            (u = ((((o = Math.imul(U, bt)) + (i >>> 13)) | 0) + (Ct >>> 26)) | 0),
                            (Ct &= 67108863),
                            (f[0] = vt),
                            (f[1] = gt),
                            (f[2] = yt),
                            (f[3] = mt),
                            (f[4] = wt),
                            (f[5] = _t),
                            (f[6] = St),
                            (f[7] = Mt),
                            (f[8] = Et),
                            (f[9] = kt),
                            (f[10] = xt),
                            (f[11] = At),
                            (f[12] = Rt),
                            (f[13] = It),
                            (f[14] = Tt),
                            (f[15] = Bt),
                            (f[16] = Pt),
                            (f[17] = Ot),
                            (f[18] = Ct),
                            u !== 0 && ((f[19] = u), r.length++),
                            r
                          );
                        };
                        function b(t, e, r) {
                          return new v().mulp(t, e, r);
                        }
                        function v(t, e) {
                          (this.x = t), (this.y = e);
                        }
                        Math.imul || (p = l),
                        (o.prototype.mulTo = function (t, e) {
                          const r = this.length + t.length;
                          return this.length === 10 && t.length === 10
                            ? p(this, t, e)
                            : r < 63
                              ? l(this, t, e)
                              : r < 1024
                                ? (function (t, e, r) {
                                  (r.negative = e.negative ^ t.negative),
                                  (r.length = t.length + e.length);
                                  for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
                                    let a = i;
                                    i = 0;
                                    for (
                                      var s = 67108863 & n,
                                        f = Math.min(o, e.length - 1),
                                        u = Math.max(0, o - t.length + 1);
                                      u <= f;
                                      u++
                                    ) {
                                      const c = o - u;
                                      const h = (0 | t.words[c]) * (0 | e.words[u]);
                                      let d = 67108863 & h;
                                      (s = 67108863 & (d = (d + s) | 0)),
                                      (i
                                            += (a = ((a = (a + ((h / 67108864) | 0)) | 0) + (d >>> 26))
                                              | 0) >>> 26),
                                      (a &= 67108863);
                                    }
                                    (r.words[o] = s), (n = a), (a = i);
                                  }
                                  return n !== 0 ? (r.words[o] = n) : r.length--, r.strip();
                                }(this, t, e))
                                : b(this, t, e);
                        }),
                        (v.prototype.makeRBT = function (t) {
                          for (
                            var e = new Array(t), r = o.prototype._countBits(t) - 1, n = 0;
                            n < t;
                            n++
                          ) e[n] = this.revBin(n, r, t);
                          return e;
                        }),
                        (v.prototype.revBin = function (t, e, r) {
                          if (t === 0 || t === r - 1) return t;
                          for (var n = 0, i = 0; i < e; i++) (n |= (1 & t) << (e - i - 1)), (t >>= 1);
                          return n;
                        }),
                        (v.prototype.permute = function (t, e, r, n, i, o) {
                          for (let a = 0; a < o; a++) (n[a] = e[t[a]]), (i[a] = r[t[a]]);
                        }),
                        (v.prototype.transform = function (t, e, r, n, i, o) {
                          this.permute(o, t, e, r, n, i);
                          for (let a = 1; a < i; a <<= 1) {
                            for (
                              let s = a << 1,
                                f = Math.cos((2 * Math.PI) / s),
                                u = Math.sin((2 * Math.PI) / s),
                                c = 0;
                              c < i;
                              c += s
                            ) {
                              for (let h = f, d = u, l = 0; l < a; l++) {
                                const p = r[c + l];
                                const b = n[c + l];
                                let v = r[c + l + a];
                                let g = n[c + l + a];
                                let y = h * v - d * g;
                                (g = h * g + d * v),
                                (v = y),
                                (r[c + l] = p + v),
                                (n[c + l] = b + g),
                                (r[c + l + a] = p - v),
                                (n[c + l + a] = b - g),
                                l !== s
                                        && ((y = f * h - u * d), (d = f * d + u * h), (h = y));
                              }
                            }
                          }
                        }),
                        (v.prototype.guessLen13b = function (t, e) {
                          let r = 1 | Math.max(e, t);
                          const n = 1 & r;
                          let i = 0;
                          for (r = (r / 2) | 0; r; r >>>= 1) i++;
                          return 1 << (i + 1 + n);
                        }),
                        (v.prototype.conjugate = function (t, e, r) {
                          if (!(r <= 1)) {
                            for (let n = 0; n < r / 2; n++) {
                              let i = t[n];
                              (t[n] = t[r - n - 1]),
                              (t[r - n - 1] = i),
                              (i = e[n]),
                              (e[n] = -e[r - n - 1]),
                              (e[r - n - 1] = -i);
                            }
                          }
                        }),
                        (v.prototype.normalize13b = function (t, e) {
                          for (let r = 0, n = 0; n < e / 2; n++) {
                            const i = 8192 * Math.round(t[2 * n + 1] / e)
                                  + Math.round(t[2 * n] / e)
                                  + r;
                            (t[n] = 67108863 & i), (r = i < 67108864 ? 0 : (i / 67108864) | 0);
                          }
                          return t;
                        }),
                        (v.prototype.convert13b = function (t, e, r, i) {
                          for (var o = 0, a = 0; a < e; a++) {
                            (o += 0 | t[a]),
                            (r[2 * a] = 8191 & o),
                            (o >>>= 13),
                            (r[2 * a + 1] = 8191 & o),
                            (o >>>= 13);
                          }
                          for (a = 2 * e; a < i; ++a) r[a] = 0;
                          n(o === 0), n((-8192 & o) == 0);
                        }),
                        (v.prototype.stub = function (t) {
                          for (var e = new Array(t), r = 0; r < t; r++) e[r] = 0;
                          return e;
                        }),
                        (v.prototype.mulp = function (t, e, r) {
                          const n = 2 * this.guessLen13b(t.length, e.length);
                          const i = this.makeRBT(n);
                          const o = this.stub(n);
                          const a = new Array(n);
                          const s = new Array(n);
                          const f = new Array(n);
                          const u = new Array(n);
                          const c = new Array(n);
                          const h = new Array(n);
                          const d = r.words;
                          (d.length = n),
                          this.convert13b(t.words, t.length, a, n),
                          this.convert13b(e.words, e.length, u, n),
                          this.transform(a, o, s, f, n, i),
                          this.transform(u, o, c, h, n, i);
                          for (let l = 0; l < n; l++) {
                            const p = s[l] * c[l] - f[l] * h[l];
                            (f[l] = s[l] * h[l] + f[l] * c[l]), (s[l] = p);
                          }
                          return (
                            this.conjugate(s, f, n),
                            this.transform(s, f, d, o, n, i),
                            this.conjugate(d, o, n),
                            this.normalize13b(d, n),
                            (r.negative = t.negative ^ e.negative),
                            (r.length = t.length + e.length),
                            r.strip()
                          );
                        }),
                        (o.prototype.mul = function (t) {
                          const e = new o(null);
                          return (
                            (e.words = new Array(this.length + t.length)), this.mulTo(t, e)
                          );
                        }),
                        (o.prototype.mulf = function (t) {
                          const e = new o(null);
                          return (e.words = new Array(this.length + t.length)), b(this, t, e);
                        }),
                        (o.prototype.imul = function (t) {
                          return this.clone().mulTo(t, this);
                        }),
                        (o.prototype.imuln = function (t) {
                          n(typeof t === 'number'), n(t < 67108864);
                          for (var e = 0, r = 0; r < this.length; r++) {
                            const i = (0 | this.words[r]) * t;
                            const o = (67108863 & i) + (67108863 & e);
                            (e >>= 26),
                            (e += (i / 67108864) | 0),
                            (e += o >>> 26),
                            (this.words[r] = 67108863 & o);
                          }
                          return e !== 0 && ((this.words[r] = e), this.length++), this;
                        }),
                        (o.prototype.muln = function (t) {
                          return this.clone().imuln(t);
                        }),
                        (o.prototype.sqr = function () {
                          return this.mul(this);
                        }),
                        (o.prototype.isqr = function () {
                          return this.imul(this.clone());
                        }),
                        (o.prototype.pow = function (t) {
                          const e = (function (t) {
                            for (var e = new Array(t.bitLength()), r = 0; r < e.length; r++) {
                              const n = (r / 26) | 0;
                              const i = r % 26;
                              e[r] = (t.words[n] & (1 << i)) >>> i;
                            }
                            return e;
                          }(t));
                          if (e.length === 0) return new o(1);
                          for (
                            var r = this, n = 0;
                            n < e.length && e[n] === 0;
                            n++, r = r.sqr()
                          );
                          if (++n < e.length) for (let i = r.sqr(); n < e.length; n++, i = i.sqr()) e[n] !== 0 && (r = r.mul(i));
                          return r;
                        }),
                        (o.prototype.iushln = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          let e;
                          const r = t % 26;
                          const i = (t - r) / 26;
                          const o = (67108863 >>> (26 - r)) << (26 - r);
                          if (r !== 0) {
                            let a = 0;
                            for (e = 0; e < this.length; e++) {
                              const s = this.words[e] & o;
                              const f = ((0 | this.words[e]) - s) << r;
                              (this.words[e] = f | a), (a = s >>> (26 - r));
                            }
                            a && ((this.words[e] = a), this.length++);
                          }
                          if (i !== 0) {
                            for (e = this.length - 1; e >= 0; e--) this.words[e + i] = this.words[e];
                            for (e = 0; e < i; e++) this.words[e] = 0;
                            this.length += i;
                          }
                          return this.strip();
                        }),
                        (o.prototype.ishln = function (t) {
                          return n(this.negative === 0), this.iushln(t);
                        }),
                        (o.prototype.iushrn = function (t, e, r) {
                          let i;
                          n(typeof t === 'number' && t >= 0), (i = e ? (e - (e % 26)) / 26 : 0);
                          const o = t % 26;
                          const a = Math.min((t - o) / 26, this.length);
                          const s = 67108863 ^ ((67108863 >>> o) << o);
                          const f = r;
                          if (((i -= a), (i = Math.max(0, i)), f)) {
                            for (var u = 0; u < a; u++) f.words[u] = this.words[u];
                            f.length = a;
                          }
                          if (a === 0);
                          else if (this.length > a) for (this.length -= a, u = 0; u < this.length; u++) this.words[u] = this.words[u + a];
                          else (this.words[0] = 0), (this.length = 1);
                          let c = 0;
                          for (u = this.length - 1; u >= 0 && (c !== 0 || u >= i); u--) {
                            const h = 0 | this.words[u];
                            (this.words[u] = (c << (26 - o)) | (h >>> o)), (c = h & s);
                          }
                          return (
                            f && c !== 0 && (f.words[f.length++] = c),
                            this.length === 0 && ((this.words[0] = 0), (this.length = 1)),
                            this.strip()
                          );
                        }),
                        (o.prototype.ishrn = function (t, e, r) {
                          return n(this.negative === 0), this.iushrn(t, e, r);
                        }),
                        (o.prototype.shln = function (t) {
                          return this.clone().ishln(t);
                        }),
                        (o.prototype.ushln = function (t) {
                          return this.clone().iushln(t);
                        }),
                        (o.prototype.shrn = function (t) {
                          return this.clone().ishrn(t);
                        }),
                        (o.prototype.ushrn = function (t) {
                          return this.clone().iushrn(t);
                        }),
                        (o.prototype.testn = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          const e = t % 26;
                          const r = (t - e) / 26;
                          const i = 1 << e;
                          return !(this.length <= r) && !!(this.words[r] & i);
                        }),
                        (o.prototype.imaskn = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          const e = t % 26;
                          let r = (t - e) / 26;
                          if (
                            (n(this.negative === 0, 'imaskn works only with positive numbers'),
                            this.length <= r)
                          ) return this;
                          if (
                            (e !== 0 && r++, (this.length = Math.min(r, this.length)), e !== 0)
                          ) {
                            const i = 67108863 ^ ((67108863 >>> e) << e);
                            this.words[this.length - 1] &= i;
                          }
                          return this.strip();
                        }),
                        (o.prototype.maskn = function (t) {
                          return this.clone().imaskn(t);
                        }),
                        (o.prototype.iaddn = function (t) {
                          return (
                            n(typeof t === 'number'),
                            n(t < 67108864),
                            t < 0
                              ? this.isubn(-t)
                              : this.negative !== 0
                                ? this.length === 1 && (0 | this.words[0]) < t
                                  ? ((this.words[0] = t - (0 | this.words[0])),
                                  (this.negative = 0),
                                  this)
                                  : ((this.negative = 0),
                                  this.isubn(t),
                                  (this.negative = 1),
                                  this)
                                : this._iaddn(t)
                          );
                        }),
                        (o.prototype._iaddn = function (t) {
                          this.words[0] += t;
                          for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) {
                            (this.words[e] -= 67108864),
                            e === this.length - 1
                              ? (this.words[e + 1] = 1)
                              : this.words[e + 1]++;
                          }
                          return (this.length = Math.max(this.length, e + 1)), this;
                        }),
                        (o.prototype.isubn = function (t) {
                          if ((n(typeof t === 'number'), n(t < 67108864), t < 0)) return this.iaddn(-t);
                          if (this.negative !== 0) {
                            return (
                              (this.negative = 0), this.iaddn(t), (this.negative = 1), this
                            );
                          }
                          if (((this.words[0] -= t), this.length === 1 && this.words[0] < 0)) (this.words[0] = -this.words[0]), (this.negative = 1);
                          else for (let e = 0; e < this.length && this.words[e] < 0; e++) (this.words[e] += 67108864), (this.words[e + 1] -= 1);
                          return this.strip();
                        }),
                        (o.prototype.addn = function (t) {
                          return this.clone().iaddn(t);
                        }),
                        (o.prototype.subn = function (t) {
                          return this.clone().isubn(t);
                        }),
                        (o.prototype.iabs = function () {
                          return (this.negative = 0), this;
                        }),
                        (o.prototype.abs = function () {
                          return this.clone().iabs();
                        }),
                        (o.prototype._ishlnsubmul = function (t, e, r) {
                          let i;
                          let o;
                          const a = t.length + r;
                          this._expand(a);
                          let s = 0;
                          for (i = 0; i < t.length; i++) {
                            o = (0 | this.words[i + r]) + s;
                            const f = (0 | t.words[i]) * e;
                            (s = ((o -= 67108863 & f) >> 26) - ((f / 67108864) | 0)),
                            (this.words[i + r] = 67108863 & o);
                          }
                          for (; i < this.length - r; i++) {
                            (s = (o = (0 | this.words[i + r]) + s) >> 26),
                            (this.words[i + r] = 67108863 & o);
                          }
                          if (s === 0) return this.strip();
                          for (n(s === -1), s = 0, i = 0; i < this.length; i++) {
                            (s = (o = -(0 | this.words[i]) + s) >> 26),
                            (this.words[i] = 67108863 & o);
                          }
                          return (this.negative = 1), this.strip();
                        }),
                        (o.prototype._wordDiv = function (t, e) {
                          let r = (this.length, t.length);
                          let n = this.clone();
                          let i = t;
                          let a = 0 | i.words[i.length - 1];
                          (r = 26 - this._countBits(a)) !== 0
                                && ((i = i.ushln(r)), n.iushln(r), (a = 0 | i.words[i.length - 1]));
                          let s;
                          const f = n.length - i.length;
                          if (e !== 'mod') {
                            ((s = new o(null)).length = f + 1), (s.words = new Array(s.length));
                            for (let u = 0; u < s.length; u++) s.words[u] = 0;
                          }
                          const c = n.clone()._ishlnsubmul(i, 1, f);
                          c.negative === 0 && ((n = c), s && (s.words[f] = 1));
                          for (let h = f - 1; h >= 0; h--) {
                            let d = 67108864 * (0 | n.words[i.length + h])
                                  + (0 | n.words[i.length + h - 1]);
                            for (
                              d = Math.min((d / a) | 0, 67108863), n._ishlnsubmul(i, d, h);
                              n.negative !== 0;

                            ) {
                              d--,
                              (n.negative = 0),
                              n._ishlnsubmul(i, 1, h),
                              n.isZero() || (n.negative ^= 1);
                            }
                            s && (s.words[h] = d);
                          }
                          return (
                            s && s.strip(),
                            n.strip(),
                            e !== 'div' && r !== 0 && n.iushrn(r),
                            { div: s || null, mod: n }
                          );
                        }),
                        (o.prototype.divmod = function (t, e, r) {
                          return (
                            n(!t.isZero()),
                            this.isZero()
                              ? { div: new o(0), mod: new o(0) }
                              : this.negative !== 0 && t.negative === 0
                                ? ((s = this.neg().divmod(t, e)),
                                e !== 'mod' && (i = s.div.neg()),
                                e !== 'div'
                                      && ((a = s.mod.neg()), r && a.negative !== 0 && a.iadd(t)),
                                { div: i, mod: a })
                                : this.negative === 0 && t.negative !== 0
                                  ? ((s = this.divmod(t.neg(), e)),
                                  e !== 'mod' && (i = s.div.neg()),
                                  { div: i, mod: s.mod })
                                  : (this.negative & t.negative) != 0
                                    ? ((s = this.neg().divmod(t.neg(), e)),
                                    e !== 'div'
                                      && ((a = s.mod.neg()), r && a.negative !== 0 && a.isub(t)),
                                    { div: s.div, mod: a })
                                    : t.length > this.length || this.cmp(t) < 0
                                      ? { div: new o(0), mod: this }
                                      : t.length === 1
                                        ? e === 'div'
                                          ? { div: this.divn(t.words[0]), mod: null }
                                          : e === 'mod'
                                            ? { div: null, mod: new o(this.modn(t.words[0])) }
                                            : {
                                              div: this.divn(t.words[0]),
                                              mod: new o(this.modn(t.words[0])),
                                            }
                                        : this._wordDiv(t, e)
                          );
                          let i; let a; let
                            s;
                        }),
                        (o.prototype.div = function (t) {
                          return this.divmod(t, 'div', !1).div;
                        }),
                        (o.prototype.mod = function (t) {
                          return this.divmod(t, 'mod', !1).mod;
                        }),
                        (o.prototype.umod = function (t) {
                          return this.divmod(t, 'mod', !0).mod;
                        }),
                        (o.prototype.divRound = function (t) {
                          const e = this.divmod(t);
                          if (e.mod.isZero()) return e.div;
                          const r = e.div.negative !== 0 ? e.mod.isub(t) : e.mod;
                          const n = t.ushrn(1);
                          const i = t.andln(1);
                          const o = r.cmp(n);
                          return o < 0 || (i === 1 && o === 0)
                            ? e.div
                            : e.div.negative !== 0
                              ? e.div.isubn(1)
                              : e.div.iaddn(1);
                        }),
                        (o.prototype.modn = function (t) {
                          n(t <= 67108863);
                          for (var e = (1 << 26) % t, r = 0, i = this.length - 1; i >= 0; i--) r = (e * r + (0 | this.words[i])) % t;
                          return r;
                        }),
                        (o.prototype.idivn = function (t) {
                          n(t <= 67108863);
                          for (let e = 0, r = this.length - 1; r >= 0; r--) {
                            const i = (0 | this.words[r]) + 67108864 * e;
                            (this.words[r] = (i / t) | 0), (e = i % t);
                          }
                          return this.strip();
                        }),
                        (o.prototype.divn = function (t) {
                          return this.clone().idivn(t);
                        }),
                        (o.prototype.egcd = function (t) {
                          n(t.negative === 0), n(!t.isZero());
                          let e = this;
                          const r = t.clone();
                          e = e.negative !== 0 ? e.umod(t) : e.clone();
                          for (
                            var i = new o(1), a = new o(0), s = new o(0), f = new o(1), u = 0;
                            e.isEven() && r.isEven();

                          ) e.iushrn(1), r.iushrn(1), ++u;
                          for (let c = r.clone(), h = e.clone(); !e.isZero();) {
                            for (
                              var d = 0, l = 1;
                              (e.words[0] & l) == 0 && d < 26;
                              ++d, l <<= 1
                            );
                            if (d > 0) {
                              for (e.iushrn(d); d-- > 0;) {
                                (i.isOdd() || a.isOdd()) && (i.iadd(c), a.isub(h)),
                                i.iushrn(1),
                                a.iushrn(1);
                              }
                            }
                            for (
                              var p = 0, b = 1;
                              (r.words[0] & b) == 0 && p < 26;
                              ++p, b <<= 1
                            );
                            if (p > 0) {
                              for (r.iushrn(p); p-- > 0;) {
                                (s.isOdd() || f.isOdd()) && (s.iadd(c), f.isub(h)),
                                s.iushrn(1),
                                f.iushrn(1);
                              }
                            }
                            e.cmp(r) >= 0
                              ? (e.isub(r), i.isub(s), a.isub(f))
                              : (r.isub(e), s.isub(i), f.isub(a));
                          }
                          return { a: s, b: f, gcd: r.iushln(u) };
                        }),
                        (o.prototype._invmp = function (t) {
                          n(t.negative === 0), n(!t.isZero());
                          let e = this;
                          const r = t.clone();
                          e = e.negative !== 0 ? e.umod(t) : e.clone();
                          for (
                            var i, a = new o(1), s = new o(0), f = r.clone();
                            e.cmpn(1) > 0 && r.cmpn(1) > 0;

                          ) {
                            for (
                              var u = 0, c = 1;
                              (e.words[0] & c) == 0 && u < 26;
                              ++u, c <<= 1
                            );
                            if (u > 0) for (e.iushrn(u); u-- > 0;) a.isOdd() && a.iadd(f), a.iushrn(1);
                            for (
                              var h = 0, d = 1;
                              (r.words[0] & d) == 0 && h < 26;
                              ++h, d <<= 1
                            );
                            if (h > 0) for (r.iushrn(h); h-- > 0;) s.isOdd() && s.iadd(f), s.iushrn(1);
                            e.cmp(r) >= 0 ? (e.isub(r), a.isub(s)) : (r.isub(e), s.isub(a));
                          }
                          return (i = e.cmpn(1) === 0 ? a : s).cmpn(0) < 0 && i.iadd(t), i;
                        }),
                        (o.prototype.gcd = function (t) {
                          if (this.isZero()) return t.abs();
                          if (t.isZero()) return this.abs();
                          let e = this.clone();
                          let r = t.clone();
                          (e.negative = 0), (r.negative = 0);
                          for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
                          for (;;) {
                            for (; e.isEven();) e.iushrn(1);
                            for (; r.isEven();) r.iushrn(1);
                            const i = e.cmp(r);
                            if (i < 0) {
                              const o = e;
                              (e = r), (r = o);
                            } else if (i === 0 || r.cmpn(1) === 0) break;
                            e.isub(r);
                          }
                          return r.iushln(n);
                        }),
                        (o.prototype.invm = function (t) {
                          return this.egcd(t).a.umod(t);
                        }),
                        (o.prototype.isEven = function () {
                          return (1 & this.words[0]) == 0;
                        }),
                        (o.prototype.isOdd = function () {
                          return (1 & this.words[0]) == 1;
                        }),
                        (o.prototype.andln = function (t) {
                          return this.words[0] & t;
                        }),
                        (o.prototype.bincn = function (t) {
                          n(typeof t === 'number');
                          const e = t % 26;
                          const r = (t - e) / 26;
                          const i = 1 << e;
                          if (this.length <= r) return this._expand(r + 1), (this.words[r] |= i), this;
                          for (var o = i, a = r; o !== 0 && a < this.length; a++) {
                            let s = 0 | this.words[a];
                            (o = (s += o) >>> 26), (s &= 67108863), (this.words[a] = s);
                          }
                          return o !== 0 && ((this.words[a] = o), this.length++), this;
                        }),
                        (o.prototype.isZero = function () {
                          return this.length === 1 && this.words[0] === 0;
                        }),
                        (o.prototype.cmpn = function (t) {
                          let e;
                          const r = t < 0;
                          if (this.negative !== 0 && !r) return -1;
                          if (this.negative === 0 && r) return 1;
                          if ((this.strip(), this.length > 1)) e = 1;
                          else {
                            r && (t = -t), n(t <= 67108863, 'Number is too big');
                            const i = 0 | this.words[0];
                            e = i === t ? 0 : i < t ? -1 : 1;
                          }
                          return this.negative !== 0 ? 0 | -e : e;
                        }),
                        (o.prototype.cmp = function (t) {
                          if (this.negative !== 0 && t.negative === 0) return -1;
                          if (this.negative === 0 && t.negative !== 0) return 1;
                          const e = this.ucmp(t);
                          return this.negative !== 0 ? 0 | -e : e;
                        }),
                        (o.prototype.ucmp = function (t) {
                          if (this.length > t.length) return 1;
                          if (this.length < t.length) return -1;
                          for (var e = 0, r = this.length - 1; r >= 0; r--) {
                            const n = 0 | this.words[r];
                            const i = 0 | t.words[r];
                            if (n !== i) {
                              n < i ? (e = -1) : n > i && (e = 1);
                              break;
                            }
                          }
                          return e;
                        }),
                        (o.prototype.gtn = function (t) {
                          return this.cmpn(t) === 1;
                        }),
                        (o.prototype.gt = function (t) {
                          return this.cmp(t) === 1;
                        }),
                        (o.prototype.gten = function (t) {
                          return this.cmpn(t) >= 0;
                        }),
                        (o.prototype.gte = function (t) {
                          return this.cmp(t) >= 0;
                        }),
                        (o.prototype.ltn = function (t) {
                          return this.cmpn(t) === -1;
                        }),
                        (o.prototype.lt = function (t) {
                          return this.cmp(t) === -1;
                        }),
                        (o.prototype.lten = function (t) {
                          return this.cmpn(t) <= 0;
                        }),
                        (o.prototype.lte = function (t) {
                          return this.cmp(t) <= 0;
                        }),
                        (o.prototype.eqn = function (t) {
                          return this.cmpn(t) === 0;
                        }),
                        (o.prototype.eq = function (t) {
                          return this.cmp(t) === 0;
                        }),
                        (o.red = function (t) {
                          return new M(t);
                        }),
                        (o.prototype.toRed = function (t) {
                          return (
                            n(!this.red, 'Already a number in reduction context'),
                            n(this.negative === 0, 'red works only with positives'),
                            t.convertTo(this)._forceRed(t)
                          );
                        }),
                        (o.prototype.fromRed = function () {
                          return (
                            n(this.red, 'fromRed works only with numbers in reduction context'),
                            this.red.convertFrom(this)
                          );
                        }),
                        (o.prototype._forceRed = function (t) {
                          return (this.red = t), this;
                        }),
                        (o.prototype.forceRed = function (t) {
                          return (
                            n(!this.red, 'Already a number in reduction context'),
                            this._forceRed(t)
                          );
                        }),
                        (o.prototype.redAdd = function (t) {
                          return (
                            n(this.red, 'redAdd works only with red numbers'),
                            this.red.add(this, t)
                          );
                        }),
                        (o.prototype.redIAdd = function (t) {
                          return (
                            n(this.red, 'redIAdd works only with red numbers'),
                            this.red.iadd(this, t)
                          );
                        }),
                        (o.prototype.redSub = function (t) {
                          return (
                            n(this.red, 'redSub works only with red numbers'),
                            this.red.sub(this, t)
                          );
                        }),
                        (o.prototype.redISub = function (t) {
                          return (
                            n(this.red, 'redISub works only with red numbers'),
                            this.red.isub(this, t)
                          );
                        }),
                        (o.prototype.redShl = function (t) {
                          return (
                            n(this.red, 'redShl works only with red numbers'),
                            this.red.shl(this, t)
                          );
                        }),
                        (o.prototype.redMul = function (t) {
                          return (
                            n(this.red, 'redMul works only with red numbers'),
                            this.red._verify2(this, t),
                            this.red.mul(this, t)
                          );
                        }),
                        (o.prototype.redIMul = function (t) {
                          return (
                            n(this.red, 'redMul works only with red numbers'),
                            this.red._verify2(this, t),
                            this.red.imul(this, t)
                          );
                        }),
                        (o.prototype.redSqr = function () {
                          return (
                            n(this.red, 'redSqr works only with red numbers'),
                            this.red._verify1(this),
                            this.red.sqr(this)
                          );
                        }),
                        (o.prototype.redISqr = function () {
                          return (
                            n(this.red, 'redISqr works only with red numbers'),
                            this.red._verify1(this),
                            this.red.isqr(this)
                          );
                        }),
                        (o.prototype.redSqrt = function () {
                          return (
                            n(this.red, 'redSqrt works only with red numbers'),
                            this.red._verify1(this),
                            this.red.sqrt(this)
                          );
                        }),
                        (o.prototype.redInvm = function () {
                          return (
                            n(this.red, 'redInvm works only with red numbers'),
                            this.red._verify1(this),
                            this.red.invm(this)
                          );
                        }),
                        (o.prototype.redNeg = function () {
                          return (
                            n(this.red, 'redNeg works only with red numbers'),
                            this.red._verify1(this),
                            this.red.neg(this)
                          );
                        }),
                        (o.prototype.redPow = function (t) {
                          return (
                            n(this.red && !t.red, 'redPow(normalNum)'),
                            this.red._verify1(this),
                            this.red.pow(this, t)
                          );
                        });
                        const g = {
                          k256: null, p224: null, p192: null, p25519: null,
                        };
                        function y(t, e) {
                          (this.name = t),
                          (this.p = new o(e, 16)),
                          (this.n = this.p.bitLength()),
                          (this.k = new o(1).iushln(this.n).isub(this.p)),
                          (this.tmp = this._tmp());
                        }
                        function m() {
                          y.call(
                            this,
                            'k256',
                            'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
                          );
                        }
                        function w() {
                          y.call(
                            this,
                            'p224',
                            'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
                          );
                        }
                        function _() {
                          y.call(
                            this,
                            'p192',
                            'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
                          );
                        }
                        function S() {
                          y.call(
                            this,
                            '25519',
                            '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                          );
                        }
                        function M(t) {
                          if (typeof t === 'string') {
                            const e = o._prime(t);
                            (this.m = e.p), (this.prime = e);
                          } else {
                            n(t.gtn(1), 'modulus must be greater than 1'),
                            (this.m = t),
                            (this.prime = null);
                          }
                        }
                        function E(t) {
                          M.call(this, t),
                          (this.shift = this.m.bitLength()),
                          this.shift % 26 != 0 && (this.shift += 26 - (this.shift % 26)),
                          (this.r = new o(1).iushln(this.shift)),
                          (this.r2 = this.imod(this.r.sqr())),
                          (this.rinv = this.r._invmp(this.m)),
                          (this.minv = this.rinv
                            .mul(this.r)
                            .isubn(1)
                            .div(this.m)),
                          (this.minv = this.minv.umod(this.r)),
                          (this.minv = this.r.sub(this.minv));
                        }
                        (y.prototype._tmp = function () {
                          const t = new o(null);
                          return (t.words = new Array(Math.ceil(this.n / 13))), t;
                        }),
                        (y.prototype.ireduce = function (t) {
                          let e;
                          let r = t;
                          do {
                            this.split(r, this.tmp),
                            (e = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength());
                          } while (e > this.n);
                          const n = e < this.n ? -1 : r.ucmp(this.p);
                          return (
                            n === 0
                              ? ((r.words[0] = 0), (r.length = 1))
                              : n > 0
                                ? r.isub(this.p)
                                : void 0 !== r.strip
                                  ? r.strip()
                                  : r._strip(),
                            r
                          );
                        }),
                        (y.prototype.split = function (t, e) {
                          t.iushrn(this.n, 0, e);
                        }),
                        (y.prototype.imulK = function (t) {
                          return t.imul(this.k);
                        }),
                        i(m, y),
                        (m.prototype.split = function (t, e) {
                          for (var r = 4194303, n = Math.min(t.length, 9), i = 0; i < n; i++) e.words[i] = t.words[i];
                          if (((e.length = n), t.length <= 9)) return (t.words[0] = 0), void (t.length = 1);
                          let o = t.words[9];
                          for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
                            const a = 0 | t.words[i];
                            (t.words[i - 10] = ((a & r) << 4) | (o >>> 22)), (o = a);
                          }
                          (o >>>= 22),
                          (t.words[i - 10] = o),
                          o === 0 && t.length > 10 ? (t.length -= 10) : (t.length -= 9);
                        }),
                        (m.prototype.imulK = function (t) {
                          (t.words[t.length] = 0), (t.words[t.length + 1] = 0), (t.length += 2);
                          for (let e = 0, r = 0; r < t.length; r++) {
                            const n = 0 | t.words[r];
                            (e += 977 * n),
                            (t.words[r] = 67108863 & e),
                            (e = 64 * n + ((e / 67108864) | 0));
                          }
                          return (
                            t.words[t.length - 1] === 0
                                  && (t.length--, t.words[t.length - 1] === 0 && t.length--),
                            t
                          );
                        }),
                        i(w, y),
                        i(_, y),
                        i(S, y),
                        (S.prototype.imulK = function (t) {
                          for (var e = 0, r = 0; r < t.length; r++) {
                            let n = 19 * (0 | t.words[r]) + e;
                            const i = 67108863 & n;
                            (n >>>= 26), (t.words[r] = i), (e = n);
                          }
                          return e !== 0 && (t.words[t.length++] = e), t;
                        }),
                        (o._prime = function (t) {
                          if (g[t]) return g[t];
                          let e;
                          if (t === 'k256') e = new m();
                          else if (t === 'p224') e = new w();
                          else if (t === 'p192') e = new _();
                          else {
                            if (t !== 'p25519') throw new Error(`Unknown prime ${t}`);
                            e = new S();
                          }
                          return (g[t] = e), e;
                        }),
                        (M.prototype._verify1 = function (t) {
                          n(t.negative === 0, 'red works only with positives'),
                          n(t.red, 'red works only with red numbers');
                        }),
                        (M.prototype._verify2 = function (t, e) {
                          n((t.negative | e.negative) == 0, 'red works only with positives'),
                          n(t.red && t.red === e.red, 'red works only with red numbers');
                        }),
                        (M.prototype.imod = function (t) {
                          return this.prime
                            ? this.prime.ireduce(t)._forceRed(this)
                            : t.umod(this.m)._forceRed(this);
                        }),
                        (M.prototype.neg = function (t) {
                          return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
                        }),
                        (M.prototype.add = function (t, e) {
                          this._verify2(t, e);
                          const r = t.add(e);
                          return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
                        }),
                        (M.prototype.iadd = function (t, e) {
                          this._verify2(t, e);
                          const r = t.iadd(e);
                          return r.cmp(this.m) >= 0 && r.isub(this.m), r;
                        }),
                        (M.prototype.sub = function (t, e) {
                          this._verify2(t, e);
                          const r = t.sub(e);
                          return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
                        }),
                        (M.prototype.isub = function (t, e) {
                          this._verify2(t, e);
                          const r = t.isub(e);
                          return r.cmpn(0) < 0 && r.iadd(this.m), r;
                        }),
                        (M.prototype.shl = function (t, e) {
                          return this._verify1(t), this.imod(t.ushln(e));
                        }),
                        (M.prototype.imul = function (t, e) {
                          return this._verify2(t, e), this.imod(t.imul(e));
                        }),
                        (M.prototype.mul = function (t, e) {
                          return this._verify2(t, e), this.imod(t.mul(e));
                        }),
                        (M.prototype.isqr = function (t) {
                          return this.imul(t, t.clone());
                        }),
                        (M.prototype.sqr = function (t) {
                          return this.mul(t, t);
                        }),
                        (M.prototype.sqrt = function (t) {
                          if (t.isZero()) return t.clone();
                          const e = this.m.andln(3);
                          if ((n(e % 2 == 1), e === 3)) {
                            const r = this.m.add(new o(1)).iushrn(2);
                            return this.pow(t, r);
                          }
                          for (var i = this.m.subn(1), a = 0; !i.isZero() && i.andln(1) === 0;) a++, i.iushrn(1);
                          n(!i.isZero());
                          const s = new o(1).toRed(this);
                          const f = s.redNeg();
                          const u = this.m.subn(1).iushrn(1);
                          let c = this.m.bitLength();
                          for (c = new o(2 * c * c).toRed(this); this.pow(c, u).cmp(f) !== 0;) c.redIAdd(f);
                          for (
                            var h = this.pow(c, i),
                              d = this.pow(t, i.addn(1).iushrn(1)),
                              l = this.pow(t, i),
                              p = a;
                            l.cmp(s) !== 0;

                          ) {
                            for (var b = l, v = 0; b.cmp(s) !== 0; v++) b = b.redSqr();
                            n(v < p);
                            const g = this.pow(h, new o(1).iushln(p - v - 1));
                            (d = d.redMul(g)), (h = g.redSqr()), (l = l.redMul(h)), (p = v);
                          }
                          return d;
                        }),
                        (M.prototype.invm = function (t) {
                          const e = t._invmp(this.m);
                          return e.negative !== 0
                            ? ((e.negative = 0), this.imod(e).redNeg())
                            : this.imod(e);
                        }),
                        (M.prototype.pow = function (t, e) {
                          if (e.isZero()) return new o(1).toRed(this);
                          if (e.cmpn(1) === 0) return t.clone();
                          const r = new Array(16);
                          (r[0] = new o(1).toRed(this)), (r[1] = t);
                          for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
                          let i = r[0];
                          let a = 0;
                          let s = 0;
                          let f = e.bitLength() % 26;
                          for (f === 0 && (f = 26), n = e.length - 1; n >= 0; n--) {
                            for (let u = e.words[n], c = f - 1; c >= 0; c--) {
                              const h = (u >> c) & 1;
                              i !== r[0] && (i = this.sqr(i)),
                              h !== 0 || a !== 0
                                ? ((a <<= 1),
                                (a |= h),
                                (++s === 4 || (n === 0 && c === 0))
                                          && ((i = this.mul(i, r[a])), (s = 0), (a = 0)))
                                : (s = 0);
                            }
                            f = 26;
                          }
                          return i;
                        }),
                        (M.prototype.convertTo = function (t) {
                          const e = t.umod(this.m);
                          return e === t ? e.clone() : e;
                        }),
                        (M.prototype.convertFrom = function (t) {
                          const e = t.clone();
                          return (e.red = null), e;
                        }),
                        (o.mont = function (t) {
                          return new E(t);
                        }),
                        i(E, M),
                        (E.prototype.convertTo = function (t) {
                          return this.imod(t.ushln(this.shift));
                        }),
                        (E.prototype.convertFrom = function (t) {
                          const e = this.imod(t.mul(this.rinv));
                          return (e.red = null), e;
                        }),
                        (E.prototype.imul = function (t, e) {
                          if (t.isZero() || e.isZero()) return (t.words[0] = 0), (t.length = 1), t;
                          const r = t.imul(e);
                          const n = r
                            .maskn(this.shift)
                            .mul(this.minv)
                            .imaskn(this.shift)
                            .mul(this.m);
                          const i = r.isub(n).iushrn(this.shift);
                          let o = i;
                          return (
                            i.cmp(this.m) >= 0
                              ? (o = i.isub(this.m))
                              : i.cmpn(0) < 0 && (o = i.iadd(this.m)),
                            o._forceRed(this)
                          );
                        }),
                        (E.prototype.mul = function (t, e) {
                          if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
                          const r = t.mul(e);
                          const n = r
                            .maskn(this.shift)
                            .mul(this.minv)
                            .imaskn(this.shift)
                            .mul(this.m);
                          const i = r.isub(n).iushrn(this.shift);
                          let a = i;
                          return (
                            i.cmp(this.m) >= 0
                              ? (a = i.isub(this.m))
                              : i.cmpn(0) < 0 && (a = i.iadd(this.m)),
                            a._forceRed(this)
                          );
                        }),
                        (E.prototype.invm = function (t) {
                          return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
                        });
                      }(void 0 === e || e, this));
                    },
                    { 21: 21 },
                  ],
                  17: [
                    function (t, e, r) {
                      (function (e) {
                        (function () {
                          if ((t(397), t(512), t(69), e._babelPolyfill)) throw new Error('only one instance of babel-polyfill is allowed');
                          e._babelPolyfill = !0;
                          function r(t, e, r) {
                            t[e]
                                || Object.defineProperty(t, e, {
                                  writable: !0,
                                  configurable: !0,
                                  value: r,
                                });
                          }
                          r(String.prototype, 'padLeft', ''.padStart),
                          r(String.prototype, 'padRight', ''.padEnd),
                          'pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill'
                            .split(',')
                            .forEach((t) => {
                              [][t] && r(Array, t, Function.call.bind([][t]));
                            });
                        }.call(this));
                      }.call(
                        this,
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    { 397: 397, 512: 512, 69: 69 },
                  ],
                  18: [
                    function (t, e, r) {
                      (r.byteLength = function (t) {
                        const e = u(t);
                        const r = e[0];
                        const n = e[1];
                        return (3 * (r + n)) / 4 - n;
                      }),
                      (r.toByteArray = function (t) {
                        let e;
                        let r;
                        const n = u(t);
                        const a = n[0];
                        const s = n[1];
                        const f = new o(
                          (function (t, e, r) {
                            return (3 * (e + r)) / 4 - r;
                          }(0, a, s)),
                        );
                        let c = 0;
                        const h = s > 0 ? a - 4 : a;
                        for (r = 0; r < h; r += 4) {
                          (e = (i[t.charCodeAt(r)] << 18)
                                | (i[t.charCodeAt(r + 1)] << 12)
                                | (i[t.charCodeAt(r + 2)] << 6)
                                | i[t.charCodeAt(r + 3)]),
                          (f[c++] = (e >> 16) & 255),
                          (f[c++] = (e >> 8) & 255),
                          (f[c++] = 255 & e);
                        }
                        s === 2
                              && ((e = (i[t.charCodeAt(r)] << 2) | (i[t.charCodeAt(r + 1)] >> 4)),
                              (f[c++] = 255 & e));
                        s === 1
                              && ((e = (i[t.charCodeAt(r)] << 10)
                                | (i[t.charCodeAt(r + 1)] << 4)
                                | (i[t.charCodeAt(r + 2)] >> 2)),
                              (f[c++] = (e >> 8) & 255),
                              (f[c++] = 255 & e));
                        return f;
                      }),
                      (r.fromByteArray = function (t) {
                        for (
                          var e, r = t.length, i = r % 3, o = [], a = 16383, s = 0, f = r - i;
                          s < f;
                          s += a
                        ) o.push(c(t, s, s + a > f ? f : s + a));
                        i === 1
                          ? ((e = t[r - 1]), o.push(`${n[e >> 2] + n[(e << 4) & 63]}==`))
                          : i === 2
                                && ((e = (t[r - 2] << 8) + t[r - 1]),
                                o.push(`${n[e >> 10] + n[(e >> 4) & 63] + n[(e << 2) & 63]}=`));
                        return o.join('');
                      });
                      for (
                        var n = [],
                          i = [],
                          o = typeof Uint8Array !== 'undefined' ? Uint8Array : Array,
                          a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                          s = 0,
                          f = a.length;
                        s < f;
                        ++s
                      ) (n[s] = a[s]), (i[a.charCodeAt(s)] = s);
                      function u(t) {
                        const e = t.length;
                        if (e % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
                        let r = t.indexOf('=');
                        return r === -1 && (r = e), [r, r === e ? 0 : 4 - (r % 4)];
                      }
                      function c(t, e, r) {
                        for (var i, o, a = [], s = e; s < r; s += 3) {
                          (i = ((t[s] << 16) & 16711680)
                              + ((t[s + 1] << 8) & 65280)
                              + (255 & t[s + 2])),
                          a.push(
                            n[((o = i) >> 18) & 63]
                                  + n[(o >> 12) & 63]
                                  + n[(o >> 6) & 63]
                                  + n[63 & o],
                          );
                        }
                        return a.join('');
                      }
                      (i['-'.charCodeAt(0)] = 62), (i['_'.charCodeAt(0)] = 63);
                    },
                    {},
                  ],
                  19: [
                    function (t, e, r) {
                      !(function (e, r) {
                        function n(t, e) {
                          if (!t) throw new Error(e || 'Assertion failed');
                        }
                        function i(t, e) {
                          t.super_ = e;
                          const r = function () {};
                          (r.prototype = e.prototype),
                          (t.prototype = new r()),
                          (t.prototype.constructor = t);
                        }
                        function o(t, e, r) {
                          if (o.isBN(t)) return t;
                          (this.negative = 0),
                          (this.words = null),
                          (this.length = 0),
                          (this.red = null),
                          t !== null
                                && ((e !== 'le' && e !== 'be') || ((r = e), (e = 10)),
                                this._init(t || 0, e || 10, r || 'be'));
                        }
                        let a;
                        typeof e === 'object' ? (e.exports = o) : (r.BN = o),
                        (o.BN = o),
                        (o.wordSize = 26);
                        try {
                          a = typeof window !== 'undefined' && void 0 !== window.Buffer
                            ? window.Buffer
                            : t(21).Buffer;
                        } catch (t) {}
                        function s(t, e) {
                          const r = t.charCodeAt(e);
                          return r >= 48 && r <= 57
                            ? r - 48
                            : r >= 65 && r <= 70
                              ? r - 55
                              : r >= 97 && r <= 102
                                ? r - 87
                                : void n(!1, `Invalid character in ${t}`);
                        }
                        function f(t, e, r) {
                          let n = s(t, r);
                          return r - 1 >= e && (n |= s(t, r - 1) << 4), n;
                        }
                        function u(t, e, r, i) {
                          for (var o = 0, a = 0, s = Math.min(t.length, r), f = e; f < s; f++) {
                            const u = t.charCodeAt(f) - 48;
                            (o *= i),
                            (a = u >= 49 ? u - 49 + 10 : u >= 17 ? u - 17 + 10 : u),
                            n(u >= 0 && a < i, 'Invalid character'),
                            (o += a);
                          }
                          return o;
                        }
                        function c(t, e) {
                          (t.words = e.words),
                          (t.length = e.length),
                          (t.negative = e.negative),
                          (t.red = e.red);
                        }
                        if (
                          ((o.isBN = function (t) {
                            return (
                              t instanceof o
                                || (t !== null
                                  && typeof t === 'object'
                                  && t.constructor.wordSize === o.wordSize
                                  && Array.isArray(t.words))
                            );
                          }),
                          (o.max = function (t, e) {
                            return t.cmp(e) > 0 ? t : e;
                          }),
                          (o.min = function (t, e) {
                            return t.cmp(e) < 0 ? t : e;
                          }),
                          (o.prototype._init = function (t, e, r) {
                            if (typeof t === 'number') return this._initNumber(t, e, r);
                            if (typeof t === 'object') return this._initArray(t, e, r);
                            e === 'hex' && (e = 16), n(e === (0 | e) && e >= 2 && e <= 36);
                            let i = 0;
                            (t = t.toString().replace(/\s+/g, ''))[0] === '-'
                                && (i++, (this.negative = 1)),
                            i < t.length
                                  && (e === 16
                                    ? this._parseHex(t, i, r)
                                    : (this._parseBase(t, e, i),
                                    r === 'le' && this._initArray(this.toArray(), e, r)));
                          }),
                          (o.prototype._initNumber = function (t, e, r) {
                            t < 0 && ((this.negative = 1), (t = -t)),
                            t < 67108864
                              ? ((this.words = [67108863 & t]), (this.length = 1))
                              : t < 4503599627370496
                                ? ((this.words = [67108863 & t, (t / 67108864) & 67108863]),
                                (this.length = 2))
                                : (n(t < 9007199254740992),
                                (this.words = [67108863 & t, (t / 67108864) & 67108863, 1]),
                                (this.length = 3)),
                            r === 'le' && this._initArray(this.toArray(), e, r);
                          }),
                          (o.prototype._initArray = function (t, e, r) {
                            if ((n(typeof t.length === 'number'), t.length <= 0)) return (this.words = [0]), (this.length = 1), this;
                            (this.length = Math.ceil(t.length / 3)),
                            (this.words = new Array(this.length));
                            for (var i = 0; i < this.length; i++) this.words[i] = 0;
                            let o;
                            let a;
                            let s = 0;
                            if (r === 'be') {
                              for (i = t.length - 1, o = 0; i >= 0; i -= 3) {
                                (a = t[i] | (t[i - 1] << 8) | (t[i - 2] << 16)),
                                (this.words[o] |= (a << s) & 67108863),
                                (this.words[o + 1] = (a >>> (26 - s)) & 67108863),
                                (s += 24) >= 26 && ((s -= 26), o++);
                              }
                            } else if (r === 'le') {
                              for (i = 0, o = 0; i < t.length; i += 3) {
                                (a = t[i] | (t[i + 1] << 8) | (t[i + 2] << 16)),
                                (this.words[o] |= (a << s) & 67108863),
                                (this.words[o + 1] = (a >>> (26 - s)) & 67108863),
                                (s += 24) >= 26 && ((s -= 26), o++);
                              }
                            }
                            return this._strip();
                          }),
                          (o.prototype._parseHex = function (t, e, r) {
                            (this.length = Math.ceil((t.length - e) / 6)),
                            (this.words = new Array(this.length));
                            for (var n = 0; n < this.length; n++) this.words[n] = 0;
                            let i;
                            let o = 0;
                            let a = 0;
                            if (r === 'be') {
                              for (n = t.length - 1; n >= e; n -= 2) {
                                (i = f(t, e, n) << o),
                                (this.words[a] |= 67108863 & i),
                                o >= 18
                                  ? ((o -= 18), (a += 1), (this.words[a] |= i >>> 26))
                                  : (o += 8);
                              }
                            } else {
                              for (n = (t.length - e) % 2 == 0 ? e + 1 : e; n < t.length; n += 2) {
                                (i = f(t, e, n) << o),
                                (this.words[a] |= 67108863 & i),
                                o >= 18
                                  ? ((o -= 18), (a += 1), (this.words[a] |= i >>> 26))
                                  : (o += 8);
                              }
                            }
                            this._strip();
                          }),
                          (o.prototype._parseBase = function (t, e, r) {
                            (this.words = [0]), (this.length = 1);
                            for (var n = 0, i = 1; i <= 67108863; i *= e) n++;
                            n--, (i = (i / e) | 0);
                            for (
                              var o = t.length - r,
                                a = o % n,
                                s = Math.min(o, o - a) + r,
                                f = 0,
                                c = r;
                              c < s;
                              c += n
                            ) {
                              (f = u(t, c, c + n, e)),
                              this.imuln(i),
                              this.words[0] + f < 67108864
                                ? (this.words[0] += f)
                                : this._iaddn(f);
                            }
                            if (a !== 0) {
                              let h = 1;
                              for (f = u(t, c, t.length, e), c = 0; c < a; c++) h *= e;
                              this.imuln(h),
                              this.words[0] + f < 67108864
                                ? (this.words[0] += f)
                                : this._iaddn(f);
                            }
                            this._strip();
                          }),
                          (o.prototype.copy = function (t) {
                            t.words = new Array(this.length);
                            for (let e = 0; e < this.length; e++) t.words[e] = this.words[e];
                            (t.length = this.length),
                            (t.negative = this.negative),
                            (t.red = this.red);
                          }),
                          (o.prototype._move = function (t) {
                            c(t, this);
                          }),
                          (o.prototype.clone = function () {
                            const t = new o(null);
                            return this.copy(t), t;
                          }),
                          (o.prototype._expand = function (t) {
                            for (; this.length < t;) this.words[this.length++] = 0;
                            return this;
                          }),
                          (o.prototype._strip = function () {
                            for (; this.length > 1 && this.words[this.length - 1] === 0;) this.length--;
                            return this._normSign();
                          }),
                          (o.prototype._normSign = function () {
                            return (
                              this.length === 1 && this.words[0] === 0 && (this.negative = 0),
                              this
                            );
                          }),
                          typeof Symbol !== 'undefined' && typeof Symbol.for === 'function')
                        ) {
                          try {
                            o.prototype[Symbol.for('nodejs.util.inspect.custom')] = h;
                          } catch (t) {
                            o.prototype.inspect = h;
                          }
                        } else o.prototype.inspect = h;
                        function h() {
                          return `${(this.red ? '<BN-R: ' : '<BN: ') + this.toString(16)}>`;
                        }
                        const d = [
                          '',
                          '0',
                          '00',
                          '000',
                          '0000',
                          '00000',
                          '000000',
                          '0000000',
                          '00000000',
                          '000000000',
                          '0000000000',
                          '00000000000',
                          '000000000000',
                          '0000000000000',
                          '00000000000000',
                          '000000000000000',
                          '0000000000000000',
                          '00000000000000000',
                          '000000000000000000',
                          '0000000000000000000',
                          '00000000000000000000',
                          '000000000000000000000',
                          '0000000000000000000000',
                          '00000000000000000000000',
                          '000000000000000000000000',
                          '0000000000000000000000000',
                        ];
                        const l = [
                          0,
                          0,
                          25,
                          16,
                          12,
                          11,
                          10,
                          9,
                          8,
                          8,
                          7,
                          7,
                          7,
                          7,
                          6,
                          6,
                          6,
                          6,
                          6,
                          6,
                          6,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                          5,
                        ];
                        const p = [
                          0,
                          0,
                          33554432,
                          43046721,
                          16777216,
                          48828125,
                          60466176,
                          40353607,
                          16777216,
                          43046721,
                          1e7,
                          19487171,
                          35831808,
                          62748517,
                          7529536,
                          11390625,
                          16777216,
                          24137569,
                          34012224,
                          47045881,
                          64e6,
                          4084101,
                          5153632,
                          6436343,
                          7962624,
                          9765625,
                          11881376,
                          14348907,
                          17210368,
                          20511149,
                          243e5,
                          28629151,
                          33554432,
                          39135393,
                          45435424,
                          52521875,
                          60466176,
                        ];
                        (o.prototype.toString = function (t, e) {
                          let r;
                          if (((e = 0 | e || 1), (t = t || 10) === 16 || t === 'hex')) {
                            r = '';
                            for (var i = 0, o = 0, a = 0; a < this.length; a++) {
                              const s = this.words[a];
                              const f = (16777215 & ((s << i) | o)).toString(16);
                              (r = (o = (s >>> (24 - i)) & 16777215) !== 0 || a !== this.length - 1
                                ? d[6 - f.length] + f + r
                                : f + r),
                              (i += 2) >= 26 && ((i -= 26), a--);
                            }
                            for (o !== 0 && (r = o.toString(16) + r); r.length % e != 0;) r = `0${r}`;
                            return this.negative !== 0 && (r = `-${r}`), r;
                          }
                          if (t === (0 | t) && t >= 2 && t <= 36) {
                            const u = l[t];
                            const c = p[t];
                            r = '';
                            let h = this.clone();
                            for (h.negative = 0; !h.isZero();) {
                              const b = h.modrn(c).toString(t);
                              r = (h = h.idivn(c)).isZero() ? b + r : d[u - b.length] + b + r;
                            }
                            for (this.isZero() && (r = `0${r}`); r.length % e != 0;) r = `0${r}`;
                            return this.negative !== 0 && (r = `-${r}`), r;
                          }
                          n(!1, 'Base should be between 2 and 36');
                        }),
                        (o.prototype.toNumber = function () {
                          let t = this.words[0];
                          return (
                            this.length === 2
                              ? (t += 67108864 * this.words[1])
                              : this.length === 3 && this.words[2] === 1
                                ? (t += 4503599627370496 + 67108864 * this.words[1])
                                : this.length > 2
                                    && n(!1, 'Number can only safely store up to 53 bits'),
                            this.negative !== 0 ? -t : t
                          );
                        }),
                        (o.prototype.toJSON = function () {
                          return this.toString(16, 2);
                        }),
                        a
                              && (o.prototype.toBuffer = function (t, e) {
                                return this.toArrayLike(a, t, e);
                              }),
                        (o.prototype.toArray = function (t, e) {
                          return this.toArrayLike(Array, t, e);
                        });
                        function b(t, e, r) {
                          r.negative = e.negative ^ t.negative;
                          let n = (t.length + e.length) | 0;
                          (r.length = n), (n = (n - 1) | 0);
                          let i = 0 | t.words[0];
                          let o = 0 | e.words[0];
                          let a = i * o;
                          const s = 67108863 & a;
                          let f = (a / 67108864) | 0;
                          r.words[0] = s;
                          for (var u = 1; u < n; u++) {
                            for (
                              var c = f >>> 26,
                                h = 67108863 & f,
                                d = Math.min(u, e.length - 1),
                                l = Math.max(0, u - t.length + 1);
                              l <= d;
                              l++
                            ) {
                              const p = (u - l) | 0;
                              (c
                                  += ((a = (i = 0 | t.words[p]) * (o = 0 | e.words[l]) + h)
                                    / 67108864)
                                  | 0),
                              (h = 67108863 & a);
                            }
                            (r.words[u] = 0 | h), (f = 0 | c);
                          }
                          return f !== 0 ? (r.words[u] = 0 | f) : r.length--, r._strip();
                        }
                        (o.prototype.toArrayLike = function (t, e, r) {
                          this._strip();
                          const i = this.byteLength();
                          const o = r || Math.max(1, i);
                          n(i <= o, 'byte array longer than desired length'),
                          n(o > 0, 'Requested array length <= 0');
                          const a = (function (t, e) {
                            return t.allocUnsafe ? t.allocUnsafe(e) : new t(e);
                          }(t, o));
                          return this[`_toArrayLike${e === 'le' ? 'LE' : 'BE'}`](a, i), a;
                        }),
                        (o.prototype._toArrayLikeLE = function (t, e) {
                          for (var r = 0, n = 0, i = 0, o = 0; i < this.length; i++) {
                            const a = (this.words[i] << o) | n;
                            (t[r++] = 255 & a),
                            r < t.length && (t[r++] = (a >> 8) & 255),
                            r < t.length && (t[r++] = (a >> 16) & 255),
                            o === 6
                              ? (r < t.length && (t[r++] = (a >> 24) & 255), (n = 0), (o = 0))
                              : ((n = a >>> 24), (o += 2));
                          }
                          if (r < t.length) for (t[r++] = n; r < t.length;) t[r++] = 0;
                        }),
                        (o.prototype._toArrayLikeBE = function (t, e) {
                          for (
                            var r = t.length - 1, n = 0, i = 0, o = 0;
                            i < this.length;
                            i++
                          ) {
                            const a = (this.words[i] << o) | n;
                            (t[r--] = 255 & a),
                            r >= 0 && (t[r--] = (a >> 8) & 255),
                            r >= 0 && (t[r--] = (a >> 16) & 255),
                            o === 6
                              ? (r >= 0 && (t[r--] = (a >> 24) & 255), (n = 0), (o = 0))
                              : ((n = a >>> 24), (o += 2));
                          }
                          if (r >= 0) for (t[r--] = n; r >= 0;) t[r--] = 0;
                        }),
                        Math.clz32
                          ? (o.prototype._countBits = function (t) {
                            return 32 - Math.clz32(t);
                          })
                          : (o.prototype._countBits = function (t) {
                            let e = t;
                            let r = 0;
                            return (
                              e >= 4096 && ((r += 13), (e >>>= 13)),
                              e >= 64 && ((r += 7), (e >>>= 7)),
                              e >= 8 && ((r += 4), (e >>>= 4)),
                              e >= 2 && ((r += 2), (e >>>= 2)),
                              r + e
                            );
                          }),
                        (o.prototype._zeroBits = function (t) {
                          if (t === 0) return 26;
                          let e = t;
                          let r = 0;
                          return (
                            (8191 & e) == 0 && ((r += 13), (e >>>= 13)),
                            (127 & e) == 0 && ((r += 7), (e >>>= 7)),
                            (15 & e) == 0 && ((r += 4), (e >>>= 4)),
                            (3 & e) == 0 && ((r += 2), (e >>>= 2)),
                            (1 & e) == 0 && r++,
                            r
                          );
                        }),
                        (o.prototype.bitLength = function () {
                          const t = this.words[this.length - 1];
                          const e = this._countBits(t);
                          return 26 * (this.length - 1) + e;
                        }),
                        (o.prototype.zeroBits = function () {
                          if (this.isZero()) return 0;
                          for (var t = 0, e = 0; e < this.length; e++) {
                            const r = this._zeroBits(this.words[e]);
                            if (((t += r), r !== 26)) break;
                          }
                          return t;
                        }),
                        (o.prototype.byteLength = function () {
                          return Math.ceil(this.bitLength() / 8);
                        }),
                        (o.prototype.toTwos = function (t) {
                          return this.negative !== 0
                            ? this.abs()
                              .inotn(t)
                              .iaddn(1)
                            : this.clone();
                        }),
                        (o.prototype.fromTwos = function (t) {
                          return this.testn(t - 1)
                            ? this.notn(t)
                              .iaddn(1)
                              .ineg()
                            : this.clone();
                        }),
                        (o.prototype.isNeg = function () {
                          return this.negative !== 0;
                        }),
                        (o.prototype.neg = function () {
                          return this.clone().ineg();
                        }),
                        (o.prototype.ineg = function () {
                          return this.isZero() || (this.negative ^= 1), this;
                        }),
                        (o.prototype.iuor = function (t) {
                          for (; this.length < t.length;) this.words[this.length++] = 0;
                          for (let e = 0; e < t.length; e++) this.words[e] = this.words[e] | t.words[e];
                          return this._strip();
                        }),
                        (o.prototype.ior = function (t) {
                          return n((this.negative | t.negative) == 0), this.iuor(t);
                        }),
                        (o.prototype.or = function (t) {
                          return this.length > t.length
                            ? this.clone().ior(t)
                            : t.clone().ior(this);
                        }),
                        (o.prototype.uor = function (t) {
                          return this.length > t.length
                            ? this.clone().iuor(t)
                            : t.clone().iuor(this);
                        }),
                        (o.prototype.iuand = function (t) {
                          let e;
                          e = this.length > t.length ? t : this;
                          for (let r = 0; r < e.length; r++) this.words[r] = this.words[r] & t.words[r];
                          return (this.length = e.length), this._strip();
                        }),
                        (o.prototype.iand = function (t) {
                          return n((this.negative | t.negative) == 0), this.iuand(t);
                        }),
                        (o.prototype.and = function (t) {
                          return this.length > t.length
                            ? this.clone().iand(t)
                            : t.clone().iand(this);
                        }),
                        (o.prototype.uand = function (t) {
                          return this.length > t.length
                            ? this.clone().iuand(t)
                            : t.clone().iuand(this);
                        }),
                        (o.prototype.iuxor = function (t) {
                          let e; let
                            r;
                          this.length > t.length
                            ? ((e = this), (r = t))
                            : ((e = t), (r = this));
                          for (var n = 0; n < r.length; n++) this.words[n] = e.words[n] ^ r.words[n];
                          if (this !== e) for (; n < e.length; n++) this.words[n] = e.words[n];
                          return (this.length = e.length), this._strip();
                        }),
                        (o.prototype.ixor = function (t) {
                          return n((this.negative | t.negative) == 0), this.iuxor(t);
                        }),
                        (o.prototype.xor = function (t) {
                          return this.length > t.length
                            ? this.clone().ixor(t)
                            : t.clone().ixor(this);
                        }),
                        (o.prototype.uxor = function (t) {
                          return this.length > t.length
                            ? this.clone().iuxor(t)
                            : t.clone().iuxor(this);
                        }),
                        (o.prototype.inotn = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          let e = 0 | Math.ceil(t / 26);
                          const r = t % 26;
                          this._expand(e), r > 0 && e--;
                          for (var i = 0; i < e; i++) this.words[i] = 67108863 & ~this.words[i];
                          return (
                            r > 0 && (this.words[i] = ~this.words[i] & (67108863 >> (26 - r))),
                            this._strip()
                          );
                        }),
                        (o.prototype.notn = function (t) {
                          return this.clone().inotn(t);
                        }),
                        (o.prototype.setn = function (t, e) {
                          n(typeof t === 'number' && t >= 0);
                          const r = (t / 26) | 0;
                          const i = t % 26;
                          return (
                            this._expand(r + 1),
                            (this.words[r] = e
                              ? this.words[r] | (1 << i)
                              : this.words[r] & ~(1 << i)),
                            this._strip()
                          );
                        }),
                        (o.prototype.iadd = function (t) {
                          let e; let r; let
                            n;
                          if (this.negative !== 0 && t.negative === 0) {
                            return (
                              (this.negative = 0),
                              (e = this.isub(t)),
                              (this.negative ^= 1),
                              this._normSign()
                            );
                          }
                          if (this.negative === 0 && t.negative !== 0) {
                            return (
                              (t.negative = 0),
                              (e = this.isub(t)),
                              (t.negative = 1),
                              e._normSign()
                            );
                          }
                          this.length > t.length
                            ? ((r = this), (n = t))
                            : ((r = t), (n = this));
                          for (var i = 0, o = 0; o < n.length; o++) {
                            (e = (0 | r.words[o]) + (0 | n.words[o]) + i),
                            (this.words[o] = 67108863 & e),
                            (i = e >>> 26);
                          }
                          for (; i !== 0 && o < r.length; o++) {
                            (e = (0 | r.words[o]) + i),
                            (this.words[o] = 67108863 & e),
                            (i = e >>> 26);
                          }
                          if (((this.length = r.length), i !== 0)) (this.words[this.length] = i), this.length++;
                          else if (r !== this) for (; o < r.length; o++) this.words[o] = r.words[o];
                          return this;
                        }),
                        (o.prototype.add = function (t) {
                          let e;
                          return t.negative !== 0 && this.negative === 0
                            ? ((t.negative = 0), (e = this.sub(t)), (t.negative ^= 1), e)
                            : t.negative === 0 && this.negative !== 0
                              ? ((this.negative = 0), (e = t.sub(this)), (this.negative = 1), e)
                              : this.length > t.length
                                ? this.clone().iadd(t)
                                : t.clone().iadd(this);
                        }),
                        (o.prototype.isub = function (t) {
                          if (t.negative !== 0) {
                            t.negative = 0;
                            var e = this.iadd(t);
                            return (t.negative = 1), e._normSign();
                          }
                          if (this.negative !== 0) {
                            return (
                              (this.negative = 0),
                              this.iadd(t),
                              (this.negative = 1),
                              this._normSign()
                            );
                          }
                          let r;
                          let n;
                          const i = this.cmp(t);
                          if (i === 0) {
                            return (
                              (this.negative = 0), (this.length = 1), (this.words[0] = 0), this
                            );
                          }
                          i > 0 ? ((r = this), (n = t)) : ((r = t), (n = this));
                          for (var o = 0, a = 0; a < n.length; a++) {
                            (o = (e = (0 | r.words[a]) - (0 | n.words[a]) + o) >> 26),
                            (this.words[a] = 67108863 & e);
                          }
                          for (; o !== 0 && a < r.length; a++) {
                            (o = (e = (0 | r.words[a]) + o) >> 26),
                            (this.words[a] = 67108863 & e);
                          }
                          if (o === 0 && a < r.length && r !== this) for (; a < r.length; a++) this.words[a] = r.words[a];
                          return (
                            (this.length = Math.max(this.length, a)),
                            r !== this && (this.negative = 1),
                            this._strip()
                          );
                        }),
                        (o.prototype.sub = function (t) {
                          return this.clone().isub(t);
                        });
                        let v = function (t, e, r) {
                          let n;
                          let i;
                          let o;
                          const a = t.words;
                          const s = e.words;
                          const f = r.words;
                          let u = 0;
                          const c = 0 | a[0];
                          const h = 8191 & c;
                          const d = c >>> 13;
                          const l = 0 | a[1];
                          const p = 8191 & l;
                          const b = l >>> 13;
                          const v = 0 | a[2];
                          const g = 8191 & v;
                          const y = v >>> 13;
                          const m = 0 | a[3];
                          const w = 8191 & m;
                          const _ = m >>> 13;
                          const S = 0 | a[4];
                          const M = 8191 & S;
                          const E = S >>> 13;
                          const k = 0 | a[5];
                          const x = 8191 & k;
                          const A = k >>> 13;
                          const R = 0 | a[6];
                          const I = 8191 & R;
                          const T = R >>> 13;
                          const B = 0 | a[7];
                          const P = 8191 & B;
                          const O = B >>> 13;
                          const C = 0 | a[8];
                          const L = 8191 & C;
                          const j = C >>> 13;
                          const N = 0 | a[9];
                          const D = 8191 & N;
                          const U = N >>> 13;
                          const F = 0 | s[0];
                          const q = 8191 & F;
                          const z = F >>> 13;
                          const W = 0 | s[1];
                          const V = 8191 & W;
                          const H = W >>> 13;
                          const G = 0 | s[2];
                          const K = 8191 & G;
                          const X = G >>> 13;
                          const Z = 0 | s[3];
                          const Y = 8191 & Z;
                          const J = Z >>> 13;
                          const $ = 0 | s[4];
                          const Q = 8191 & $;
                          const tt = $ >>> 13;
                          const et = 0 | s[5];
                          const rt = 8191 & et;
                          const nt = et >>> 13;
                          const it = 0 | s[6];
                          const ot = 8191 & it;
                          const at = it >>> 13;
                          const st = 0 | s[7];
                          const ft = 8191 & st;
                          const ut = st >>> 13;
                          const ct = 0 | s[8];
                          const ht = 8191 & ct;
                          const dt = ct >>> 13;
                          const lt = 0 | s[9];
                          const pt = 8191 & lt;
                          const bt = lt >>> 13;
                          (r.negative = t.negative ^ e.negative), (r.length = 19);
                          let vt = (((u + (n = Math.imul(h, q))) | 0)
                                + ((8191 & (i = ((i = Math.imul(h, z)) + Math.imul(d, q)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = Math.imul(d, z)) + (i >>> 13)) | 0) + (vt >>> 26)) | 0),
                          (vt &= 67108863),
                          (n = Math.imul(p, q)),
                          (i = ((i = Math.imul(p, z)) + Math.imul(b, q)) | 0),
                          (o = Math.imul(b, z));
                          let gt = (((u + (n = (n + Math.imul(h, V)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, H)) | 0) + Math.imul(d, V)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, H)) | 0) + (i >>> 13)) | 0) + (gt >>> 26))
                              | 0),
                          (gt &= 67108863),
                          (n = Math.imul(g, q)),
                          (i = ((i = Math.imul(g, z)) + Math.imul(y, q)) | 0),
                          (o = Math.imul(y, z)),
                          (n = (n + Math.imul(p, V)) | 0),
                          (i = ((i = (i + Math.imul(p, H)) | 0) + Math.imul(b, V)) | 0),
                          (o = (o + Math.imul(b, H)) | 0);
                          let yt = (((u + (n = (n + Math.imul(h, K)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, X)) | 0) + Math.imul(d, K)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, X)) | 0) + (i >>> 13)) | 0) + (yt >>> 26))
                              | 0),
                          (yt &= 67108863),
                          (n = Math.imul(w, q)),
                          (i = ((i = Math.imul(w, z)) + Math.imul(_, q)) | 0),
                          (o = Math.imul(_, z)),
                          (n = (n + Math.imul(g, V)) | 0),
                          (i = ((i = (i + Math.imul(g, H)) | 0) + Math.imul(y, V)) | 0),
                          (o = (o + Math.imul(y, H)) | 0),
                          (n = (n + Math.imul(p, K)) | 0),
                          (i = ((i = (i + Math.imul(p, X)) | 0) + Math.imul(b, K)) | 0),
                          (o = (o + Math.imul(b, X)) | 0);
                          let mt = (((u + (n = (n + Math.imul(h, Y)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, J)) | 0) + Math.imul(d, Y)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, J)) | 0) + (i >>> 13)) | 0) + (mt >>> 26))
                              | 0),
                          (mt &= 67108863),
                          (n = Math.imul(M, q)),
                          (i = ((i = Math.imul(M, z)) + Math.imul(E, q)) | 0),
                          (o = Math.imul(E, z)),
                          (n = (n + Math.imul(w, V)) | 0),
                          (i = ((i = (i + Math.imul(w, H)) | 0) + Math.imul(_, V)) | 0),
                          (o = (o + Math.imul(_, H)) | 0),
                          (n = (n + Math.imul(g, K)) | 0),
                          (i = ((i = (i + Math.imul(g, X)) | 0) + Math.imul(y, K)) | 0),
                          (o = (o + Math.imul(y, X)) | 0),
                          (n = (n + Math.imul(p, Y)) | 0),
                          (i = ((i = (i + Math.imul(p, J)) | 0) + Math.imul(b, Y)) | 0),
                          (o = (o + Math.imul(b, J)) | 0);
                          let wt = (((u + (n = (n + Math.imul(h, Q)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, tt)) | 0) + Math.imul(d, Q)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, tt)) | 0) + (i >>> 13)) | 0)
                                + (wt >>> 26))
                              | 0),
                          (wt &= 67108863),
                          (n = Math.imul(x, q)),
                          (i = ((i = Math.imul(x, z)) + Math.imul(A, q)) | 0),
                          (o = Math.imul(A, z)),
                          (n = (n + Math.imul(M, V)) | 0),
                          (i = ((i = (i + Math.imul(M, H)) | 0) + Math.imul(E, V)) | 0),
                          (o = (o + Math.imul(E, H)) | 0),
                          (n = (n + Math.imul(w, K)) | 0),
                          (i = ((i = (i + Math.imul(w, X)) | 0) + Math.imul(_, K)) | 0),
                          (o = (o + Math.imul(_, X)) | 0),
                          (n = (n + Math.imul(g, Y)) | 0),
                          (i = ((i = (i + Math.imul(g, J)) | 0) + Math.imul(y, Y)) | 0),
                          (o = (o + Math.imul(y, J)) | 0),
                          (n = (n + Math.imul(p, Q)) | 0),
                          (i = ((i = (i + Math.imul(p, tt)) | 0) + Math.imul(b, Q)) | 0),
                          (o = (o + Math.imul(b, tt)) | 0);
                          let _t = (((u + (n = (n + Math.imul(h, rt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, nt)) | 0) + Math.imul(d, rt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, nt)) | 0) + (i >>> 13)) | 0)
                                + (_t >>> 26))
                              | 0),
                          (_t &= 67108863),
                          (n = Math.imul(I, q)),
                          (i = ((i = Math.imul(I, z)) + Math.imul(T, q)) | 0),
                          (o = Math.imul(T, z)),
                          (n = (n + Math.imul(x, V)) | 0),
                          (i = ((i = (i + Math.imul(x, H)) | 0) + Math.imul(A, V)) | 0),
                          (o = (o + Math.imul(A, H)) | 0),
                          (n = (n + Math.imul(M, K)) | 0),
                          (i = ((i = (i + Math.imul(M, X)) | 0) + Math.imul(E, K)) | 0),
                          (o = (o + Math.imul(E, X)) | 0),
                          (n = (n + Math.imul(w, Y)) | 0),
                          (i = ((i = (i + Math.imul(w, J)) | 0) + Math.imul(_, Y)) | 0),
                          (o = (o + Math.imul(_, J)) | 0),
                          (n = (n + Math.imul(g, Q)) | 0),
                          (i = ((i = (i + Math.imul(g, tt)) | 0) + Math.imul(y, Q)) | 0),
                          (o = (o + Math.imul(y, tt)) | 0),
                          (n = (n + Math.imul(p, rt)) | 0),
                          (i = ((i = (i + Math.imul(p, nt)) | 0) + Math.imul(b, rt)) | 0),
                          (o = (o + Math.imul(b, nt)) | 0);
                          let St = (((u + (n = (n + Math.imul(h, ot)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, at)) | 0) + Math.imul(d, ot)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, at)) | 0) + (i >>> 13)) | 0)
                                + (St >>> 26))
                              | 0),
                          (St &= 67108863),
                          (n = Math.imul(P, q)),
                          (i = ((i = Math.imul(P, z)) + Math.imul(O, q)) | 0),
                          (o = Math.imul(O, z)),
                          (n = (n + Math.imul(I, V)) | 0),
                          (i = ((i = (i + Math.imul(I, H)) | 0) + Math.imul(T, V)) | 0),
                          (o = (o + Math.imul(T, H)) | 0),
                          (n = (n + Math.imul(x, K)) | 0),
                          (i = ((i = (i + Math.imul(x, X)) | 0) + Math.imul(A, K)) | 0),
                          (o = (o + Math.imul(A, X)) | 0),
                          (n = (n + Math.imul(M, Y)) | 0),
                          (i = ((i = (i + Math.imul(M, J)) | 0) + Math.imul(E, Y)) | 0),
                          (o = (o + Math.imul(E, J)) | 0),
                          (n = (n + Math.imul(w, Q)) | 0),
                          (i = ((i = (i + Math.imul(w, tt)) | 0) + Math.imul(_, Q)) | 0),
                          (o = (o + Math.imul(_, tt)) | 0),
                          (n = (n + Math.imul(g, rt)) | 0),
                          (i = ((i = (i + Math.imul(g, nt)) | 0) + Math.imul(y, rt)) | 0),
                          (o = (o + Math.imul(y, nt)) | 0),
                          (n = (n + Math.imul(p, ot)) | 0),
                          (i = ((i = (i + Math.imul(p, at)) | 0) + Math.imul(b, ot)) | 0),
                          (o = (o + Math.imul(b, at)) | 0);
                          let Mt = (((u + (n = (n + Math.imul(h, ft)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, ut)) | 0) + Math.imul(d, ft)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, ut)) | 0) + (i >>> 13)) | 0)
                                + (Mt >>> 26))
                              | 0),
                          (Mt &= 67108863),
                          (n = Math.imul(L, q)),
                          (i = ((i = Math.imul(L, z)) + Math.imul(j, q)) | 0),
                          (o = Math.imul(j, z)),
                          (n = (n + Math.imul(P, V)) | 0),
                          (i = ((i = (i + Math.imul(P, H)) | 0) + Math.imul(O, V)) | 0),
                          (o = (o + Math.imul(O, H)) | 0),
                          (n = (n + Math.imul(I, K)) | 0),
                          (i = ((i = (i + Math.imul(I, X)) | 0) + Math.imul(T, K)) | 0),
                          (o = (o + Math.imul(T, X)) | 0),
                          (n = (n + Math.imul(x, Y)) | 0),
                          (i = ((i = (i + Math.imul(x, J)) | 0) + Math.imul(A, Y)) | 0),
                          (o = (o + Math.imul(A, J)) | 0),
                          (n = (n + Math.imul(M, Q)) | 0),
                          (i = ((i = (i + Math.imul(M, tt)) | 0) + Math.imul(E, Q)) | 0),
                          (o = (o + Math.imul(E, tt)) | 0),
                          (n = (n + Math.imul(w, rt)) | 0),
                          (i = ((i = (i + Math.imul(w, nt)) | 0) + Math.imul(_, rt)) | 0),
                          (o = (o + Math.imul(_, nt)) | 0),
                          (n = (n + Math.imul(g, ot)) | 0),
                          (i = ((i = (i + Math.imul(g, at)) | 0) + Math.imul(y, ot)) | 0),
                          (o = (o + Math.imul(y, at)) | 0),
                          (n = (n + Math.imul(p, ft)) | 0),
                          (i = ((i = (i + Math.imul(p, ut)) | 0) + Math.imul(b, ft)) | 0),
                          (o = (o + Math.imul(b, ut)) | 0);
                          let Et = (((u + (n = (n + Math.imul(h, ht)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, dt)) | 0) + Math.imul(d, ht)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, dt)) | 0) + (i >>> 13)) | 0)
                                + (Et >>> 26))
                              | 0),
                          (Et &= 67108863),
                          (n = Math.imul(D, q)),
                          (i = ((i = Math.imul(D, z)) + Math.imul(U, q)) | 0),
                          (o = Math.imul(U, z)),
                          (n = (n + Math.imul(L, V)) | 0),
                          (i = ((i = (i + Math.imul(L, H)) | 0) + Math.imul(j, V)) | 0),
                          (o = (o + Math.imul(j, H)) | 0),
                          (n = (n + Math.imul(P, K)) | 0),
                          (i = ((i = (i + Math.imul(P, X)) | 0) + Math.imul(O, K)) | 0),
                          (o = (o + Math.imul(O, X)) | 0),
                          (n = (n + Math.imul(I, Y)) | 0),
                          (i = ((i = (i + Math.imul(I, J)) | 0) + Math.imul(T, Y)) | 0),
                          (o = (o + Math.imul(T, J)) | 0),
                          (n = (n + Math.imul(x, Q)) | 0),
                          (i = ((i = (i + Math.imul(x, tt)) | 0) + Math.imul(A, Q)) | 0),
                          (o = (o + Math.imul(A, tt)) | 0),
                          (n = (n + Math.imul(M, rt)) | 0),
                          (i = ((i = (i + Math.imul(M, nt)) | 0) + Math.imul(E, rt)) | 0),
                          (o = (o + Math.imul(E, nt)) | 0),
                          (n = (n + Math.imul(w, ot)) | 0),
                          (i = ((i = (i + Math.imul(w, at)) | 0) + Math.imul(_, ot)) | 0),
                          (o = (o + Math.imul(_, at)) | 0),
                          (n = (n + Math.imul(g, ft)) | 0),
                          (i = ((i = (i + Math.imul(g, ut)) | 0) + Math.imul(y, ft)) | 0),
                          (o = (o + Math.imul(y, ut)) | 0),
                          (n = (n + Math.imul(p, ht)) | 0),
                          (i = ((i = (i + Math.imul(p, dt)) | 0) + Math.imul(b, ht)) | 0),
                          (o = (o + Math.imul(b, dt)) | 0);
                          let kt = (((u + (n = (n + Math.imul(h, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(h, bt)) | 0) + Math.imul(d, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(d, bt)) | 0) + (i >>> 13)) | 0)
                                + (kt >>> 26))
                              | 0),
                          (kt &= 67108863),
                          (n = Math.imul(D, V)),
                          (i = ((i = Math.imul(D, H)) + Math.imul(U, V)) | 0),
                          (o = Math.imul(U, H)),
                          (n = (n + Math.imul(L, K)) | 0),
                          (i = ((i = (i + Math.imul(L, X)) | 0) + Math.imul(j, K)) | 0),
                          (o = (o + Math.imul(j, X)) | 0),
                          (n = (n + Math.imul(P, Y)) | 0),
                          (i = ((i = (i + Math.imul(P, J)) | 0) + Math.imul(O, Y)) | 0),
                          (o = (o + Math.imul(O, J)) | 0),
                          (n = (n + Math.imul(I, Q)) | 0),
                          (i = ((i = (i + Math.imul(I, tt)) | 0) + Math.imul(T, Q)) | 0),
                          (o = (o + Math.imul(T, tt)) | 0),
                          (n = (n + Math.imul(x, rt)) | 0),
                          (i = ((i = (i + Math.imul(x, nt)) | 0) + Math.imul(A, rt)) | 0),
                          (o = (o + Math.imul(A, nt)) | 0),
                          (n = (n + Math.imul(M, ot)) | 0),
                          (i = ((i = (i + Math.imul(M, at)) | 0) + Math.imul(E, ot)) | 0),
                          (o = (o + Math.imul(E, at)) | 0),
                          (n = (n + Math.imul(w, ft)) | 0),
                          (i = ((i = (i + Math.imul(w, ut)) | 0) + Math.imul(_, ft)) | 0),
                          (o = (o + Math.imul(_, ut)) | 0),
                          (n = (n + Math.imul(g, ht)) | 0),
                          (i = ((i = (i + Math.imul(g, dt)) | 0) + Math.imul(y, ht)) | 0),
                          (o = (o + Math.imul(y, dt)) | 0);
                          let xt = (((u + (n = (n + Math.imul(p, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(p, bt)) | 0) + Math.imul(b, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(b, bt)) | 0) + (i >>> 13)) | 0)
                                + (xt >>> 26))
                              | 0),
                          (xt &= 67108863),
                          (n = Math.imul(D, K)),
                          (i = ((i = Math.imul(D, X)) + Math.imul(U, K)) | 0),
                          (o = Math.imul(U, X)),
                          (n = (n + Math.imul(L, Y)) | 0),
                          (i = ((i = (i + Math.imul(L, J)) | 0) + Math.imul(j, Y)) | 0),
                          (o = (o + Math.imul(j, J)) | 0),
                          (n = (n + Math.imul(P, Q)) | 0),
                          (i = ((i = (i + Math.imul(P, tt)) | 0) + Math.imul(O, Q)) | 0),
                          (o = (o + Math.imul(O, tt)) | 0),
                          (n = (n + Math.imul(I, rt)) | 0),
                          (i = ((i = (i + Math.imul(I, nt)) | 0) + Math.imul(T, rt)) | 0),
                          (o = (o + Math.imul(T, nt)) | 0),
                          (n = (n + Math.imul(x, ot)) | 0),
                          (i = ((i = (i + Math.imul(x, at)) | 0) + Math.imul(A, ot)) | 0),
                          (o = (o + Math.imul(A, at)) | 0),
                          (n = (n + Math.imul(M, ft)) | 0),
                          (i = ((i = (i + Math.imul(M, ut)) | 0) + Math.imul(E, ft)) | 0),
                          (o = (o + Math.imul(E, ut)) | 0),
                          (n = (n + Math.imul(w, ht)) | 0),
                          (i = ((i = (i + Math.imul(w, dt)) | 0) + Math.imul(_, ht)) | 0),
                          (o = (o + Math.imul(_, dt)) | 0);
                          let At = (((u + (n = (n + Math.imul(g, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(g, bt)) | 0) + Math.imul(y, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(y, bt)) | 0) + (i >>> 13)) | 0)
                                + (At >>> 26))
                              | 0),
                          (At &= 67108863),
                          (n = Math.imul(D, Y)),
                          (i = ((i = Math.imul(D, J)) + Math.imul(U, Y)) | 0),
                          (o = Math.imul(U, J)),
                          (n = (n + Math.imul(L, Q)) | 0),
                          (i = ((i = (i + Math.imul(L, tt)) | 0) + Math.imul(j, Q)) | 0),
                          (o = (o + Math.imul(j, tt)) | 0),
                          (n = (n + Math.imul(P, rt)) | 0),
                          (i = ((i = (i + Math.imul(P, nt)) | 0) + Math.imul(O, rt)) | 0),
                          (o = (o + Math.imul(O, nt)) | 0),
                          (n = (n + Math.imul(I, ot)) | 0),
                          (i = ((i = (i + Math.imul(I, at)) | 0) + Math.imul(T, ot)) | 0),
                          (o = (o + Math.imul(T, at)) | 0),
                          (n = (n + Math.imul(x, ft)) | 0),
                          (i = ((i = (i + Math.imul(x, ut)) | 0) + Math.imul(A, ft)) | 0),
                          (o = (o + Math.imul(A, ut)) | 0),
                          (n = (n + Math.imul(M, ht)) | 0),
                          (i = ((i = (i + Math.imul(M, dt)) | 0) + Math.imul(E, ht)) | 0),
                          (o = (o + Math.imul(E, dt)) | 0);
                          let Rt = (((u + (n = (n + Math.imul(w, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(w, bt)) | 0) + Math.imul(_, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(_, bt)) | 0) + (i >>> 13)) | 0)
                                + (Rt >>> 26))
                              | 0),
                          (Rt &= 67108863),
                          (n = Math.imul(D, Q)),
                          (i = ((i = Math.imul(D, tt)) + Math.imul(U, Q)) | 0),
                          (o = Math.imul(U, tt)),
                          (n = (n + Math.imul(L, rt)) | 0),
                          (i = ((i = (i + Math.imul(L, nt)) | 0) + Math.imul(j, rt)) | 0),
                          (o = (o + Math.imul(j, nt)) | 0),
                          (n = (n + Math.imul(P, ot)) | 0),
                          (i = ((i = (i + Math.imul(P, at)) | 0) + Math.imul(O, ot)) | 0),
                          (o = (o + Math.imul(O, at)) | 0),
                          (n = (n + Math.imul(I, ft)) | 0),
                          (i = ((i = (i + Math.imul(I, ut)) | 0) + Math.imul(T, ft)) | 0),
                          (o = (o + Math.imul(T, ut)) | 0),
                          (n = (n + Math.imul(x, ht)) | 0),
                          (i = ((i = (i + Math.imul(x, dt)) | 0) + Math.imul(A, ht)) | 0),
                          (o = (o + Math.imul(A, dt)) | 0);
                          let It = (((u + (n = (n + Math.imul(M, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(M, bt)) | 0) + Math.imul(E, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(E, bt)) | 0) + (i >>> 13)) | 0)
                                + (It >>> 26))
                              | 0),
                          (It &= 67108863),
                          (n = Math.imul(D, rt)),
                          (i = ((i = Math.imul(D, nt)) + Math.imul(U, rt)) | 0),
                          (o = Math.imul(U, nt)),
                          (n = (n + Math.imul(L, ot)) | 0),
                          (i = ((i = (i + Math.imul(L, at)) | 0) + Math.imul(j, ot)) | 0),
                          (o = (o + Math.imul(j, at)) | 0),
                          (n = (n + Math.imul(P, ft)) | 0),
                          (i = ((i = (i + Math.imul(P, ut)) | 0) + Math.imul(O, ft)) | 0),
                          (o = (o + Math.imul(O, ut)) | 0),
                          (n = (n + Math.imul(I, ht)) | 0),
                          (i = ((i = (i + Math.imul(I, dt)) | 0) + Math.imul(T, ht)) | 0),
                          (o = (o + Math.imul(T, dt)) | 0);
                          let Tt = (((u + (n = (n + Math.imul(x, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(x, bt)) | 0) + Math.imul(A, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(A, bt)) | 0) + (i >>> 13)) | 0)
                                + (Tt >>> 26))
                              | 0),
                          (Tt &= 67108863),
                          (n = Math.imul(D, ot)),
                          (i = ((i = Math.imul(D, at)) + Math.imul(U, ot)) | 0),
                          (o = Math.imul(U, at)),
                          (n = (n + Math.imul(L, ft)) | 0),
                          (i = ((i = (i + Math.imul(L, ut)) | 0) + Math.imul(j, ft)) | 0),
                          (o = (o + Math.imul(j, ut)) | 0),
                          (n = (n + Math.imul(P, ht)) | 0),
                          (i = ((i = (i + Math.imul(P, dt)) | 0) + Math.imul(O, ht)) | 0),
                          (o = (o + Math.imul(O, dt)) | 0);
                          let Bt = (((u + (n = (n + Math.imul(I, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(I, bt)) | 0) + Math.imul(T, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(T, bt)) | 0) + (i >>> 13)) | 0)
                                + (Bt >>> 26))
                              | 0),
                          (Bt &= 67108863),
                          (n = Math.imul(D, ft)),
                          (i = ((i = Math.imul(D, ut)) + Math.imul(U, ft)) | 0),
                          (o = Math.imul(U, ut)),
                          (n = (n + Math.imul(L, ht)) | 0),
                          (i = ((i = (i + Math.imul(L, dt)) | 0) + Math.imul(j, ht)) | 0),
                          (o = (o + Math.imul(j, dt)) | 0);
                          let Pt = (((u + (n = (n + Math.imul(P, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(P, bt)) | 0) + Math.imul(O, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(O, bt)) | 0) + (i >>> 13)) | 0)
                                + (Pt >>> 26))
                              | 0),
                          (Pt &= 67108863),
                          (n = Math.imul(D, ht)),
                          (i = ((i = Math.imul(D, dt)) + Math.imul(U, ht)) | 0),
                          (o = Math.imul(U, dt));
                          let Ot = (((u + (n = (n + Math.imul(L, pt)) | 0)) | 0)
                                + ((8191
                                  & (i = ((i = (i + Math.imul(L, bt)) | 0) + Math.imul(j, pt)) | 0))
                                  << 13))
                              | 0;
                          (u = ((((o = (o + Math.imul(j, bt)) | 0) + (i >>> 13)) | 0)
                                + (Ot >>> 26))
                              | 0),
                          (Ot &= 67108863);
                          let Ct = (((u + (n = Math.imul(D, pt))) | 0)
                                + ((8191 & (i = ((i = Math.imul(D, bt)) + Math.imul(U, pt)) | 0))
                                  << 13))
                              | 0;
                          return (
                            (u = ((((o = Math.imul(U, bt)) + (i >>> 13)) | 0) + (Ct >>> 26)) | 0),
                            (Ct &= 67108863),
                            (f[0] = vt),
                            (f[1] = gt),
                            (f[2] = yt),
                            (f[3] = mt),
                            (f[4] = wt),
                            (f[5] = _t),
                            (f[6] = St),
                            (f[7] = Mt),
                            (f[8] = Et),
                            (f[9] = kt),
                            (f[10] = xt),
                            (f[11] = At),
                            (f[12] = Rt),
                            (f[13] = It),
                            (f[14] = Tt),
                            (f[15] = Bt),
                            (f[16] = Pt),
                            (f[17] = Ot),
                            (f[18] = Ct),
                            u !== 0 && ((f[19] = u), r.length++),
                            r
                          );
                        };
                        function g(t, e, r) {
                          (r.negative = e.negative ^ t.negative),
                          (r.length = t.length + e.length);
                          for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {
                            let a = i;
                            i = 0;
                            for (
                              var s = 67108863 & n,
                                f = Math.min(o, e.length - 1),
                                u = Math.max(0, o - t.length + 1);
                              u <= f;
                              u++
                            ) {
                              const c = o - u;
                              const h = (0 | t.words[c]) * (0 | e.words[u]);
                              let d = 67108863 & h;
                              (s = 67108863 & (d = (d + s) | 0)),
                              (i
                                    += (a = ((a = (a + ((h / 67108864) | 0)) | 0) + (d >>> 26)) | 0)
                                    >>> 26),
                              (a &= 67108863);
                            }
                            (r.words[o] = s), (n = a), (a = i);
                          }
                          return n !== 0 ? (r.words[o] = n) : r.length--, r._strip();
                        }
                        function y(t, e, r) {
                          return g(t, e, r);
                        }
                        function m(t, e) {
                          (this.x = t), (this.y = e);
                        }
                        Math.imul || (v = b),
                        (o.prototype.mulTo = function (t, e) {
                          const r = this.length + t.length;
                          return this.length === 10 && t.length === 10
                            ? v(this, t, e)
                            : r < 63
                              ? b(this, t, e)
                              : r < 1024
                                ? g(this, t, e)
                                : y(this, t, e);
                        }),
                        (m.prototype.makeRBT = function (t) {
                          for (
                            var e = new Array(t), r = o.prototype._countBits(t) - 1, n = 0;
                            n < t;
                            n++
                          ) e[n] = this.revBin(n, r, t);
                          return e;
                        }),
                        (m.prototype.revBin = function (t, e, r) {
                          if (t === 0 || t === r - 1) return t;
                          for (var n = 0, i = 0; i < e; i++) (n |= (1 & t) << (e - i - 1)), (t >>= 1);
                          return n;
                        }),
                        (m.prototype.permute = function (t, e, r, n, i, o) {
                          for (let a = 0; a < o; a++) (n[a] = e[t[a]]), (i[a] = r[t[a]]);
                        }),
                        (m.prototype.transform = function (t, e, r, n, i, o) {
                          this.permute(o, t, e, r, n, i);
                          for (let a = 1; a < i; a <<= 1) {
                            for (
                              let s = a << 1,
                                f = Math.cos((2 * Math.PI) / s),
                                u = Math.sin((2 * Math.PI) / s),
                                c = 0;
                              c < i;
                              c += s
                            ) {
                              for (let h = f, d = u, l = 0; l < a; l++) {
                                const p = r[c + l];
                                const b = n[c + l];
                                let v = r[c + l + a];
                                let g = n[c + l + a];
                                let y = h * v - d * g;
                                (g = h * g + d * v),
                                (v = y),
                                (r[c + l] = p + v),
                                (n[c + l] = b + g),
                                (r[c + l + a] = p - v),
                                (n[c + l + a] = b - g),
                                l !== s
                                        && ((y = f * h - u * d), (d = f * d + u * h), (h = y));
                              }
                            }
                          }
                        }),
                        (m.prototype.guessLen13b = function (t, e) {
                          let r = 1 | Math.max(e, t);
                          const n = 1 & r;
                          let i = 0;
                          for (r = (r / 2) | 0; r; r >>>= 1) i++;
                          return 1 << (i + 1 + n);
                        }),
                        (m.prototype.conjugate = function (t, e, r) {
                          if (!(r <= 1)) {
                            for (let n = 0; n < r / 2; n++) {
                              let i = t[n];
                              (t[n] = t[r - n - 1]),
                              (t[r - n - 1] = i),
                              (i = e[n]),
                              (e[n] = -e[r - n - 1]),
                              (e[r - n - 1] = -i);
                            }
                          }
                        }),
                        (m.prototype.normalize13b = function (t, e) {
                          for (let r = 0, n = 0; n < e / 2; n++) {
                            const i = 8192 * Math.round(t[2 * n + 1] / e)
                                  + Math.round(t[2 * n] / e)
                                  + r;
                            (t[n] = 67108863 & i), (r = i < 67108864 ? 0 : (i / 67108864) | 0);
                          }
                          return t;
                        }),
                        (m.prototype.convert13b = function (t, e, r, i) {
                          for (var o = 0, a = 0; a < e; a++) {
                            (o += 0 | t[a]),
                            (r[2 * a] = 8191 & o),
                            (o >>>= 13),
                            (r[2 * a + 1] = 8191 & o),
                            (o >>>= 13);
                          }
                          for (a = 2 * e; a < i; ++a) r[a] = 0;
                          n(o === 0), n((-8192 & o) == 0);
                        }),
                        (m.prototype.stub = function (t) {
                          for (var e = new Array(t), r = 0; r < t; r++) e[r] = 0;
                          return e;
                        }),
                        (m.prototype.mulp = function (t, e, r) {
                          const n = 2 * this.guessLen13b(t.length, e.length);
                          const i = this.makeRBT(n);
                          const o = this.stub(n);
                          const a = new Array(n);
                          const s = new Array(n);
                          const f = new Array(n);
                          const u = new Array(n);
                          const c = new Array(n);
                          const h = new Array(n);
                          const d = r.words;
                          (d.length = n),
                          this.convert13b(t.words, t.length, a, n),
                          this.convert13b(e.words, e.length, u, n),
                          this.transform(a, o, s, f, n, i),
                          this.transform(u, o, c, h, n, i);
                          for (let l = 0; l < n; l++) {
                            const p = s[l] * c[l] - f[l] * h[l];
                            (f[l] = s[l] * h[l] + f[l] * c[l]), (s[l] = p);
                          }
                          return (
                            this.conjugate(s, f, n),
                            this.transform(s, f, d, o, n, i),
                            this.conjugate(d, o, n),
                            this.normalize13b(d, n),
                            (r.negative = t.negative ^ e.negative),
                            (r.length = t.length + e.length),
                            r._strip()
                          );
                        }),
                        (o.prototype.mul = function (t) {
                          const e = new o(null);
                          return (
                            (e.words = new Array(this.length + t.length)), this.mulTo(t, e)
                          );
                        }),
                        (o.prototype.mulf = function (t) {
                          const e = new o(null);
                          return (e.words = new Array(this.length + t.length)), y(this, t, e);
                        }),
                        (o.prototype.imul = function (t) {
                          return this.clone().mulTo(t, this);
                        }),
                        (o.prototype.imuln = function (t) {
                          const e = t < 0;
                          e && (t = -t), n(typeof t === 'number'), n(t < 67108864);
                          for (var r = 0, i = 0; i < this.length; i++) {
                            const o = (0 | this.words[i]) * t;
                            const a = (67108863 & o) + (67108863 & r);
                            (r >>= 26),
                            (r += (o / 67108864) | 0),
                            (r += a >>> 26),
                            (this.words[i] = 67108863 & a);
                          }
                          return (
                            r !== 0 && ((this.words[i] = r), this.length++),
                            e ? this.ineg() : this
                          );
                        }),
                        (o.prototype.muln = function (t) {
                          return this.clone().imuln(t);
                        }),
                        (o.prototype.sqr = function () {
                          return this.mul(this);
                        }),
                        (o.prototype.isqr = function () {
                          return this.imul(this.clone());
                        }),
                        (o.prototype.pow = function (t) {
                          const e = (function (t) {
                            for (var e = new Array(t.bitLength()), r = 0; r < e.length; r++) {
                              const n = (r / 26) | 0;
                              const i = r % 26;
                              e[r] = (t.words[n] >>> i) & 1;
                            }
                            return e;
                          }(t));
                          if (e.length === 0) return new o(1);
                          for (
                            var r = this, n = 0;
                            n < e.length && e[n] === 0;
                            n++, r = r.sqr()
                          );
                          if (++n < e.length) for (let i = r.sqr(); n < e.length; n++, i = i.sqr()) e[n] !== 0 && (r = r.mul(i));
                          return r;
                        }),
                        (o.prototype.iushln = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          let e;
                          const r = t % 26;
                          const i = (t - r) / 26;
                          const o = (67108863 >>> (26 - r)) << (26 - r);
                          if (r !== 0) {
                            let a = 0;
                            for (e = 0; e < this.length; e++) {
                              const s = this.words[e] & o;
                              const f = ((0 | this.words[e]) - s) << r;
                              (this.words[e] = f | a), (a = s >>> (26 - r));
                            }
                            a && ((this.words[e] = a), this.length++);
                          }
                          if (i !== 0) {
                            for (e = this.length - 1; e >= 0; e--) this.words[e + i] = this.words[e];
                            for (e = 0; e < i; e++) this.words[e] = 0;
                            this.length += i;
                          }
                          return this._strip();
                        }),
                        (o.prototype.ishln = function (t) {
                          return n(this.negative === 0), this.iushln(t);
                        }),
                        (o.prototype.iushrn = function (t, e, r) {
                          let i;
                          n(typeof t === 'number' && t >= 0), (i = e ? (e - (e % 26)) / 26 : 0);
                          const o = t % 26;
                          const a = Math.min((t - o) / 26, this.length);
                          const s = 67108863 ^ ((67108863 >>> o) << o);
                          const f = r;
                          if (((i -= a), (i = Math.max(0, i)), f)) {
                            for (var u = 0; u < a; u++) f.words[u] = this.words[u];
                            f.length = a;
                          }
                          if (a === 0);
                          else if (this.length > a) for (this.length -= a, u = 0; u < this.length; u++) this.words[u] = this.words[u + a];
                          else (this.words[0] = 0), (this.length = 1);
                          let c = 0;
                          for (u = this.length - 1; u >= 0 && (c !== 0 || u >= i); u--) {
                            const h = 0 | this.words[u];
                            (this.words[u] = (c << (26 - o)) | (h >>> o)), (c = h & s);
                          }
                          return (
                            f && c !== 0 && (f.words[f.length++] = c),
                            this.length === 0 && ((this.words[0] = 0), (this.length = 1)),
                            this._strip()
                          );
                        }),
                        (o.prototype.ishrn = function (t, e, r) {
                          return n(this.negative === 0), this.iushrn(t, e, r);
                        }),
                        (o.prototype.shln = function (t) {
                          return this.clone().ishln(t);
                        }),
                        (o.prototype.ushln = function (t) {
                          return this.clone().iushln(t);
                        }),
                        (o.prototype.shrn = function (t) {
                          return this.clone().ishrn(t);
                        }),
                        (o.prototype.ushrn = function (t) {
                          return this.clone().iushrn(t);
                        }),
                        (o.prototype.testn = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          const e = t % 26;
                          const r = (t - e) / 26;
                          const i = 1 << e;
                          return !(this.length <= r) && !!(this.words[r] & i);
                        }),
                        (o.prototype.imaskn = function (t) {
                          n(typeof t === 'number' && t >= 0);
                          const e = t % 26;
                          let r = (t - e) / 26;
                          if (
                            (n(this.negative === 0, 'imaskn works only with positive numbers'),
                            this.length <= r)
                          ) return this;
                          if (
                            (e !== 0 && r++, (this.length = Math.min(r, this.length)), e !== 0)
                          ) {
                            const i = 67108863 ^ ((67108863 >>> e) << e);
                            this.words[this.length - 1] &= i;
                          }
                          return this._strip();
                        }),
                        (o.prototype.maskn = function (t) {
                          return this.clone().imaskn(t);
                        }),
                        (o.prototype.iaddn = function (t) {
                          return (
                            n(typeof t === 'number'),
                            n(t < 67108864),
                            t < 0
                              ? this.isubn(-t)
                              : this.negative !== 0
                                ? this.length === 1 && (0 | this.words[0]) <= t
                                  ? ((this.words[0] = t - (0 | this.words[0])),
                                  (this.negative = 0),
                                  this)
                                  : ((this.negative = 0),
                                  this.isubn(t),
                                  (this.negative = 1),
                                  this)
                                : this._iaddn(t)
                          );
                        }),
                        (o.prototype._iaddn = function (t) {
                          this.words[0] += t;
                          for (var e = 0; e < this.length && this.words[e] >= 67108864; e++) {
                            (this.words[e] -= 67108864),
                            e === this.length - 1
                              ? (this.words[e + 1] = 1)
                              : this.words[e + 1]++;
                          }
                          return (this.length = Math.max(this.length, e + 1)), this;
                        }),
                        (o.prototype.isubn = function (t) {
                          if ((n(typeof t === 'number'), n(t < 67108864), t < 0)) return this.iaddn(-t);
                          if (this.negative !== 0) {
                            return (
                              (this.negative = 0), this.iaddn(t), (this.negative = 1), this
                            );
                          }
                          if (((this.words[0] -= t), this.length === 1 && this.words[0] < 0)) (this.words[0] = -this.words[0]), (this.negative = 1);
                          else for (let e = 0; e < this.length && this.words[e] < 0; e++) (this.words[e] += 67108864), (this.words[e + 1] -= 1);
                          return this._strip();
                        }),
                        (o.prototype.addn = function (t) {
                          return this.clone().iaddn(t);
                        }),
                        (o.prototype.subn = function (t) {
                          return this.clone().isubn(t);
                        }),
                        (o.prototype.iabs = function () {
                          return (this.negative = 0), this;
                        }),
                        (o.prototype.abs = function () {
                          return this.clone().iabs();
                        }),
                        (o.prototype._ishlnsubmul = function (t, e, r) {
                          let i;
                          let o;
                          const a = t.length + r;
                          this._expand(a);
                          let s = 0;
                          for (i = 0; i < t.length; i++) {
                            o = (0 | this.words[i + r]) + s;
                            const f = (0 | t.words[i]) * e;
                            (s = ((o -= 67108863 & f) >> 26) - ((f / 67108864) | 0)),
                            (this.words[i + r] = 67108863 & o);
                          }
                          for (; i < this.length - r; i++) {
                            (s = (o = (0 | this.words[i + r]) + s) >> 26),
                            (this.words[i + r] = 67108863 & o);
                          }
                          if (s === 0) return this._strip();
                          for (n(s === -1), s = 0, i = 0; i < this.length; i++) {
                            (s = (o = -(0 | this.words[i]) + s) >> 26),
                            (this.words[i] = 67108863 & o);
                          }
                          return (this.negative = 1), this._strip();
                        }),
                        (o.prototype._wordDiv = function (t, e) {
                          let r = (this.length, t.length);
                          let n = this.clone();
                          let i = t;
                          let a = 0 | i.words[i.length - 1];
                          (r = 26 - this._countBits(a)) !== 0
                                && ((i = i.ushln(r)), n.iushln(r), (a = 0 | i.words[i.length - 1]));
                          let s;
                          const f = n.length - i.length;
                          if (e !== 'mod') {
                            ((s = new o(null)).length = f + 1), (s.words = new Array(s.length));
                            for (let u = 0; u < s.length; u++) s.words[u] = 0;
                          }
                          const c = n.clone()._ishlnsubmul(i, 1, f);
                          c.negative === 0 && ((n = c), s && (s.words[f] = 1));
                          for (let h = f - 1; h >= 0; h--) {
                            let d = 67108864 * (0 | n.words[i.length + h])
                                  + (0 | n.words[i.length + h - 1]);
                            for (
                              d = Math.min((d / a) | 0, 67108863), n._ishlnsubmul(i, d, h);
                              n.negative !== 0;

                            ) {
                              d--,
                              (n.negative = 0),
                              n._ishlnsubmul(i, 1, h),
                              n.isZero() || (n.negative ^= 1);
                            }
                            s && (s.words[h] = d);
                          }
                          return (
                            s && s._strip(),
                            n._strip(),
                            e !== 'div' && r !== 0 && n.iushrn(r),
                            { div: s || null, mod: n }
                          );
                        }),
                        (o.prototype.divmod = function (t, e, r) {
                          return (
                            n(!t.isZero()),
                            this.isZero()
                              ? { div: new o(0), mod: new o(0) }
                              : this.negative !== 0 && t.negative === 0
                                ? ((s = this.neg().divmod(t, e)),
                                e !== 'mod' && (i = s.div.neg()),
                                e !== 'div'
                                      && ((a = s.mod.neg()), r && a.negative !== 0 && a.iadd(t)),
                                { div: i, mod: a })
                                : this.negative === 0 && t.negative !== 0
                                  ? ((s = this.divmod(t.neg(), e)),
                                  e !== 'mod' && (i = s.div.neg()),
                                  { div: i, mod: s.mod })
                                  : (this.negative & t.negative) != 0
                                    ? ((s = this.neg().divmod(t.neg(), e)),
                                    e !== 'div'
                                      && ((a = s.mod.neg()), r && a.negative !== 0 && a.isub(t)),
                                    { div: s.div, mod: a })
                                    : t.length > this.length || this.cmp(t) < 0
                                      ? { div: new o(0), mod: this }
                                      : t.length === 1
                                        ? e === 'div'
                                          ? { div: this.divn(t.words[0]), mod: null }
                                          : e === 'mod'
                                            ? { div: null, mod: new o(this.modrn(t.words[0])) }
                                            : {
                                              div: this.divn(t.words[0]),
                                              mod: new o(this.modrn(t.words[0])),
                                            }
                                        : this._wordDiv(t, e)
                          );
                          let i; let a; let
                            s;
                        }),
                        (o.prototype.div = function (t) {
                          return this.divmod(t, 'div', !1).div;
                        }),
                        (o.prototype.mod = function (t) {
                          return this.divmod(t, 'mod', !1).mod;
                        }),
                        (o.prototype.umod = function (t) {
                          return this.divmod(t, 'mod', !0).mod;
                        }),
                        (o.prototype.divRound = function (t) {
                          const e = this.divmod(t);
                          if (e.mod.isZero()) return e.div;
                          const r = e.div.negative !== 0 ? e.mod.isub(t) : e.mod;
                          const n = t.ushrn(1);
                          const i = t.andln(1);
                          const o = r.cmp(n);
                          return o < 0 || (i === 1 && o === 0)
                            ? e.div
                            : e.div.negative !== 0
                              ? e.div.isubn(1)
                              : e.div.iaddn(1);
                        }),
                        (o.prototype.modrn = function (t) {
                          const e = t < 0;
                          e && (t = -t), n(t <= 67108863);
                          for (var r = (1 << 26) % t, i = 0, o = this.length - 1; o >= 0; o--) i = (r * i + (0 | this.words[o])) % t;
                          return e ? -i : i;
                        }),
                        (o.prototype.modn = function (t) {
                          return this.modrn(t);
                        }),
                        (o.prototype.idivn = function (t) {
                          const e = t < 0;
                          e && (t = -t), n(t <= 67108863);
                          for (let r = 0, i = this.length - 1; i >= 0; i--) {
                            const o = (0 | this.words[i]) + 67108864 * r;
                            (this.words[i] = (o / t) | 0), (r = o % t);
                          }
                          return this._strip(), e ? this.ineg() : this;
                        }),
                        (o.prototype.divn = function (t) {
                          return this.clone().idivn(t);
                        }),
                        (o.prototype.egcd = function (t) {
                          n(t.negative === 0), n(!t.isZero());
                          let e = this;
                          const r = t.clone();
                          e = e.negative !== 0 ? e.umod(t) : e.clone();
                          for (
                            var i = new o(1), a = new o(0), s = new o(0), f = new o(1), u = 0;
                            e.isEven() && r.isEven();

                          ) e.iushrn(1), r.iushrn(1), ++u;
                          for (let c = r.clone(), h = e.clone(); !e.isZero();) {
                            for (
                              var d = 0, l = 1;
                              (e.words[0] & l) == 0 && d < 26;
                              ++d, l <<= 1
                            );
                            if (d > 0) {
                              for (e.iushrn(d); d-- > 0;) {
                                (i.isOdd() || a.isOdd()) && (i.iadd(c), a.isub(h)),
                                i.iushrn(1),
                                a.iushrn(1);
                              }
                            }
                            for (
                              var p = 0, b = 1;
                              (r.words[0] & b) == 0 && p < 26;
                              ++p, b <<= 1
                            );
                            if (p > 0) {
                              for (r.iushrn(p); p-- > 0;) {
                                (s.isOdd() || f.isOdd()) && (s.iadd(c), f.isub(h)),
                                s.iushrn(1),
                                f.iushrn(1);
                              }
                            }
                            e.cmp(r) >= 0
                              ? (e.isub(r), i.isub(s), a.isub(f))
                              : (r.isub(e), s.isub(i), f.isub(a));
                          }
                          return { a: s, b: f, gcd: r.iushln(u) };
                        }),
                        (o.prototype._invmp = function (t) {
                          n(t.negative === 0), n(!t.isZero());
                          let e = this;
                          const r = t.clone();
                          e = e.negative !== 0 ? e.umod(t) : e.clone();
                          for (
                            var i, a = new o(1), s = new o(0), f = r.clone();
                            e.cmpn(1) > 0 && r.cmpn(1) > 0;

                          ) {
                            for (
                              var u = 0, c = 1;
                              (e.words[0] & c) == 0 && u < 26;
                              ++u, c <<= 1
                            );
                            if (u > 0) for (e.iushrn(u); u-- > 0;) a.isOdd() && a.iadd(f), a.iushrn(1);
                            for (
                              var h = 0, d = 1;
                              (r.words[0] & d) == 0 && h < 26;
                              ++h, d <<= 1
                            );
                            if (h > 0) for (r.iushrn(h); h-- > 0;) s.isOdd() && s.iadd(f), s.iushrn(1);
                            e.cmp(r) >= 0 ? (e.isub(r), a.isub(s)) : (r.isub(e), s.isub(a));
                          }
                          return (i = e.cmpn(1) === 0 ? a : s).cmpn(0) < 0 && i.iadd(t), i;
                        }),
                        (o.prototype.gcd = function (t) {
                          if (this.isZero()) return t.abs();
                          if (t.isZero()) return this.abs();
                          let e = this.clone();
                          let r = t.clone();
                          (e.negative = 0), (r.negative = 0);
                          for (var n = 0; e.isEven() && r.isEven(); n++) e.iushrn(1), r.iushrn(1);
                          for (;;) {
                            for (; e.isEven();) e.iushrn(1);
                            for (; r.isEven();) r.iushrn(1);
                            const i = e.cmp(r);
                            if (i < 0) {
                              const o = e;
                              (e = r), (r = o);
                            } else if (i === 0 || r.cmpn(1) === 0) break;
                            e.isub(r);
                          }
                          return r.iushln(n);
                        }),
                        (o.prototype.invm = function (t) {
                          return this.egcd(t).a.umod(t);
                        }),
                        (o.prototype.isEven = function () {
                          return (1 & this.words[0]) == 0;
                        }),
                        (o.prototype.isOdd = function () {
                          return (1 & this.words[0]) == 1;
                        }),
                        (o.prototype.andln = function (t) {
                          return this.words[0] & t;
                        }),
                        (o.prototype.bincn = function (t) {
                          n(typeof t === 'number');
                          const e = t % 26;
                          const r = (t - e) / 26;
                          const i = 1 << e;
                          if (this.length <= r) return this._expand(r + 1), (this.words[r] |= i), this;
                          for (var o = i, a = r; o !== 0 && a < this.length; a++) {
                            let s = 0 | this.words[a];
                            (o = (s += o) >>> 26), (s &= 67108863), (this.words[a] = s);
                          }
                          return o !== 0 && ((this.words[a] = o), this.length++), this;
                        }),
                        (o.prototype.isZero = function () {
                          return this.length === 1 && this.words[0] === 0;
                        }),
                        (o.prototype.cmpn = function (t) {
                          let e;
                          const r = t < 0;
                          if (this.negative !== 0 && !r) return -1;
                          if (this.negative === 0 && r) return 1;
                          if ((this._strip(), this.length > 1)) e = 1;
                          else {
                            r && (t = -t), n(t <= 67108863, 'Number is too big');
                            const i = 0 | this.words[0];
                            e = i === t ? 0 : i < t ? -1 : 1;
                          }
                          return this.negative !== 0 ? 0 | -e : e;
                        }),
                        (o.prototype.cmp = function (t) {
                          if (this.negative !== 0 && t.negative === 0) return -1;
                          if (this.negative === 0 && t.negative !== 0) return 1;
                          const e = this.ucmp(t);
                          return this.negative !== 0 ? 0 | -e : e;
                        }),
                        (o.prototype.ucmp = function (t) {
                          if (this.length > t.length) return 1;
                          if (this.length < t.length) return -1;
                          for (var e = 0, r = this.length - 1; r >= 0; r--) {
                            const n = 0 | this.words[r];
                            const i = 0 | t.words[r];
                            if (n !== i) {
                              n < i ? (e = -1) : n > i && (e = 1);
                              break;
                            }
                          }
                          return e;
                        }),
                        (o.prototype.gtn = function (t) {
                          return this.cmpn(t) === 1;
                        }),
                        (o.prototype.gt = function (t) {
                          return this.cmp(t) === 1;
                        }),
                        (o.prototype.gten = function (t) {
                          return this.cmpn(t) >= 0;
                        }),
                        (o.prototype.gte = function (t) {
                          return this.cmp(t) >= 0;
                        }),
                        (o.prototype.ltn = function (t) {
                          return this.cmpn(t) === -1;
                        }),
                        (o.prototype.lt = function (t) {
                          return this.cmp(t) === -1;
                        }),
                        (o.prototype.lten = function (t) {
                          return this.cmpn(t) <= 0;
                        }),
                        (o.prototype.lte = function (t) {
                          return this.cmp(t) <= 0;
                        }),
                        (o.prototype.eqn = function (t) {
                          return this.cmpn(t) === 0;
                        }),
                        (o.prototype.eq = function (t) {
                          return this.cmp(t) === 0;
                        }),
                        (o.red = function (t) {
                          return new x(t);
                        }),
                        (o.prototype.toRed = function (t) {
                          return (
                            n(!this.red, 'Already a number in reduction context'),
                            n(this.negative === 0, 'red works only with positives'),
                            t.convertTo(this)._forceRed(t)
                          );
                        }),
                        (o.prototype.fromRed = function () {
                          return (
                            n(this.red, 'fromRed works only with numbers in reduction context'),
                            this.red.convertFrom(this)
                          );
                        }),
                        (o.prototype._forceRed = function (t) {
                          return (this.red = t), this;
                        }),
                        (o.prototype.forceRed = function (t) {
                          return (
                            n(!this.red, 'Already a number in reduction context'),
                            this._forceRed(t)
                          );
                        }),
                        (o.prototype.redAdd = function (t) {
                          return (
                            n(this.red, 'redAdd works only with red numbers'),
                            this.red.add(this, t)
                          );
                        }),
                        (o.prototype.redIAdd = function (t) {
                          return (
                            n(this.red, 'redIAdd works only with red numbers'),
                            this.red.iadd(this, t)
                          );
                        }),
                        (o.prototype.redSub = function (t) {
                          return (
                            n(this.red, 'redSub works only with red numbers'),
                            this.red.sub(this, t)
                          );
                        }),
                        (o.prototype.redISub = function (t) {
                          return (
                            n(this.red, 'redISub works only with red numbers'),
                            this.red.isub(this, t)
                          );
                        }),
                        (o.prototype.redShl = function (t) {
                          return (
                            n(this.red, 'redShl works only with red numbers'),
                            this.red.shl(this, t)
                          );
                        }),
                        (o.prototype.redMul = function (t) {
                          return (
                            n(this.red, 'redMul works only with red numbers'),
                            this.red._verify2(this, t),
                            this.red.mul(this, t)
                          );
                        }),
                        (o.prototype.redIMul = function (t) {
                          return (
                            n(this.red, 'redMul works only with red numbers'),
                            this.red._verify2(this, t),
                            this.red.imul(this, t)
                          );
                        }),
                        (o.prototype.redSqr = function () {
                          return (
                            n(this.red, 'redSqr works only with red numbers'),
                            this.red._verify1(this),
                            this.red.sqr(this)
                          );
                        }),
                        (o.prototype.redISqr = function () {
                          return (
                            n(this.red, 'redISqr works only with red numbers'),
                            this.red._verify1(this),
                            this.red.isqr(this)
                          );
                        }),
                        (o.prototype.redSqrt = function () {
                          return (
                            n(this.red, 'redSqrt works only with red numbers'),
                            this.red._verify1(this),
                            this.red.sqrt(this)
                          );
                        }),
                        (o.prototype.redInvm = function () {
                          return (
                            n(this.red, 'redInvm works only with red numbers'),
                            this.red._verify1(this),
                            this.red.invm(this)
                          );
                        }),
                        (o.prototype.redNeg = function () {
                          return (
                            n(this.red, 'redNeg works only with red numbers'),
                            this.red._verify1(this),
                            this.red.neg(this)
                          );
                        }),
                        (o.prototype.redPow = function (t) {
                          return (
                            n(this.red && !t.red, 'redPow(normalNum)'),
                            this.red._verify1(this),
                            this.red.pow(this, t)
                          );
                        });
                        const w = {
                          k256: null, p224: null, p192: null, p25519: null,
                        };
                        function _(t, e) {
                          (this.name = t),
                          (this.p = new o(e, 16)),
                          (this.n = this.p.bitLength()),
                          (this.k = new o(1).iushln(this.n).isub(this.p)),
                          (this.tmp = this._tmp());
                        }
                        function S() {
                          _.call(
                            this,
                            'k256',
                            'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
                          );
                        }
                        function M() {
                          _.call(
                            this,
                            'p224',
                            'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
                          );
                        }
                        function E() {
                          _.call(
                            this,
                            'p192',
                            'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
                          );
                        }
                        function k() {
                          _.call(
                            this,
                            '25519',
                            '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                          );
                        }
                        function x(t) {
                          if (typeof t === 'string') {
                            const e = o._prime(t);
                            (this.m = e.p), (this.prime = e);
                          } else {
                            n(t.gtn(1), 'modulus must be greater than 1'),
                            (this.m = t),
                            (this.prime = null);
                          }
                        }
                        function A(t) {
                          x.call(this, t),
                          (this.shift = this.m.bitLength()),
                          this.shift % 26 != 0 && (this.shift += 26 - (this.shift % 26)),
                          (this.r = new o(1).iushln(this.shift)),
                          (this.r2 = this.imod(this.r.sqr())),
                          (this.rinv = this.r._invmp(this.m)),
                          (this.minv = this.rinv
                            .mul(this.r)
                            .isubn(1)
                            .div(this.m)),
                          (this.minv = this.minv.umod(this.r)),
                          (this.minv = this.r.sub(this.minv));
                        }
                        (_.prototype._tmp = function () {
                          const t = new o(null);
                          return (t.words = new Array(Math.ceil(this.n / 13))), t;
                        }),
                        (_.prototype.ireduce = function (t) {
                          let e;
                          let r = t;
                          do {
                            this.split(r, this.tmp),
                            (e = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength());
                          } while (e > this.n);
                          const n = e < this.n ? -1 : r.ucmp(this.p);
                          return (
                            n === 0
                              ? ((r.words[0] = 0), (r.length = 1))
                              : n > 0
                                ? r.isub(this.p)
                                : void 0 !== r.strip
                                  ? r.strip()
                                  : r._strip(),
                            r
                          );
                        }),
                        (_.prototype.split = function (t, e) {
                          t.iushrn(this.n, 0, e);
                        }),
                        (_.prototype.imulK = function (t) {
                          return t.imul(this.k);
                        }),
                        i(S, _),
                        (S.prototype.split = function (t, e) {
                          for (var r = 4194303, n = Math.min(t.length, 9), i = 0; i < n; i++) e.words[i] = t.words[i];
                          if (((e.length = n), t.length <= 9)) return (t.words[0] = 0), void (t.length = 1);
                          let o = t.words[9];
                          for (e.words[e.length++] = o & r, i = 10; i < t.length; i++) {
                            const a = 0 | t.words[i];
                            (t.words[i - 10] = ((a & r) << 4) | (o >>> 22)), (o = a);
                          }
                          (o >>>= 22),
                          (t.words[i - 10] = o),
                          o === 0 && t.length > 10 ? (t.length -= 10) : (t.length -= 9);
                        }),
                        (S.prototype.imulK = function (t) {
                          (t.words[t.length] = 0), (t.words[t.length + 1] = 0), (t.length += 2);
                          for (let e = 0, r = 0; r < t.length; r++) {
                            const n = 0 | t.words[r];
                            (e += 977 * n),
                            (t.words[r] = 67108863 & e),
                            (e = 64 * n + ((e / 67108864) | 0));
                          }
                          return (
                            t.words[t.length - 1] === 0
                                  && (t.length--, t.words[t.length - 1] === 0 && t.length--),
                            t
                          );
                        }),
                        i(M, _),
                        i(E, _),
                        i(k, _),
                        (k.prototype.imulK = function (t) {
                          for (var e = 0, r = 0; r < t.length; r++) {
                            let n = 19 * (0 | t.words[r]) + e;
                            const i = 67108863 & n;
                            (n >>>= 26), (t.words[r] = i), (e = n);
                          }
                          return e !== 0 && (t.words[t.length++] = e), t;
                        }),
                        (o._prime = function (t) {
                          if (w[t]) return w[t];
                          let e;
                          if (t === 'k256') e = new S();
                          else if (t === 'p224') e = new M();
                          else if (t === 'p192') e = new E();
                          else {
                            if (t !== 'p25519') throw new Error(`Unknown prime ${t}`);
                            e = new k();
                          }
                          return (w[t] = e), e;
                        }),
                        (x.prototype._verify1 = function (t) {
                          n(t.negative === 0, 'red works only with positives'),
                          n(t.red, 'red works only with red numbers');
                        }),
                        (x.prototype._verify2 = function (t, e) {
                          n((t.negative | e.negative) == 0, 'red works only with positives'),
                          n(t.red && t.red === e.red, 'red works only with red numbers');
                        }),
                        (x.prototype.imod = function (t) {
                          return this.prime
                            ? this.prime.ireduce(t)._forceRed(this)
                            : (c(t, t.umod(this.m)._forceRed(this)), t);
                        }),
                        (x.prototype.neg = function (t) {
                          return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
                        }),
                        (x.prototype.add = function (t, e) {
                          this._verify2(t, e);
                          const r = t.add(e);
                          return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
                        }),
                        (x.prototype.iadd = function (t, e) {
                          this._verify2(t, e);
                          const r = t.iadd(e);
                          return r.cmp(this.m) >= 0 && r.isub(this.m), r;
                        }),
                        (x.prototype.sub = function (t, e) {
                          this._verify2(t, e);
                          const r = t.sub(e);
                          return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
                        }),
                        (x.prototype.isub = function (t, e) {
                          this._verify2(t, e);
                          const r = t.isub(e);
                          return r.cmpn(0) < 0 && r.iadd(this.m), r;
                        }),
                        (x.prototype.shl = function (t, e) {
                          return this._verify1(t), this.imod(t.ushln(e));
                        }),
                        (x.prototype.imul = function (t, e) {
                          return this._verify2(t, e), this.imod(t.imul(e));
                        }),
                        (x.prototype.mul = function (t, e) {
                          return this._verify2(t, e), this.imod(t.mul(e));
                        }),
                        (x.prototype.isqr = function (t) {
                          return this.imul(t, t.clone());
                        }),
                        (x.prototype.sqr = function (t) {
                          return this.mul(t, t);
                        }),
                        (x.prototype.sqrt = function (t) {
                          if (t.isZero()) return t.clone();
                          const e = this.m.andln(3);
                          if ((n(e % 2 == 1), e === 3)) {
                            const r = this.m.add(new o(1)).iushrn(2);
                            return this.pow(t, r);
                          }
                          for (var i = this.m.subn(1), a = 0; !i.isZero() && i.andln(1) === 0;) a++, i.iushrn(1);
                          n(!i.isZero());
                          const s = new o(1).toRed(this);
                          const f = s.redNeg();
                          const u = this.m.subn(1).iushrn(1);
                          let c = this.m.bitLength();
                          for (c = new o(2 * c * c).toRed(this); this.pow(c, u).cmp(f) !== 0;) c.redIAdd(f);
                          for (
                            var h = this.pow(c, i),
                              d = this.pow(t, i.addn(1).iushrn(1)),
                              l = this.pow(t, i),
                              p = a;
                            l.cmp(s) !== 0;

                          ) {
                            for (var b = l, v = 0; b.cmp(s) !== 0; v++) b = b.redSqr();
                            n(v < p);
                            const g = this.pow(h, new o(1).iushln(p - v - 1));
                            (d = d.redMul(g)), (h = g.redSqr()), (l = l.redMul(h)), (p = v);
                          }
                          return d;
                        }),
                        (x.prototype.invm = function (t) {
                          const e = t._invmp(this.m);
                          return e.negative !== 0
                            ? ((e.negative = 0), this.imod(e).redNeg())
                            : this.imod(e);
                        }),
                        (x.prototype.pow = function (t, e) {
                          if (e.isZero()) return new o(1).toRed(this);
                          if (e.cmpn(1) === 0) return t.clone();
                          const r = new Array(16);
                          (r[0] = new o(1).toRed(this)), (r[1] = t);
                          for (var n = 2; n < r.length; n++) r[n] = this.mul(r[n - 1], t);
                          let i = r[0];
                          let a = 0;
                          let s = 0;
                          let f = e.bitLength() % 26;
                          for (f === 0 && (f = 26), n = e.length - 1; n >= 0; n--) {
                            for (let u = e.words[n], c = f - 1; c >= 0; c--) {
                              const h = (u >> c) & 1;
                              i !== r[0] && (i = this.sqr(i)),
                              h !== 0 || a !== 0
                                ? ((a <<= 1),
                                (a |= h),
                                (++s === 4 || (n === 0 && c === 0))
                                          && ((i = this.mul(i, r[a])), (s = 0), (a = 0)))
                                : (s = 0);
                            }
                            f = 26;
                          }
                          return i;
                        }),
                        (x.prototype.convertTo = function (t) {
                          const e = t.umod(this.m);
                          return e === t ? e.clone() : e;
                        }),
                        (x.prototype.convertFrom = function (t) {
                          const e = t.clone();
                          return (e.red = null), e;
                        }),
                        (o.mont = function (t) {
                          return new A(t);
                        }),
                        i(A, x),
                        (A.prototype.convertTo = function (t) {
                          return this.imod(t.ushln(this.shift));
                        }),
                        (A.prototype.convertFrom = function (t) {
                          const e = this.imod(t.mul(this.rinv));
                          return (e.red = null), e;
                        }),
                        (A.prototype.imul = function (t, e) {
                          if (t.isZero() || e.isZero()) return (t.words[0] = 0), (t.length = 1), t;
                          const r = t.imul(e);
                          const n = r
                            .maskn(this.shift)
                            .mul(this.minv)
                            .imaskn(this.shift)
                            .mul(this.m);
                          const i = r.isub(n).iushrn(this.shift);
                          let o = i;
                          return (
                            i.cmp(this.m) >= 0
                              ? (o = i.isub(this.m))
                              : i.cmpn(0) < 0 && (o = i.iadd(this.m)),
                            o._forceRed(this)
                          );
                        }),
                        (A.prototype.mul = function (t, e) {
                          if (t.isZero() || e.isZero()) return new o(0)._forceRed(this);
                          const r = t.mul(e);
                          const n = r
                            .maskn(this.shift)
                            .mul(this.minv)
                            .imaskn(this.shift)
                            .mul(this.m);
                          const i = r.isub(n).iushrn(this.shift);
                          let a = i;
                          return (
                            i.cmp(this.m) >= 0
                              ? (a = i.isub(this.m))
                              : i.cmpn(0) < 0 && (a = i.iadd(this.m)),
                            a._forceRed(this)
                          );
                        }),
                        (A.prototype.invm = function (t) {
                          return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
                        });
                      }(void 0 === e || e, this));
                    },
                    { 21: 21 },
                  ],
                  20: [
                    function (t, e, r) {
                      let n;
                      function i(t) {
                        this.rand = t;
                      }
                      if (
                        ((e.exports = function (t) {
                          return n || (n = new i(null)), n.generate(t);
                        }),
                        (e.exports.Rand = i),
                        (i.prototype.generate = function (t) {
                          return this._rand(t);
                        }),
                        (i.prototype._rand = function (t) {
                          if (this.rand.getBytes) return this.rand.getBytes(t);
                          for (var e = new Uint8Array(t), r = 0; r < e.length; r++) e[r] = this.rand.getByte();
                          return e;
                        }),
                        typeof self === 'object')
                      ) {
                        self.crypto && self.crypto.getRandomValues
                          ? (i.prototype._rand = function (t) {
                            const e = new Uint8Array(t);
                            return self.crypto.getRandomValues(e), e;
                          })
                          : self.msCrypto && self.msCrypto.getRandomValues
                            ? (i.prototype._rand = function (t) {
                              const e = new Uint8Array(t);
                              return self.msCrypto.getRandomValues(e), e;
                            })
                            : typeof window === 'object'
                              && (i.prototype._rand = function () {
                                throw new Error('Not implemented yet');
                              });
                      } else {
                        try {
                          const o = t(21);
                          if (typeof o.randomBytes !== 'function') throw new Error('Not supported');
                          i.prototype._rand = function (t) {
                            return o.randomBytes(t);
                          };
                        } catch (t) {}
                      }
                    },
                    { 21: 21 },
                  ],
                  21: [function (t, e, r) {}, {}],
                  22: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      function i(t) {
                        n.isBuffer(t) || (t = n.from(t));
                        for (var e = (t.length / 4) | 0, r = new Array(e), i = 0; i < e; i++) r[i] = t.readUInt32BE(4 * i);
                        return r;
                      }
                      function o(t) {
                        for (; t.length > 0; t++) t[0] = 0;
                      }
                      function a(t, e, r, n, i) {
                        for (
                          var o,
                            a,
                            s,
                            f,
                            u = r[0],
                            c = r[1],
                            h = r[2],
                            d = r[3],
                            l = t[0] ^ e[0],
                            p = t[1] ^ e[1],
                            b = t[2] ^ e[2],
                            v = t[3] ^ e[3],
                            g = 4,
                            y = 1;
                          y < i;
                          y++
                        ) {
                          (o = u[l >>> 24]
                              ^ c[(p >>> 16) & 255]
                              ^ h[(b >>> 8) & 255]
                              ^ d[255 & v]
                              ^ e[g++]),
                          (a = u[p >>> 24]
                                ^ c[(b >>> 16) & 255]
                                ^ h[(v >>> 8) & 255]
                                ^ d[255 & l]
                                ^ e[g++]),
                          (s = u[b >>> 24]
                                ^ c[(v >>> 16) & 255]
                                ^ h[(l >>> 8) & 255]
                                ^ d[255 & p]
                                ^ e[g++]),
                          (f = u[v >>> 24]
                                ^ c[(l >>> 16) & 255]
                                ^ h[(p >>> 8) & 255]
                                ^ d[255 & b]
                                ^ e[g++]),
                          (l = o),
                          (p = a),
                          (b = s),
                          (v = f);
                        }
                        return (
                          (o = ((n[l >>> 24] << 24)
                                | (n[(p >>> 16) & 255] << 16)
                                | (n[(b >>> 8) & 255] << 8)
                                | n[255 & v])
                              ^ e[g++]),
                          (a = ((n[p >>> 24] << 24)
                                | (n[(b >>> 16) & 255] << 16)
                                | (n[(v >>> 8) & 255] << 8)
                                | n[255 & l])
                              ^ e[g++]),
                          (s = ((n[b >>> 24] << 24)
                                | (n[(v >>> 16) & 255] << 16)
                                | (n[(l >>> 8) & 255] << 8)
                                | n[255 & p])
                              ^ e[g++]),
                          (f = ((n[v >>> 24] << 24)
                                | (n[(l >>> 16) & 255] << 16)
                                | (n[(p >>> 8) & 255] << 8)
                                | n[255 & b])
                              ^ e[g++]),
                          [(o >>>= 0), (a >>>= 0), (s >>>= 0), (f >>>= 0)]
                        );
                      }
                      const s = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
                      const f = (function () {
                        for (var t = new Array(256), e = 0; e < 256; e++) t[e] = e < 128 ? e << 1 : (e << 1) ^ 283;
                        for (
                          var r = [],
                            n = [],
                            i = [[], [], [], []],
                            o = [[], [], [], []],
                            a = 0,
                            s = 0,
                            f = 0;
                          f < 256;
                          ++f
                        ) {
                          let u = s ^ (s << 1) ^ (s << 2) ^ (s << 3) ^ (s << 4);
                          (u = (u >>> 8) ^ (255 & u) ^ 99), (r[a] = u), (n[u] = a);
                          const c = t[a];
                          const h = t[c];
                          const d = t[h];
                          let l = (257 * t[u]) ^ (16843008 * u);
                          (i[0][a] = (l << 24) | (l >>> 8)),
                          (i[1][a] = (l << 16) | (l >>> 16)),
                          (i[2][a] = (l << 8) | (l >>> 24)),
                          (i[3][a] = l),
                          (l = (16843009 * d) ^ (65537 * h) ^ (257 * c) ^ (16843008 * a)),
                          (o[0][u] = (l << 24) | (l >>> 8)),
                          (o[1][u] = (l << 16) | (l >>> 16)),
                          (o[2][u] = (l << 8) | (l >>> 24)),
                          (o[3][u] = l),
                          a === 0 ? (a = s = 1) : ((a = c ^ t[t[t[d ^ c]]]), (s ^= t[t[s]]));
                        }
                        return {
                          SBOX: r, INV_SBOX: n, SUB_MIX: i, INV_SUB_MIX: o,
                        };
                      }());
                      function u(t) {
                        (this._key = i(t)), this._reset();
                      }
                      (u.blockSize = 16),
                      (u.keySize = 32),
                      (u.prototype.blockSize = u.blockSize),
                      (u.prototype.keySize = u.keySize),
                      (u.prototype._reset = function () {
                        for (
                          var t = this._key,
                            e = t.length,
                            r = e + 6,
                            n = 4 * (r + 1),
                            i = [],
                            o = 0;
                          o < e;
                          o++
                        ) i[o] = t[o];
                        for (o = e; o < n; o++) {
                          let a = i[o - 1];
                          o % e == 0
                            ? ((a = (a << 8) | (a >>> 24)),
                            (a = (f.SBOX[a >>> 24] << 24)
                                    | (f.SBOX[(a >>> 16) & 255] << 16)
                                    | (f.SBOX[(a >>> 8) & 255] << 8)
                                    | f.SBOX[255 & a]),
                            (a ^= s[(o / e) | 0] << 24))
                            : e > 6
                                  && o % e == 4
                                  && (a = (f.SBOX[a >>> 24] << 24)
                                    | (f.SBOX[(a >>> 16) & 255] << 16)
                                    | (f.SBOX[(a >>> 8) & 255] << 8)
                                    | f.SBOX[255 & a]),
                          (i[o] = i[o - e] ^ a);
                        }
                        for (var u = [], c = 0; c < n; c++) {
                          const h = n - c;
                          const d = i[h - (c % 4 ? 0 : 4)];
                          u[c] = c < 4 || h <= 4
                            ? d
                            : f.INV_SUB_MIX[0][f.SBOX[d >>> 24]]
                                    ^ f.INV_SUB_MIX[1][f.SBOX[(d >>> 16) & 255]]
                                    ^ f.INV_SUB_MIX[2][f.SBOX[(d >>> 8) & 255]]
                                    ^ f.INV_SUB_MIX[3][f.SBOX[255 & d]];
                        }
                        (this._nRounds = r),
                        (this._keySchedule = i),
                        (this._invKeySchedule = u);
                      }),
                      (u.prototype.encryptBlockRaw = function (t) {
                        return a(
                          (t = i(t)),
                          this._keySchedule,
                          f.SUB_MIX,
                          f.SBOX,
                          this._nRounds,
                        );
                      }),
                      (u.prototype.encryptBlock = function (t) {
                        const e = this.encryptBlockRaw(t);
                        const r = n.allocUnsafe(16);
                        return (
                          r.writeUInt32BE(e[0], 0),
                          r.writeUInt32BE(e[1], 4),
                          r.writeUInt32BE(e[2], 8),
                          r.writeUInt32BE(e[3], 12),
                          r
                        );
                      }),
                      (u.prototype.decryptBlock = function (t) {
                        const e = (t = i(t))[1];
                        (t[1] = t[3]), (t[3] = e);
                        const r = a(
                          t,
                          this._invKeySchedule,
                          f.INV_SUB_MIX,
                          f.INV_SBOX,
                          this._nRounds,
                        );
                        const o = n.allocUnsafe(16);
                        return (
                          o.writeUInt32BE(r[0], 0),
                          o.writeUInt32BE(r[3], 4),
                          o.writeUInt32BE(r[2], 8),
                          o.writeUInt32BE(r[1], 12),
                          o
                        );
                      }),
                      (u.prototype.scrub = function () {
                        o(this._keySchedule), o(this._invKeySchedule), o(this._key);
                      }),
                      (e.exports.AES = u);
                    },
                    { 514: 514 },
                  ],
                  23: [
                    function (t, e, r) {
                      const n = t(22);
                      const i = t(514).Buffer;
                      const o = t(68);
                      const a = t(467);
                      const s = t(27);
                      const f = t(66);
                      const u = t(28);
                      function c(t, e, r, a) {
                        o.call(this);
                        const f = i.alloc(4, 0);
                        this._cipher = new n.AES(e);
                        const c = this._cipher.encryptBlock(f);
                        (this._ghash = new s(c)),
                        (r = (function (t, e, r) {
                          if (e.length === 12) {
                            return (
                              (t._finID = i.concat([e, i.from([0, 0, 0, 1])])),
                              i.concat([e, i.from([0, 0, 0, 2])])
                            );
                          }
                          const n = new s(r);
                          const o = e.length;
                          let a = o % 16;
                          n.update(e),
                          a && ((a = 16 - a), n.update(i.alloc(a, 0))),
                          n.update(i.alloc(8, 0));
                          const f = 8 * o;
                          const c = i.alloc(8);
                          c.writeUIntBE(f, 0, 8), n.update(c), (t._finID = n.state);
                          const h = i.from(t._finID);
                          return u(h), h;
                        }(this, r, c))),
                        (this._prev = i.from(r)),
                        (this._cache = i.allocUnsafe(0)),
                        (this._secCache = i.allocUnsafe(0)),
                        (this._decrypt = a),
                        (this._alen = 0),
                        (this._len = 0),
                        (this._mode = t),
                        (this._authTag = null),
                        (this._called = !1);
                      }
                      a(c, o),
                      (c.prototype._update = function (t) {
                        if (!this._called && this._alen) {
                          let e = 16 - (this._alen % 16);
                          e < 16 && ((e = i.alloc(e, 0)), this._ghash.update(e));
                        }
                        this._called = !0;
                        const r = this._mode.encrypt(this, t);
                        return (
                          this._decrypt ? this._ghash.update(t) : this._ghash.update(r),
                          (this._len += t.length),
                          r
                        );
                      }),
                      (c.prototype._final = function () {
                        if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
                        const t = f(
                          this._ghash.final(8 * this._alen, 8 * this._len),
                          this._cipher.encryptBlock(this._finID),
                        );
                        if (
                          this._decrypt
                              && (function (t, e) {
                                let r = 0;
                                t.length !== e.length && r++;
                                for (let n = Math.min(t.length, e.length), i = 0; i < n; ++i) r += t[i] ^ e[i];
                                return r;
                              }(t, this._authTag))
                        ) throw new Error('Unsupported state or unable to authenticate data');
                        (this._authTag = t), this._cipher.scrub();
                      }),
                      (c.prototype.getAuthTag = function () {
                        if (this._decrypt || !i.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
                        return this._authTag;
                      }),
                      (c.prototype.setAuthTag = function (t) {
                        if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
                        this._authTag = t;
                      }),
                      (c.prototype.setAAD = function (t) {
                        if (this._called) throw new Error('Attempting to set AAD in unsupported state');
                        this._ghash.update(t), (this._alen += t.length);
                      }),
                      (e.exports = c);
                    },
                    {
                      22: 22, 27: 27, 28: 28, 467: 467, 514: 514, 66: 66, 68: 68,
                    },
                  ],
                  24: [
                    function (t, e, r) {
                      const n = t(26);
                      const i = t(25);
                      const o = t(36);
                      (r.createCipher = r.Cipher = n.createCipher),
                      (r.createCipheriv = r.Cipheriv = n.createCipheriv),
                      (r.createDecipher = r.Decipher = i.createDecipher),
                      (r.createDecipheriv = r.Decipheriv = i.createDecipheriv),
                      (r.listCiphers = r.getCiphers = function () {
                        return Object.keys(o);
                      });
                    },
                    { 25: 25, 26: 26, 36: 36 },
                  ],
                  25: [
                    function (t, e, r) {
                      const n = t(23);
                      const i = t(514).Buffer;
                      const o = t(35);
                      const a = t(38);
                      const s = t(68);
                      const f = t(22);
                      const u = t(435);
                      function c(t, e, r) {
                        s.call(this),
                        (this._cache = new h()),
                        (this._last = void 0),
                        (this._cipher = new f.AES(e)),
                        (this._prev = i.from(r)),
                        (this._mode = t),
                        (this._autopadding = !0);
                      }
                      function h() {
                        this.cache = i.allocUnsafe(0);
                      }
                      function d(t, e, r) {
                        const s = o[t.toLowerCase()];
                        if (!s) throw new TypeError('invalid suite type');
                        if (
                          (typeof r === 'string' && (r = i.from(r)),
                          s.mode !== 'GCM' && r.length !== s.iv)
                        ) throw new TypeError(`invalid iv length ${r.length}`);
                        if ((typeof e === 'string' && (e = i.from(e)), e.length !== s.key / 8)) throw new TypeError(`invalid key length ${e.length}`);
                        return s.type === 'stream'
                          ? new a(s.module, e, r, !0)
                          : s.type === 'auth'
                            ? new n(s.module, e, r, !0)
                            : new c(s.module, e, r);
                      }
                      t(467)(c, s),
                      (c.prototype._update = function (t) {
                        let e; let
                          r;
                        this._cache.add(t);
                        for (var n = []; (e = this._cache.get(this._autopadding));) (r = this._mode.decrypt(this, e)), n.push(r);
                        return i.concat(n);
                      }),
                      (c.prototype._final = function () {
                        const t = this._cache.flush();
                        if (this._autopadding) {
                          return (function (t) {
                            const e = t[15];
                            if (e < 1 || e > 16) throw new Error('unable to decrypt data');
                            let r = -1;
                            for (; ++r < e;) if (t[r + (16 - e)] !== e) throw new Error('unable to decrypt data');
                            if (e === 16) return;
                            return t.slice(0, 16 - e);
                          }(this._mode.decrypt(this, t)));
                        }
                        if (t) throw new Error('data not multiple of block length');
                      }),
                      (c.prototype.setAutoPadding = function (t) {
                        return (this._autopadding = !!t), this;
                      }),
                      (h.prototype.add = function (t) {
                        this.cache = i.concat([this.cache, t]);
                      }),
                      (h.prototype.get = function (t) {
                        let e;
                        if (t) {
                          if (this.cache.length > 16) {
                            return (
                              (e = this.cache.slice(0, 16)),
                              (this.cache = this.cache.slice(16)),
                              e
                            );
                          }
                        } else if (this.cache.length >= 16) {
                          return (
                            (e = this.cache.slice(0, 16)),
                            (this.cache = this.cache.slice(16)),
                            e
                          );
                        }
                        return null;
                      }),
                      (h.prototype.flush = function () {
                        if (this.cache.length) return this.cache;
                      }),
                      (r.createDecipher = function (t, e) {
                        const r = o[t.toLowerCase()];
                        if (!r) throw new TypeError('invalid suite type');
                        const n = u(e, !1, r.key, r.iv);
                        return d(t, n.key, n.iv);
                      }),
                      (r.createDecipheriv = d);
                    },
                    {
                      22: 22, 23: 23, 35: 35, 38: 38, 435: 435, 467: 467, 514: 514, 68: 68,
                    },
                  ],
                  26: [
                    function (t, e, r) {
                      const n = t(35);
                      const i = t(23);
                      const o = t(514).Buffer;
                      const a = t(38);
                      const s = t(68);
                      const f = t(22);
                      const u = t(435);
                      function c(t, e, r) {
                        s.call(this),
                        (this._cache = new d()),
                        (this._cipher = new f.AES(e)),
                        (this._prev = o.from(r)),
                        (this._mode = t),
                        (this._autopadding = !0);
                      }
                      t(467)(c, s),
                      (c.prototype._update = function (t) {
                        let e; let
                          r;
                        this._cache.add(t);
                        for (var n = []; (e = this._cache.get());) (r = this._mode.encrypt(this, e)), n.push(r);
                        return o.concat(n);
                      });
                      const h = o.alloc(16, 16);
                      function d() {
                        this.cache = o.allocUnsafe(0);
                      }
                      function l(t, e, r) {
                        const s = n[t.toLowerCase()];
                        if (!s) throw new TypeError('invalid suite type');
                        if ((typeof e === 'string' && (e = o.from(e)), e.length !== s.key / 8)) throw new TypeError(`invalid key length ${e.length}`);
                        if (
                          (typeof r === 'string' && (r = o.from(r)),
                          s.mode !== 'GCM' && r.length !== s.iv)
                        ) throw new TypeError(`invalid iv length ${r.length}`);
                        return s.type === 'stream'
                          ? new a(s.module, e, r)
                          : s.type === 'auth'
                            ? new i(s.module, e, r)
                            : new c(s.module, e, r);
                      }
                      (c.prototype._final = function () {
                        let t = this._cache.flush();
                        if (this._autopadding) return (t = this._mode.encrypt(this, t)), this._cipher.scrub(), t;
                        if (!t.equals(h)) {
                          throw (this._cipher.scrub(),
                          new Error('data not multiple of block length'));
                        }
                      }),
                      (c.prototype.setAutoPadding = function (t) {
                        return (this._autopadding = !!t), this;
                      }),
                      (d.prototype.add = function (t) {
                        this.cache = o.concat([this.cache, t]);
                      }),
                      (d.prototype.get = function () {
                        if (this.cache.length > 15) {
                          const t = this.cache.slice(0, 16);
                          return (this.cache = this.cache.slice(16)), t;
                        }
                        return null;
                      }),
                      (d.prototype.flush = function () {
                        for (
                          var t = 16 - this.cache.length, e = o.allocUnsafe(t), r = -1;
                          ++r < t;

                        ) e.writeUInt8(t, r);
                        return o.concat([this.cache, e]);
                      }),
                      (r.createCipheriv = l),
                      (r.createCipher = function (t, e) {
                        const r = n[t.toLowerCase()];
                        if (!r) throw new TypeError('invalid suite type');
                        const i = u(e, !1, r.key, r.iv);
                        return l(t, i.key, i.iv);
                      });
                    },
                    {
                      22: 22, 23: 23, 35: 35, 38: 38, 435: 435, 467: 467, 514: 514, 68: 68,
                    },
                  ],
                  27: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      const i = n.alloc(16, 0);
                      function o(t) {
                        const e = n.allocUnsafe(16);
                        return (
                          e.writeUInt32BE(t[0] >>> 0, 0),
                          e.writeUInt32BE(t[1] >>> 0, 4),
                          e.writeUInt32BE(t[2] >>> 0, 8),
                          e.writeUInt32BE(t[3] >>> 0, 12),
                          e
                        );
                      }
                      function a(t) {
                        (this.h = t),
                        (this.state = n.alloc(16, 0)),
                        (this.cache = n.allocUnsafe(0));
                      }
                      (a.prototype.ghash = function (t) {
                        for (let e = -1; ++e < t.length;) this.state[e] ^= t[e];
                        this._multiply();
                      }),
                      (a.prototype._multiply = function () {
                        for (
                          var t,
                            e,
                            r,
                            n = [
                              (t = this.h).readUInt32BE(0),
                              t.readUInt32BE(4),
                              t.readUInt32BE(8),
                              t.readUInt32BE(12),
                            ],
                            i = [0, 0, 0, 0],
                            a = -1;
                          ++a < 128;

                        ) {
                          for (
                            (this.state[~~(a / 8)] & (1 << (7 - (a % 8)))) != 0
                                  && ((i[0] ^= n[0]), (i[1] ^= n[1]), (i[2] ^= n[2]), (i[3] ^= n[3])),
                            r = (1 & n[3]) != 0,
                            e = 3;
                            e > 0;
                            e--
                          ) n[e] = (n[e] >>> 1) | ((1 & n[e - 1]) << 31);
                          (n[0] >>>= 1), r && (n[0] ^= (225 << 24));
                        }
                        this.state = o(i);
                      }),
                      (a.prototype.update = function (t) {
                        let e;
                        for (this.cache = n.concat([this.cache, t]); this.cache.length >= 16;) {
                          (e = this.cache.slice(0, 16)),
                          (this.cache = this.cache.slice(16)),
                          this.ghash(e);
                        }
                      }),
                      (a.prototype.final = function (t, e) {
                        return (
                          this.cache.length && this.ghash(n.concat([this.cache, i], 16)),
                          this.ghash(o([0, t, 0, e])),
                          this.state
                        );
                      }),
                      (e.exports = a);
                    },
                    { 514: 514 },
                  ],
                  28: [
                    function (t, e, r) {
                      e.exports = function (t) {
                        for (var e, r = t.length; r--;) {
                          if ((e = t.readUInt8(r)) !== 255) {
                            e++, t.writeUInt8(e, r);
                            break;
                          }
                          t.writeUInt8(0, r);
                        }
                      };
                    },
                    {},
                  ],
                  29: [
                    function (t, e, r) {
                      const n = t(66);
                      (r.encrypt = function (t, e) {
                        const r = n(e, t._prev);
                        return (t._prev = t._cipher.encryptBlock(r)), t._prev;
                      }),
                      (r.decrypt = function (t, e) {
                        const r = t._prev;
                        t._prev = e;
                        const i = t._cipher.decryptBlock(e);
                        return n(i, r);
                      });
                    },
                    { 66: 66 },
                  ],
                  30: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      const i = t(66);
                      function o(t, e, r) {
                        const o = e.length;
                        const a = i(e, t._cache);
                        return (
                          (t._cache = t._cache.slice(o)),
                          (t._prev = n.concat([t._prev, r ? e : a])),
                          a
                        );
                      }
                      r.encrypt = function (t, e, r) {
                        for (var i, a = n.allocUnsafe(0); e.length;) {
                          if (
                            (t._cache.length === 0
                                && ((t._cache = t._cipher.encryptBlock(t._prev)),
                                (t._prev = n.allocUnsafe(0))),
                            !(t._cache.length <= e.length))
                          ) {
                            a = n.concat([a, o(t, e, r)]);
                            break;
                          }
                          (i = t._cache.length),
                          (a = n.concat([a, o(t, e.slice(0, i), r)])),
                          (e = e.slice(i));
                        }
                        return a;
                      };
                    },
                    { 514: 514, 66: 66 },
                  ],
                  31: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      function i(t, e, r) {
                        for (var n, i, a = -1, s = 0; ++a < 8;) {
                          (n = e & (1 << (7 - a)) ? 128 : 0),
                          (s += (128 & (i = t._cipher.encryptBlock(t._prev)[0] ^ n)) >> a % 8),
                          (t._prev = o(t._prev, r ? n : i));
                        }
                        return s;
                      }
                      function o(t, e) {
                        const r = t.length;
                        let i = -1;
                        const o = n.allocUnsafe(t.length);
                        for (t = n.concat([t, n.from([e])]); ++i < r;) o[i] = (t[i] << 1) | (t[i + 1] >> 7);
                        return o;
                      }
                      r.encrypt = function (t, e, r) {
                        for (var o = e.length, a = n.allocUnsafe(o), s = -1; ++s < o;) a[s] = i(t, e[s], r);
                        return a;
                      };
                    },
                    { 514: 514 },
                  ],
                  32: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      function i(t, e, r) {
                        const i = t._cipher.encryptBlock(t._prev)[0] ^ e;
                        return (t._prev = n.concat([t._prev.slice(1), n.from([r ? e : i])])), i;
                      }
                      r.encrypt = function (t, e, r) {
                        for (var o = e.length, a = n.allocUnsafe(o), s = -1; ++s < o;) a[s] = i(t, e[s], r);
                        return a;
                      };
                    },
                    { 514: 514 },
                  ],
                  33: [
                    function (t, e, r) {
                      const n = t(66);
                      const i = t(514).Buffer;
                      const o = t(28);
                      function a(t) {
                        const e = t._cipher.encryptBlockRaw(t._prev);
                        return o(t._prev), e;
                      }
                      r.encrypt = function (t, e) {
                        const r = Math.ceil(e.length / 16);
                        const o = t._cache.length;
                        t._cache = i.concat([t._cache, i.allocUnsafe(16 * r)]);
                        for (let s = 0; s < r; s++) {
                          const f = a(t);
                          const u = o + 16 * s;
                          t._cache.writeUInt32BE(f[0], u + 0),
                          t._cache.writeUInt32BE(f[1], u + 4),
                          t._cache.writeUInt32BE(f[2], u + 8),
                          t._cache.writeUInt32BE(f[3], u + 12);
                        }
                        const c = t._cache.slice(0, e.length);
                        return (t._cache = t._cache.slice(e.length)), n(e, c);
                      };
                    },
                    { 28: 28, 514: 514, 66: 66 },
                  ],
                  34: [
                    function (t, e, r) {
                      (r.encrypt = function (t, e) {
                        return t._cipher.encryptBlock(e);
                      }),
                      (r.decrypt = function (t, e) {
                        return t._cipher.decryptBlock(e);
                      });
                    },
                    {},
                  ],
                  35: [
                    function (t, e, r) {
                      const n = {
                        ECB: t(34),
                        CBC: t(29),
                        CFB: t(30),
                        CFB8: t(32),
                        CFB1: t(31),
                        OFB: t(37),
                        CTR: t(33),
                        GCM: t(33),
                      };
                      const i = t(36);
                      for (const o in i) i[o].module = n[i[o].mode];
                      e.exports = i;
                    },
                    {
                      29: 29, 30: 30, 31: 31, 32: 32, 33: 33, 34: 34, 36: 36, 37: 37,
                    },
                  ],
                  36: [
                    function (t, e, r) {
                      e.exports = {
                        'aes-128-ecb': {
                          cipher: 'AES',
                          key: 128,
                          iv: 0,
                          mode: 'ECB',
                          type: 'block',
                        },
                        'aes-192-ecb': {
                          cipher: 'AES',
                          key: 192,
                          iv: 0,
                          mode: 'ECB',
                          type: 'block',
                        },
                        'aes-256-ecb': {
                          cipher: 'AES',
                          key: 256,
                          iv: 0,
                          mode: 'ECB',
                          type: 'block',
                        },
                        'aes-128-cbc': {
                          cipher: 'AES',
                          key: 128,
                          iv: 16,
                          mode: 'CBC',
                          type: 'block',
                        },
                        'aes-192-cbc': {
                          cipher: 'AES',
                          key: 192,
                          iv: 16,
                          mode: 'CBC',
                          type: 'block',
                        },
                        'aes-256-cbc': {
                          cipher: 'AES',
                          key: 256,
                          iv: 16,
                          mode: 'CBC',
                          type: 'block',
                        },
                        aes128: {
                          cipher: 'AES', key: 128, iv: 16, mode: 'CBC', type: 'block',
                        },
                        aes192: {
                          cipher: 'AES', key: 192, iv: 16, mode: 'CBC', type: 'block',
                        },
                        aes256: {
                          cipher: 'AES', key: 256, iv: 16, mode: 'CBC', type: 'block',
                        },
                        'aes-128-cfb': {
                          cipher: 'AES',
                          key: 128,
                          iv: 16,
                          mode: 'CFB',
                          type: 'stream',
                        },
                        'aes-192-cfb': {
                          cipher: 'AES',
                          key: 192,
                          iv: 16,
                          mode: 'CFB',
                          type: 'stream',
                        },
                        'aes-256-cfb': {
                          cipher: 'AES',
                          key: 256,
                          iv: 16,
                          mode: 'CFB',
                          type: 'stream',
                        },
                        'aes-128-cfb8': {
                          cipher: 'AES',
                          key: 128,
                          iv: 16,
                          mode: 'CFB8',
                          type: 'stream',
                        },
                        'aes-192-cfb8': {
                          cipher: 'AES',
                          key: 192,
                          iv: 16,
                          mode: 'CFB8',
                          type: 'stream',
                        },
                        'aes-256-cfb8': {
                          cipher: 'AES',
                          key: 256,
                          iv: 16,
                          mode: 'CFB8',
                          type: 'stream',
                        },
                        'aes-128-cfb1': {
                          cipher: 'AES',
                          key: 128,
                          iv: 16,
                          mode: 'CFB1',
                          type: 'stream',
                        },
                        'aes-192-cfb1': {
                          cipher: 'AES',
                          key: 192,
                          iv: 16,
                          mode: 'CFB1',
                          type: 'stream',
                        },
                        'aes-256-cfb1': {
                          cipher: 'AES',
                          key: 256,
                          iv: 16,
                          mode: 'CFB1',
                          type: 'stream',
                        },
                        'aes-128-ofb': {
                          cipher: 'AES',
                          key: 128,
                          iv: 16,
                          mode: 'OFB',
                          type: 'stream',
                        },
                        'aes-192-ofb': {
                          cipher: 'AES',
                          key: 192,
                          iv: 16,
                          mode: 'OFB',
                          type: 'stream',
                        },
                        'aes-256-ofb': {
                          cipher: 'AES',
                          key: 256,
                          iv: 16,
                          mode: 'OFB',
                          type: 'stream',
                        },
                        'aes-128-ctr': {
                          cipher: 'AES',
                          key: 128,
                          iv: 16,
                          mode: 'CTR',
                          type: 'stream',
                        },
                        'aes-192-ctr': {
                          cipher: 'AES',
                          key: 192,
                          iv: 16,
                          mode: 'CTR',
                          type: 'stream',
                        },
                        'aes-256-ctr': {
                          cipher: 'AES',
                          key: 256,
                          iv: 16,
                          mode: 'CTR',
                          type: 'stream',
                        },
                        'aes-128-gcm': {
                          cipher: 'AES',
                          key: 128,
                          iv: 12,
                          mode: 'GCM',
                          type: 'auth',
                        },
                        'aes-192-gcm': {
                          cipher: 'AES',
                          key: 192,
                          iv: 12,
                          mode: 'GCM',
                          type: 'auth',
                        },
                        'aes-256-gcm': {
                          cipher: 'AES',
                          key: 256,
                          iv: 12,
                          mode: 'GCM',
                          type: 'auth',
                        },
                      };
                    },
                    {},
                  ],
                  37: [
                    function (t, e, r) {
                      (function (e) {
                        (function () {
                          const n = t(66);
                          function i(t) {
                            return (t._prev = t._cipher.encryptBlock(t._prev)), t._prev;
                          }
                          r.encrypt = function (t, r) {
                            for (; t._cache.length < r.length;) t._cache = e.concat([t._cache, i(t)]);
                            const o = t._cache.slice(0, r.length);
                            return (t._cache = t._cache.slice(r.length)), n(r, o);
                          };
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    { 66: 66, 67: 67 },
                  ],
                  38: [
                    function (t, e, r) {
                      const n = t(22);
                      const i = t(514).Buffer;
                      const o = t(68);
                      function a(t, e, r, a) {
                        o.call(this),
                        (this._cipher = new n.AES(e)),
                        (this._prev = i.from(r)),
                        (this._cache = i.allocUnsafe(0)),
                        (this._secCache = i.allocUnsafe(0)),
                        (this._decrypt = a),
                        (this._mode = t);
                      }
                      t(467)(a, o),
                      (a.prototype._update = function (t) {
                        return this._mode.encrypt(this, t, this._decrypt);
                      }),
                      (a.prototype._final = function () {
                        this._cipher.scrub();
                      }),
                      (e.exports = a);
                    },
                    {
                      22: 22, 467: 467, 514: 514, 68: 68,
                    },
                  ],
                  39: [
                    function (t, e, r) {
                      const n = t(40);
                      const i = t(24);
                      const o = t(35);
                      const a = t(41);
                      const s = t(435);
                      function f(t, e, r) {
                        if (((t = t.toLowerCase()), o[t])) return i.createCipheriv(t, e, r);
                        if (a[t]) return new n({ key: e, iv: r, mode: t });
                        throw new TypeError('invalid suite type');
                      }
                      function u(t, e, r) {
                        if (((t = t.toLowerCase()), o[t])) return i.createDecipheriv(t, e, r);
                        if (a[t]) {
                          return new n({
                            key: e, iv: r, mode: t, decrypt: !0,
                          });
                        }
                        throw new TypeError('invalid suite type');
                      }
                      (r.createCipher = r.Cipher = function (t, e) {
                        let r; let
                          n;
                        if (((t = t.toLowerCase()), o[t])) (r = o[t].key), (n = o[t].iv);
                        else {
                          if (!a[t]) throw new TypeError('invalid suite type');
                          (r = 8 * a[t].key), (n = a[t].iv);
                        }
                        const i = s(e, !1, r, n);
                        return f(t, i.key, i.iv);
                      }),
                      (r.createCipheriv = r.Cipheriv = f),
                      (r.createDecipher = r.Decipher = function (t, e) {
                        let r; let
                          n;
                        if (((t = t.toLowerCase()), o[t])) (r = o[t].key), (n = o[t].iv);
                        else {
                          if (!a[t]) throw new TypeError('invalid suite type');
                          (r = 8 * a[t].key), (n = a[t].iv);
                        }
                        const i = s(e, !1, r, n);
                        return u(t, i.key, i.iv);
                      }),
                      (r.createDecipheriv = r.Decipheriv = u),
                      (r.listCiphers = r.getCiphers = function () {
                        return Object.keys(a).concat(i.getCiphers());
                      });
                    },
                    {
                      24: 24, 35: 35, 40: 40, 41: 41, 435: 435,
                    },
                  ],
                  40: [
                    function (t, e, r) {
                      const n = t(68);
                      const i = t(406);
                      const o = t(467);
                      const a = t(514).Buffer;
                      const s = {
                        'des-ede3-cbc': i.CBC.instantiate(i.EDE),
                        'des-ede3': i.EDE,
                        'des-ede-cbc': i.CBC.instantiate(i.EDE),
                        'des-ede': i.EDE,
                        'des-cbc': i.CBC.instantiate(i.DES),
                        'des-ecb': i.DES,
                      };
                      function f(t) {
                        n.call(this);
                        let e;
                        const r = t.mode.toLowerCase();
                        const i = s[r];
                        e = t.decrypt ? 'decrypt' : 'encrypt';
                        let o = t.key;
                        a.isBuffer(o) || (o = a.from(o)),
                        (r !== 'des-ede' && r !== 'des-ede-cbc')
                              || (o = a.concat([o, o.slice(0, 8)]));
                        let f = t.iv;
                        a.isBuffer(f) || (f = a.from(f)),
                        (this._des = i.create({ key: o, iv: f, type: e }));
                      }
                      (s.des = s['des-cbc']),
                      (s.des3 = s['des-ede3-cbc']),
                      (e.exports = f),
                      o(f, n),
                      (f.prototype._update = function (t) {
                        return a.from(this._des.update(t));
                      }),
                      (f.prototype._final = function () {
                        return a.from(this._des.final());
                      });
                    },
                    {
                      406: 406, 467: 467, 514: 514, 68: 68,
                    },
                  ],
                  41: [
                    function (t, e, r) {
                      (r['des-ecb'] = { key: 8, iv: 0 }),
                      (r['des-cbc'] = r.des = { key: 8, iv: 8 }),
                      (r['des-ede3-cbc'] = r.des3 = { key: 24, iv: 8 }),
                      (r['des-ede3'] = { key: 24, iv: 0 }),
                      (r['des-ede-cbc'] = { key: 16, iv: 8 }),
                      (r['des-ede'] = { key: 16, iv: 0 });
                    },
                    {},
                  ],
                  42: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          const n = t(19);
                          const i = t(497);
                          function o(t) {
                            let e;
                            const r = t.modulus.byteLength();
                            do {
                              e = new n(i(r));
                            } while (
                              e.cmp(t.modulus) >= 0
                                || !e.umod(t.prime1)
                                || !e.umod(t.prime2)
                            );
                            return e;
                          }
                          function a(t, e) {
                            const i = (function (t) {
                              const e = o(t);
                              return {
                                blinder: e
                                  .toRed(n.mont(t.modulus))
                                  .redPow(new n(t.publicExponent))
                                  .fromRed(),
                                unblinder: e.invm(t.modulus),
                              };
                            }(e));
                            const a = e.modulus.byteLength();
                            const s = new n(t).mul(i.blinder).umod(e.modulus);
                            const f = s.toRed(n.mont(e.prime1));
                            const u = s.toRed(n.mont(e.prime2));
                            const c = e.coefficient;
                            const h = e.prime1;
                            const d = e.prime2;
                            const l = f.redPow(e.exponent1).fromRed();
                            const p = u.redPow(e.exponent2).fromRed();
                            const b = l
                              .isub(p)
                              .imul(c)
                              .umod(h)
                              .imul(d);
                            return p
                              .iadd(b)
                              .imul(i.unblinder)
                              .umod(e.modulus)
                              .toArrayLike(r, 'be', a);
                          }
                          (a.getr = o), (e.exports = a);
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    { 19: 19, 497: 497, 67: 67 },
                  ],
                  43: [
                    function (t, e, r) {
                      e.exports = t(44);
                    },
                    { 44: 44 },
                  ],
                  44: [
                    function (t, e, r) {
                      e.exports = {
                        sha224WithRSAEncryption: {
                          sign: 'rsa',
                          hash: 'sha224',
                          id: '302d300d06096086480165030402040500041c',
                        },
                        'RSA-SHA224': {
                          sign: 'ecdsa/rsa',
                          hash: 'sha224',
                          id: '302d300d06096086480165030402040500041c',
                        },
                        sha256WithRSAEncryption: {
                          sign: 'rsa',
                          hash: 'sha256',
                          id: '3031300d060960864801650304020105000420',
                        },
                        'RSA-SHA256': {
                          sign: 'ecdsa/rsa',
                          hash: 'sha256',
                          id: '3031300d060960864801650304020105000420',
                        },
                        sha384WithRSAEncryption: {
                          sign: 'rsa',
                          hash: 'sha384',
                          id: '3041300d060960864801650304020205000430',
                        },
                        'RSA-SHA384': {
                          sign: 'ecdsa/rsa',
                          hash: 'sha384',
                          id: '3041300d060960864801650304020205000430',
                        },
                        sha512WithRSAEncryption: {
                          sign: 'rsa',
                          hash: 'sha512',
                          id: '3051300d060960864801650304020305000440',
                        },
                        'RSA-SHA512': {
                          sign: 'ecdsa/rsa',
                          hash: 'sha512',
                          id: '3051300d060960864801650304020305000440',
                        },
                        'RSA-SHA1': {
                          sign: 'rsa',
                          hash: 'sha1',
                          id: '3021300906052b0e03021a05000414',
                        },
                        'ecdsa-with-SHA1': { sign: 'ecdsa', hash: 'sha1', id: '' },
                        sha256: { sign: 'ecdsa', hash: 'sha256', id: '' },
                        sha224: { sign: 'ecdsa', hash: 'sha224', id: '' },
                        sha384: { sign: 'ecdsa', hash: 'sha384', id: '' },
                        sha512: { sign: 'ecdsa', hash: 'sha512', id: '' },
                        'DSA-SHA': { sign: 'dsa', hash: 'sha1', id: '' },
                        'DSA-SHA1': { sign: 'dsa', hash: 'sha1', id: '' },
                        DSA: { sign: 'dsa', hash: 'sha1', id: '' },
                        'DSA-WITH-SHA224': { sign: 'dsa', hash: 'sha224', id: '' },
                        'DSA-SHA224': { sign: 'dsa', hash: 'sha224', id: '' },
                        'DSA-WITH-SHA256': { sign: 'dsa', hash: 'sha256', id: '' },
                        'DSA-SHA256': { sign: 'dsa', hash: 'sha256', id: '' },
                        'DSA-WITH-SHA384': { sign: 'dsa', hash: 'sha384', id: '' },
                        'DSA-SHA384': { sign: 'dsa', hash: 'sha384', id: '' },
                        'DSA-WITH-SHA512': { sign: 'dsa', hash: 'sha512', id: '' },
                        'DSA-SHA512': { sign: 'dsa', hash: 'sha512', id: '' },
                        'DSA-RIPEMD160': { sign: 'dsa', hash: 'rmd160', id: '' },
                        ripemd160WithRSA: {
                          sign: 'rsa',
                          hash: 'rmd160',
                          id: '3021300906052b2403020105000414',
                        },
                        'RSA-RIPEMD160': {
                          sign: 'rsa',
                          hash: 'rmd160',
                          id: '3021300906052b2403020105000414',
                        },
                        md5WithRSAEncryption: {
                          sign: 'rsa',
                          hash: 'md5',
                          id: '3020300c06082a864886f70d020505000410',
                        },
                        'RSA-MD5': {
                          sign: 'rsa',
                          hash: 'md5',
                          id: '3020300c06082a864886f70d020505000410',
                        },
                      };
                    },
                    {},
                  ],
                  45: [
                    function (t, e, r) {
                      e.exports = {
                        '1.3.132.0.10': 'secp256k1',
                        '1.3.132.0.33': 'p224',
                        '1.2.840.10045.3.1.1': 'p192',
                        '1.2.840.10045.3.1.7': 'p256',
                        '1.3.132.0.34': 'p384',
                        '1.3.132.0.35': 'p521',
                      };
                    },
                    {},
                  ],
                  46: [
                    function (t, e, r) {
                      const n = t(64).Buffer;
                      const i = t(401);
                      const o = t(63);
                      const a = t(467);
                      const s = t(47);
                      const f = t(48);
                      const u = t(44);
                      function c(t) {
                        o.Writable.call(this);
                        const e = u[t];
                        if (!e) throw new Error('Unknown message digest');
                        (this._hashType = e.hash),
                        (this._hash = i(e.hash)),
                        (this._tag = e.id),
                        (this._signType = e.sign);
                      }
                      function h(t) {
                        o.Writable.call(this);
                        const e = u[t];
                        if (!e) throw new Error('Unknown message digest');
                        (this._hash = i(e.hash)), (this._tag = e.id), (this._signType = e.sign);
                      }
                      function d(t) {
                        return new c(t);
                      }
                      function l(t) {
                        return new h(t);
                      }
                      Object.keys(u).forEach((t) => {
                        (u[t].id = n.from(u[t].id, 'hex')), (u[t.toLowerCase()] = u[t]);
                      }),
                      a(c, o.Writable),
                      (c.prototype._write = function (t, e, r) {
                        this._hash.update(t), r();
                      }),
                      (c.prototype.update = function (t, e) {
                        return (
                          typeof t === 'string' && (t = n.from(t, e)), this._hash.update(t), this
                        );
                      }),
                      (c.prototype.sign = function (t, e) {
                        this.end();
                        const r = this._hash.digest();
                        const n = s(r, t, this._hashType, this._signType, this._tag);
                        return e ? n.toString(e) : n;
                      }),
                      a(h, o.Writable),
                      (h.prototype._write = function (t, e, r) {
                        this._hash.update(t), r();
                      }),
                      (h.prototype.update = function (t, e) {
                        return (
                          typeof t === 'string' && (t = n.from(t, e)), this._hash.update(t), this
                        );
                      }),
                      (h.prototype.verify = function (t, e, r) {
                        typeof e === 'string' && (e = n.from(e, r)), this.end();
                        const i = this._hash.digest();
                        return f(e, i, t, this._signType, this._tag);
                      }),
                      (e.exports = {
                        Sign: d, Verify: l, createSign: d, createVerify: l,
                      });
                    },
                    {
                      401: 401, 44: 44, 467: 467, 47: 47, 48: 48, 63: 63, 64: 64,
                    },
                  ],
                  47: [
                    function (t, e, r) {
                      const n = t(64).Buffer;
                      const i = t(403);
                      const o = t(42);
                      const a = t(417).ec;
                      const s = t(19);
                      const f = t(480);
                      const u = t(45);
                      function c(t, e, r, o) {
                        if ((t = n.from(t.toArray())).length < e.byteLength()) {
                          const a = n.alloc(e.byteLength() - t.length);
                          t = n.concat([a, t]);
                        }
                        const s = r.length;
                        const f = (function (t, e) {
                          t = (t = h(t, e)).mod(e);
                          let r = n.from(t.toArray());
                          if (r.length < e.byteLength()) {
                            const i = n.alloc(e.byteLength() - r.length);
                            r = n.concat([i, r]);
                          }
                          return r;
                        }(r, e));
                        let u = n.alloc(s);
                        u.fill(1);
                        let c = n.alloc(s);
                        return (
                          (c = i(o, c)
                            .update(u)
                            .update(n.from([0]))
                            .update(t)
                            .update(f)
                            .digest()),
                          (u = i(o, c)
                            .update(u)
                            .digest()),
                          {
                            k: (c = i(o, c)
                              .update(u)
                              .update(n.from([1]))
                              .update(t)
                              .update(f)
                              .digest()),
                            v: (u = i(o, c)
                              .update(u)
                              .digest()),
                          }
                        );
                      }
                      function h(t, e) {
                        const r = new s(t);
                        const n = (t.length << 3) - e.bitLength();
                        return n > 0 && r.ishrn(n), r;
                      }
                      function d(t, e, r) {
                        let o; let
                          a;
                        do {
                          for (o = n.alloc(0); 8 * o.length < t.bitLength();) {
                            (e.v = i(r, e.k)
                              .update(e.v)
                              .digest()),
                            (o = n.concat([o, e.v]));
                          }
                          (a = h(o, t)),
                          (e.k = i(r, e.k)
                            .update(e.v)
                            .update(n.from([0]))
                            .digest()),
                          (e.v = i(r, e.k)
                            .update(e.v)
                            .digest());
                        } while (a.cmp(t) !== -1);
                        return a;
                      }
                      function l(t, e, r, n) {
                        return t
                          .toRed(s.mont(r))
                          .redPow(e)
                          .fromRed()
                          .mod(n);
                      }
                      (e.exports = function (t, e, r, i, p) {
                        const b = f(e);
                        if (b.curve) {
                          if (i !== 'ecdsa' && i !== 'ecdsa/rsa') throw new Error('wrong private key type');
                          return (function (t, e) {
                            const r = u[e.curve.join('.')];
                            if (!r) throw new Error(`unknown curve ${e.curve.join('.')}`);
                            const i = new a(r).keyFromPrivate(e.privateKey).sign(t);
                            return n.from(i.toDER());
                          }(t, b));
                        }
                        if (b.type === 'dsa') {
                          if (i !== 'dsa') throw new Error('wrong private key type');
                          return (function (t, e, r) {
                            let i;
                            const o = e.params.priv_key;
                            const a = e.params.p;
                            const f = e.params.q;
                            const u = e.params.g;
                            let p = new s(0);
                            const b = h(t, f).mod(f);
                            let v = !1;
                            const g = c(o, f, t, r);
                            for (; !1 === v;) {
                              (p = l(u, (i = d(f, g, r)), a, f)),
                              (v = i
                                .invm(f)
                                .imul(b.add(o.mul(p)))
                                .mod(f)).cmpn(0)
                                    === 0 && ((v = !1), (p = new s(0)));
                            }
                            return (function (t, e) {
                              (t = t.toArray()),
                              (e = e.toArray()),
                              128 & t[0] && (t = [0].concat(t));
                              128 & e[0] && (e = [0].concat(e));
                              let r = [48, t.length + e.length + 4, 2, t.length];
                              return (r = r.concat(t, [2, e.length], e)), n.from(r);
                            }(p, v));
                          }(t, b, r));
                        }
                        if (i !== 'rsa' && i !== 'ecdsa/rsa') throw new Error('wrong private key type');
                        t = n.concat([p, t]);
                        for (
                          var v = b.modulus.byteLength(), g = [0, 1];
                          t.length + g.length + 1 < v;

                        ) g.push(255);
                        g.push(0);
                        for (let y = -1; ++y < t.length;) g.push(t[y]);
                        return o(g, b);
                      }),
                      (e.exports.getKey = c),
                      (e.exports.makeKey = d);
                    },
                    {
                      19: 19, 403: 403, 417: 417, 42: 42, 45: 45, 480: 480, 64: 64,
                    },
                  ],
                  48: [
                    function (t, e, r) {
                      const n = t(64).Buffer;
                      const i = t(19);
                      const o = t(417).ec;
                      const a = t(480);
                      const s = t(45);
                      function f(t, e) {
                        if (t.cmpn(0) <= 0) throw new Error('invalid sig');
                        if (t.cmp(e) >= e) throw new Error('invalid sig');
                      }
                      e.exports = function (t, e, r, u, c) {
                        const h = a(r);
                        if (h.type === 'ec') {
                          if (u !== 'ecdsa' && u !== 'ecdsa/rsa') throw new Error('wrong public key type');
                          return (function (t, e, r) {
                            const n = s[r.data.algorithm.curve.join('.')];
                            if (!n) {
                              throw new Error(
                                `unknown curve ${r.data.algorithm.curve.join('.')}`,
                              );
                            }
                            const i = new o(n);
                            const a = r.data.subjectPrivateKey.data;
                            return i.verify(e, t, a);
                          }(t, e, h));
                        }
                        if (h.type === 'dsa') {
                          if (u !== 'dsa') throw new Error('wrong public key type');
                          return (function (t, e, r) {
                            const n = r.data.p;
                            const o = r.data.q;
                            const s = r.data.g;
                            const u = r.data.pub_key;
                            const c = a.signature.decode(t, 'der');
                            const h = c.s;
                            const d = c.r;
                            f(h, o), f(d, o);
                            const l = i.mont(n);
                            const p = h.invm(o);
                            return (
                              s
                                .toRed(l)
                                .redPow(new i(e).mul(p).mod(o))
                                .fromRed()
                                .mul(
                                  u
                                    .toRed(l)
                                    .redPow(d.mul(p).mod(o))
                                    .fromRed(),
                                )
                                .mod(n)
                                .mod(o)
                                .cmp(d)
                                === 0
                            );
                          }(t, e, h));
                        }
                        if (u !== 'rsa' && u !== 'ecdsa/rsa') throw new Error('wrong public key type');
                        e = n.concat([c, e]);
                        for (
                          var d = h.modulus.byteLength(), l = [1], p = 0;
                          e.length + l.length + 2 < d;

                        ) l.push(255), p++;
                        l.push(0);
                        for (var b = -1; ++b < e.length;) l.push(e[b]);
                        l = n.from(l);
                        const v = i.mont(h.modulus);
                        (t = (t = new i(t).toRed(v)).redPow(new i(h.publicExponent))),
                        (t = n.from(t.fromRed().toArray()));
                        let g = p < 8 ? 1 : 0;
                        for (
                          d = Math.min(t.length, l.length),
                          t.length !== l.length && (g = 1),
                          b = -1;
                          ++b < d;

                        ) g |= t[b] ^ l[b];
                        return g === 0;
                      };
                    },
                    {
                      19: 19, 417: 417, 45: 45, 480: 480, 64: 64,
                    },
                  ],
                  49: [
                    function (t, e, r) {
                      const n = {};
                      function i(t, e, r) {
                        r || (r = Error);
                        const i = (function (t) {
                          let r; let
                            n;
                          function i(r, n, i) {
                            return (
                              t.call(
                                this,
                                (function (t, r, n) {
                                  return typeof e === 'string' ? e : e(t, r, n);
                                }(r, n, i)),
                              ) || this
                            );
                          }
                          return (
                            (n = t),
                            ((r = i).prototype = Object.create(n.prototype)),
                            (r.prototype.constructor = r),
                            (r.__proto__ = n),
                            i
                          );
                        }(r));
                        (i.prototype.name = r.name), (i.prototype.code = t), (n[t] = i);
                      }
                      function o(t, e) {
                        if (Array.isArray(t)) {
                          const r = t.length;
                          return (
                            (t = t.map((t) => String(t))),
                            r > 2
                              ? 'one of '
                                .concat(e, ' ')
                                .concat(t.slice(0, r - 1).join(', '), ', or ') + t[r - 1]
                              : r === 2
                                ? 'one of '
                                  .concat(e, ' ')
                                  .concat(t[0], ' or ')
                                  .concat(t[1])
                                : 'of '.concat(e, ' ').concat(t[0])
                          );
                        }
                        return 'of '.concat(e, ' ').concat(String(t));
                      }
                      i(
                        'ERR_INVALID_OPT_VALUE',
                        (t, e) => `The value "${e}" is invalid for option "${t}"`,
                        TypeError,
                      ),
                      i(
                        'ERR_INVALID_ARG_TYPE',
                        (t, e, r) => {
                          let n; let i; let a; let
                            s;
                          if (
                            (typeof e === 'string'
                                && ((i = 'not '), e.substr(!a || a < 0 ? 0 : +a, i.length) === i)
                              ? ((n = 'must not be'), (e = e.replace(/^not /, '')))
                              : (n = 'must be'),
                            (function (t, e, r) {
                              return (
                                (void 0 === r || r > t.length) && (r = t.length),
                                t.substring(r - e.length, r) === e
                              );
                            }(t, ' argument')))
                          ) {
                            s = 'The '
                              .concat(t, ' ')
                              .concat(n, ' ')
                              .concat(o(e, 'type'));
                          } else {
                            const f = (function (t, e, r) {
                              return (
                                typeof r !== 'number' && (r = 0),
                                !(r + e.length > t.length) && t.indexOf(e, r) !== -1
                              );
                            }(t, '.'))
                              ? 'property'
                              : 'argument';
                            s = 'The "'
                              .concat(t, '" ')
                              .concat(f, ' ')
                              .concat(n, ' ')
                              .concat(o(e, 'type'));
                          }
                          return (s += '. Received type '.concat(typeof r));
                        },
                        TypeError,
                      ),
                      i('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF'),
                      i('ERR_METHOD_NOT_IMPLEMENTED', (t) => `The ${t} method is not implemented`),
                      i('ERR_STREAM_PREMATURE_CLOSE', 'Premature close'),
                      i('ERR_STREAM_DESTROYED', (t) => `Cannot call ${t} after a stream was destroyed`),
                      i('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times'),
                      i('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable'),
                      i('ERR_STREAM_WRITE_AFTER_END', 'write after end'),
                      i(
                        'ERR_STREAM_NULL_VALUES',
                        'May not write null values to stream',
                        TypeError,
                      ),
                      i(
                        'ERR_UNKNOWN_ENCODING',
                        (t) => `Unknown encoding: ${t}`,
                        TypeError,
                      ),
                      i(
                        'ERR_STREAM_UNSHIFT_AFTER_END_EVENT',
                        'stream.unshift() after end event',
                      ),
                      (e.exports.codes = n);
                    },
                    {},
                  ],
                  50: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          const n = Object.keys
                              || function (t) {
                                const e = [];
                                for (const r in t) e.push(r);
                                return e;
                              };
                          e.exports = u;
                          const i = t(52);
                          const o = t(54);
                          t(467)(u, i);
                          for (let a = n(o.prototype), s = 0; s < a.length; s++) {
                            const f = a[s];
                            u.prototype[f] || (u.prototype[f] = o.prototype[f]);
                          }
                          function u(t) {
                            if (!(this instanceof u)) return new u(t);
                            i.call(this, t),
                            o.call(this, t),
                            (this.allowHalfOpen = !0),
                            t
                                  && (!1 === t.readable && (this.readable = !1),
                                  !1 === t.writable && (this.writable = !1),
                                  !1 === t.allowHalfOpen
                                    && ((this.allowHalfOpen = !1), this.once('end', c)));
                          }
                          function c() {
                            this._writableState.ended || r.nextTick(h, this);
                          }
                          function h(t) {
                            t.end();
                          }
                          Object.defineProperty(u.prototype, 'writableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._writableState.highWaterMark;
                            },
                          }),
                          Object.defineProperty(u.prototype, 'writableBuffer', {
                            enumerable: !1,
                            get() {
                              return this._writableState && this._writableState.getBuffer();
                            },
                          }),
                          Object.defineProperty(u.prototype, 'writableLength', {
                            enumerable: !1,
                            get() {
                              return this._writableState.length;
                            },
                          }),
                          Object.defineProperty(u.prototype, 'destroyed', {
                            enumerable: !1,
                            get() {
                              return (
                                void 0 !== this._readableState
                                    && void 0 !== this._writableState
                                    && this._readableState.destroyed
                                    && this._writableState.destroyed
                              );
                            },
                            set(t) {
                              void 0 !== this._readableState
                                    && void 0 !== this._writableState
                                    && ((this._readableState.destroyed = t),
                                    (this._writableState.destroyed = t));
                            },
                          });
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    {
                      467: 467, 488: 488, 52: 52, 54: 54,
                    },
                  ],
                  51: [
                    function (t, e, r) {
                      e.exports = i;
                      const n = t(53);
                      function i(t) {
                        if (!(this instanceof i)) return new i(t);
                        n.call(this, t);
                      }
                      t(467)(i, n),
                      (i.prototype._transform = function (t, e, r) {
                        r(null, t);
                      });
                    },
                    { 467: 467, 53: 53 },
                  ],
                  52: [
                    function (t, e, r) {
                      (function (r, n) {
                        (function () {
                          let i;
                          (e.exports = k), (k.ReadableState = E);
                          t(434).EventEmitter;
                          const o = function (t, e) {
                            return t.listeners(e).length;
                          };
                          const a = t(62);
                          const s = t(67).Buffer;
                          const f = n.Uint8Array || function () {};
                          let u;
                          const c = t(21);
                          u = c && c.debuglog ? c.debuglog('stream') : function () {};
                          let h;
                          let d;
                          let l;
                          const p = t(56);
                          const b = t(57);
                          const v = t(61).getHighWaterMark;
                          const g = t(49).codes;
                          const y = g.ERR_INVALID_ARG_TYPE;
                          const m = g.ERR_STREAM_PUSH_AFTER_EOF;
                          const w = g.ERR_METHOD_NOT_IMPLEMENTED;
                          const _ = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
                          t(467)(k, a);
                          const S = b.errorOrDestroy;
                          const M = ['error', 'close', 'destroy', 'pause', 'resume'];
                          function E(e, r, n) {
                            (i = i || t(50)),
                            (e = e || {}),
                            typeof n !== 'boolean' && (n = r instanceof i),
                            (this.objectMode = !!e.objectMode),
                            n && (this.objectMode = this.objectMode || !!e.readableObjectMode),
                            (this.highWaterMark = v(this, e, 'readableHighWaterMark', n)),
                            (this.buffer = new p()),
                            (this.length = 0),
                            (this.pipes = null),
                            (this.pipesCount = 0),
                            (this.flowing = null),
                            (this.ended = !1),
                            (this.endEmitted = !1),
                            (this.reading = !1),
                            (this.sync = !0),
                            (this.needReadable = !1),
                            (this.emittedReadable = !1),
                            (this.readableListening = !1),
                            (this.resumeScheduled = !1),
                            (this.paused = !0),
                            (this.emitClose = !1 !== e.emitClose),
                            (this.autoDestroy = !!e.autoDestroy),
                            (this.destroyed = !1),
                            (this.defaultEncoding = e.defaultEncoding || 'utf8'),
                            (this.awaitDrain = 0),
                            (this.readingMore = !1),
                            (this.decoder = null),
                            (this.encoding = null),
                            e.encoding
                                  && (h || (h = t(526).StringDecoder),
                                  (this.decoder = new h(e.encoding)),
                                  (this.encoding = e.encoding));
                          }
                          function k(e) {
                            if (((i = i || t(50)), !(this instanceof k))) return new k(e);
                            const r = this instanceof i;
                            (this._readableState = new E(e, this, r)),
                            (this.readable = !0),
                            e
                                  && (typeof e.read === 'function' && (this._read = e.read),
                                  typeof e.destroy === 'function' && (this._destroy = e.destroy)),
                            a.call(this);
                          }
                          function x(t, e, r, n, i) {
                            u('readableAddChunk', e);
                            let o;
                            const a = t._readableState;
                            if (e === null) {
                              (a.reading = !1),
                              (function (t, e) {
                                if ((u('onEofChunk'), e.ended)) return;
                                if (e.decoder) {
                                  const r = e.decoder.end();
                                  r
                                        && r.length
                                        && (e.buffer.push(r),
                                        (e.length += e.objectMode ? 1 : r.length));
                                }
                                (e.ended = !0),
                                e.sync
                                  ? T(t)
                                  : ((e.needReadable = !1),
                                  e.emittedReadable || ((e.emittedReadable = !0), B(t)));
                              }(t, a));
                            } else if (
                              (i
                                  || (o = (function (t, e) {
                                    let r;
                                    (n = e),
                                    s.isBuffer(n)
                                        || n instanceof f
                                        || typeof e === 'string'
                                        || void 0 === e
                                        || t.objectMode
                                        || (r = new y('chunk', ['string', 'Buffer', 'Uint8Array'], e));
                                    let n;
                                    return r;
                                  }(a, e))),
                              o)
                            ) S(t, o);
                            else if (a.objectMode || (e && e.length > 0)) {
                              if (
                                (typeof e === 'string'
                                    || a.objectMode
                                    || Object.getPrototypeOf(e) === s.prototype
                                    || (e = (function (t) {
                                      return s.from(t);
                                    }(e))),
                                n)
                              ) a.endEmitted ? S(t, new _()) : A(t, a, e, !0);
                              else if (a.ended) S(t, new m());
                              else {
                                if (a.destroyed) return !1;
                                (a.reading = !1),
                                a.decoder && !r
                                  ? ((e = a.decoder.write(e)),
                                  a.objectMode || e.length !== 0 ? A(t, a, e, !1) : P(t, a))
                                  : A(t, a, e, !1);
                              }
                            } else n || ((a.reading = !1), P(t, a));
                            return !a.ended && (a.length < a.highWaterMark || a.length === 0);
                          }
                          function A(t, e, r, n) {
                            e.flowing && e.length === 0 && !e.sync
                              ? ((e.awaitDrain = 0), t.emit('data', r))
                              : ((e.length += e.objectMode ? 1 : r.length),
                              n ? e.buffer.unshift(r) : e.buffer.push(r),
                              e.needReadable && T(t)),
                            P(t, e);
                          }
                          Object.defineProperty(k.prototype, 'destroyed', {
                            enumerable: !1,
                            get() {
                              return (
                                void 0 !== this._readableState && this._readableState.destroyed
                              );
                            },
                            set(t) {
                              this._readableState && (this._readableState.destroyed = t);
                            },
                          }),
                          (k.prototype.destroy = b.destroy),
                          (k.prototype._undestroy = b.undestroy),
                          (k.prototype._destroy = function (t, e) {
                            e(t);
                          }),
                          (k.prototype.push = function (t, e) {
                            let r;
                            const n = this._readableState;
                            return (
                              n.objectMode
                                ? (r = !0)
                                : typeof t === 'string'
                                      && ((e = e || n.defaultEncoding) !== n.encoding
                                        && ((t = s.from(t, e)), (e = '')),
                                      (r = !0)),
                              x(this, t, e, !1, r)
                            );
                          }),
                          (k.prototype.unshift = function (t) {
                            return x(this, t, null, !0, !1);
                          }),
                          (k.prototype.isPaused = function () {
                            return !1 === this._readableState.flowing;
                          }),
                          (k.prototype.setEncoding = function (e) {
                            h || (h = t(526).StringDecoder);
                            const r = new h(e);
                            (this._readableState.decoder = r),
                            (this._readableState.encoding = this._readableState.decoder.encoding);
                            for (var n = this._readableState.buffer.head, i = ''; n !== null;) (i += r.write(n.data)), (n = n.next);
                            return (
                              this._readableState.buffer.clear(),
                              i !== '' && this._readableState.buffer.push(i),
                              (this._readableState.length = i.length),
                              this
                            );
                          });
                          const R = 1073741824;
                          function I(t, e) {
                            return t <= 0 || (e.length === 0 && e.ended)
                              ? 0
                              : e.objectMode
                                ? 1
                                : t != t
                                  ? e.flowing && e.length
                                    ? e.buffer.head.data.length
                                    : e.length
                                  : (t > e.highWaterMark
                                    && (e.highWaterMark = (function (t) {
                                      return (
                                        t >= R
                                          ? (t = R)
                                          : (t--,
                                          (t |= t >>> 1),
                                          (t |= t >>> 2),
                                          (t |= t >>> 4),
                                          (t |= t >>> 8),
                                          (t |= t >>> 16),
                                          t++),
                                        t
                                      );
                                    }(t))),
                                  t <= e.length
                                    ? t
                                    : e.ended
                                      ? e.length
                                      : ((e.needReadable = !0), 0));
                          }
                          function T(t) {
                            const e = t._readableState;
                            u('emitReadable', e.needReadable, e.emittedReadable),
                            (e.needReadable = !1),
                            e.emittedReadable
                                  || (u('emitReadable', e.flowing),
                                  (e.emittedReadable = !0),
                                  r.nextTick(B, t));
                          }
                          function B(t) {
                            const e = t._readableState;
                            u('emitReadable_', e.destroyed, e.length, e.ended),
                            e.destroyed
                                  || (!e.length && !e.ended)
                                  || (t.emit('readable'), (e.emittedReadable = !1)),
                            (e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark),
                            N(t);
                          }
                          function P(t, e) {
                            e.readingMore || ((e.readingMore = !0), r.nextTick(O, t, e));
                          }
                          function O(t, e) {
                            for (
                              ;
                              !e.reading
                                && !e.ended
                                && (e.length < e.highWaterMark || (e.flowing && e.length === 0));

                            ) {
                              const r = e.length;
                              if ((u('maybeReadMore read 0'), t.read(0), r === e.length)) break;
                            }
                            e.readingMore = !1;
                          }
                          function C(t) {
                            const e = t._readableState;
                            (e.readableListening = t.listenerCount('readable') > 0),
                            e.resumeScheduled && !e.paused
                              ? (e.flowing = !0)
                              : t.listenerCount('data') > 0 && t.resume();
                          }
                          function L(t) {
                            u('readable nexttick read 0'), t.read(0);
                          }
                          function j(t, e) {
                            u('resume', e.reading),
                            e.reading || t.read(0),
                            (e.resumeScheduled = !1),
                            t.emit('resume'),
                            N(t),
                            e.flowing && !e.reading && t.read(0);
                          }
                          function N(t) {
                            const e = t._readableState;
                            for (u('flow', e.flowing); e.flowing && t.read() !== null;);
                          }
                          function D(t, e) {
                            return e.length === 0
                              ? null
                              : (e.objectMode
                                ? (r = e.buffer.shift())
                                : !t || t >= e.length
                                  ? ((r = e.decoder
                                    ? e.buffer.join('')
                                    : e.buffer.length === 1
                                      ? e.buffer.first()
                                      : e.buffer.concat(e.length)),
                                  e.buffer.clear())
                                  : (r = e.buffer.consume(t, e.decoder)),
                              r);
                            let r;
                          }
                          function U(t) {
                            const e = t._readableState;
                            u('endReadable', e.endEmitted),
                            e.endEmitted || ((e.ended = !0), r.nextTick(F, e, t));
                          }
                          function F(t, e) {
                            if (
                              (u('endReadableNT', t.endEmitted, t.length),
                              !t.endEmitted
                                  && t.length === 0
                                  && ((t.endEmitted = !0),
                                  (e.readable = !1),
                                  e.emit('end'),
                                  t.autoDestroy))
                            ) {
                              const r = e._writableState;
                              (!r || (r.autoDestroy && r.finished)) && e.destroy();
                            }
                          }
                          function q(t, e) {
                            for (let r = 0, n = t.length; r < n; r++) if (t[r] === e) return r;
                            return -1;
                          }
                          (k.prototype.read = function (t) {
                            u('read', t), (t = parseInt(t, 10));
                            const e = this._readableState;
                            const r = t;
                            if (
                              (t !== 0 && (e.emittedReadable = !1),
                              t === 0
                                  && e.needReadable
                                  && ((e.highWaterMark !== 0
                                    ? e.length >= e.highWaterMark
                                    : e.length > 0)
                                    || e.ended))
                            ) {
                              return (
                                u('read: emitReadable', e.length, e.ended),
                                e.length === 0 && e.ended ? U(this) : T(this),
                                null
                              );
                            }
                            if ((t = I(t, e)) === 0 && e.ended) return e.length === 0 && U(this), null;
                            let n;
                            let i = e.needReadable;
                            return (
                              u('need readable', i),
                              (e.length === 0 || e.length - t < e.highWaterMark)
                                  && u('length less than watermark', (i = !0)),
                              e.ended || e.reading
                                ? u('reading or ended', (i = !1))
                                : i
                                    && (u('do read'),
                                    (e.reading = !0),
                                    (e.sync = !0),
                                    e.length === 0 && (e.needReadable = !0),
                                    this._read(e.highWaterMark),
                                    (e.sync = !1),
                                    e.reading || (t = I(r, e))),
                              (n = t > 0 ? D(t, e) : null) === null
                                ? ((e.needReadable = e.length <= e.highWaterMark), (t = 0))
                                : ((e.length -= t), (e.awaitDrain = 0)),
                              e.length === 0
                                  && (e.ended || (e.needReadable = !0), r !== t && e.ended && U(this)),
                              n !== null && this.emit('data', n),
                              n
                            );
                          }),
                          (k.prototype._read = function (t) {
                            S(this, new w('_read()'));
                          }),
                          (k.prototype.pipe = function (t, e) {
                            const n = this;
                            const i = this._readableState;
                            switch (i.pipesCount) {
                              case 0:
                                i.pipes = t;
                                break;
                              case 1:
                                i.pipes = [i.pipes, t];
                                break;
                              default:
                                i.pipes.push(t);
                            }
                            (i.pipesCount += 1), u('pipe count=%d opts=%j', i.pipesCount, e);
                            const a = (!e || !1 !== e.end) && t !== r.stdout && t !== r.stderr ? f : v;
                            function s(e, r) {
                              u('onunpipe'),
                              e === n
                                      && r
                                      && !1 === r.hasUnpiped
                                      && ((r.hasUnpiped = !0),
                                      u('cleanup'),
                                      t.removeListener('close', p),
                                      t.removeListener('finish', b),
                                      t.removeListener('drain', c),
                                      t.removeListener('error', l),
                                      t.removeListener('unpipe', s),
                                      n.removeListener('end', f),
                                      n.removeListener('end', v),
                                      n.removeListener('data', d),
                                      (h = !0),
                                      !i.awaitDrain
                                        || (t._writableState && !t._writableState.needDrain)
                                        || c());
                            }
                            function f() {
                              u('onend'), t.end();
                            }
                            i.endEmitted ? r.nextTick(a) : n.once('end', a), t.on('unpipe', s);
                            var c = (function (t) {
                              return function () {
                                const e = t._readableState;
                                u('pipeOnDrain', e.awaitDrain),
                                e.awaitDrain && e.awaitDrain--,
                                e.awaitDrain === 0
                                        && o(t, 'data')
                                        && ((e.flowing = !0), N(t));
                              };
                            }(n));
                            t.on('drain', c);
                            var h = !1;
                            function d(e) {
                              u('ondata');
                              const r = t.write(e);
                              u('dest.write', r),
                              !1 === r
                                      && (((i.pipesCount === 1 && i.pipes === t)
                                        || (i.pipesCount > 1 && q(i.pipes, t) !== -1))
                                        && !h
                                        && (u('false write response, pause', i.awaitDrain),
                                        i.awaitDrain++),
                                      n.pause());
                            }
                            function l(e) {
                              u('onerror', e),
                              v(),
                              t.removeListener('error', l),
                              o(t, 'error') === 0 && S(t, e);
                            }
                            function p() {
                              t.removeListener('finish', b), v();
                            }
                            function b() {
                              u('onfinish'), t.removeListener('close', p), v();
                            }
                            function v() {
                              u('unpipe'), n.unpipe(t);
                            }
                            return (
                              n.on('data', d),
                              (function (t, e, r) {
                                if (typeof t.prependListener === 'function') return t.prependListener(e, r);
                                t._events && t._events[e]
                                  ? Array.isArray(t._events[e])
                                    ? t._events[e].unshift(r)
                                    : (t._events[e] = [r, t._events[e]])
                                  : t.on(e, r);
                              }(t, 'error', l)),
                              t.once('close', p),
                              t.once('finish', b),
                              t.emit('pipe', n),
                              i.flowing || (u('pipe resume'), n.resume()),
                              t
                            );
                          }),
                          (k.prototype.unpipe = function (t) {
                            const e = this._readableState;
                            const r = { hasUnpiped: !1 };
                            if (e.pipesCount === 0) return this;
                            if (e.pipesCount === 1) {
                              return (
                                (t && t !== e.pipes)
                                      || (t || (t = e.pipes),
                                      (e.pipes = null),
                                      (e.pipesCount = 0),
                                      (e.flowing = !1),
                                      t && t.emit('unpipe', this, r)),
                                this
                              );
                            }
                            if (!t) {
                              const n = e.pipes;
                              const i = e.pipesCount;
                              (e.pipes = null), (e.pipesCount = 0), (e.flowing = !1);
                              for (let o = 0; o < i; o++) n[o].emit('unpipe', this, { hasUnpiped: !1 });
                              return this;
                            }
                            const a = q(e.pipes, t);
                            return (
                              a === -1
                                    || (e.pipes.splice(a, 1),
                                    (e.pipesCount -= 1),
                                    e.pipesCount === 1 && (e.pipes = e.pipes[0]),
                                    t.emit('unpipe', this, r)),
                              this
                            );
                          }),
                          (k.prototype.on = function (t, e) {
                            const n = a.prototype.on.call(this, t, e);
                            const i = this._readableState;
                            return (
                              t === 'data'
                                ? ((i.readableListening = this.listenerCount('readable') > 0),
                                !1 !== i.flowing && this.resume())
                                : t === 'readable'
                                      && (i.endEmitted
                                        || i.readableListening
                                        || ((i.readableListening = i.needReadable = !0),
                                        (i.flowing = !1),
                                        (i.emittedReadable = !1),
                                        u('on readable', i.length, i.reading),
                                        i.length ? T(this) : i.reading || r.nextTick(L, this))),
                              n
                            );
                          }),
                          (k.prototype.addListener = k.prototype.on),
                          (k.prototype.removeListener = function (t, e) {
                            const n = a.prototype.removeListener.call(this, t, e);
                            return t === 'readable' && r.nextTick(C, this), n;
                          }),
                          (k.prototype.removeAllListeners = function (t) {
                            const e = a.prototype.removeAllListeners.apply(this, arguments);
                            return (t !== 'readable' && void 0 !== t) || r.nextTick(C, this), e;
                          }),
                          (k.prototype.resume = function () {
                            const t = this._readableState;
                            return (
                              t.flowing
                                    || (u('resume'),
                                    (t.flowing = !t.readableListening),
                                    (function (t, e) {
                                      e.resumeScheduled
                                        || ((e.resumeScheduled = !0), r.nextTick(j, t, e));
                                    }(this, t))),
                              (t.paused = !1),
                              this
                            );
                          }),
                          (k.prototype.pause = function () {
                            return (
                              u('call pause flowing=%j', this._readableState.flowing),
                              !1 !== this._readableState.flowing
                                    && (u('pause'),
                                    (this._readableState.flowing = !1),
                                    this.emit('pause')),
                              (this._readableState.paused = !0),
                              this
                            );
                          }),
                          (k.prototype.wrap = function (t) {
                            const e = this;
                            const r = this._readableState;
                            let n = !1;
                            for (const i in (t.on('end', () => {
                              if ((u('wrapped end'), r.decoder && !r.ended)) {
                                const t = r.decoder.end();
                                t && t.length && e.push(t);
                              }
                              e.push(null);
                            }),
                            t.on('data', (i) => {
                              (u('wrapped data'),
                              r.decoder && (i = r.decoder.write(i)),
                              r.objectMode && i == null)
                                    || ((r.objectMode || (i && i.length))
                                      && (e.push(i) || ((n = !0), t.pause())));
                            }),
                            t)) {
                              void 0 === this[i]
                                    && typeof t[i] === 'function'
                                    && (this[i] = (function (e) {
                                      return function () {
                                        return t[e].apply(t, arguments);
                                      };
                                    }(i)));
                            }
                            for (let o = 0; o < M.length; o++) t.on(M[o], this.emit.bind(this, M[o]));
                            return (
                              (this._read = function (e) {
                                u('wrapped _read', e), n && ((n = !1), t.resume());
                              }),
                              this
                            );
                          }),
                          typeof Symbol === 'function'
                                && (k.prototype[Symbol.asyncIterator] = function () {
                                  return void 0 === d && (d = t(55)), d(this);
                                }),
                          Object.defineProperty(k.prototype, 'readableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._readableState.highWaterMark;
                            },
                          }),
                          Object.defineProperty(k.prototype, 'readableBuffer', {
                            enumerable: !1,
                            get() {
                              return this._readableState && this._readableState.buffer;
                            },
                          }),
                          Object.defineProperty(k.prototype, 'readableFlowing', {
                            enumerable: !1,
                            get() {
                              return this._readableState.flowing;
                            },
                            set(t) {
                              this._readableState && (this._readableState.flowing = t);
                            },
                          }),
                          (k._fromList = D),
                          Object.defineProperty(k.prototype, 'readableLength', {
                            enumerable: !1,
                            get() {
                              return this._readableState.length;
                            },
                          }),
                          typeof Symbol === 'function'
                                && (k.from = function (e, r) {
                                  return void 0 === l && (l = t(59)), l(k, e, r);
                                });
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {
                      21: 21,
                      434: 434,
                      467: 467,
                      488: 488,
                      49: 49,
                      50: 50,
                      526: 526,
                      55: 55,
                      56: 56,
                      57: 57,
                      59: 59,
                      61: 61,
                      62: 62,
                      67: 67,
                    },
                  ],
                  53: [
                    function (t, e, r) {
                      e.exports = c;
                      const n = t(49).codes;
                      const i = n.ERR_METHOD_NOT_IMPLEMENTED;
                      const o = n.ERR_MULTIPLE_CALLBACK;
                      const a = n.ERR_TRANSFORM_ALREADY_TRANSFORMING;
                      const s = n.ERR_TRANSFORM_WITH_LENGTH_0;
                      const f = t(50);
                      function u(t, e) {
                        const r = this._transformState;
                        r.transforming = !1;
                        const n = r.writecb;
                        if (n === null) return this.emit('error', new o());
                        (r.writechunk = null),
                        (r.writecb = null),
                        e != null && this.push(e),
                        n(t);
                        const i = this._readableState;
                        (i.reading = !1),
                        (i.needReadable || i.length < i.highWaterMark)
                              && this._read(i.highWaterMark);
                      }
                      function c(t) {
                        if (!(this instanceof c)) return new c(t);
                        f.call(this, t),
                        (this._transformState = {
                          afterTransform: u.bind(this),
                          needTransform: !1,
                          transforming: !1,
                          writecb: null,
                          writechunk: null,
                          writeencoding: null,
                        }),
                        (this._readableState.needReadable = !0),
                        (this._readableState.sync = !1),
                        t
                              && (typeof t.transform === 'function' && (this._transform = t.transform),
                              typeof t.flush === 'function' && (this._flush = t.flush)),
                        this.on('prefinish', h);
                      }
                      function h() {
                        const t = this;
                        typeof this._flush !== 'function' || this._readableState.destroyed
                          ? d(this, null, null)
                          : this._flush((e, r) => {
                            d(t, e, r);
                          });
                      }
                      function d(t, e, r) {
                        if (e) return t.emit('error', e);
                        if ((r != null && t.push(r), t._writableState.length)) throw new s();
                        if (t._transformState.transforming) throw new a();
                        return t.push(null);
                      }
                      t(467)(c, f),
                      (c.prototype.push = function (t, e) {
                        return (
                          (this._transformState.needTransform = !1),
                          f.prototype.push.call(this, t, e)
                        );
                      }),
                      (c.prototype._transform = function (t, e, r) {
                        r(new i('_transform()'));
                      }),
                      (c.prototype._write = function (t, e, r) {
                        const n = this._transformState;
                        if (
                          ((n.writecb = r),
                          (n.writechunk = t),
                          (n.writeencoding = e),
                          !n.transforming)
                        ) {
                          const i = this._readableState;
                          (n.needTransform || i.needReadable || i.length < i.highWaterMark)
                                && this._read(i.highWaterMark);
                        }
                      }),
                      (c.prototype._read = function (t) {
                        const e = this._transformState;
                        e.writechunk === null || e.transforming
                          ? (e.needTransform = !0)
                          : ((e.transforming = !0),
                          this._transform(e.writechunk, e.writeencoding, e.afterTransform));
                      }),
                      (c.prototype._destroy = function (t, e) {
                        f.prototype._destroy.call(this, t, (t) => {
                          e(t);
                        });
                      });
                    },
                    { 467: 467, 49: 49, 50: 50 },
                  ],
                  54: [
                    function (t, e, r) {
                      (function (r, n) {
                        (function () {
                          function i(t) {
                            const e = this;
                            (this.next = null),
                            (this.entry = null),
                            (this.finish = function () {
                              !(function (t, e, r) {
                                let n = t.entry;
                                t.entry = null;
                                for (; n;) {
                                  const i = n.callback;
                                  e.pendingcb--, i(r), (n = n.next);
                                }
                                e.corkedRequestsFree.next = t;
                              }(e, t));
                            });
                          }
                          let o;
                          (e.exports = k), (k.WritableState = E);
                          const a = { deprecate: t(528) };
                          const s = t(62);
                          const f = t(67).Buffer;
                          const u = n.Uint8Array || function () {};
                          let c;
                          const h = t(57);
                          const d = t(61).getHighWaterMark;
                          const l = t(49).codes;
                          const p = l.ERR_INVALID_ARG_TYPE;
                          const b = l.ERR_METHOD_NOT_IMPLEMENTED;
                          const v = l.ERR_MULTIPLE_CALLBACK;
                          const g = l.ERR_STREAM_CANNOT_PIPE;
                          const y = l.ERR_STREAM_DESTROYED;
                          const m = l.ERR_STREAM_NULL_VALUES;
                          const w = l.ERR_STREAM_WRITE_AFTER_END;
                          const _ = l.ERR_UNKNOWN_ENCODING;
                          const S = h.errorOrDestroy;
                          function M() {}
                          function E(e, n, a) {
                            (o = o || t(50)),
                            (e = e || {}),
                            typeof a !== 'boolean' && (a = n instanceof o),
                            (this.objectMode = !!e.objectMode),
                            a && (this.objectMode = this.objectMode || !!e.writableObjectMode),
                            (this.highWaterMark = d(this, e, 'writableHighWaterMark', a)),
                            (this.finalCalled = !1),
                            (this.needDrain = !1),
                            (this.ending = !1),
                            (this.ended = !1),
                            (this.finished = !1),
                            (this.destroyed = !1);
                            const s = !1 === e.decodeStrings;
                            (this.decodeStrings = !s),
                            (this.defaultEncoding = e.defaultEncoding || 'utf8'),
                            (this.length = 0),
                            (this.writing = !1),
                            (this.corked = 0),
                            (this.sync = !0),
                            (this.bufferProcessing = !1),
                            (this.onwrite = function (t) {
                              !(function (t, e) {
                                const n = t._writableState;
                                const i = n.sync;
                                const o = n.writecb;
                                if (typeof o !== 'function') throw new v();
                                if (
                                  ((function (t) {
                                    (t.writing = !1),
                                    (t.writecb = null),
                                    (t.length -= t.writelen),
                                    (t.writelen = 0);
                                  }(n)),
                                  e)
                                ) {
                                  !(function (t, e, n, i, o) {
                                    --e.pendingcb,
                                    n
                                      ? (r.nextTick(o, i),
                                      r.nextTick(B, t, e),
                                      (t._writableState.errorEmitted = !0),
                                      S(t, i))
                                      : (o(i),
                                      (t._writableState.errorEmitted = !0),
                                      S(t, i),
                                      B(t, e));
                                  }(t, n, i, e, o));
                                } else {
                                  const a = I(n) || t.destroyed;
                                  a
                                        || n.corked
                                        || n.bufferProcessing
                                        || !n.bufferedRequest
                                        || R(t, n),
                                  i ? r.nextTick(A, t, n, a, o) : A(t, n, a, o);
                                }
                              }(n, t));
                            }),
                            (this.writecb = null),
                            (this.writelen = 0),
                            (this.bufferedRequest = null),
                            (this.lastBufferedRequest = null),
                            (this.pendingcb = 0),
                            (this.prefinished = !1),
                            (this.errorEmitted = !1),
                            (this.emitClose = !1 !== e.emitClose),
                            (this.autoDestroy = !!e.autoDestroy),
                            (this.bufferedRequestCount = 0),
                            (this.corkedRequestsFree = new i(this));
                          }
                          function k(e) {
                            const r = this instanceof (o = o || t(50));
                            if (!r && !c.call(k, this)) return new k(e);
                            (this._writableState = new E(e, this, r)),
                            (this.writable = !0),
                            e
                                  && (typeof e.write === 'function' && (this._write = e.write),
                                  typeof e.writev === 'function' && (this._writev = e.writev),
                                  typeof e.destroy === 'function' && (this._destroy = e.destroy),
                                  typeof e.final === 'function' && (this._final = e.final)),
                            s.call(this);
                          }
                          function x(t, e, r, n, i, o, a) {
                            (e.writelen = n),
                            (e.writecb = a),
                            (e.writing = !0),
                            (e.sync = !0),
                            e.destroyed
                              ? e.onwrite(new y('write'))
                              : r
                                ? t._writev(i, e.onwrite)
                                : t._write(i, o, e.onwrite),
                            (e.sync = !1);
                          }
                          function A(t, e, r, n) {
                            r
                                || (function (t, e) {
                                  e.length === 0
                                    && e.needDrain
                                    && ((e.needDrain = !1), t.emit('drain'));
                                }(t, e)),
                            e.pendingcb--,
                            n(),
                            B(t, e);
                          }
                          function R(t, e) {
                            e.bufferProcessing = !0;
                            let r = e.bufferedRequest;
                            if (t._writev && r && r.next) {
                              const n = e.bufferedRequestCount;
                              const o = new Array(n);
                              const a = e.corkedRequestsFree;
                              a.entry = r;
                              for (var s = 0, f = !0; r;) (o[s] = r), r.isBuf || (f = !1), (r = r.next), (s += 1);
                              (o.allBuffers = f),
                              x(t, e, !0, e.length, o, '', a.finish),
                              e.pendingcb++,
                              (e.lastBufferedRequest = null),
                              a.next
                                ? ((e.corkedRequestsFree = a.next), (a.next = null))
                                : (e.corkedRequestsFree = new i(e)),
                              (e.bufferedRequestCount = 0);
                            } else {
                              for (; r;) {
                                const u = r.chunk;
                                const c = r.encoding;
                                const h = r.callback;
                                if (
                                  (x(t, e, !1, e.objectMode ? 1 : u.length, u, c, h),
                                  (r = r.next),
                                  e.bufferedRequestCount--,
                                  e.writing)
                                ) break;
                              }
                              r === null && (e.lastBufferedRequest = null);
                            }
                            (e.bufferedRequest = r), (e.bufferProcessing = !1);
                          }
                          function I(t) {
                            return (
                              t.ending
                                && t.length === 0
                                && t.bufferedRequest === null
                                && !t.finished
                                && !t.writing
                            );
                          }
                          function T(t, e) {
                            t._final((r) => {
                              e.pendingcb--,
                              r && S(t, r),
                              (e.prefinished = !0),
                              t.emit('prefinish'),
                              B(t, e);
                            });
                          }
                          function B(t, e) {
                            const n = I(e);
                            if (
                              n
                                && ((function (t, e) {
                                  e.prefinished
                                    || e.finalCalled
                                    || (typeof t._final !== 'function' || e.destroyed
                                      ? ((e.prefinished = !0), t.emit('prefinish'))
                                      : (e.pendingcb++, (e.finalCalled = !0), r.nextTick(T, t, e)));
                                }(t, e)),
                                e.pendingcb === 0
                                  && ((e.finished = !0), t.emit('finish'), e.autoDestroy))
                            ) {
                              const i = t._readableState;
                              (!i || (i.autoDestroy && i.endEmitted)) && t.destroy();
                            }
                            return n;
                          }
                          t(467)(k, s),
                          (E.prototype.getBuffer = function () {
                            for (var t = this.bufferedRequest, e = []; t;) e.push(t), (t = t.next);
                            return e;
                          }),
                          (function () {
                            try {
                              Object.defineProperty(E.prototype, 'buffer', {
                                get: a.deprecate(
                                  function () {
                                    return this.getBuffer();
                                  },
                                  '_writableState.buffer is deprecated. Use _writableState.getBuffer instead.',
                                  'DEP0003',
                                ),
                              });
                            } catch (t) {}
                          }()),
                          typeof Symbol === 'function'
                              && Symbol.hasInstance
                              && typeof Function.prototype[Symbol.hasInstance] === 'function'
                            ? ((c = Function.prototype[Symbol.hasInstance]),
                            Object.defineProperty(k, Symbol.hasInstance, {
                              value(t) {
                                return (
                                  !!c.call(this, t)
                                        || (this === k && t && t._writableState instanceof E)
                                );
                              },
                            }))
                            : (c = function (t) {
                              return t instanceof this;
                            }),
                          (k.prototype.pipe = function () {
                            S(this, new g());
                          }),
                          (k.prototype.write = function (t, e, n) {
                            let i;
                            const o = this._writableState;
                            let a = !1;
                            const s = !o.objectMode && ((i = t), f.isBuffer(i) || i instanceof u);
                            return (
                              s
                                    && !f.isBuffer(t)
                                    && (t = (function (t) {
                                      return f.from(t);
                                    }(t))),
                              typeof e === 'function' && ((n = e), (e = null)),
                              s ? (e = 'buffer') : e || (e = o.defaultEncoding),
                              typeof n !== 'function' && (n = M),
                              o.ending
                                ? (function (t, e) {
                                  const n = new w();
                                  S(t, n), r.nextTick(e, n);
                                }(this, n))
                                : (s
                                        || (function (t, e, n, i) {
                                          let o;
                                          return (
                                            n === null
                                              ? (o = new m())
                                              : typeof n === 'string'
                                                || e.objectMode
                                                || (o = new p('chunk', ['string', 'Buffer'], n)),
                                            !o || (S(t, o), r.nextTick(i, o), !1)
                                          );
                                        }(this, o, t, n)))
                                      && (o.pendingcb++,
                                      (a = (function (t, e, r, n, i, o) {
                                        if (!r) {
                                          const a = (function (t, e, r) {
                                            t.objectMode
                                              || !1 === t.decodeStrings
                                              || typeof e !== 'string'
                                              || (e = f.from(e, r));
                                            return e;
                                          }(e, n, i));
                                          n !== a && ((r = !0), (i = 'buffer'), (n = a));
                                        }
                                        const s = e.objectMode ? 1 : n.length;
                                        e.length += s;
                                        const u = e.length < e.highWaterMark;
                                        u || (e.needDrain = !0);
                                        if (e.writing || e.corked) {
                                          const c = e.lastBufferedRequest;
                                          (e.lastBufferedRequest = {
                                            chunk: n,
                                            encoding: i,
                                            isBuf: r,
                                            callback: o,
                                            next: null,
                                          }),
                                          c
                                            ? (c.next = e.lastBufferedRequest)
                                            : (e.bufferedRequest = e.lastBufferedRequest),
                                          (e.bufferedRequestCount += 1);
                                        } else x(t, e, !1, s, n, i, o);
                                        return u;
                                      }(this, o, s, t, e, n)))),
                              a
                            );
                          }),
                          (k.prototype.cork = function () {
                            this._writableState.corked++;
                          }),
                          (k.prototype.uncork = function () {
                            const t = this._writableState;
                            t.corked
                                  && (t.corked--,
                                  t.writing
                                    || t.corked
                                    || t.bufferProcessing
                                    || !t.bufferedRequest
                                    || R(this, t));
                          }),
                          (k.prototype.setDefaultEncoding = function (t) {
                            if (
                              (typeof t === 'string' && (t = t.toLowerCase()),
                              !(
                                [
                                  'hex',
                                  'utf8',
                                  'utf-8',
                                  'ascii',
                                  'binary',
                                  'base64',
                                  'ucs2',
                                  'ucs-2',
                                  'utf16le',
                                  'utf-16le',
                                  'raw',
                                ].indexOf((`${t}`).toLowerCase()) > -1
                              ))
                            ) throw new _(t);
                            return (this._writableState.defaultEncoding = t), this;
                          }),
                          Object.defineProperty(k.prototype, 'writableBuffer', {
                            enumerable: !1,
                            get() {
                              return this._writableState && this._writableState.getBuffer();
                            },
                          }),
                          Object.defineProperty(k.prototype, 'writableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._writableState.highWaterMark;
                            },
                          }),
                          (k.prototype._write = function (t, e, r) {
                            r(new b('_write()'));
                          }),
                          (k.prototype._writev = null),
                          (k.prototype.end = function (t, e, n) {
                            const i = this._writableState;
                            return (
                              typeof t === 'function'
                                ? ((n = t), (t = null), (e = null))
                                : typeof e === 'function' && ((n = e), (e = null)),
                              t != null && this.write(t, e),
                              i.corked && ((i.corked = 1), this.uncork()),
                              i.ending
                                    || (function (t, e, n) {
                                      (e.ending = !0),
                                      B(t, e),
                                      n && (e.finished ? r.nextTick(n) : t.once('finish', n));
                                      (e.ended = !0), (t.writable = !1);
                                    }(this, i, n)),
                              this
                            );
                          }),
                          Object.defineProperty(k.prototype, 'writableLength', {
                            enumerable: !1,
                            get() {
                              return this._writableState.length;
                            },
                          }),
                          Object.defineProperty(k.prototype, 'destroyed', {
                            enumerable: !1,
                            get() {
                              return (
                                void 0 !== this._writableState && this._writableState.destroyed
                              );
                            },
                            set(t) {
                              this._writableState && (this._writableState.destroyed = t);
                            },
                          }),
                          (k.prototype.destroy = h.destroy),
                          (k.prototype._undestroy = h.undestroy),
                          (k.prototype._destroy = function (t, e) {
                            e(t);
                          });
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {
                      467: 467,
                      488: 488,
                      49: 49,
                      50: 50,
                      528: 528,
                      57: 57,
                      61: 61,
                      62: 62,
                      67: 67,
                    },
                  ],
                  55: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          let n;
                          function i(t, e, r) {
                            return (
                              e in t
                                ? Object.defineProperty(t, e, {
                                  value: r,
                                  enumerable: !0,
                                  configurable: !0,
                                  writable: !0,
                                })
                                : (t[e] = r),
                              t
                            );
                          }
                          const o = t(58);
                          const a = Symbol('lastResolve');
                          const s = Symbol('lastReject');
                          const f = Symbol('error');
                          const u = Symbol('ended');
                          const c = Symbol('lastPromise');
                          const h = Symbol('handlePromise');
                          const d = Symbol('stream');
                          function l(t, e) {
                            return { value: t, done: e };
                          }
                          function p(t) {
                            const e = t[a];
                            if (e !== null) {
                              const r = t[d].read();
                              r !== null
                                  && ((t[c] = null), (t[a] = null), (t[s] = null), e(l(r, !1)));
                            }
                          }
                          function b(t) {
                            r.nextTick(p, t);
                          }
                          const v = Object.getPrototypeOf(() => {});
                          const g = Object.setPrototypeOf(
                            (i(
                              (n = {
                                get stream() {
                                  return this[d];
                                },
                                next() {
                                  const t = this;
                                  const e = this[f];
                                  if (e !== null) return Promise.reject(e);
                                  if (this[u]) return Promise.resolve(l(void 0, !0));
                                  if (this[d].destroyed) {
                                    return new Promise(((e, n) => {
                                      r.nextTick(() => {
                                        t[f] ? n(t[f]) : e(l(void 0, !0));
                                      });
                                    }));
                                  }
                                  let n;
                                  const i = this[c];
                                  if (i) {
                                    n = new Promise(
                                      (function (t, e) {
                                        return function (r, n) {
                                          t.then(() => {
                                            e[u] ? r(l(void 0, !0)) : e[h](r, n);
                                          }, n);
                                        };
                                      }(i, this)),
                                    );
                                  } else {
                                    const o = this[d].read();
                                    if (o !== null) return Promise.resolve(l(o, !1));
                                    n = new Promise(this[h]);
                                  }
                                  return (this[c] = n), n;
                                },
                              }),
                              Symbol.asyncIterator,
                              function () {
                                return this;
                              },
                            ),
                            i(n, 'return', function () {
                              const t = this;
                              return new Promise(((e, r) => {
                                t[d].destroy(null, (t) => {
                                  t ? r(t) : e(l(void 0, !0));
                                });
                              }));
                            }),
                            n),
                            v,
                          );
                          e.exports = function (t) {
                            let e;
                            var r = Object.create(
                              g,
                              (i((e = {}), d, { value: t, writable: !0 }),
                              i(e, a, { value: null, writable: !0 }),
                              i(e, s, { value: null, writable: !0 }),
                              i(e, f, { value: null, writable: !0 }),
                              i(e, u, { value: t._readableState.endEmitted, writable: !0 }),
                              i(e, h, {
                                value(t, e) {
                                  const n = r[d].read();
                                  n
                                    ? ((r[c] = null), (r[a] = null), (r[s] = null), t(l(n, !1)))
                                    : ((r[a] = t), (r[s] = e));
                                },
                                writable: !0,
                              }),
                              e),
                            );
                            return (
                              (r[c] = null),
                              o(t, (t) => {
                                if (t && t.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
                                  const e = r[s];
                                  return (
                                    e !== null
                                        && ((r[c] = null), (r[a] = null), (r[s] = null), e(t)),
                                    void (r[f] = t)
                                  );
                                }
                                const n = r[a];
                                n !== null
                                    && ((r[c] = null), (r[a] = null), (r[s] = null), n(l(void 0, !0))),
                                (r[u] = !0);
                              }),
                              t.on('readable', b.bind(null, r)),
                              r
                            );
                          };
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    { 488: 488, 58: 58 },
                  ],
                  56: [
                    function (t, e, r) {
                      function n(t, e) {
                        const r = Object.keys(t);
                        if (Object.getOwnPropertySymbols) {
                          let n = Object.getOwnPropertySymbols(t);
                          e
                              && (n = n.filter((e) => Object.getOwnPropertyDescriptor(t, e).enumerable)),
                          r.push.apply(r, n);
                        }
                        return r;
                      }
                      function i(t, e, r) {
                        return (
                          e in t
                            ? Object.defineProperty(t, e, {
                              value: r,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                            })
                            : (t[e] = r),
                          t
                        );
                      }
                      function o(t, e) {
                        for (let r = 0; r < e.length; r++) {
                          const n = e[r];
                          (n.enumerable = n.enumerable || !1),
                          (n.configurable = !0),
                          'value' in n && (n.writable = !0),
                          Object.defineProperty(t, n.key, n);
                        }
                      }
                      const a = t(67).Buffer;
                      const s = t(21).inspect;
                      const f = (s && s.custom) || 'inspect';
                      e.exports = (function () {
                        function t() {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t)),
                          (this.head = null),
                          (this.tail = null),
                          (this.length = 0);
                        }
                        let e; let r; let
                          u;
                        return (
                          (e = t),
                          (r = [
                            {
                              key: 'push',
                              value(t) {
                                const e = { data: t, next: null };
                                this.length > 0 ? (this.tail.next = e) : (this.head = e),
                                (this.tail = e),
                                ++this.length;
                              },
                            },
                            {
                              key: 'unshift',
                              value(t) {
                                const e = { data: t, next: this.head };
                                this.length === 0 && (this.tail = e),
                                (this.head = e),
                                ++this.length;
                              },
                            },
                            {
                              key: 'shift',
                              value() {
                                if (this.length !== 0) {
                                  const t = this.head.data;
                                  return (
                                    this.length === 1
                                      ? (this.head = this.tail = null)
                                      : (this.head = this.head.next),
                                    --this.length,
                                    t
                                  );
                                }
                              },
                            },
                            {
                              key: 'clear',
                              value() {
                                (this.head = this.tail = null), (this.length = 0);
                              },
                            },
                            {
                              key: 'join',
                              value(t) {
                                if (this.length === 0) return '';
                                for (var e = this.head, r = `${e.data}`; (e = e.next);) r += t + e.data;
                                return r;
                              },
                            },
                            {
                              key: 'concat',
                              value(t) {
                                if (this.length === 0) return a.alloc(0);
                                for (
                                  var e, r, n, i = a.allocUnsafe(t >>> 0), o = this.head, s = 0;
                                  o;

                                ) {
                                  (e = o.data),
                                  (r = i),
                                  (n = s),
                                  a.prototype.copy.call(e, r, n),
                                  (s += o.data.length),
                                  (o = o.next);
                                }
                                return i;
                              },
                            },
                            {
                              key: 'consume',
                              value(t, e) {
                                let r;
                                return (
                                  t < this.head.data.length
                                    ? ((r = this.head.data.slice(0, t)),
                                    (this.head.data = this.head.data.slice(t)))
                                    : (r = t === this.head.data.length
                                      ? this.shift()
                                      : e
                                        ? this._getString(t)
                                        : this._getBuffer(t)),
                                  r
                                );
                              },
                            },
                            {
                              key: 'first',
                              value() {
                                return this.head.data;
                              },
                            },
                            {
                              key: '_getString',
                              value(t) {
                                let e = this.head;
                                let r = 1;
                                let n = e.data;
                                for (t -= n.length; (e = e.next);) {
                                  const i = e.data;
                                  const o = t > i.length ? i.length : t;
                                  if (
                                    (o === i.length ? (n += i) : (n += i.slice(0, t)),
                                    (t -= o) == 0)
                                  ) {
                                    o === i.length
                                      ? (++r,
                                      e.next
                                        ? (this.head = e.next)
                                        : (this.head = this.tail = null))
                                      : ((this.head = e), (e.data = i.slice(o)));
                                    break;
                                  }
                                  ++r;
                                }
                                return (this.length -= r), n;
                              },
                            },
                            {
                              key: '_getBuffer',
                              value(t) {
                                const e = a.allocUnsafe(t);
                                let r = this.head;
                                let n = 1;
                                for (r.data.copy(e), t -= r.data.length; (r = r.next);) {
                                  const i = r.data;
                                  const o = t > i.length ? i.length : t;
                                  if ((i.copy(e, e.length - t, 0, o), (t -= o) == 0)) {
                                    o === i.length
                                      ? (++n,
                                      r.next
                                        ? (this.head = r.next)
                                        : (this.head = this.tail = null))
                                      : ((this.head = r), (r.data = i.slice(o)));
                                    break;
                                  }
                                  ++n;
                                }
                                return (this.length -= n), e;
                              },
                            },
                            {
                              key: f,
                              value(t, e) {
                                return s(
                                  this,
                                  (function (t) {
                                    for (let e = 1; e < arguments.length; e++) {
                                      var r = arguments[e] != null ? arguments[e] : {};
                                      e % 2
                                        ? n(Object(r), !0).forEach((e) => {
                                          i(t, e, r[e]);
                                        })
                                        : Object.getOwnPropertyDescriptors
                                          ? Object.defineProperties(
                                            t,
                                            Object.getOwnPropertyDescriptors(r),
                                          )
                                          : n(Object(r)).forEach((e) => {
                                            Object.defineProperty(
                                              t,
                                              e,
                                              Object.getOwnPropertyDescriptor(r, e),
                                            );
                                          });
                                    }
                                    return t;
                                  }({}, e, { depth: 0, customInspect: !1 })),
                                );
                              },
                            },
                          ]) && o(e.prototype, r),
                          u && o(e, u),
                          t
                        );
                      }());
                    },
                    { 21: 21, 67: 67 },
                  ],
                  57: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          function r(t, e) {
                            i(t, e), n(t);
                          }
                          function n(t) {
                            (t._writableState && !t._writableState.emitClose)
                                || (t._readableState && !t._readableState.emitClose)
                                || t.emit('close');
                          }
                          function i(t, e) {
                            t.emit('error', e);
                          }
                          e.exports = {
                            destroy(e, o) {
                              const a = this;
                              const s = this._readableState && this._readableState.destroyed;
                              const f = this._writableState && this._writableState.destroyed;
                              return s || f
                                ? (o
                                  ? o(e)
                                  : e
                                        && (this._writableState
                                          ? this._writableState.errorEmitted
                                            || ((this._writableState.errorEmitted = !0),
                                            t.nextTick(i, this, e))
                                          : t.nextTick(i, this, e)),
                                this)
                                : (this._readableState && (this._readableState.destroyed = !0),
                                this._writableState && (this._writableState.destroyed = !0),
                                this._destroy(e || null, (e) => {
                                  !o && e
                                    ? a._writableState
                                      ? a._writableState.errorEmitted
                                        ? t.nextTick(n, a)
                                        : ((a._writableState.errorEmitted = !0),
                                        t.nextTick(r, a, e))
                                      : t.nextTick(r, a, e)
                                    : o
                                      ? (t.nextTick(n, a), o(e))
                                      : t.nextTick(n, a);
                                }),
                                this);
                            },
                            undestroy() {
                              this._readableState
                                  && ((this._readableState.destroyed = !1),
                                  (this._readableState.reading = !1),
                                  (this._readableState.ended = !1),
                                  (this._readableState.endEmitted = !1)),
                              this._writableState
                                    && ((this._writableState.destroyed = !1),
                                    (this._writableState.ended = !1),
                                    (this._writableState.ending = !1),
                                    (this._writableState.finalCalled = !1),
                                    (this._writableState.prefinished = !1),
                                    (this._writableState.finished = !1),
                                    (this._writableState.errorEmitted = !1));
                            },
                            errorOrDestroy(t, e) {
                              const r = t._readableState;
                              const n = t._writableState;
                              (r && r.autoDestroy) || (n && n.autoDestroy)
                                ? t.destroy(e)
                                : t.emit('error', e);
                            },
                          };
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    { 488: 488 },
                  ],
                  58: [
                    function (t, e, r) {
                      const n = t(49).codes.ERR_STREAM_PREMATURE_CLOSE;
                      function i() {}
                      e.exports = function t(e, r, o) {
                        if (typeof r === 'function') return t(e, null, r);
                        r || (r = {}),
                        (o = (function (t) {
                          let e = !1;
                          return function () {
                            if (!e) {
                              e = !0;
                              for (
                                var r = arguments.length, n = new Array(r), i = 0;
                                i < r;
                                i++
                              ) n[i] = arguments[i];
                              t.apply(this, n);
                            }
                          };
                        }(o || i)));
                        let a = r.readable || (!1 !== r.readable && e.readable);
                        let s = r.writable || (!1 !== r.writable && e.writable);
                        const f = function () {
                          e.writable || c();
                        };
                        let u = e._writableState && e._writableState.finished;
                        var c = function () {
                          (s = !1), (u = !0), a || o.call(e);
                        };
                        let h = e._readableState && e._readableState.endEmitted;
                        const d = function () {
                          (a = !1), (h = !0), s || o.call(e);
                        };
                        const l = function (t) {
                          o.call(e, t);
                        };
                        const p = function () {
                          let t;
                          return a && !h
                            ? ((e._readableState && e._readableState.ended) || (t = new n()),
                            o.call(e, t))
                            : s && !u
                              ? ((e._writableState && e._writableState.ended) || (t = new n()),
                              o.call(e, t))
                              : void 0;
                        };
                        const b = function () {
                          e.req.on('finish', c);
                        };
                        return (
                          !(function (t) {
                            return t.setHeader && typeof t.abort === 'function';
                          }(e))
                            ? s && !e._writableState && (e.on('end', f), e.on('close', f))
                            : (e.on('complete', c),
                            e.on('abort', p),
                            e.req ? b() : e.on('request', b)),
                          e.on('end', d),
                          e.on('finish', c),
                          !1 !== r.error && e.on('error', l),
                          e.on('close', p),
                          function () {
                            e.removeListener('complete', c),
                            e.removeListener('abort', p),
                            e.removeListener('request', b),
                            e.req && e.req.removeListener('finish', c),
                            e.removeListener('end', f),
                            e.removeListener('close', f),
                            e.removeListener('finish', c),
                            e.removeListener('end', d),
                            e.removeListener('error', l),
                            e.removeListener('close', p);
                          }
                        );
                      };
                    },
                    { 49: 49 },
                  ],
                  59: [
                    function (t, e, r) {
                      e.exports = function () {
                        throw new Error('Readable.from is not available in the browser');
                      };
                    },
                    {},
                  ],
                  60: [
                    function (t, e, r) {
                      let n;
                      const i = t(49).codes;
                      const o = i.ERR_MISSING_ARGS;
                      const a = i.ERR_STREAM_DESTROYED;
                      function s(t) {
                        if (t) throw t;
                      }
                      function f(e, r, i, o) {
                        o = (function (t) {
                          let e = !1;
                          return function () {
                            e || ((e = !0), t.apply(void 0, arguments));
                          };
                        }(o));
                        let s = !1;
                        e.on('close', () => {
                          s = !0;
                        }),
                        void 0 === n && (n = t(58)),
                        n(e, { readable: r, writable: i }, (t) => {
                          if (t) return o(t);
                          (s = !0), o();
                        });
                        let f = !1;
                        return function (t) {
                          if (!s && !f) {
                            return (
                              (f = !0),
                              (function (t) {
                                return t.setHeader && typeof t.abort === 'function';
                              }(e))
                                ? e.abort()
                                : typeof e.destroy === 'function'
                                  ? e.destroy()
                                  : void o(t || new a('pipe'))
                            );
                          }
                        };
                      }
                      function u(t) {
                        t();
                      }
                      function c(t, e) {
                        return t.pipe(e);
                      }
                      function h(t) {
                        return t.length
                          ? typeof t[t.length - 1] !== 'function'
                            ? s
                            : t.pop()
                          : s;
                      }
                      e.exports = function () {
                        for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++) e[r] = arguments[r];
                        let n;
                        const i = h(e);
                        if ((Array.isArray(e[0]) && (e = e[0]), e.length < 2)) throw new o('streams');
                        var a = e.map((t, r) => {
                          const o = r < e.length - 1;
                          return f(t, o, r > 0, (t) => {
                            n || (n = t), t && a.forEach(u), o || (a.forEach(u), i(n));
                          });
                        });
                        return e.reduce(c);
                      };
                    },
                    { 49: 49, 58: 58 },
                  ],
                  61: [
                    function (t, e, r) {
                      const n = t(49).codes.ERR_INVALID_OPT_VALUE;
                      e.exports = {
                        getHighWaterMark(t, e, r, i) {
                          const o = (function (t, e, r) {
                            return t.highWaterMark != null ? t.highWaterMark : e ? t[r] : null;
                          }(e, i, r));
                          if (o != null) {
                            if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : 'highWaterMark', o);
                            return Math.floor(o);
                          }
                          return t.objectMode ? 16 : 16384;
                        },
                      };
                    },
                    { 49: 49 },
                  ],
                  62: [
                    function (t, e, r) {
                      e.exports = t(434).EventEmitter;
                    },
                    { 434: 434 },
                  ],
                  63: [
                    function (t, e, r) {
                      ((r = e.exports = t(52)).Stream = r),
                      (r.Readable = r),
                      (r.Writable = t(54)),
                      (r.Duplex = t(50)),
                      (r.Transform = t(53)),
                      (r.PassThrough = t(51)),
                      (r.finished = t(58)),
                      (r.pipeline = t(60));
                    },
                    {
                      50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 58: 58, 60: 60,
                    },
                  ],
                  64: [
                    function (t, e, r) {
                      /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ const n = t(
                        67,
                      );
                      const i = n.Buffer;
                      function o(t, e) {
                        for (const r in t) e[r] = t[r];
                      }
                      function a(t, e, r) {
                        return i(t, e, r);
                      }
                      i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow
                        ? (e.exports = n)
                        : (o(n, r), (r.Buffer = a)),
                      (a.prototype = Object.create(i.prototype)),
                      o(i, a),
                      (a.from = function (t, e, r) {
                        if (typeof t === 'number') throw new TypeError('Argument must not be a number');
                        return i(t, e, r);
                      }),
                      (a.alloc = function (t, e, r) {
                        if (typeof t !== 'number') throw new TypeError('Argument must be a number');
                        const n = i(t);
                        return (
                          void 0 !== e
                            ? typeof r === 'string'
                              ? n.fill(e, r)
                              : n.fill(e)
                            : n.fill(0),
                          n
                        );
                      }),
                      (a.allocUnsafe = function (t) {
                        if (typeof t !== 'number') throw new TypeError('Argument must be a number');
                        return i(t);
                      }),
                      (a.allocUnsafeSlow = function (t) {
                        if (typeof t !== 'number') throw new TypeError('Argument must be a number');
                        return n.SlowBuffer(t);
                      });
                    },
                    { 67: 67 },
                  ],
                  65: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      const i = n.isEncoding
                            || function (t) {
                              switch ((t = `${t}`) && t.toLowerCase()) {
                                case 'hex':
                                case 'utf8':
                                case 'utf-8':
                                case 'ascii':
                                case 'binary':
                                case 'base64':
                                case 'ucs2':
                                case 'ucs-2':
                                case 'utf16le':
                                case 'utf-16le':
                                case 'raw':
                                  return !0;
                                default:
                                  return !1;
                              }
                            };
                      function o(t) {
                        let e;
                        switch (
                          ((this.encoding = (function (t) {
                            const e = (function (t) {
                              if (!t) return 'utf8';
                              for (var e; ;) {
                                switch (t) {
                                  case 'utf8':
                                  case 'utf-8':
                                    return 'utf8';
                                  case 'ucs2':
                                  case 'ucs-2':
                                  case 'utf16le':
                                  case 'utf-16le':
                                    return 'utf16le';
                                  case 'latin1':
                                  case 'binary':
                                    return 'latin1';
                                  case 'base64':
                                  case 'ascii':
                                  case 'hex':
                                    return t;
                                  default:
                                    if (e) return;
                                    (t = (`${t}`).toLowerCase()), (e = !0);
                                }
                              }
                            }(t));
                            if (typeof e !== 'string' && (n.isEncoding === i || !i(t))) throw new Error(`Unknown encoding: ${t}`);
                            return e || t;
                          }(t))),
                          this.encoding)
                        ) {
                          case 'utf16le':
                            (this.text = f), (this.end = u), (e = 4);
                            break;
                          case 'utf8':
                            (this.fillLast = s), (e = 4);
                            break;
                          case 'base64':
                            (this.text = c), (this.end = h), (e = 3);
                            break;
                          default:
                            return (this.write = d), void (this.end = l);
                        }
                        (this.lastNeed = 0),
                        (this.lastTotal = 0),
                        (this.lastChar = n.allocUnsafe(e));
                      }
                      function a(t) {
                        return t <= 127
                          ? 0
                          : t >> 5 == 6
                            ? 2
                            : t >> 4 == 14
                              ? 3
                              : t >> 3 == 30
                                ? 4
                                : -1;
                      }
                      function s(t) {
                        const e = this.lastTotal - this.lastNeed;
                        const r = (function (t, e, r) {
                          if ((192 & e[0]) != 128) return (t.lastNeed = 0), 'ï¿½'.repeat(r);
                          if (t.lastNeed > 1 && e.length > 1) {
                            if ((192 & e[1]) != 128) return (t.lastNeed = 1), 'ï¿½'.repeat(r + 1);
                            if (t.lastNeed > 2 && e.length > 2 && (192 & e[2]) != 128) return (t.lastNeed = 2), 'ï¿½'.repeat(r + 2);
                          }
                        }(this, t, e));
                        return void 0 !== r
                          ? r
                          : this.lastNeed <= t.length
                            ? (t.copy(this.lastChar, e, 0, this.lastNeed),
                            this.lastChar.toString(this.encoding, 0, this.lastTotal))
                            : (t.copy(this.lastChar, e, 0, t.length),
                            void (this.lastNeed -= t.length));
                      }
                      function f(t, e) {
                        if ((t.length - e) % 2 == 0) {
                          const r = t.toString('utf16le', e);
                          if (r) {
                            const n = r.charCodeAt(r.length - 1);
                            if (n >= 55296 && n <= 56319) {
                              return (
                                (this.lastNeed = 2),
                                (this.lastTotal = 4),
                                (this.lastChar[0] = t[t.length - 2]),
                                (this.lastChar[1] = t[t.length - 1]),
                                r.slice(0, -1)
                              );
                            }
                          }
                          return r;
                        }
                        return (
                          (this.lastNeed = 1),
                          (this.lastTotal = 2),
                          (this.lastChar[0] = t[t.length - 1]),
                          t.toString('utf16le', e, t.length - 1)
                        );
                      }
                      function u(t) {
                        const e = t && t.length ? this.write(t) : '';
                        if (this.lastNeed) {
                          const r = this.lastTotal - this.lastNeed;
                          return e + this.lastChar.toString('utf16le', 0, r);
                        }
                        return e;
                      }
                      function c(t, e) {
                        const r = (t.length - e) % 3;
                        return r === 0
                          ? t.toString('base64', e)
                          : ((this.lastNeed = 3 - r),
                          (this.lastTotal = 3),
                          r === 1
                            ? (this.lastChar[0] = t[t.length - 1])
                            : ((this.lastChar[0] = t[t.length - 2]),
                            (this.lastChar[1] = t[t.length - 1])),
                          t.toString('base64', e, t.length - r));
                      }
                      function h(t) {
                        const e = t && t.length ? this.write(t) : '';
                        return this.lastNeed
                          ? e + this.lastChar.toString('base64', 0, 3 - this.lastNeed)
                          : e;
                      }
                      function d(t) {
                        return t.toString(this.encoding);
                      }
                      function l(t) {
                        return t && t.length ? this.write(t) : '';
                      }
                      (r.StringDecoder = o),
                      (o.prototype.write = function (t) {
                        if (t.length === 0) return '';
                        let e; let
                          r;
                        if (this.lastNeed) {
                          if (void 0 === (e = this.fillLast(t))) return '';
                          (r = this.lastNeed), (this.lastNeed = 0);
                        } else r = 0;
                        return r < t.length
                          ? e
                            ? e + this.text(t, r)
                            : this.text(t, r)
                          : e || '';
                      }),
                      (o.prototype.end = function (t) {
                        const e = t && t.length ? this.write(t) : '';
                        return this.lastNeed
                          ? e + 'ï¿½'.repeat(this.lastTotal - this.lastNeed)
                          : e;
                      }),
                      (o.prototype.text = function (t, e) {
                        const r = (function (t, e, r) {
                          let n = e.length - 1;
                          if (n < r) return 0;
                          let i = a(e[n]);
                          if (i >= 0) return i > 0 && (t.lastNeed = i - 1), i;
                          if (--n < r) return 0;
                          if ((i = a(e[n])) >= 0) return i > 0 && (t.lastNeed = i - 2), i;
                          if (--n < r) return 0;
                          if ((i = a(e[n])) >= 0) return i > 0 && (i === 2 ? (i = 0) : (t.lastNeed = i - 3)), i;
                          return 0;
                        }(this, t, e));
                        if (!this.lastNeed) return t.toString('utf8', e);
                        this.lastTotal = r;
                        const n = t.length - (r - this.lastNeed);
                        return t.copy(this.lastChar, 0, n), t.toString('utf8', e, n);
                      }),
                      (o.prototype.fillLast = function (t) {
                        if (this.lastNeed <= t.length) {
                          return (
                            t.copy(
                              this.lastChar,
                              this.lastTotal - this.lastNeed,
                              0,
                              this.lastNeed,
                            ),
                            this.lastChar.toString(this.encoding, 0, this.lastTotal)
                          );
                        }
                        t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length),
                        (this.lastNeed -= t.length);
                      });
                    },
                    { 514: 514 },
                  ],
                  66: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          e.exports = function (e, r) {
                            for (
                              var n = Math.min(e.length, r.length), i = new t(n), o = 0;
                              o < n;
                              ++o
                            ) i[o] = e[o] ^ r[o];
                            return i;
                          };
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    { 67: 67 },
                  ],
                  67: [
                    function (t, e, r) {
                      (function (e) {
                        (function () {
                          /*!
                             * The buffer module from node.js, for the browser.
                             *
                             * @author   Feross Aboukhadijeh <https://feross.org>
                             * @license  MIT
                             */

                          const e = t(18);
                          const n = t(466);
                          const i = typeof Symbol === 'function' && typeof Symbol.for === 'function'
                            ? Symbol.for('nodejs.util.inspect.custom')
                            : null;
                          (r.Buffer = s),
                          (r.SlowBuffer = function (t) {
                            +t != t && (t = 0);
                            return s.alloc(+t);
                          }),
                          (r.INSPECT_MAX_BYTES = 50);
                          const o = 2147483647;
                          function a(t) {
                            if (t > o) {
                              throw new RangeError(
                                `The value "${t}" is invalid for option "size"`,
                              );
                            }
                            const e = new Uint8Array(t);
                            return Object.setPrototypeOf(e, s.prototype), e;
                          }
                          function s(t, e, r) {
                            if (typeof t === 'number') {
                              if (typeof e === 'string') {
                                throw new TypeError(
                                  'The "string" argument must be of type string. Received type number',
                                );
                              }
                              return c(t);
                            }
                            return f(t, e, r);
                          }
                          function f(t, e, r) {
                            if (typeof t === 'string') {
                              return (function (t, e) {
                                (typeof e === 'string' && e !== '') || (e = 'utf8');
                                if (!s.isEncoding(e)) throw new TypeError(`Unknown encoding: ${e}`);
                                const r = 0 | p(t, e);
                                let n = a(r);
                                const i = n.write(t, e);
                                i !== r && (n = n.slice(0, i));
                                return n;
                              }(t, e));
                            }
                            if (ArrayBuffer.isView(t)) {
                              return (function (t) {
                                if (F(t, Uint8Array)) {
                                  const e = new Uint8Array(t);
                                  return d(e.buffer, e.byteOffset, e.byteLength);
                                }
                                return h(t);
                              }(t));
                            }
                            if (t == null) {
                              throw new TypeError(
                                `The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ${
                                  typeof t}`,
                              );
                            }
                            if (F(t, ArrayBuffer) || (t && F(t.buffer, ArrayBuffer))) return d(t, e, r);
                            if (
                              typeof SharedArrayBuffer !== 'undefined'
                                && (F(t, SharedArrayBuffer) || (t && F(t.buffer, SharedArrayBuffer)))
                            ) return d(t, e, r);
                            if (typeof t === 'number') {
                              throw new TypeError(
                                'The "value" argument must not be of type number. Received type number',
                              );
                            }
                            const n = t.valueOf && t.valueOf();
                            if (n != null && n !== t) return s.from(n, e, r);
                            const i = (function (t) {
                              if (s.isBuffer(t)) {
                                const e = 0 | l(t.length);
                                const r = a(e);
                                return r.length === 0 || t.copy(r, 0, 0, e), r;
                              }
                              if (void 0 !== t.length) return typeof t.length !== 'number' || q(t.length) ? a(0) : h(t);
                              if (t.type === 'Buffer' && Array.isArray(t.data)) return h(t.data);
                            }(t));
                            if (i) return i;
                            if (
                              typeof Symbol !== 'undefined'
                                && Symbol.toPrimitive != null
                                && typeof t[Symbol.toPrimitive] === 'function'
                            ) return s.from(t[Symbol.toPrimitive]('string'), e, r);
                            throw new TypeError(
                              `The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ${
                                typeof t}`,
                            );
                          }
                          function u(t) {
                            if (typeof t !== 'number') throw new TypeError('"size" argument must be of type number');
                            if (t < 0) {
                              throw new RangeError(
                                `The value "${t}" is invalid for option "size"`,
                              );
                            }
                          }
                          function c(t) {
                            return u(t), a(t < 0 ? 0 : 0 | l(t));
                          }
                          function h(t) {
                            for (
                              var e = t.length < 0 ? 0 : 0 | l(t.length), r = a(e), n = 0;
                              n < e;
                              n += 1
                            ) r[n] = 255 & t[n];
                            return r;
                          }
                          function d(t, e, r) {
                            if (e < 0 || t.byteLength < e) throw new RangeError('"offset" is outside of buffer bounds');
                            if (t.byteLength < e + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
                            let n;
                            return (
                              (n = void 0 === e && void 0 === r
                                ? new Uint8Array(t)
                                : void 0 === r
                                  ? new Uint8Array(t, e)
                                  : new Uint8Array(t, e, r)),
                              Object.setPrototypeOf(n, s.prototype),
                              n
                            );
                          }
                          function l(t) {
                            if (t >= o) {
                              throw new RangeError(
                                `Attempt to allocate Buffer larger than maximum size: 0x${
                                  o.toString(16)
                                } bytes`,
                              );
                            }
                            return 0 | t;
                          }
                          function p(t, e) {
                            if (s.isBuffer(t)) return t.length;
                            if (ArrayBuffer.isView(t) || F(t, ArrayBuffer)) return t.byteLength;
                            if (typeof t !== 'string') {
                              throw new TypeError(
                                `The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ${
                                  typeof t}`,
                              );
                            }
                            const r = t.length;
                            const n = arguments.length > 2 && !0 === arguments[2];
                            if (!n && r === 0) return 0;
                            for (let i = !1; ;) {
                              switch (e) {
                                case 'ascii':
                                case 'latin1':
                                case 'binary':
                                  return r;
                                case 'utf8':
                                case 'utf-8':
                                  return N(t).length;
                                case 'ucs2':
                                case 'ucs-2':
                                case 'utf16le':
                                case 'utf-16le':
                                  return 2 * r;
                                case 'hex':
                                  return r >>> 1;
                                case 'base64':
                                  return D(t).length;
                                default:
                                  if (i) return n ? -1 : N(t).length;
                                  (e = (`${e}`).toLowerCase()), (i = !0);
                              }
                            }
                          }
                          function b(t, e, r) {
                            let n = !1;
                            if (((void 0 === e || e < 0) && (e = 0), e > this.length)) return '';
                            if (((void 0 === r || r > this.length) && (r = this.length), r <= 0)) return '';
                            if ((r >>>= 0) <= (e >>>= 0)) return '';
                            for (t || (t = 'utf8'); ;) {
                              switch (t) {
                                case 'hex':
                                  return I(this, e, r);
                                case 'utf8':
                                case 'utf-8':
                                  return k(this, e, r);
                                case 'ascii':
                                  return A(this, e, r);
                                case 'latin1':
                                case 'binary':
                                  return R(this, e, r);
                                case 'base64':
                                  return E(this, e, r);
                                case 'ucs2':
                                case 'ucs-2':
                                case 'utf16le':
                                case 'utf-16le':
                                  return T(this, e, r);
                                default:
                                  if (n) throw new TypeError(`Unknown encoding: ${t}`);
                                  (t = (`${t}`).toLowerCase()), (n = !0);
                              }
                            }
                          }
                          function v(t, e, r) {
                            const n = t[e];
                            (t[e] = t[r]), (t[r] = n);
                          }
                          function g(t, e, r, n, i) {
                            if (t.length === 0) return -1;
                            if (
                              (typeof r === 'string'
                                ? ((n = r), (r = 0))
                                : r > 2147483647
                                  ? (r = 2147483647)
                                  : r < -2147483648 && (r = -2147483648),
                              q((r = +r)) && (r = i ? 0 : t.length - 1),
                              r < 0 && (r = t.length + r),
                              r >= t.length)
                            ) {
                              if (i) return -1;
                              r = t.length - 1;
                            } else if (r < 0) {
                              if (!i) return -1;
                              r = 0;
                            }
                            if ((typeof e === 'string' && (e = s.from(e, n)), s.isBuffer(e))) return e.length === 0 ? -1 : y(t, e, r, n, i);
                            if (typeof e === 'number') {
                              return (
                                (e &= 255),
                                typeof Uint8Array.prototype.indexOf === 'function'
                                  ? i
                                    ? Uint8Array.prototype.indexOf.call(t, e, r)
                                    : Uint8Array.prototype.lastIndexOf.call(t, e, r)
                                  : y(t, [e], r, n, i)
                              );
                            }
                            throw new TypeError('val must be string, number or Buffer');
                          }
                          function y(t, e, r, n, i) {
                            let o;
                            let a = 1;
                            let s = t.length;
                            let f = e.length;
                            if (
                              void 0 !== n
                                && ((n = String(n).toLowerCase()) === 'ucs2'
                                  || n === 'ucs-2'
                                  || n === 'utf16le'
                                  || n === 'utf-16le')
                            ) {
                              if (t.length < 2 || e.length < 2) return -1;
                              (a = 2), (s /= 2), (f /= 2), (r /= 2);
                            }
                            function u(t, e) {
                              return a === 1 ? t[e] : t.readUInt16BE(e * a);
                            }
                            if (i) {
                              let c = -1;
                              for (o = r; o < s; o++) {
                                if (u(t, o) === u(e, c === -1 ? 0 : o - c)) {
                                  if ((c === -1 && (c = o), o - c + 1 === f)) return c * a;
                                } else c !== -1 && (o -= o - c), (c = -1);
                              }
                            } else {
                              for (r + f > s && (r = s - f), o = r; o >= 0; o--) {
                                for (var h = !0, d = 0; d < f; d++) {
                                  if (u(t, o + d) !== u(e, d)) {
                                    h = !1;
                                    break;
                                  }
                                }
                                if (h) return o;
                              }
                            }
                            return -1;
                          }
                          function m(t, e, r, n) {
                            r = Number(r) || 0;
                            const i = t.length - r;
                            n ? (n = Number(n)) > i && (n = i) : (n = i);
                            const o = e.length;
                            n > o / 2 && (n = o / 2);
                            for (var a = 0; a < n; ++a) {
                              const s = parseInt(e.substr(2 * a, 2), 16);
                              if (q(s)) return a;
                              t[r + a] = s;
                            }
                            return a;
                          }
                          function w(t, e, r, n) {
                            return U(N(e, t.length - r), t, r, n);
                          }
                          function _(t, e, r, n) {
                            return U(
                              (function (t) {
                                for (var e = [], r = 0; r < t.length; ++r) e.push(255 & t.charCodeAt(r));
                                return e;
                              }(e)),
                              t,
                              r,
                              n,
                            );
                          }
                          function S(t, e, r, n) {
                            return U(D(e), t, r, n);
                          }
                          function M(t, e, r, n) {
                            return U(
                              (function (t, e) {
                                for (
                                  var r, n, i, o = [], a = 0;
                                  a < t.length && !((e -= 2) < 0);
                                  ++a
                                ) {
                                  (n = (r = t.charCodeAt(a)) >> 8),
                                  (i = r % 256),
                                  o.push(i),
                                  o.push(n);
                                }
                                return o;
                              }(e, t.length - r)),
                              t,
                              r,
                              n,
                            );
                          }
                          function E(t, r, n) {
                            return r === 0 && n === t.length
                              ? e.fromByteArray(t)
                              : e.fromByteArray(t.slice(r, n));
                          }
                          function k(t, e, r) {
                            r = Math.min(t.length, r);
                            for (var n = [], i = e; i < r;) {
                              var o;
                              var a;
                              var s;
                              var f;
                              const u = t[i];
                              let c = null;
                              let h = u > 239 ? 4 : u > 223 ? 3 : u > 191 ? 2 : 1;
                              if (i + h <= r) {
                                switch (h) {
                                  case 1:
                                    u < 128 && (c = u);
                                    break;
                                  case 2:
                                    (192 & (o = t[i + 1])) == 128
                                        && (f = ((31 & u) << 6) | (63 & o)) > 127
                                        && (c = f);
                                    break;
                                  case 3:
                                    (o = t[i + 1]),
                                    (a = t[i + 2]),
                                    (192 & o) == 128
                                          && (192 & a) == 128
                                          && (f = ((15 & u) << 12) | ((63 & o) << 6) | (63 & a))
                                            > 2047
                                          && (f < 55296 || f > 57343)
                                          && (c = f);
                                    break;
                                  case 4:
                                    (o = t[i + 1]),
                                    (a = t[i + 2]),
                                    (s = t[i + 3]),
                                    (192 & o) == 128
                                          && (192 & a) == 128
                                          && (192 & s) == 128
                                          && (f = ((15 & u) << 18)
                                            | ((63 & o) << 12)
                                            | ((63 & a) << 6)
                                            | (63 & s)) > 65535
                                          && f < 1114112
                                          && (c = f);
                                }
                              }
                              c === null
                                ? ((c = 65533), (h = 1))
                                : c > 65535
                                    && ((c -= 65536),
                                    n.push(((c >>> 10) & 1023) | 55296),
                                    (c = 56320 | (1023 & c))),
                              n.push(c),
                              (i += h);
                            }
                            return (function (t) {
                              const e = t.length;
                              if (e <= x) return String.fromCharCode.apply(String, t);
                              let r = '';
                              let n = 0;
                              for (; n < e;) r += String.fromCharCode.apply(String, t.slice(n, (n += x)));
                              return r;
                            }(n));
                          }
                          (r.kMaxLength = o),
                          (s.TYPED_ARRAY_SUPPORT = (function () {
                            try {
                              const t = new Uint8Array(1);
                              const e = {
                                foo() {
                                  return 42;
                                },
                              };
                              return (
                                Object.setPrototypeOf(e, Uint8Array.prototype),
                                Object.setPrototypeOf(t, e),
                                t.foo() === 42
                              );
                            } catch (t) {
                              return !1;
                            }
                          }())),
                          !s.TYPED_ARRAY_SUPPORT
                                && typeof console !== 'undefined'
                                && console.error,
                          Object.defineProperty(s.prototype, 'parent', {
                            enumerable: !0,
                            get() {
                              if (s.isBuffer(this)) return this.buffer;
                            },
                          }),
                          Object.defineProperty(s.prototype, 'offset', {
                            enumerable: !0,
                            get() {
                              if (s.isBuffer(this)) return this.byteOffset;
                            },
                          }),
                          (s.poolSize = 8192),
                          (s.from = function (t, e, r) {
                            return f(t, e, r);
                          }),
                          Object.setPrototypeOf(s.prototype, Uint8Array.prototype),
                          Object.setPrototypeOf(s, Uint8Array),
                          (s.alloc = function (t, e, r) {
                            return (function (t, e, r) {
                              return (
                                u(t),
                                t <= 0
                                  ? a(t)
                                  : void 0 !== e
                                    ? typeof r === 'string'
                                      ? a(t).fill(e, r)
                                      : a(t).fill(e)
                                    : a(t)
                              );
                            }(t, e, r));
                          }),
                          (s.allocUnsafe = function (t) {
                            return c(t);
                          }),
                          (s.allocUnsafeSlow = function (t) {
                            return c(t);
                          }),
                          (s.isBuffer = function (t) {
                            return t != null && !0 === t._isBuffer && t !== s.prototype;
                          }),
                          (s.compare = function (t, e) {
                            if (
                              (F(t, Uint8Array) && (t = s.from(t, t.offset, t.byteLength)),
                              F(e, Uint8Array) && (e = s.from(e, e.offset, e.byteLength)),
                              !s.isBuffer(t) || !s.isBuffer(e))
                            ) {
                              throw new TypeError(
                                'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array',
                              );
                            }
                            if (t === e) return 0;
                            for (
                              var r = t.length, n = e.length, i = 0, o = Math.min(r, n);
                              i < o;
                              ++i
                            ) {
                              if (t[i] !== e[i]) {
                                (r = t[i]), (n = e[i]);
                                break;
                              }
                            }
                            return r < n ? -1 : n < r ? 1 : 0;
                          }),
                          (s.isEncoding = function (t) {
                            switch (String(t).toLowerCase()) {
                              case 'hex':
                              case 'utf8':
                              case 'utf-8':
                              case 'ascii':
                              case 'latin1':
                              case 'binary':
                              case 'base64':
                              case 'ucs2':
                              case 'ucs-2':
                              case 'utf16le':
                              case 'utf-16le':
                                return !0;
                              default:
                                return !1;
                            }
                          }),
                          (s.concat = function (t, e) {
                            if (!Array.isArray(t)) {
                              throw new TypeError(
                                '"list" argument must be an Array of Buffers',
                              );
                            }
                            if (t.length === 0) return s.alloc(0);
                            let r;
                            if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) e += t[r].length;
                            const n = s.allocUnsafe(e);
                            let i = 0;
                            for (r = 0; r < t.length; ++r) {
                              const o = t[r];
                              if (F(o, Uint8Array)) {
                                i + o.length > n.length
                                  ? s.from(o).copy(n, i)
                                  : Uint8Array.prototype.set.call(n, o, i);
                              } else {
                                if (!s.isBuffer(o)) {
                                  throw new TypeError(
                                    '"list" argument must be an Array of Buffers',
                                  );
                                }
                                o.copy(n, i);
                              }
                              i += o.length;
                            }
                            return n;
                          }),
                          (s.byteLength = p),
                          (s.prototype._isBuffer = !0),
                          (s.prototype.swap16 = function () {
                            const t = this.length;
                            if (t % 2 != 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
                            for (let e = 0; e < t; e += 2) v(this, e, e + 1);
                            return this;
                          }),
                          (s.prototype.swap32 = function () {
                            const t = this.length;
                            if (t % 4 != 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
                            for (let e = 0; e < t; e += 4) v(this, e, e + 3), v(this, e + 1, e + 2);
                            return this;
                          }),
                          (s.prototype.swap64 = function () {
                            const t = this.length;
                            if (t % 8 != 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
                            for (let e = 0; e < t; e += 8) {
                              v(this, e, e + 7),
                              v(this, e + 1, e + 6),
                              v(this, e + 2, e + 5),
                              v(this, e + 3, e + 4);
                            }
                            return this;
                          }),
                          (s.prototype.toString = function () {
                            const t = this.length;
                            return t === 0
                              ? ''
                              : arguments.length === 0
                                ? k(this, 0, t)
                                : b.apply(this, arguments);
                          }),
                          (s.prototype.toLocaleString = s.prototype.toString),
                          (s.prototype.equals = function (t) {
                            if (!s.isBuffer(t)) throw new TypeError('Argument must be a Buffer');
                            return this === t || s.compare(this, t) === 0;
                          }),
                          (s.prototype.inspect = function () {
                            let t = '';
                            const e = r.INSPECT_MAX_BYTES;
                            return (
                              (t = this.toString('hex', 0, e)
                                .replace(/(.{2})/g, '$1 ')
                                .trim()),
                              this.length > e && (t += ' ... '),
                              `<Buffer ${t}>`
                            );
                          }),
                          i && (s.prototype[i] = s.prototype.inspect),
                          (s.prototype.compare = function (t, e, r, n, i) {
                            if (
                              (F(t, Uint8Array) && (t = s.from(t, t.offset, t.byteLength)),
                              !s.isBuffer(t))
                            ) {
                              throw new TypeError(
                                `The "target" argument must be one of type Buffer or Uint8Array. Received type ${
                                  typeof t}`,
                              );
                            }
                            if (
                              (void 0 === e && (e = 0),
                              void 0 === r && (r = t ? t.length : 0),
                              void 0 === n && (n = 0),
                              void 0 === i && (i = this.length),
                              e < 0 || r > t.length || n < 0 || i > this.length)
                            ) throw new RangeError('out of range index');
                            if (n >= i && e >= r) return 0;
                            if (n >= i) return -1;
                            if (e >= r) return 1;
                            if (this === t) return 0;
                            for (
                              var o = (i >>>= 0) - (n >>>= 0),
                                a = (r >>>= 0) - (e >>>= 0),
                                f = Math.min(o, a),
                                u = this.slice(n, i),
                                c = t.slice(e, r),
                                h = 0;
                              h < f;
                              ++h
                            ) {
                              if (u[h] !== c[h]) {
                                (o = u[h]), (a = c[h]);
                                break;
                              }
                            }
                            return o < a ? -1 : a < o ? 1 : 0;
                          }),
                          (s.prototype.includes = function (t, e, r) {
                            return this.indexOf(t, e, r) !== -1;
                          }),
                          (s.prototype.indexOf = function (t, e, r) {
                            return g(this, t, e, r, !0);
                          }),
                          (s.prototype.lastIndexOf = function (t, e, r) {
                            return g(this, t, e, r, !1);
                          }),
                          (s.prototype.write = function (t, e, r, n) {
                            if (void 0 === e) (n = 'utf8'), (r = this.length), (e = 0);
                            else if (void 0 === r && typeof e === 'string') (n = e), (r = this.length), (e = 0);
                            else {
                              if (!isFinite(e)) {
                                throw new Error(
                                  'Buffer.write(string, encoding, offset[, length]) is no longer supported',
                                );
                              }
                              (e >>>= 0),
                              isFinite(r)
                                ? ((r >>>= 0), void 0 === n && (n = 'utf8'))
                                : ((n = r), (r = void 0));
                            }
                            const i = this.length - e;
                            if (
                              ((void 0 === r || r > i) && (r = i),
                              (t.length > 0 && (r < 0 || e < 0)) || e > this.length)
                            ) throw new RangeError('Attempt to write outside buffer bounds');
                            n || (n = 'utf8');
                            for (let o = !1; ;) {
                              switch (n) {
                                case 'hex':
                                  return m(this, t, e, r);
                                case 'utf8':
                                case 'utf-8':
                                  return w(this, t, e, r);
                                case 'ascii':
                                case 'latin1':
                                case 'binary':
                                  return _(this, t, e, r);
                                case 'base64':
                                  return S(this, t, e, r);
                                case 'ucs2':
                                case 'ucs-2':
                                case 'utf16le':
                                case 'utf-16le':
                                  return M(this, t, e, r);
                                default:
                                  if (o) throw new TypeError(`Unknown encoding: ${n}`);
                                  (n = (`${n}`).toLowerCase()), (o = !0);
                              }
                            }
                          }),
                          (s.prototype.toJSON = function () {
                            return {
                              type: 'Buffer',
                              data: Array.prototype.slice.call(this._arr || this, 0),
                            };
                          });
                          var x = 4096;
                          function A(t, e, r) {
                            let n = '';
                            r = Math.min(t.length, r);
                            for (let i = e; i < r; ++i) n += String.fromCharCode(127 & t[i]);
                            return n;
                          }
                          function R(t, e, r) {
                            let n = '';
                            r = Math.min(t.length, r);
                            for (let i = e; i < r; ++i) n += String.fromCharCode(t[i]);
                            return n;
                          }
                          function I(t, e, r) {
                            const n = t.length;
                            (!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);
                            for (var i = '', o = e; o < r; ++o) i += z[t[o]];
                            return i;
                          }
                          function T(t, e, r) {
                            for (var n = t.slice(e, r), i = '', o = 0; o < n.length - 1; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);
                            return i;
                          }
                          function B(t, e, r) {
                            if (t % 1 != 0 || t < 0) throw new RangeError('offset is not uint');
                            if (t + e > r) throw new RangeError('Trying to access beyond buffer length');
                          }
                          function P(t, e, r, n, i, o) {
                            if (!s.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
                            if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
                            if (r + n > t.length) throw new RangeError('Index out of range');
                          }
                          function O(t, e, r, n, i, o) {
                            if (r + n > t.length) throw new RangeError('Index out of range');
                            if (r < 0) throw new RangeError('Index out of range');
                          }
                          function C(t, e, r, i, o) {
                            return (
                              (e = +e),
                              (r >>>= 0),
                              o || O(t, 0, r, 4),
                              n.write(t, e, r, i, 23, 4),
                              r + 4
                            );
                          }
                          function L(t, e, r, i, o) {
                            return (
                              (e = +e),
                              (r >>>= 0),
                              o || O(t, 0, r, 8),
                              n.write(t, e, r, i, 52, 8),
                              r + 8
                            );
                          }
                          (s.prototype.slice = function (t, e) {
                            const r = this.length;
                            (t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r),
                            (e = void 0 === e ? r : ~~e) < 0
                              ? (e += r) < 0 && (e = 0)
                              : e > r && (e = r),
                            e < t && (e = t);
                            const n = this.subarray(t, e);
                            return Object.setPrototypeOf(n, s.prototype), n;
                          }),
                          (s.prototype.readUintLE = s.prototype.readUIntLE = function (t, e, r) {
                            (t >>>= 0), (e >>>= 0), r || B(t, e, this.length);
                            for (var n = this[t], i = 1, o = 0; ++o < e && (i *= 256);) n += this[t + o] * i;
                            return n;
                          }),
                          (s.prototype.readUintBE = s.prototype.readUIntBE = function (t, e, r) {
                            (t >>>= 0), (e >>>= 0), r || B(t, e, this.length);
                            for (var n = this[t + --e], i = 1; e > 0 && (i *= 256);) n += this[t + --e] * i;
                            return n;
                          }),
                          (s.prototype.readUint8 = s.prototype.readUInt8 = function (t, e) {
                            return (t >>>= 0), e || B(t, 1, this.length), this[t];
                          }),
                          (s.prototype.readUint16LE = s.prototype.readUInt16LE = function (
                            t,
                            e,
                          ) {
                            return (
                              (t >>>= 0),
                              e || B(t, 2, this.length),
                              this[t] | (this[t + 1] << 8)
                            );
                          }),
                          (s.prototype.readUint16BE = s.prototype.readUInt16BE = function (
                            t,
                            e,
                          ) {
                            return (
                              (t >>>= 0),
                              e || B(t, 2, this.length),
                              (this[t] << 8) | this[t + 1]
                            );
                          }),
                          (s.prototype.readUint32LE = s.prototype.readUInt32LE = function (
                            t,
                            e,
                          ) {
                            return (
                              (t >>>= 0),
                              e || B(t, 4, this.length),
                              (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16))
                                    + 16777216 * this[t + 3]
                            );
                          }),
                          (s.prototype.readUint32BE = s.prototype.readUInt32BE = function (
                            t,
                            e,
                          ) {
                            return (
                              (t >>>= 0),
                              e || B(t, 4, this.length),
                              16777216 * this[t]
                                    + ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3])
                            );
                          }),
                          (s.prototype.readIntLE = function (t, e, r) {
                            (t >>>= 0), (e >>>= 0), r || B(t, e, this.length);
                            for (var n = this[t], i = 1, o = 0; ++o < e && (i *= 256);) n += this[t + o] * i;
                            return n >= (i *= 128) && (n -= Math.pow(2, 8 * e)), n;
                          }),
                          (s.prototype.readIntBE = function (t, e, r) {
                            (t >>>= 0), (e >>>= 0), r || B(t, e, this.length);
                            for (var n = e, i = 1, o = this[t + --n]; n > 0 && (i *= 256);) o += this[t + --n] * i;
                            return o >= (i *= 128) && (o -= Math.pow(2, 8 * e)), o;
                          }),
                          (s.prototype.readInt8 = function (t, e) {
                            return (
                              (t >>>= 0),
                              e || B(t, 1, this.length),
                              128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
                            );
                          }),
                          (s.prototype.readInt16LE = function (t, e) {
                            (t >>>= 0), e || B(t, 2, this.length);
                            const r = this[t] | (this[t + 1] << 8);
                            return 32768 & r ? 4294901760 | r : r;
                          }),
                          (s.prototype.readInt16BE = function (t, e) {
                            (t >>>= 0), e || B(t, 2, this.length);
                            const r = this[t + 1] | (this[t] << 8);
                            return 32768 & r ? 4294901760 | r : r;
                          }),
                          (s.prototype.readInt32LE = function (t, e) {
                            return (
                              (t >>>= 0),
                              e || B(t, 4, this.length),
                              this[t]
                                    | (this[t + 1] << 8)
                                    | (this[t + 2] << 16)
                                    | (this[t + 3] << 24)
                            );
                          }),
                          (s.prototype.readInt32BE = function (t, e) {
                            return (
                              (t >>>= 0),
                              e || B(t, 4, this.length),
                              (this[t] << 24)
                                    | (this[t + 1] << 16)
                                    | (this[t + 2] << 8)
                                    | this[t + 3]
                            );
                          }),
                          (s.prototype.readFloatLE = function (t, e) {
                            return (
                              (t >>>= 0), e || B(t, 4, this.length), n.read(this, t, !0, 23, 4)
                            );
                          }),
                          (s.prototype.readFloatBE = function (t, e) {
                            return (
                              (t >>>= 0), e || B(t, 4, this.length), n.read(this, t, !1, 23, 4)
                            );
                          }),
                          (s.prototype.readDoubleLE = function (t, e) {
                            return (
                              (t >>>= 0), e || B(t, 8, this.length), n.read(this, t, !0, 52, 8)
                            );
                          }),
                          (s.prototype.readDoubleBE = function (t, e) {
                            return (
                              (t >>>= 0), e || B(t, 8, this.length), n.read(this, t, !1, 52, 8)
                            );
                          }),
                          (s.prototype.writeUintLE = s.prototype.writeUIntLE = function (
                            t,
                            e,
                            r,
                            n,
                          ) {
                            ((t = +t), (e >>>= 0), (r >>>= 0), n)
                                  || P(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
                            let i = 1;
                            let o = 0;
                            for (this[e] = 255 & t; ++o < r && (i *= 256);) this[e + o] = (t / i) & 255;
                            return e + r;
                          }),
                          (s.prototype.writeUintBE = s.prototype.writeUIntBE = function (
                            t,
                            e,
                            r,
                            n,
                          ) {
                            ((t = +t), (e >>>= 0), (r >>>= 0), n)
                                  || P(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
                            let i = r - 1;
                            let o = 1;
                            for (this[e + i] = 255 & t; --i >= 0 && (o *= 256);) this[e + i] = (t / o) & 255;
                            return e + r;
                          }),
                          (s.prototype.writeUint8 = s.prototype.writeUInt8 = function (t, e, r) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 1, 255, 0),
                              (this[e] = 255 & t),
                              e + 1
                            );
                          }),
                          (s.prototype.writeUint16LE = s.prototype.writeUInt16LE = function (
                            t,
                            e,
                            r,
                          ) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 2, 65535, 0),
                              (this[e] = 255 & t),
                              (this[e + 1] = t >>> 8),
                              e + 2
                            );
                          }),
                          (s.prototype.writeUint16BE = s.prototype.writeUInt16BE = function (
                            t,
                            e,
                            r,
                          ) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 2, 65535, 0),
                              (this[e] = t >>> 8),
                              (this[e + 1] = 255 & t),
                              e + 2
                            );
                          }),
                          (s.prototype.writeUint32LE = s.prototype.writeUInt32LE = function (
                            t,
                            e,
                            r,
                          ) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 4, 4294967295, 0),
                              (this[e + 3] = t >>> 24),
                              (this[e + 2] = t >>> 16),
                              (this[e + 1] = t >>> 8),
                              (this[e] = 255 & t),
                              e + 4
                            );
                          }),
                          (s.prototype.writeUint32BE = s.prototype.writeUInt32BE = function (
                            t,
                            e,
                            r,
                          ) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 4, 4294967295, 0),
                              (this[e] = t >>> 24),
                              (this[e + 1] = t >>> 16),
                              (this[e + 2] = t >>> 8),
                              (this[e + 3] = 255 & t),
                              e + 4
                            );
                          }),
                          (s.prototype.writeIntLE = function (t, e, r, n) {
                            if (((t = +t), (e >>>= 0), !n)) {
                              const i = Math.pow(2, 8 * r - 1);
                              P(this, t, e, r, i - 1, -i);
                            }
                            let o = 0;
                            let a = 1;
                            let s = 0;
                            for (this[e] = 255 & t; ++o < r && (a *= 256);) {
                              t < 0 && s === 0 && this[e + o - 1] !== 0 && (s = 1),
                              (this[e + o] = (((t / a) >> 0) - s) & 255);
                            }
                            return e + r;
                          }),
                          (s.prototype.writeIntBE = function (t, e, r, n) {
                            if (((t = +t), (e >>>= 0), !n)) {
                              const i = Math.pow(2, 8 * r - 1);
                              P(this, t, e, r, i - 1, -i);
                            }
                            let o = r - 1;
                            let a = 1;
                            let s = 0;
                            for (this[e + o] = 255 & t; --o >= 0 && (a *= 256);) {
                              t < 0 && s === 0 && this[e + o + 1] !== 0 && (s = 1),
                              (this[e + o] = (((t / a) >> 0) - s) & 255);
                            }
                            return e + r;
                          }),
                          (s.prototype.writeInt8 = function (t, e, r) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 1, 127, -128),
                              t < 0 && (t = 255 + t + 1),
                              (this[e] = 255 & t),
                              e + 1
                            );
                          }),
                          (s.prototype.writeInt16LE = function (t, e, r) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 2, 32767, -32768),
                              (this[e] = 255 & t),
                              (this[e + 1] = t >>> 8),
                              e + 2
                            );
                          }),
                          (s.prototype.writeInt16BE = function (t, e, r) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 2, 32767, -32768),
                              (this[e] = t >>> 8),
                              (this[e + 1] = 255 & t),
                              e + 2
                            );
                          }),
                          (s.prototype.writeInt32LE = function (t, e, r) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 4, 2147483647, -2147483648),
                              (this[e] = 255 & t),
                              (this[e + 1] = t >>> 8),
                              (this[e + 2] = t >>> 16),
                              (this[e + 3] = t >>> 24),
                              e + 4
                            );
                          }),
                          (s.prototype.writeInt32BE = function (t, e, r) {
                            return (
                              (t = +t),
                              (e >>>= 0),
                              r || P(this, t, e, 4, 2147483647, -2147483648),
                              t < 0 && (t = 4294967295 + t + 1),
                              (this[e] = t >>> 24),
                              (this[e + 1] = t >>> 16),
                              (this[e + 2] = t >>> 8),
                              (this[e + 3] = 255 & t),
                              e + 4
                            );
                          }),
                          (s.prototype.writeFloatLE = function (t, e, r) {
                            return C(this, t, e, !0, r);
                          }),
                          (s.prototype.writeFloatBE = function (t, e, r) {
                            return C(this, t, e, !1, r);
                          }),
                          (s.prototype.writeDoubleLE = function (t, e, r) {
                            return L(this, t, e, !0, r);
                          }),
                          (s.prototype.writeDoubleBE = function (t, e, r) {
                            return L(this, t, e, !1, r);
                          }),
                          (s.prototype.copy = function (t, e, r, n) {
                            if (!s.isBuffer(t)) throw new TypeError('argument should be a Buffer');
                            if (
                              (r || (r = 0),
                              n || n === 0 || (n = this.length),
                              e >= t.length && (e = t.length),
                              e || (e = 0),
                              n > 0 && n < r && (n = r),
                              n === r)
                            ) return 0;
                            if (t.length === 0 || this.length === 0) return 0;
                            if (e < 0) throw new RangeError('targetStart out of bounds');
                            if (r < 0 || r >= this.length) throw new RangeError('Index out of range');
                            if (n < 0) throw new RangeError('sourceEnd out of bounds');
                            n > this.length && (n = this.length),
                            t.length - e < n - r && (n = t.length - e + r);
                            const i = n - r;
                            return (
                              this === t && typeof Uint8Array.prototype.copyWithin === 'function'
                                ? this.copyWithin(e, r, n)
                                : Uint8Array.prototype.set.call(t, this.subarray(r, n), e),
                              i
                            );
                          }),
                          (s.prototype.fill = function (t, e, r, n) {
                            if (typeof t === 'string') {
                              if (
                                (typeof e === 'string'
                                  ? ((n = e), (e = 0), (r = this.length))
                                  : typeof r === 'string' && ((n = r), (r = this.length)),
                                void 0 !== n && typeof n !== 'string')
                              ) throw new TypeError('encoding must be a string');
                              if (typeof n === 'string' && !s.isEncoding(n)) throw new TypeError(`Unknown encoding: ${n}`);
                              if (t.length === 1) {
                                const i = t.charCodeAt(0);
                                ((n === 'utf8' && i < 128) || n === 'latin1') && (t = i);
                              }
                            } else {
                              typeof t === 'number'
                                ? (t &= 255)
                                : typeof t === 'boolean' && (t = Number(t));
                            }
                            if (e < 0 || this.length < e || this.length < r) throw new RangeError('Out of range index');
                            if (r <= e) return this;
                            let o;
                            if (
                              ((e >>>= 0),
                              (r = void 0 === r ? this.length : r >>> 0),
                              t || (t = 0),
                              typeof t === 'number')
                            ) for (o = e; o < r; ++o) this[o] = t;
                            else {
                              const a = s.isBuffer(t) ? t : s.from(t, n);
                              const f = a.length;
                              if (f === 0) {
                                throw new TypeError(
                                  `The value "${t}" is invalid for argument "value"`,
                                );
                              }
                              for (o = 0; o < r - e; ++o) this[o + e] = a[o % f];
                            }
                            return this;
                          });
                          const j = /[^+/0-9A-Za-z-_]/g;
                          function N(t, e) {
                            let r;
                            e = e || 1 / 0;
                            for (var n = t.length, i = null, o = [], a = 0; a < n; ++a) {
                              if ((r = t.charCodeAt(a)) > 55295 && r < 57344) {
                                if (!i) {
                                  if (r > 56319) {
                                    (e -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                  }
                                  if (a + 1 === n) {
                                    (e -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                  }
                                  i = r;
                                  continue;
                                }
                                if (r < 56320) {
                                  (e -= 3) > -1 && o.push(239, 191, 189), (i = r);
                                  continue;
                                }
                                r = 65536 + (((i - 55296) << 10) | (r - 56320));
                              } else i && (e -= 3) > -1 && o.push(239, 191, 189);
                              if (((i = null), r < 128)) {
                                if ((e -= 1) < 0) break;
                                o.push(r);
                              } else if (r < 2048) {
                                if ((e -= 2) < 0) break;
                                o.push((r >> 6) | 192, (63 & r) | 128);
                              } else if (r < 65536) {
                                if ((e -= 3) < 0) break;
                                o.push((r >> 12) | 224, ((r >> 6) & 63) | 128, (63 & r) | 128);
                              } else {
                                if (!(r < 1114112)) throw new Error('Invalid code point');
                                if ((e -= 4) < 0) break;
                                o.push(
                                  (r >> 18) | 240,
                                  ((r >> 12) & 63) | 128,
                                  ((r >> 6) & 63) | 128,
                                  (63 & r) | 128,
                                );
                              }
                            }
                            return o;
                          }
                          function D(t) {
                            return e.toByteArray(
                              (function (t) {
                                if ((t = (t = t.split('=')[0]).trim().replace(j, '')).length < 2) return '';
                                for (; t.length % 4 != 0;) t += '=';
                                return t;
                              }(t)),
                            );
                          }
                          function U(t, e, r, n) {
                            for (var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i) e[i + r] = t[i];
                            return i;
                          }
                          function F(t, e) {
                            return (
                              t instanceof e
                                || (t != null
                                  && t.constructor != null
                                  && t.constructor.name != null
                                  && t.constructor.name === e.name)
                            );
                          }
                          function q(t) {
                            return t != t;
                          }
                          var z = (function () {
                            for (
                              var t = '0123456789abcdef', e = new Array(256), r = 0;
                              r < 16;
                              ++r
                            ) for (let n = 16 * r, i = 0; i < 16; ++i) e[n + i] = t[r] + t[i];
                            return e;
                          }());
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    { 18: 18, 466: 466, 67: 67 },
                  ],
                  68: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      const i = t(525).Transform;
                      const o = t(65).StringDecoder;
                      function a(t) {
                        i.call(this),
                        (this.hashMode = typeof t === 'string'),
                        this.hashMode
                          ? (this[t] = this._finalOrDigest)
                          : (this.final = this._finalOrDigest),
                        this._final && ((this.__final = this._final), (this._final = null)),
                        (this._decoder = null),
                        (this._encoding = null);
                      }
                      t(467)(a, i),
                      (a.prototype.update = function (t, e, r) {
                        typeof t === 'string' && (t = n.from(t, e));
                        let i = this._update(t);
                        return this.hashMode ? this : (r && (i = this._toString(i, r)), i);
                      }),
                      (a.prototype.setAutoPadding = function () {}),
                      (a.prototype.getAuthTag = function () {
                        throw new Error('trying to get auth tag in unsupported state');
                      }),
                      (a.prototype.setAuthTag = function () {
                        throw new Error('trying to set auth tag in unsupported state');
                      }),
                      (a.prototype.setAAD = function () {
                        throw new Error('trying to set aad in unsupported state');
                      }),
                      (a.prototype._transform = function (t, e, r) {
                        let n;
                        try {
                          this.hashMode ? this._update(t) : this.push(this._update(t));
                        } catch (t) {
                          n = t;
                        } finally {
                          r(n);
                        }
                      }),
                      (a.prototype._flush = function (t) {
                        let e;
                        try {
                          this.push(this.__final());
                        } catch (t) {
                          e = t;
                        }
                        t(e);
                      }),
                      (a.prototype._finalOrDigest = function (t) {
                        let e = this.__final() || n.alloc(0);
                        return t && (e = this._toString(e, t, !0)), e;
                      }),
                      (a.prototype._toString = function (t, e, r) {
                        if (
                          (this._decoder || ((this._decoder = new o(e)), (this._encoding = e)),
                          this._encoding !== e)
                        ) throw new Error("can't switch encodings");
                        let n = this._decoder.write(t);
                        return r && (n += this._decoder.end()), n;
                      }),
                      (e.exports = a);
                    },
                    {
                      467: 467, 514: 514, 525: 525, 65: 65,
                    },
                  ],
                  69: [
                    function (t, e, r) {
                      t(199), (e.exports = t(91).RegExp.escape);
                    },
                    { 199: 199, 91: 91 },
                  ],
                  70: [
                    function (t, e, r) {
                      e.exports = function (t) {
                        if (typeof t !== 'function') throw TypeError(`${t} is not a function!`);
                        return t;
                      };
                    },
                    {},
                  ],
                  71: [
                    function (t, e, r) {
                      const n = t(86);
                      e.exports = function (t, e) {
                        if (typeof t !== 'number' && n(t) != 'Number') throw TypeError(e);
                        return +t;
                      };
                    },
                    { 86: 86 },
                  ],
                  72: [
                    function (t, e, r) {
                      const n = t(197)('unscopables');
                      const i = Array.prototype;
                      i[n] == null && t(111)(i, n, {}),
                      (e.exports = function (t) {
                        i[n][t] = !0;
                      });
                    },
                    { 111: 111, 197: 197 },
                  ],
                  73: [
                    function (t, e, r) {
                      const n = t(174)(!0);
                      e.exports = function (t, e, r) {
                        return e + (r ? n(t, e).length : 1);
                      };
                    },
                    { 174: 174 },
                  ],
                  74: [
                    function (t, e, r) {
                      e.exports = function (t, e, r, n) {
                        if (!(t instanceof e) || (void 0 !== n && n in t)) throw TypeError(`${r}: incorrect invocation!`);
                        return t;
                      };
                    },
                    {},
                  ],
                  75: [
                    function (t, e, r) {
                      const n = t(120);
                      e.exports = function (t) {
                        if (!n(t)) throw TypeError(`${t} is not an object!`);
                        return t;
                      };
                    },
                    { 120: 120 },
                  ],
                  76: [
                    function (t, e, r) {
                      const n = t(187);
                      const i = t(182);
                      const o = t(186);
                      e.exports = [].copyWithin
                          || function (t, e) {
                            const r = n(this);
                            const a = o(r.length);
                            let s = i(t, a);
                            let f = i(e, a);
                            const u = arguments.length > 2 ? arguments[2] : void 0;
                            let c = Math.min((void 0 === u ? a : i(u, a)) - f, a - s);
                            let h = 1;
                            for (
                              f < s && s < f + c && ((h = -1), (f += c - 1), (s += c - 1));
                              c-- > 0;

                            ) f in r ? (r[s] = r[f]) : delete r[s], (s += h), (f += h);
                            return r;
                          };
                    },
                    { 182: 182, 186: 186, 187: 187 },
                  ],
                  77: [
                    function (t, e, r) {
                      const n = t(187);
                      const i = t(182);
                      const o = t(186);
                      e.exports = function (t) {
                        for (
                          var e = n(this),
                            r = o(e.length),
                            a = arguments.length,
                            s = i(a > 1 ? arguments[1] : void 0, r),
                            f = a > 2 ? arguments[2] : void 0,
                            u = void 0 === f ? r : i(f, r);
                          u > s;

                        ) e[s++] = t;
                        return e;
                      };
                    },
                    { 182: 182, 186: 186, 187: 187 },
                  ],
                  78: [
                    function (t, e, r) {
                      const n = t(107);
                      e.exports = function (t, e) {
                        const r = [];
                        return n(t, !1, r.push, r, e), r;
                      };
                    },
                    { 107: 107 },
                  ],
                  79: [
                    function (t, e, r) {
                      const n = t(185);
                      const i = t(186);
                      const o = t(182);
                      e.exports = function (t) {
                        return function (e, r, a) {
                          let s;
                          const f = n(e);
                          const u = i(f.length);
                          let c = o(a, u);
                          if (t && r != r) {
                            for (; u > c;) if ((s = f[c++]) != s) return !0;
                          } else for (; u > c; c++) if ((t || c in f) && f[c] === r) return t || c || 0;
                          return !t && -1;
                        };
                      };
                    },
                    { 182: 182, 185: 185, 186: 186 },
                  ],
                  80: [
                    function (t, e, r) {
                      const n = t(93);
                      const i = t(116);
                      const o = t(187);
                      const a = t(186);
                      const s = t(83);
                      e.exports = function (t, e) {
                        const r = t == 1;
                        const f = t == 2;
                        const u = t == 3;
                        const c = t == 4;
                        const h = t == 6;
                        const d = t == 5 || h;
                        const l = e || s;
                        return function (e, s, p) {
                          for (
                            var b,
                              v,
                              g = o(e),
                              y = i(g),
                              m = n(s, p, 3),
                              w = a(y.length),
                              _ = 0,
                              S = r ? l(e, w) : f ? l(e, 0) : void 0;
                            w > _;
                            _++
                          ) {
                            if ((d || _ in y) && ((v = m((b = y[_]), _, g)), t)) {
                              if (r) S[_] = v;
                              else if (v) {
                                switch (t) {
                                  case 3:
                                    return !0;
                                  case 5:
                                    return b;
                                  case 6:
                                    return _;
                                  case 2:
                                    S.push(b);
                                }
                              } else if (c) return !1;
                            }
                          }
                          return h ? -1 : u || c ? c : S;
                        };
                      };
                    },
                    {
                      116: 116, 186: 186, 187: 187, 83: 83, 93: 93,
                    },
                  ],
                  81: [
                    function (t, e, r) {
                      const n = t(70);
                      const i = t(187);
                      const o = t(116);
                      const a = t(186);
                      e.exports = function (t, e, r, s, f) {
                        n(e);
                        const u = i(t);
                        const c = o(u);
                        const h = a(u.length);
                        let d = f ? h - 1 : 0;
                        const l = f ? -1 : 1;
                        if (r < 2) {
                          for (;;) {
                            if (d in c) {
                              (s = c[d]), (d += l);
                              break;
                            }
                            if (((d += l), f ? d < 0 : h <= d)) throw TypeError('Reduce of empty array with no initial value');
                          }
                        }
                        for (; f ? d >= 0 : h > d; d += l) d in c && (s = e(s, c[d], d, u));
                        return s;
                      };
                    },
                    {
                      116: 116, 186: 186, 187: 187, 70: 70,
                    },
                  ],
                  82: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(118);
                      const o = t(197)('species');
                      e.exports = function (t) {
                        let e;
                        return (
                          i(t)
                              && (typeof (e = t.constructor) !== 'function'
                                || (e !== Array && !i(e.prototype))
                                || (e = void 0),
                              n(e) && (e = e[o]) === null && (e = void 0)),
                          void 0 === e ? Array : e
                        );
                      };
                    },
                    { 118: 118, 120: 120, 197: 197 },
                  ],
                  83: [
                    function (t, e, r) {
                      const n = t(82);
                      e.exports = function (t, e) {
                        return new (n(t))(e);
                      };
                    },
                    { 82: 82 },
                  ],
                  84: [
                    function (t, e, r) {
                      const n = t(70);
                      const i = t(120);
                      const o = t(115);
                      const a = [].slice;
                      const s = {};
                      const f = function (t, e, r) {
                        if (!(e in s)) {
                          for (var n = [], i = 0; i < e; i++) n[i] = `a[${i}]`;
                          s[e] = Function('F,a', `return new F(${n.join(',')})`);
                        }
                        return s[e](t, r);
                      };
                      e.exports = Function.bind
                          || function (t) {
                            const e = n(this);
                            const r = a.call(arguments, 1);
                            var s = function () {
                              const n = r.concat(a.call(arguments));
                              return this instanceof s ? f(e, n.length, n) : o(e, n, t);
                            };
                            return i(e.prototype) && (s.prototype = e.prototype), s;
                          };
                    },
                    { 115: 115, 120: 120, 70: 70 },
                  ],
                  85: [
                    function (t, e, r) {
                      const n = t(86);
                      const i = t(197)('toStringTag');
                      const o = n(
                        (function () {
                          return arguments;
                        }()),
                      )
                            == 'Arguments';
                      e.exports = function (t) {
                        let e; let r; let
                          a;
                        return void 0 === t
                          ? 'Undefined'
                          : t === null
                            ? 'Null'
                            : typeof (r = (function (t, e) {
                              try {
                                return t[e];
                              } catch (t) {}
                            }((e = Object(t)), i)))
                              === 'string'
                              ? r
                              : o
                                ? n(e)
                                : (a = n(e)) == 'Object' && typeof e.callee === 'function'
                                  ? 'Arguments'
                                  : a;
                      };
                    },
                    { 197: 197, 86: 86 },
                  ],
                  86: [
                    function (t, e, r) {
                      const n = {}.toString;
                      e.exports = function (t) {
                        return n.call(t).slice(8, -1);
                      };
                    },
                    {},
                  ],
                  87: [
                    function (t, e, r) {
                      const n = t(140).f;
                      const i = t(139);
                      const o = t(159);
                      const a = t(93);
                      const s = t(74);
                      const f = t(107);
                      const u = t(124);
                      const c = t(126);
                      const h = t(168);
                      const d = t(97);
                      const l = t(134).fastKey;
                      const p = t(194);
                      const b = d ? '_s' : 'size';
                      const v = function (t, e) {
                        let r;
                        const n = l(e);
                        if (n !== 'F') return t._i[n];
                        for (r = t._f; r; r = r.n) if (r.k == e) return r;
                      };
                      e.exports = {
                        getConstructor(t, e, r, u) {
                          var c = t((t, n) => {
                            s(t, c, e, '_i'),
                            (t._t = e),
                            (t._i = i(null)),
                            (t._f = void 0),
                            (t._l = void 0),
                            (t[b] = 0),
                            n != null && f(n, r, t[u], t);
                          });
                          return (
                            o(c.prototype, {
                              clear() {
                                for (var t = p(this, e), r = t._i, n = t._f; n; n = n.n) (n.r = !0), n.p && (n.p = n.p.n = void 0), delete r[n.i];
                                (t._f = t._l = void 0), (t[b] = 0);
                              },
                              delete(t) {
                                const r = p(this, e);
                                const n = v(r, t);
                                if (n) {
                                  const i = n.n;
                                  const o = n.p;
                                  delete r._i[n.i],
                                  (n.r = !0),
                                  o && (o.n = i),
                                  i && (i.p = o),
                                  r._f == n && (r._f = i),
                                  r._l == n && (r._l = o),
                                  r[b]--;
                                }
                                return !!n;
                              },
                              forEach(t) {
                                p(this, e);
                                for (
                                  var r,
                                    n = a(t, arguments.length > 1 ? arguments[1] : void 0, 3);
                                  (r = r ? r.n : this._f);

                                ) for (n(r.v, r.k, this); r && r.r;) r = r.p;
                              },
                              has(t) {
                                return !!v(p(this, e), t);
                              },
                            }),
                            d
                                && n(c.prototype, 'size', {
                                  get() {
                                    return p(this, e)[b];
                                  },
                                }),
                            c
                          );
                        },
                        def(t, e, r) {
                          let n;
                          let i;
                          let o = v(t, e);
                          return (
                            o
                              ? (o.v = r)
                              : ((t._l = o = {
                                i: (i = l(e, !0)),
                                k: e,
                                v: r,
                                p: (n = t._l),
                                n: void 0,
                                r: !1,
                              }),
                              t._f || (t._f = o),
                              n && (n.n = o),
                              t[b]++,
                              i !== 'F' && (t._i[i] = o)),
                            t
                          );
                        },
                        getEntry: v,
                        setStrong(t, e, r) {
                          u(
                            t,
                            e,
                            function (t, r) {
                              (this._t = p(t, e)), (this._k = r), (this._l = void 0);
                            },
                            function () {
                              for (var t = this, e = t._k, r = t._l; r && r.r;) r = r.p;
                              return t._t && (t._l = r = r ? r.n : t._t._f)
                                ? c(0, e == 'keys' ? r.k : e == 'values' ? r.v : [r.k, r.v])
                                : ((t._t = void 0), c(1));
                            },
                            r ? 'entries' : 'values',
                            !r,
                            !0,
                          ),
                          h(e);
                        },
                      };
                    },
                    {
                      107: 107,
                      124: 124,
                      126: 126,
                      134: 134,
                      139: 139,
                      140: 140,
                      159: 159,
                      168: 168,
                      194: 194,
                      74: 74,
                      93: 93,
                      97: 97,
                    },
                  ],
                  88: [
                    function (t, e, r) {
                      const n = t(85);
                      const i = t(78);
                      e.exports = function (t) {
                        return function () {
                          if (n(this) != t) throw TypeError(`${t}#toJSON isn't generic`);
                          return i(this);
                        };
                      };
                    },
                    { 78: 78, 85: 85 },
                  ],
                  89: [
                    function (t, e, r) {
                      const n = t(159);
                      const i = t(134).getWeak;
                      const o = t(75);
                      const a = t(120);
                      const s = t(74);
                      const f = t(107);
                      const u = t(80);
                      const c = t(110);
                      const h = t(194);
                      const d = u(5);
                      const l = u(6);
                      let p = 0;
                      const b = function (t) {
                        return t._l || (t._l = new v());
                      };
                      var v = function () {
                        this.a = [];
                      };
                      const g = function (t, e) {
                        return d(t.a, (t) => t[0] === e);
                      };
                      (v.prototype = {
                        get(t) {
                          const e = g(this, t);
                          if (e) return e[1];
                        },
                        has(t) {
                          return !!g(this, t);
                        },
                        set(t, e) {
                          const r = g(this, t);
                          r ? (r[1] = e) : this.a.push([t, e]);
                        },
                        delete(t) {
                          const e = l(this.a, (e) => e[0] === t);
                          return ~e && this.a.splice(e, 1), !!~e;
                        },
                      }),
                      (e.exports = {
                        getConstructor(t, e, r, o) {
                          var u = t((t, n) => {
                            s(t, u, e, '_i'),
                            (t._t = e),
                            (t._i = p++),
                            (t._l = void 0),
                            n != null && f(n, r, t[o], t);
                          });
                          return (
                            n(u.prototype, {
                              delete(t) {
                                if (!a(t)) return !1;
                                const r = i(t);
                                return !0 === r
                                  ? b(h(this, e)).delete(t)
                                  : r && c(r, this._i) && delete r[this._i];
                              },
                              has(t) {
                                if (!a(t)) return !1;
                                const r = i(t);
                                return !0 === r ? b(h(this, e)).has(t) : r && c(r, this._i);
                              },
                            }),
                            u
                          );
                        },
                        def(t, e, r) {
                          const n = i(o(e), !0);
                          return !0 === n ? b(t).set(e, r) : (n[t._i] = r), t;
                        },
                        ufstore: b,
                      });
                    },
                    {
                      107: 107,
                      110: 110,
                      120: 120,
                      134: 134,
                      159: 159,
                      194: 194,
                      74: 74,
                      75: 75,
                      80: 80,
                    },
                  ],
                  90: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(101);
                      const o = t(160);
                      const a = t(159);
                      const s = t(134);
                      const f = t(107);
                      const u = t(74);
                      const c = t(120);
                      const h = t(103);
                      const d = t(125);
                      const l = t(169);
                      const p = t(114);
                      e.exports = function (t, e, r, b, v, g) {
                        const y = n[t];
                        let m = y;
                        const w = v ? 'set' : 'add';
                        const _ = m && m.prototype;
                        const S = {};
                        const M = function (t) {
                          const e = _[t];
                          o(
                            _,
                            t,
                            t == 'delete' || t == 'has'
                              ? function (t) {
                                return !(g && !c(t)) && e.call(this, t === 0 ? 0 : t);
                              }
                              : t == 'get'
                                ? function (t) {
                                  return g && !c(t) ? void 0 : e.call(this, t === 0 ? 0 : t);
                                }
                                : t == 'add'
                                  ? function (t) {
                                    return e.call(this, t === 0 ? 0 : t), this;
                                  }
                                  : function (t, r) {
                                    return e.call(this, t === 0 ? 0 : t, r), this;
                                  },
                          );
                        };
                        if (
                          typeof m === 'function'
                            && (g
                              || (_.forEach
                                && !h(() => {
                                  new m().entries().next();
                                })))
                        ) {
                          const E = new m();
                          const k = E[w](g ? {} : -0, 1) != E;
                          const x = h(() => {
                            E.has(1);
                          });
                          const A = d((t) => {
                            new m(t);
                          });
                          const R = !g
                                && h(() => {
                                  for (var t = new m(), e = 5; e--;) t[w](e, e);
                                  return !t.has(-0);
                                });
                          A
                              || (((m = e((e, r) => {
                                u(e, m, t);
                                const n = p(new y(), e, m);
                                return r != null && f(r, v, n[w], n), n;
                              })).prototype = _),
                              (_.constructor = m)),
                          (x || R) && (M('delete'), M('has'), v && M('get')),
                          (R || k) && M(w),
                          g && _.clear && delete _.clear;
                        } else (m = b.getConstructor(e, t, v, w)), a(m.prototype, r), (s.NEED = !0);
                        return (
                          l(m, t),
                          (S[t] = m),
                          i(i.G + i.W + i.F * (m != y), S),
                          g || b.setStrong(m, t, v),
                          m
                        );
                      };
                    },
                    {
                      101: 101,
                      103: 103,
                      107: 107,
                      109: 109,
                      114: 114,
                      120: 120,
                      125: 125,
                      134: 134,
                      159: 159,
                      160: 160,
                      169: 169,
                      74: 74,
                    },
                  ],
                  91: [
                    function (t, e, r) {
                      const n = (e.exports = { version: '2.6.12' });
                      typeof __e === 'number' && (__e = n);
                    },
                    {},
                  ],
                  92: [
                    function (t, e, r) {
                      const n = t(140);
                      const i = t(158);
                      e.exports = function (t, e, r) {
                        e in t ? n.f(t, e, i(0, r)) : (t[e] = r);
                      };
                    },
                    { 140: 140, 158: 158 },
                  ],
                  93: [
                    function (t, e, r) {
                      const n = t(70);
                      e.exports = function (t, e, r) {
                        if ((n(t), void 0 === e)) return t;
                        switch (r) {
                          case 1:
                            return function (r) {
                              return t.call(e, r);
                            };
                          case 2:
                            return function (r, n) {
                              return t.call(e, r, n);
                            };
                          case 3:
                            return function (r, n, i) {
                              return t.call(e, r, n, i);
                            };
                        }
                        return function () {
                          return t.apply(e, arguments);
                        };
                      };
                    },
                    { 70: 70 },
                  ],
                  94: [
                    function (t, e, r) {
                      const n = t(103);
                      const i = Date.prototype.getTime;
                      const o = Date.prototype.toISOString;
                      const a = function (t) {
                        return t > 9 ? t : `0${t}`;
                      };
                      e.exports = n(() => o.call(new Date(-50000000000001)) != '0385-07-25T07:06:39.999Z')
                          || !n(() => {
                            o.call(new Date(NaN));
                          })
                        ? function () {
                          if (!isFinite(i.call(this))) throw RangeError('Invalid time value');
                          const t = this;
                          const e = t.getUTCFullYear();
                          const r = t.getUTCMilliseconds();
                          const n = e < 0 ? '-' : e > 9999 ? '+' : '';
                          return (
                            `${n
                                  + (`00000${Math.abs(e)}`).slice(n ? -6 : -4)
                            }-${
                              a(t.getUTCMonth() + 1)
                            }-${
                              a(t.getUTCDate())
                            }T${
                              a(t.getUTCHours())
                            }:${
                              a(t.getUTCMinutes())
                            }:${
                              a(t.getUTCSeconds())
                            }.${
                              r > 99 ? r : `0${a(r)}`
                            }Z`
                          );
                        }
                        : o;
                    },
                    { 103: 103 },
                  ],
                  95: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(188);
                      const o = 'number';
                      e.exports = function (t) {
                        if (t !== 'string' && t !== o && t !== 'default') throw TypeError('Incorrect hint');
                        return i(n(this), t != o);
                      };
                    },
                    { 188: 188, 75: 75 },
                  ],
                  96: [
                    function (t, e, r) {
                      e.exports = function (t) {
                        if (t == null) throw TypeError(`Can't call method on  ${t}`);
                        return t;
                      };
                    },
                    {},
                  ],
                  97: [
                    function (t, e, r) {
                      e.exports = !t(103)(() => (
                        Object.defineProperty({}, 'a', {
                          get() {
                            return 7;
                          },
                        }).a
                            != 7
                      ));
                    },
                    { 103: 103 },
                  ],
                  98: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(109).document;
                      const o = n(i) && n(i.createElement);
                      e.exports = function (t) {
                        return o ? i.createElement(t) : {};
                      };
                    },
                    { 109: 109, 120: 120 },
                  ],
                  99: [
                    function (t, e, r) {
                      e.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(
                        ',',
                      );
                    },
                    {},
                  ],
                  100: [
                    function (t, e, r) {
                      const n = t(149);
                      const i = t(146);
                      const o = t(150);
                      e.exports = function (t) {
                        const e = n(t);
                        const r = i.f;
                        if (r) for (var a, s = r(t), { f } = o, u = 0; s.length > u;) f.call(t, (a = s[u++])) && e.push(a);
                        return e;
                      };
                    },
                    { 146: 146, 149: 149, 150: 150 },
                  ],
                  101: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(91);
                      const o = t(111);
                      const a = t(160);
                      const s = t(93);
                      var f = function (t, e, r) {
                        let u;
                        let c;
                        let h;
                        let d;
                        const l = t & f.F;
                        const p = t & f.G;
                        const b = t & f.S;
                        const v = t & f.P;
                        const g = t & f.B;
                        const y = p ? n : b ? n[e] || (n[e] = {}) : (n[e] || {}).prototype;
                        const m = p ? i : i[e] || (i[e] = {});
                        const w = m.prototype || (m.prototype = {});
                        for (u in (p && (r = e), r)) {
                          (h = ((c = !l && y && void 0 !== y[u]) ? y : r)[u]),
                          (d = g && c
                            ? s(h, n)
                            : v && typeof h === 'function'
                              ? s(Function.call, h)
                              : h),
                          y && a(y, u, h, t & f.U),
                          m[u] != h && o(m, u, d),
                          v && w[u] != h && (w[u] = h);
                        }
                      };
                      (n.core = i),
                      (f.F = 1),
                      (f.G = 2),
                      (f.S = 4),
                      (f.P = 8),
                      (f.B = 16),
                      (f.W = 32),
                      (f.U = 64),
                      (f.R = 128),
                      (e.exports = f);
                    },
                    {
                      109: 109, 111: 111, 160: 160, 91: 91, 93: 93,
                    },
                  ],
                  102: [
                    function (t, e, r) {
                      const n = t(197)('match');
                      e.exports = function (t) {
                        const e = /./;
                        try {
                          '/./'[t](e);
                        } catch (r) {
                          try {
                            return (e[n] = !1), !'/./'[t](e);
                          } catch (t) {}
                        }
                        return !0;
                      };
                    },
                    { 197: 197 },
                  ],
                  103: [
                    function (t, e, r) {
                      e.exports = function (t) {
                        try {
                          return !!t();
                        } catch (t) {
                          return !0;
                        }
                      };
                    },
                    {},
                  ],
                  104: [
                    function (t, e, r) {
                      t(294);
                      const n = t(160);
                      const i = t(111);
                      const o = t(103);
                      const a = t(96);
                      const s = t(197);
                      const f = t(162);
                      const u = s('species');
                      const c = !o(() => {
                        const t = /./;
                        return (
                          (t.exec = function () {
                            const t = [];
                            return (t.groups = { a: '7' }), t;
                          }),
                          ''.replace(t, '$<a>') !== '7'
                        );
                      });
                      const h = (function () {
                        const t = /(?:)/;
                        const e = t.exec;
                        t.exec = function () {
                          return e.apply(this, arguments);
                        };
                        const r = 'ab'.split(t);
                        return r.length === 2 && r[0] === 'a' && r[1] === 'b';
                      }());
                      e.exports = function (t, e, r) {
                        const d = s(t);
                        const l = !o(() => {
                          const e = {};
                          return (
                            (e[d] = function () {
                              return 7;
                            }),
                            ''[t](e) != 7
                          );
                        });
                        const p = l
                          ? !o(() => {
                            let e = !1;
                            const r = /a/;
                            return (
                              (r.exec = function () {
                                return (e = !0), null;
                              }),
                              t === 'split'
                                      && ((r.constructor = {}),
                                      (r.constructor[u] = function () {
                                        return r;
                                      })),
                              r[d](''),
                              !e
                            );
                          })
                          : void 0;
                        if (!l || !p || (t === 'replace' && !c) || (t === 'split' && !h)) {
                          const b = /./[d];
                          const v = r(a, d, ''[t], (t, e, r, n, i) => (e.exec === f
                            ? l && !i
                              ? { done: !0, value: b.call(e, r, n) }
                              : { done: !0, value: t.call(r, e, n) }
                            : { done: !1 }));
                          const g = v[0];
                          const y = v[1];
                          n(String.prototype, t, g),
                          i(
                            RegExp.prototype,
                            d,
                            e == 2
                              ? function (t, e) {
                                return y.call(t, this, e);
                              }
                              : function (t) {
                                return y.call(t, this);
                              },
                          );
                        }
                      };
                    },
                    {
                      103: 103, 111: 111, 160: 160, 162: 162, 197: 197, 294: 294, 96: 96,
                    },
                  ],
                  105: [
                    function (t, e, r) {
                      const n = t(75);
                      e.exports = function () {
                        const t = n(this);
                        let e = '';
                        return (
                          t.global && (e += 'g'),
                          t.ignoreCase && (e += 'i'),
                          t.multiline && (e += 'm'),
                          t.unicode && (e += 'u'),
                          t.sticky && (e += 'y'),
                          e
                        );
                      };
                    },
                    { 75: 75 },
                  ],
                  106: [
                    function (t, e, r) {
                      const n = t(118);
                      const i = t(120);
                      const o = t(186);
                      const a = t(93);
                      const s = t(197)('isConcatSpreadable');
                      e.exports = function t(e, r, f, u, c, h, d, l) {
                        for (var p, b, v = c, g = 0, y = !!d && a(d, l, 3); g < u;) {
                          if (g in f) {
                            if (
                              ((p = y ? y(f[g], g, r) : f[g]),
                              (b = !1),
                              i(p) && (b = void 0 !== (b = p[s]) ? !!b : n(p)),
                              b && h > 0)
                            ) v = t(e, r, p, o(p.length), v, h - 1) - 1;
                            else {
                              if (v >= 9007199254740991) throw TypeError();
                              e[v] = p;
                            }
                            v++;
                          }
                          g++;
                        }
                        return v;
                      };
                    },
                    {
                      118: 118, 120: 120, 186: 186, 197: 197, 93: 93,
                    },
                  ],
                  107: [
                    function (t, e, r) {
                      const n = t(93);
                      const i = t(122);
                      const o = t(117);
                      const a = t(75);
                      const s = t(186);
                      const f = t(198);
                      const u = {};
                      const c = {};
                      ((r = e.exports = function (t, e, r, h, d) {
                        let l;
                        let p;
                        let b;
                        let v;
                        const g = d
                          ? function () {
                            return t;
                          }
                          : f(t);
                        const y = n(r, h, e ? 2 : 1);
                        let m = 0;
                        if (typeof g !== 'function') throw TypeError(`${t} is not iterable!`);
                        if (o(g)) {
                          for (l = s(t.length); l > m; m++) if ((v = e ? y(a((p = t[m]))[0], p[1]) : y(t[m])) === u || v === c) return v;
                        } else for (b = g.call(t); !(p = b.next()).done;) if ((v = i(b, y, p.value, e)) === u || v === c) return v;
                      }).BREAK = u),
                      (r.RETURN = c);
                    },
                    {
                      117: 117, 122: 122, 186: 186, 198: 198, 75: 75, 93: 93,
                    },
                  ],
                  108: [
                    function (t, e, r) {
                      e.exports = t(171)('native-function-to-string', Function.toString);
                    },
                    { 171: 171 },
                  ],
                  109: [
                    function (t, e, r) {
                      const n = (e.exports = typeof window !== 'undefined' && window.Math == Math
                        ? window
                        : typeof self !== 'undefined' && self.Math == Math
                          ? self
                          : Function('return this')());
                      typeof __g === 'number' && (__g = n);
                    },
                    {},
                  ],
                  110: [
                    function (t, e, r) {
                      const n = {}.hasOwnProperty;
                      e.exports = function (t, e) {
                        return n.call(t, e);
                      };
                    },
                    {},
                  ],
                  111: [
                    function (t, e, r) {
                      const n = t(140);
                      const i = t(158);
                      e.exports = t(97)
                        ? function (t, e, r) {
                          return n.f(t, e, i(1, r));
                        }
                        : function (t, e, r) {
                          return (t[e] = r), t;
                        };
                    },
                    { 140: 140, 158: 158, 97: 97 },
                  ],
                  112: [
                    function (t, e, r) {
                      const n = t(109).document;
                      e.exports = n && n.documentElement;
                    },
                    { 109: 109 },
                  ],
                  113: [
                    function (t, e, r) {
                      e.exports = !t(97)
                          && !t(103)(() => (
                            Object.defineProperty(t(98)('div'), 'a', {
                              get() {
                                return 7;
                              },
                            }).a
                              != 7
                          ));
                    },
                    { 103: 103, 97: 97, 98: 98 },
                  ],
                  114: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(167).set;
                      e.exports = function (t, e, r) {
                        let o;
                        const a = e.constructor;
                        return (
                          a !== r
                              && typeof a === 'function'
                              && (o = a.prototype) !== r.prototype
                              && n(o)
                              && i
                              && i(t, o),
                          t
                        );
                      };
                    },
                    { 120: 120, 167: 167 },
                  ],
                  115: [
                    function (t, e, r) {
                      e.exports = function (t, e, r) {
                        const n = void 0 === r;
                        switch (e.length) {
                          case 0:
                            return n ? t() : t.call(r);
                          case 1:
                            return n ? t(e[0]) : t.call(r, e[0]);
                          case 2:
                            return n ? t(e[0], e[1]) : t.call(r, e[0], e[1]);
                          case 3:
                            return n ? t(e[0], e[1], e[2]) : t.call(r, e[0], e[1], e[2]);
                          case 4:
                            return n
                              ? t(e[0], e[1], e[2], e[3])
                              : t.call(r, e[0], e[1], e[2], e[3]);
                        }
                        return t.apply(r, e);
                      };
                    },
                    {},
                  ],
                  116: [
                    function (t, e, r) {
                      const n = t(86);
                      e.exports = Object('z').propertyIsEnumerable(0)
                        ? Object
                        : function (t) {
                          return n(t) == 'String' ? t.split('') : Object(t);
                        };
                    },
                    { 86: 86 },
                  ],
                  117: [
                    function (t, e, r) {
                      const n = t(127);
                      const i = t(197)('iterator');
                      const o = Array.prototype;
                      e.exports = function (t) {
                        return void 0 !== t && (n.Array === t || o[i] === t);
                      };
                    },
                    { 127: 127, 197: 197 },
                  ],
                  118: [
                    function (t, e, r) {
                      const n = t(86);
                      e.exports = Array.isArray
                          || function (t) {
                            return n(t) == 'Array';
                          };
                    },
                    { 86: 86 },
                  ],
                  119: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = Math.floor;
                      e.exports = function (t) {
                        return !n(t) && isFinite(t) && i(t) === t;
                      };
                    },
                    { 120: 120 },
                  ],
                  120: [
                    function (t, e, r) {
                      e.exports = function (t) {
                        return typeof t === 'object' ? t !== null : typeof t === 'function';
                      };
                    },
                    {},
                  ],
                  121: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(86);
                      const o = t(197)('match');
                      e.exports = function (t) {
                        let e;
                        return n(t) && (void 0 !== (e = t[o]) ? !!e : i(t) == 'RegExp');
                      };
                    },
                    { 120: 120, 197: 197, 86: 86 },
                  ],
                  122: [
                    function (t, e, r) {
                      const n = t(75);
                      e.exports = function (t, e, r, i) {
                        try {
                          return i ? e(n(r)[0], r[1]) : e(r);
                        } catch (e) {
                          const o = t.return;
                          throw (void 0 !== o && n(o.call(t)), e);
                        }
                      };
                    },
                    { 75: 75 },
                  ],
                  123: [
                    function (t, e, r) {
                      const n = t(139);
                      const i = t(158);
                      const o = t(169);
                      const a = {};
                      t(111)(a, t(197)('iterator'), function () {
                        return this;
                      }),
                      (e.exports = function (t, e, r) {
                        (t.prototype = n(a, { next: i(1, r) })), o(t, `${e} Iterator`);
                      });
                    },
                    {
                      111: 111, 139: 139, 158: 158, 169: 169, 197: 197,
                    },
                  ],
                  124: [
                    function (t, e, r) {
                      const n = t(128);
                      const i = t(101);
                      const o = t(160);
                      const a = t(111);
                      const s = t(127);
                      const f = t(123);
                      const u = t(169);
                      const c = t(147);
                      const h = t(197)('iterator');
                      const d = !([].keys && 'next' in [].keys());
                      const l = 'keys';
                      const p = 'values';
                      const b = function () {
                        return this;
                      };
                      e.exports = function (t, e, r, v, g, y, m) {
                        f(r, e, v);
                        let w;
                        let _;
                        let S;
                        const M = function (t) {
                          if (!d && t in A) return A[t];
                          switch (t) {
                            case l:
                            case p:
                              return function () {
                                return new r(this, t);
                              };
                          }
                          return function () {
                            return new r(this, t);
                          };
                        };
                        const E = `${e} Iterator`;
                        const k = g == p;
                        let x = !1;
                        var A = t.prototype;
                        const R = A[h] || A['@@iterator'] || (g && A[g]);
                        let I = R || M(g);
                        const T = g ? (k ? M('entries') : I) : void 0;
                        const B = (e == 'Array' && A.entries) || R;
                        if (
                          (B
                              && (S = c(B.call(new t()))) !== Object.prototype
                              && S.next
                              && (u(S, E, !0), n || typeof S[h] === 'function' || a(S, h, b)),
                          k
                              && R
                              && R.name !== p
                              && ((x = !0),
                              (I = function () {
                                return R.call(this);
                              })),
                          (n && !m) || (!d && !x && A[h]) || a(A, h, I),
                          (s[e] = I),
                          (s[E] = b),
                          g)
                        ) {
                          if (((w = { values: k ? I : M(p), keys: y ? I : M(l), entries: T }), m)) for (_ in w) _ in A || o(A, _, w[_]);
                          else i(i.P + i.F * (d || x), e, w);
                        }
                        return w;
                      };
                    },
                    {
                      101: 101,
                      111: 111,
                      123: 123,
                      127: 127,
                      128: 128,
                      147: 147,
                      160: 160,
                      169: 169,
                      197: 197,
                    },
                  ],
                  125: [
                    function (t, e, r) {
                      const n = t(197)('iterator');
                      let i = !1;
                      try {
                        const o = [7][n]();
                        (o.return = function () {
                          i = !0;
                        }),
                        Array.from(o, () => {
                          throw 2;
                        });
                      } catch (t) {}
                      e.exports = function (t, e) {
                        if (!e && !i) return !1;
                        let r = !1;
                        try {
                          const o = [7];
                          const a = o[n]();
                          (a.next = function () {
                            return { done: (r = !0) };
                          }),
                          (o[n] = function () {
                            return a;
                          }),
                          t(o);
                        } catch (t) {}
                        return r;
                      };
                    },
                    { 197: 197 },
                  ],
                  126: [
                    function (t, e, r) {
                      e.exports = function (t, e) {
                        return { value: e, done: !!t };
                      };
                    },
                    {},
                  ],
                  127: [
                    function (t, e, r) {
                      e.exports = {};
                    },
                    {},
                  ],
                  128: [
                    function (t, e, r) {
                      e.exports = !1;
                    },
                    {},
                  ],
                  129: [
                    function (t, e, r) {
                      const n = Math.expm1;
                      e.exports = !n
                          || n(10) > 22025.465794806718
                          || n(10) < 22025.465794806718
                          || n(-2e-17) != -2e-17
                        ? function (t) {
                          return (t = +t) == 0
                            ? t
                            : t > -1e-6 && t < 1e-6
                              ? t + (t * t) / 2
                              : Math.exp(t) - 1;
                        }
                        : n;
                    },
                    {},
                  ],
                  130: [
                    function (t, e, r) {
                      const n = t(133);
                      const i = Math.pow;
                      const o = i(2, -52);
                      const a = i(2, -23);
                      const s = i(2, 127) * (2 - a);
                      const f = i(2, -126);
                      e.exports = Math.fround
                          || function (t) {
                            let e;
                            let r;
                            const i = Math.abs(t);
                            const u = n(t);
                            return i < f
                              ? u * (i / f / a + 1 / o - 1 / o) * f * a
                              : (r = (e = (1 + a / o) * i) - (e - i)) > s || r != r
                                ? u * (1 / 0)
                                : u * r;
                          };
                    },
                    { 133: 133 },
                  ],
                  131: [
                    function (t, e, r) {
                      e.exports = Math.log1p
                          || function (t) {
                            return (t = +t) > -1e-8 && t < 1e-8 ? t - (t * t) / 2 : Math.log(1 + t);
                          };
                    },
                    {},
                  ],
                  132: [
                    function (t, e, r) {
                      e.exports = Math.scale
                          || function (t, e, r, n, i) {
                            return arguments.length === 0
                              || t != t
                              || e != e
                              || r != r
                              || n != n
                              || i != i
                              ? NaN
                              : t === 1 / 0 || t === -1 / 0
                                ? t
                                : ((t - e) * (i - n)) / (r - e) + n;
                          };
                    },
                    {},
                  ],
                  133: [
                    function (t, e, r) {
                      e.exports = Math.sign
                          || function (t) {
                            return (t = +t) == 0 || t != t ? t : t < 0 ? -1 : 1;
                          };
                    },
                    {},
                  ],
                  134: [
                    function (t, e, r) {
                      const n = t(192)('meta');
                      const i = t(120);
                      const o = t(110);
                      const a = t(140).f;
                      let s = 0;
                      const f = Object.isExtensible
                            || function () {
                              return !0;
                            };
                      const u = !t(103)(() => f(Object.preventExtensions({})));
                      const c = function (t) {
                        a(t, n, { value: { i: `O${++s}`, w: {} } });
                      };
                      var h = (e.exports = {
                        KEY: n,
                        NEED: !1,
                        fastKey(t, e) {
                          if (!i(t)) {
                            return typeof t === 'symbol'
                              ? t
                              : (typeof t === 'string' ? 'S' : 'P') + t;
                          }
                          if (!o(t, n)) {
                            if (!f(t)) return 'F';
                            if (!e) return 'E';
                            c(t);
                          }
                          return t[n].i;
                        },
                        getWeak(t, e) {
                          if (!o(t, n)) {
                            if (!f(t)) return !0;
                            if (!e) return !1;
                            c(t);
                          }
                          return t[n].w;
                        },
                        onFreeze(t) {
                          return u && h.NEED && f(t) && !o(t, n) && c(t), t;
                        },
                      });
                    },
                    {
                      103: 103, 110: 110, 120: 120, 140: 140, 192: 192,
                    },
                  ],
                  135: [
                    function (t, e, r) {
                      const n = t(229);
                      const i = t(101);
                      const o = t(171)('metadata');
                      const a = o.store || (o.store = new (t(336))());
                      const s = function (t, e, r) {
                        let i = a.get(t);
                        if (!i) {
                          if (!r) return;
                          a.set(t, (i = new n()));
                        }
                        let o = i.get(e);
                        if (!o) {
                          if (!r) return;
                          i.set(e, (o = new n()));
                        }
                        return o;
                      };
                      e.exports = {
                        store: a,
                        map: s,
                        has(t, e, r) {
                          const n = s(e, r, !1);
                          return void 0 !== n && n.has(t);
                        },
                        get(t, e, r) {
                          const n = s(e, r, !1);
                          return void 0 === n ? void 0 : n.get(t);
                        },
                        set(t, e, r, n) {
                          s(r, n, !0).set(t, e);
                        },
                        keys(t, e) {
                          const r = s(t, e, !1);
                          const n = [];
                          return (
                            r
                                && r.forEach((t, e) => {
                                  n.push(e);
                                }),
                            n
                          );
                        },
                        key(t) {
                          return void 0 === t || typeof t === 'symbol' ? t : String(t);
                        },
                        exp(t) {
                          i(i.S, 'Reflect', t);
                        },
                      };
                    },
                    {
                      101: 101, 171: 171, 229: 229, 336: 336,
                    },
                  ],
                  136: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(181).set;
                      const o = n.MutationObserver || n.WebKitMutationObserver;
                      const a = n.process;
                      const s = n.Promise;
                      const f = t(86)(a) == 'process';
                      e.exports = function () {
                        let t;
                        let e;
                        let r;
                        const u = function () {
                          let n; let
                            i;
                          for (f && (n = a.domain) && n.exit(); t;) {
                            (i = t.fn), (t = t.next);
                            try {
                              i();
                            } catch (n) {
                              throw (t ? r() : (e = void 0), n);
                            }
                          }
                          (e = void 0), n && n.enter();
                        };
                        if (f) {
                          r = function () {
                            a.nextTick(u);
                          };
                        } else if (!o || (n.navigator && n.navigator.standalone)) {
                          if (s && s.resolve) {
                            const c = s.resolve(void 0);
                            r = function () {
                              c.then(u);
                            };
                          } else {
                            r = function () {
                              i.call(n, u);
                            };
                          }
                        } else {
                          let h = !0;
                          const d = document.createTextNode('');
                          new o(u).observe(d, { characterData: !0 }),
                          (r = function () {
                            d.data = h = !h;
                          });
                        }
                        return function (n) {
                          const i = { fn: n, next: void 0 };
                          e && (e.next = i), t || ((t = i), r()), (e = i);
                        };
                      };
                    },
                    { 109: 109, 181: 181, 86: 86 },
                  ],
                  137: [
                    function (t, e, r) {
                      const n = t(70);
                      function i(t) {
                        let e; let
                          r;
                        (this.promise = new t(((t, n) => {
                          if (void 0 !== e || void 0 !== r) throw TypeError('Bad Promise constructor');
                          (e = t), (r = n);
                        }))),
                        (this.resolve = n(e)),
                        (this.reject = n(r));
                      }
                      e.exports.f = function (t) {
                        return new i(t);
                      };
                    },
                    { 70: 70 },
                  ],
                  138: [
                    function (t, e, r) {
                      const n = t(97);
                      const i = t(149);
                      const o = t(146);
                      const a = t(150);
                      const s = t(187);
                      const f = t(116);
                      const u = Object.assign;
                      e.exports = !u
                          || t(103)(() => {
                            const t = {};
                            const e = {};
                            const r = Symbol();
                            const n = 'abcdefghijklmnopqrst';
                            return (
                              (t[r] = 7),
                              n.split('').forEach((t) => {
                                e[t] = t;
                              }),
                              ({ ...t })[r] != 7 || Object.keys({ ...e }).join('') != n
                            );
                          })
                        ? function (t, e) {
                          for (
                            var r = s(t), u = arguments.length, c = 1, h = o.f, d = a.f;
                            u > c;

                          ) {
                            for (
                              var l,
                                p = f(arguments[c++]),
                                b = h ? i(p).concat(h(p)) : i(p),
                                v = b.length,
                                g = 0;
                              v > g;

                            ) (l = b[g++]), (n && !d.call(p, l)) || (r[l] = p[l]);
                          }
                          return r;
                        }
                        : u;
                    },
                    {
                      103: 103, 116: 116, 146: 146, 149: 149, 150: 150, 187: 187, 97: 97,
                    },
                  ],
                  139: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(141);
                      const o = t(99);
                      const a = t(170)('IE_PROTO');
                      const s = function () {};
                      var f = function () {
                        let e;
                        const r = t(98)('iframe');
                        let n = o.length;
                        for (
                          r.style.display = 'none',
                          t(112).appendChild(r),
                          r.src = 'javascript:',
                          (e = r.contentWindow.document).open(),
                          e.write('<script>document.F=Object</script>'),
                          e.close(),
                          f = e.F;
                          n--;

                        ) delete f.prototype[o[n]];
                        return f();
                      };
                      e.exports = Object.create
                          || function (t, e) {
                            let r;
                            return (
                              t !== null
                                ? ((s.prototype = n(t)),
                                (r = new s()),
                                (s.prototype = null),
                                (r[a] = t))
                                : (r = f()),
                              void 0 === e ? r : i(r, e)
                            );
                          };
                    },
                    {
                      112: 112, 141: 141, 170: 170, 75: 75, 98: 98, 99: 99,
                    },
                  ],
                  140: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(113);
                      const o = t(188);
                      const a = Object.defineProperty;
                      r.f = t(97)
                        ? Object.defineProperty
                        : function (t, e, r) {
                          if ((n(t), (e = o(e, !0)), n(r), i)) {
                            try {
                              return a(t, e, r);
                            } catch (t) {}
                          }
                          if ('get' in r || 'set' in r) throw TypeError('Accessors not supported!');
                          return 'value' in r && (t[e] = r.value), t;
                        };
                    },
                    {
                      113: 113, 188: 188, 75: 75, 97: 97,
                    },
                  ],
                  141: [
                    function (t, e, r) {
                      const n = t(140);
                      const i = t(75);
                      const o = t(149);
                      e.exports = t(97)
                        ? Object.defineProperties
                        : function (t, e) {
                          i(t);
                          for (var r, a = o(e), s = a.length, f = 0; s > f;) n.f(t, (r = a[f++]), e[r]);
                          return t;
                        };
                    },
                    {
                      140: 140, 149: 149, 75: 75, 97: 97,
                    },
                  ],
                  142: [
                    function (t, e, r) {
                      e.exports = t(128)
                          || !t(103)(() => {
                            const e = Math.random();
                            __defineSetter__.call(null, e, () => {}), delete t(109)[e];
                          });
                    },
                    { 103: 103, 109: 109, 128: 128 },
                  ],
                  143: [
                    function (t, e, r) {
                      const n = t(150);
                      const i = t(158);
                      const o = t(185);
                      const a = t(188);
                      const s = t(110);
                      const f = t(113);
                      const u = Object.getOwnPropertyDescriptor;
                      r.f = t(97)
                        ? u
                        : function (t, e) {
                          if (((t = o(t)), (e = a(e, !0)), f)) {
                            try {
                              return u(t, e);
                            } catch (t) {}
                          }
                          if (s(t, e)) return i(!n.f.call(t, e), t[e]);
                        };
                    },
                    {
                      110: 110, 113: 113, 150: 150, 158: 158, 185: 185, 188: 188, 97: 97,
                    },
                  ],
                  144: [
                    function (t, e, r) {
                      const n = t(185);
                      const i = t(145).f;
                      const o = {}.toString;
                      const a = typeof window === 'object' && window && Object.getOwnPropertyNames
                        ? Object.getOwnPropertyNames(window)
                        : [];
                      e.exports.f = function (t) {
                        return a && o.call(t) == '[object Window]'
                          ? (function (t) {
                            try {
                              return i(t);
                            } catch (t) {
                              return a.slice();
                            }
                          }(t))
                          : i(n(t));
                      };
                    },
                    { 145: 145, 185: 185 },
                  ],
                  145: [
                    function (t, e, r) {
                      const n = t(148);
                      const i = t(99).concat('length', 'prototype');
                      r.f = Object.getOwnPropertyNames
                          || function (t) {
                            return n(t, i);
                          };
                    },
                    { 148: 148, 99: 99 },
                  ],
                  146: [
                    function (t, e, r) {
                      r.f = Object.getOwnPropertySymbols;
                    },
                    {},
                  ],
                  147: [
                    function (t, e, r) {
                      const n = t(110);
                      const i = t(187);
                      const o = t(170)('IE_PROTO');
                      const a = Object.prototype;
                      e.exports = Object.getPrototypeOf
                          || function (t) {
                            return (
                              (t = i(t)),
                              n(t, o)
                                ? t[o]
                                : typeof t.constructor === 'function' && t instanceof t.constructor
                                  ? t.constructor.prototype
                                  : t instanceof Object
                                    ? a
                                    : null
                            );
                          };
                    },
                    { 110: 110, 170: 170, 187: 187 },
                  ],
                  148: [
                    function (t, e, r) {
                      const n = t(110);
                      const i = t(185);
                      const o = t(79)(!1);
                      const a = t(170)('IE_PROTO');
                      e.exports = function (t, e) {
                        let r;
                        const s = i(t);
                        let f = 0;
                        const u = [];
                        for (r in s) r != a && n(s, r) && u.push(r);
                        for (; e.length > f;) n(s, (r = e[f++])) && (~o(u, r) || u.push(r));
                        return u;
                      };
                    },
                    {
                      110: 110, 170: 170, 185: 185, 79: 79,
                    },
                  ],
                  149: [
                    function (t, e, r) {
                      const n = t(148);
                      const i = t(99);
                      e.exports = Object.keys
                          || function (t) {
                            return n(t, i);
                          };
                    },
                    { 148: 148, 99: 99 },
                  ],
                  150: [
                    function (t, e, r) {
                      r.f = {}.propertyIsEnumerable;
                    },
                    {},
                  ],
                  151: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(91);
                      const o = t(103);
                      e.exports = function (t, e) {
                        const r = (i.Object || {})[t] || Object[t];
                        const a = {};
                        (a[t] = e(r)),
                        n(
                          n.S
                                + n.F
                                  * o(() => {
                                    r(1);
                                  }),
                          'Object',
                          a,
                        );
                      };
                    },
                    { 101: 101, 103: 103, 91: 91 },
                  ],
                  152: [
                    function (t, e, r) {
                      const n = t(97);
                      const i = t(149);
                      const o = t(185);
                      const a = t(150).f;
                      e.exports = function (t) {
                        return function (e) {
                          for (var r, s = o(e), f = i(s), u = f.length, c = 0, h = []; u > c;) (r = f[c++]), (n && !a.call(s, r)) || h.push(t ? [r, s[r]] : s[r]);
                          return h;
                        };
                      };
                    },
                    {
                      149: 149, 150: 150, 185: 185, 97: 97,
                    },
                  ],
                  153: [
                    function (t, e, r) {
                      const n = t(145);
                      const i = t(146);
                      const o = t(75);
                      const a = t(109).Reflect;
                      e.exports = (a && a.ownKeys)
                          || function (t) {
                            const e = n.f(o(t));
                            const r = i.f;
                            return r ? e.concat(r(t)) : e;
                          };
                    },
                    {
                      109: 109, 145: 145, 146: 146, 75: 75,
                    },
                  ],
                  154: [
                    function (t, e, r) {
                      const n = t(109).parseFloat;
                      const i = t(179).trim;
                      e.exports = 1 / n(`${t(180)}-0`) != -1 / 0
                        ? function (t) {
                          const e = i(String(t), 3);
                          const r = n(e);
                          return r === 0 && e.charAt(0) == '-' ? -0 : r;
                        }
                        : n;
                    },
                    { 109: 109, 179: 179, 180: 180 },
                  ],
                  155: [
                    function (t, e, r) {
                      const n = t(109).parseInt;
                      const i = t(179).trim;
                      const o = t(180);
                      const a = /^[-+]?0[xX]/;
                      e.exports = n(`${o}08`) !== 8 || n(`${o}0x16`) !== 22
                        ? function (t, e) {
                          const r = i(String(t), 3);
                          return n(r, e >>> 0 || (a.test(r) ? 16 : 10));
                        }
                        : n;
                    },
                    { 109: 109, 179: 179, 180: 180 },
                  ],
                  156: [
                    function (t, e, r) {
                      e.exports = function (t) {
                        try {
                          return { e: !1, v: t() };
                        } catch (t) {
                          return { e: !0, v: t };
                        }
                      };
                    },
                    {},
                  ],
                  157: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(120);
                      const o = t(137);
                      e.exports = function (t, e) {
                        if ((n(t), i(e) && e.constructor === t)) return e;
                        const r = o.f(t);
                        return (0, r.resolve)(e), r.promise;
                      };
                    },
                    { 120: 120, 137: 137, 75: 75 },
                  ],
                  158: [
                    function (t, e, r) {
                      e.exports = function (t, e) {
                        return {
                          enumerable: !(1 & t),
                          configurable: !(2 & t),
                          writable: !(4 & t),
                          value: e,
                        };
                      };
                    },
                    {},
                  ],
                  159: [
                    function (t, e, r) {
                      const n = t(160);
                      e.exports = function (t, e, r) {
                        for (const i in e) n(t, i, e[i], r);
                        return t;
                      };
                    },
                    { 160: 160 },
                  ],
                  160: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(111);
                      const o = t(110);
                      const a = t(192)('src');
                      const s = t(108);
                      const f = 'toString';
                      const u = (`${s}`).split(f);
                      (t(91).inspectSource = function (t) {
                        return s.call(t);
                      }),
                      (e.exports = function (t, e, r, s) {
                        const f = typeof r === 'function';
                        f && (o(r, 'name') || i(r, 'name', e)),
                        t[e] !== r
                                && (f && (o(r, a) || i(r, a, t[e] ? `${t[e]}` : u.join(String(e)))),
                                t === n
                                  ? (t[e] = r)
                                  : s
                                    ? t[e]
                                      ? (t[e] = r)
                                      : i(t, e, r)
                                    : (delete t[e], i(t, e, r)));
                      })(Function.prototype, f, function () {
                        return (typeof this === 'function' && this[a]) || s.call(this);
                      });
                    },
                    {
                      108: 108, 109: 109, 110: 110, 111: 111, 192: 192, 91: 91,
                    },
                  ],
                  161: [
                    function (t, e, r) {
                      const n = t(85);
                      const i = RegExp.prototype.exec;
                      e.exports = function (t, e) {
                        const r = t.exec;
                        if (typeof r === 'function') {
                          const o = r.call(t, e);
                          if (typeof o !== 'object') {
                            throw new TypeError(
                              'RegExp exec method returned something other than an Object or null',
                            );
                          }
                          return o;
                        }
                        if (n(t) !== 'RegExp') throw new TypeError('RegExp#exec called on incompatible receiver');
                        return i.call(t, e);
                      };
                    },
                    { 85: 85 },
                  ],
                  162: [
                    function (t, e, r) {
                      let n;
                      let i;
                      const o = t(105);
                      const a = RegExp.prototype.exec;
                      const s = String.prototype.replace;
                      let f = a;
                      const u = ((n = /a/),
                      (i = /b*/g),
                      a.call(n, 'a'),
                      a.call(i, 'a'),
                      n.lastIndex !== 0 || i.lastIndex !== 0);
                      const c = void 0 !== /()??/.exec('')[1];
                      (u || c)
                          && (f = function (t) {
                            let e;
                            let r;
                            let n;
                            let i;
                            const f = this;
                            return (
                              c && (r = new RegExp(`^${f.source}$(?!\\s)`, o.call(f))),
                              u && (e = f.lastIndex),
                              (n = a.call(f, t)),
                              u && n && (f.lastIndex = f.global ? n.index + n[0].length : e),
                              c
                                && n
                                && n.length > 1
                                && s.call(n[0], r, function () {
                                  for (i = 1; i < arguments.length - 2; i++) void 0 === arguments[i] && (n[i] = void 0);
                                }),
                              n
                            );
                          }),
                      (e.exports = f);
                    },
                    { 105: 105 },
                  ],
                  163: [
                    function (t, e, r) {
                      e.exports = function (t, e) {
                        const r = e === Object(e)
                          ? function (t) {
                            return e[t];
                          }
                          : e;
                        return function (e) {
                          return String(e).replace(t, r);
                        };
                      };
                    },
                    {},
                  ],
                  164: [
                    function (t, e, r) {
                      e.exports = Object.is
                          || function (t, e) {
                            return t === e ? t !== 0 || 1 / t == 1 / e : t != t && e != e;
                          };
                    },
                    {},
                  ],
                  165: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(70);
                      const o = t(93);
                      const a = t(107);
                      e.exports = function (t) {
                        n(n.S, t, {
                          from(t) {
                            let e;
                            let r;
                            let n;
                            let s;
                            const f = arguments[1];
                            return (
                              i(this),
                              (e = void 0 !== f) && i(f),
                              t == null
                                ? new this()
                                : ((r = []),
                                e
                                  ? ((n = 0),
                                  (s = o(f, arguments[2], 2)),
                                  a(t, !1, (t) => {
                                    r.push(s(t, n++));
                                  }))
                                  : a(t, !1, r.push, r),
                                new this(r))
                            );
                          },
                        });
                      };
                    },
                    {
                      101: 101, 107: 107, 70: 70, 93: 93,
                    },
                  ],
                  166: [
                    function (t, e, r) {
                      const n = t(101);
                      e.exports = function (t) {
                        n(n.S, t, {
                          of() {
                            for (var t = arguments.length, e = new Array(t); t--;) e[t] = arguments[t];
                            return new this(e);
                          },
                        });
                      };
                    },
                    { 101: 101 },
                  ],
                  167: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(75);
                      const o = function (t, e) {
                        if ((i(t), !n(e) && e !== null)) throw TypeError(`${e}: can't set as prototype!`);
                      };
                      e.exports = {
                        set:
                            Object.setPrototypeOf
                            || ('__proto__' in {}
                              ? (function (e, r, n) {
                                try {
                                  (n = t(93)(
                                    Function.call,
                                    t(143).f(Object.prototype, '__proto__').set,
                                    2,
                                  ))(e, []),
                                  (r = !(e instanceof Array));
                                } catch (t) {
                                  r = !0;
                                }
                                return function (t, e) {
                                  return o(t, e), r ? (t.__proto__ = e) : n(t, e), t;
                                };
                              }({}, !1))
                              : void 0),
                        check: o,
                      };
                    },
                    {
                      120: 120, 143: 143, 75: 75, 93: 93,
                    },
                  ],
                  168: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(140);
                      const o = t(97);
                      const a = t(197)('species');
                      e.exports = function (t) {
                        const e = n[t];
                        o
                            && e
                            && !e[a]
                            && i.f(e, a, {
                              configurable: !0,
                              get() {
                                return this;
                              },
                            });
                      };
                    },
                    {
                      109: 109, 140: 140, 197: 197, 97: 97,
                    },
                  ],
                  169: [
                    function (t, e, r) {
                      const n = t(140).f;
                      const i = t(110);
                      const o = t(197)('toStringTag');
                      e.exports = function (t, e, r) {
                        t
                            && !i((t = r ? t : t.prototype), o)
                            && n(t, o, { configurable: !0, value: e });
                      };
                    },
                    { 110: 110, 140: 140, 197: 197 },
                  ],
                  170: [
                    function (t, e, r) {
                      const n = t(171)('keys');
                      const i = t(192);
                      e.exports = function (t) {
                        return n[t] || (n[t] = i(t));
                      };
                    },
                    { 171: 171, 192: 192 },
                  ],
                  171: [
                    function (t, e, r) {
                      const n = t(91);
                      const i = t(109);
                      const o = '__core-js_shared__';
                      const a = i[o] || (i[o] = {});
                      (e.exports = function (t, e) {
                        return a[t] || (a[t] = void 0 !== e ? e : {});
                      })('versions', []).push({
                        version: n.version,
                        mode: t(128) ? 'pure' : 'global',
                        copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)',
                      });
                    },
                    { 109: 109, 128: 128, 91: 91 },
                  ],
                  172: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(70);
                      const o = t(197)('species');
                      e.exports = function (t, e) {
                        let r;
                        const a = n(t).constructor;
                        return void 0 === a || (r = n(a)[o]) == null ? e : i(r);
                      };
                    },
                    { 197: 197, 70: 70, 75: 75 },
                  ],
                  173: [
                    function (t, e, r) {
                      const n = t(103);
                      e.exports = function (t, e) {
                        return (
                          !!t
                            && n(() => {
                              e ? t.call(null, () => {}, 1) : t.call(null);
                            })
                        );
                      };
                    },
                    { 103: 103 },
                  ],
                  174: [
                    function (t, e, r) {
                      const n = t(184);
                      const i = t(96);
                      e.exports = function (t) {
                        return function (e, r) {
                          let o;
                          let a;
                          const s = String(i(e));
                          const f = n(r);
                          const u = s.length;
                          return f < 0 || f >= u
                            ? t
                              ? ''
                              : void 0
                            : (o = s.charCodeAt(f)) < 55296
                                || o > 56319
                                || f + 1 === u
                                || (a = s.charCodeAt(f + 1)) < 56320
                                || a > 57343
                              ? t
                                ? s.charAt(f)
                                : o
                              : t
                                ? s.slice(f, f + 2)
                                : a - 56320 + ((o - 55296) << 10) + 65536;
                        };
                      };
                    },
                    { 184: 184, 96: 96 },
                  ],
                  175: [
                    function (t, e, r) {
                      const n = t(121);
                      const i = t(96);
                      e.exports = function (t, e, r) {
                        if (n(e)) throw TypeError(`String#${r} doesn't accept regex!`);
                        return String(i(t));
                      };
                    },
                    { 121: 121, 96: 96 },
                  ],
                  176: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(103);
                      const o = t(96);
                      const a = /"/g;
                      const s = function (t, e, r, n) {
                        const i = String(o(t));
                        let s = `<${e}`;
                        return (
                          r !== ''
                                && (s += ` ${r}="${String(n).replace(a, '&quot;')}"`),
                          `${s}>${i}</${e}>`
                        );
                      };
                      e.exports = function (t, e) {
                        const r = {};
                        (r[t] = e(s)),
                        n(
                          n.P
                                + n.F
                                  * i(() => {
                                    const e = ''[t]('"');
                                    return e !== e.toLowerCase() || e.split('"').length > 3;
                                  }),
                          'String',
                          r,
                        );
                      };
                    },
                    { 101: 101, 103: 103, 96: 96 },
                  ],
                  177: [
                    function (t, e, r) {
                      const n = t(186);
                      const i = t(178);
                      const o = t(96);
                      e.exports = function (t, e, r, a) {
                        const s = String(o(t));
                        const f = s.length;
                        const u = void 0 === r ? ' ' : String(r);
                        const c = n(e);
                        if (c <= f || u == '') return s;
                        const h = c - f;
                        let d = i.call(u, Math.ceil(h / u.length));
                        return d.length > h && (d = d.slice(0, h)), a ? d + s : s + d;
                      };
                    },
                    { 178: 178, 186: 186, 96: 96 },
                  ],
                  178: [
                    function (t, e, r) {
                      const n = t(184);
                      const i = t(96);
                      e.exports = function (t) {
                        let e = String(i(this));
                        let r = '';
                        let o = n(t);
                        if (o < 0 || o == 1 / 0) throw RangeError("Count can't be negative");
                        for (; o > 0; (o >>>= 1) && (e += e)) 1 & o && (r += e);
                        return r;
                      };
                    },
                    { 184: 184, 96: 96 },
                  ],
                  179: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(96);
                      const o = t(103);
                      const a = t(180);
                      const s = `[${a}]`;
                      const f = RegExp(`^${s}${s}*`);
                      const u = RegExp(`${s + s}*$`);
                      const c = function (t, e, r) {
                        const i = {};
                        const s = o(() => !!a[t]() || 'â€‹Â…'[t]() != 'â€‹Â…');
                        const f = (i[t] = s ? e(h) : a[t]);
                        r && (i[r] = f), n(n.P + n.F * s, 'String', i);
                      };
                      var h = (c.trim = function (t, e) {
                        return (
                          (t = String(i(t))),
                          1 & e && (t = t.replace(f, '')),
                          2 & e && (t = t.replace(u, '')),
                          t
                        );
                      });
                      e.exports = c;
                    },
                    {
                      101: 101, 103: 103, 180: 180, 96: 96,
                    },
                  ],
                  180: [
                    function (t, e, r) {
                      e.exports = '\t\n\v\f\r Â áš€á Žâ€€â€â€‚â€ƒâ€„â€…â€†â€‡â€ˆâ€‰â€Šâ€¯âŸã€€\u2028\u2029\ufeff';
                    },
                    {},
                  ],
                  181: [
                    function (t, e, r) {
                      let n;
                      let i;
                      let o;
                      const a = t(93);
                      const s = t(115);
                      const f = t(112);
                      const u = t(98);
                      const c = t(109);
                      const h = c.process;
                      let d = c.setImmediate;
                      let l = c.clearImmediate;
                      const p = c.MessageChannel;
                      const b = c.Dispatch;
                      let v = 0;
                      const g = {};
                      const y = 'onreadystatechange';
                      const m = function () {
                        const t = +this;
                        if (g.hasOwnProperty(t)) {
                          const e = g[t];
                          delete g[t], e();
                        }
                      };
                      const w = function (t) {
                        m.call(t.data);
                      };
                      (d && l)
                          || ((d = function (t) {
                            for (var e = [], r = 1; arguments.length > r;) e.push(arguments[r++]);
                            return (
                              (g[++v] = function () {
                                s(typeof t === 'function' ? t : Function(t), e);
                              }),
                              n(v),
                              v
                            );
                          }),
                          (l = function (t) {
                            delete g[t];
                          }),
                          t(86)(h) == 'process'
                            ? (n = function (t) {
                              h.nextTick(a(m, t, 1));
                            })
                            : b && b.now
                              ? (n = function (t) {
                                b.now(a(m, t, 1));
                              })
                              : p
                                ? ((o = (i = new p()).port2),
                                (i.port1.onmessage = w),
                                (n = a(o.postMessage, o, 1)))
                                : c.addEventListener
                              && typeof postMessage === 'function'
                              && !c.importScripts
                                  ? ((n = function (t) {
                                    c.postMessage(`${t}`, '*');
                                  }),
                                  c.addEventListener('message', w, !1))
                                  : (n = y in u('script')
                                    ? function (t) {
                                      f.appendChild(u('script')).onreadystatechange = function () {
                                        f.removeChild(this), m.call(t);
                                      };
                                    }
                                    : function (t) {
                                      setTimeout(a(m, t, 1), 0);
                                    })),
                      (e.exports = { set: d, clear: l });
                    },
                    {
                      109: 109, 112: 112, 115: 115, 86: 86, 93: 93, 98: 98,
                    },
                  ],
                  182: [
                    function (t, e, r) {
                      const n = t(184);
                      const i = Math.max;
                      const o = Math.min;
                      e.exports = function (t, e) {
                        return (t = n(t)) < 0 ? i(t + e, 0) : o(t, e);
                      };
                    },
                    { 184: 184 },
                  ],
                  183: [
                    function (t, e, r) {
                      const n = t(184);
                      const i = t(186);
                      e.exports = function (t) {
                        if (void 0 === t) return 0;
                        const e = n(t);
                        const r = i(e);
                        if (e !== r) throw RangeError('Wrong length!');
                        return r;
                      };
                    },
                    { 184: 184, 186: 186 },
                  ],
                  184: [
                    function (t, e, r) {
                      const n = Math.ceil;
                      const i = Math.floor;
                      e.exports = function (t) {
                        return isNaN((t = +t)) ? 0 : (t > 0 ? i : n)(t);
                      };
                    },
                    {},
                  ],
                  185: [
                    function (t, e, r) {
                      const n = t(116);
                      const i = t(96);
                      e.exports = function (t) {
                        return n(i(t));
                      };
                    },
                    { 116: 116, 96: 96 },
                  ],
                  186: [
                    function (t, e, r) {
                      const n = t(184);
                      const i = Math.min;
                      e.exports = function (t) {
                        return t > 0 ? i(n(t), 9007199254740991) : 0;
                      };
                    },
                    { 184: 184 },
                  ],
                  187: [
                    function (t, e, r) {
                      const n = t(96);
                      e.exports = function (t) {
                        return Object(n(t));
                      };
                    },
                    { 96: 96 },
                  ],
                  188: [
                    function (t, e, r) {
                      const n = t(120);
                      e.exports = function (t, e) {
                        if (!n(t)) return t;
                        let r; let
                          i;
                        if (e && typeof (r = t.toString) === 'function' && !n((i = r.call(t)))) return i;
                        if (typeof (r = t.valueOf) === 'function' && !n((i = r.call(t)))) return i;
                        if (!e && typeof (r = t.toString) === 'function' && !n((i = r.call(t)))) return i;
                        throw TypeError("Can't convert object to primitive value");
                      };
                    },
                    { 120: 120 },
                  ],
                  189: [
                    function (t, e, r) {
                      if (t(97)) {
                        const n = t(128);
                        const i = t(109);
                        const o = t(103);
                        const a = t(101);
                        const s = t(191);
                        const f = t(190);
                        const u = t(93);
                        const c = t(74);
                        const h = t(158);
                        const d = t(111);
                        const l = t(159);
                        const p = t(184);
                        const b = t(186);
                        const v = t(183);
                        const g = t(182);
                        const y = t(188);
                        const m = t(110);
                        const w = t(85);
                        const _ = t(120);
                        const S = t(187);
                        const M = t(117);
                        const E = t(139);
                        const k = t(147);
                        const x = t(145).f;
                        const A = t(198);
                        const R = t(192);
                        const I = t(197);
                        const T = t(80);
                        const B = t(79);
                        const P = t(172);
                        const O = t(210);
                        const C = t(127);
                        const L = t(125);
                        const j = t(168);
                        const N = t(77);
                        const D = t(76);
                        const U = t(140);
                        const F = t(143);
                        const q = U.f;
                        const z = F.f;
                        const W = i.RangeError;
                        const V = i.TypeError;
                        const H = i.Uint8Array;
                        const G = 'ArrayBuffer';
                        const K = 'SharedArrayBuffer';
                        const X = 'BYTES_PER_ELEMENT';
                        const Z = Array.prototype;
                        const Y = f.ArrayBuffer;
                        const J = f.DataView;
                        const $ = T(0);
                        const Q = T(2);
                        const tt = T(3);
                        const et = T(4);
                        const rt = T(5);
                        const nt = T(6);
                        const it = B(!0);
                        const ot = B(!1);
                        const at = O.values;
                        const st = O.keys;
                        const ft = O.entries;
                        const ut = Z.lastIndexOf;
                        const ct = Z.reduce;
                        const ht = Z.reduceRight;
                        const dt = Z.join;
                        const lt = Z.sort;
                        const pt = Z.slice;
                        let bt = Z.toString;
                        let vt = Z.toLocaleString;
                        const gt = I('iterator');
                        const yt = I('toStringTag');
                        const mt = R('typed_constructor');
                        const wt = R('def_constructor');
                        const _t = s.CONSTR;
                        const St = s.TYPED;
                        const Mt = s.VIEW;
                        const Et = 'Wrong length!';
                        const kt = T(1, (t, e) => Tt(P(t, t[wt]), e));
                        const xt = o(() => new H(new Uint16Array([1]).buffer)[0] === 1);
                        const At = !!H
                              && !!H.prototype.set
                              && o(() => {
                                new H(1).set({});
                              });
                        const Rt = function (t, e) {
                          const r = p(t);
                          if (r < 0 || r % e) throw W('Wrong offset!');
                          return r;
                        };
                        const It = function (t) {
                          if (_(t) && St in t) return t;
                          throw V(`${t} is not a typed array!`);
                        };
                        var Tt = function (t, e) {
                          if (!_(t) || !(mt in t)) throw V('It is not a typed array constructor!');
                          return new t(e);
                        };
                        const Bt = function (t, e) {
                          return Pt(P(t, t[wt]), e);
                        };
                        var Pt = function (t, e) {
                          for (var r = 0, n = e.length, i = Tt(t, n); n > r;) i[r] = e[r++];
                          return i;
                        };
                        const Ot = function (t, e, r) {
                          q(t, e, {
                            get() {
                              return this._d[r];
                            },
                          });
                        };
                        const Ct = function (t) {
                          let e;
                          let r;
                          let n;
                          let i;
                          let o;
                          let a;
                          let s = S(t);
                          const f = arguments.length;
                          let c = f > 1 ? arguments[1] : void 0;
                          const h = void 0 !== c;
                          const d = A(s);
                          if (d != null && !M(d)) {
                            for (a = d.call(s), n = [], e = 0; !(o = a.next()).done; e++) n.push(o.value);
                            s = n;
                          }
                          for (
                            h && f > 2 && (c = u(c, arguments[2], 2)),
                            e = 0,
                            r = b(s.length),
                            i = Tt(this, r);
                            r > e;
                            e++
                          ) i[e] = h ? c(s[e], e) : s[e];
                          return i;
                        };
                        const Lt = function () {
                          for (var t = 0, e = arguments.length, r = Tt(this, e); e > t;) r[t] = arguments[t++];
                          return r;
                        };
                        const jt = !!H
                              && o(() => {
                                vt.call(new H(1));
                              });
                        const Nt = function () {
                          return vt.apply(jt ? pt.call(It(this)) : It(this), arguments);
                        };
                        const Dt = {
                          copyWithin(t, e) {
                            return D.call(
                              It(this),
                              t,
                              e,
                              arguments.length > 2 ? arguments[2] : void 0,
                            );
                          },
                          every(t) {
                            return et(
                              It(this),
                              t,
                              arguments.length > 1 ? arguments[1] : void 0,
                            );
                          },
                          fill(t) {
                            return N.apply(It(this), arguments);
                          },
                          filter(t) {
                            return Bt(
                              this,
                              Q(It(this), t, arguments.length > 1 ? arguments[1] : void 0),
                            );
                          },
                          find(t) {
                            return rt(
                              It(this),
                              t,
                              arguments.length > 1 ? arguments[1] : void 0,
                            );
                          },
                          findIndex(t) {
                            return nt(
                              It(this),
                              t,
                              arguments.length > 1 ? arguments[1] : void 0,
                            );
                          },
                          forEach(t) {
                            $(It(this), t, arguments.length > 1 ? arguments[1] : void 0);
                          },
                          indexOf(t) {
                            return ot(
                              It(this),
                              t,
                              arguments.length > 1 ? arguments[1] : void 0,
                            );
                          },
                          includes(t) {
                            return it(
                              It(this),
                              t,
                              arguments.length > 1 ? arguments[1] : void 0,
                            );
                          },
                          join(t) {
                            return dt.apply(It(this), arguments);
                          },
                          lastIndexOf(t) {
                            return ut.apply(It(this), arguments);
                          },
                          map(t) {
                            return kt(
                              It(this),
                              t,
                              arguments.length > 1 ? arguments[1] : void 0,
                            );
                          },
                          reduce(t) {
                            return ct.apply(It(this), arguments);
                          },
                          reduceRight(t) {
                            return ht.apply(It(this), arguments);
                          },
                          reverse() {
                            for (
                              var t, e = this, r = It(e).length, n = Math.floor(r / 2), i = 0;
                              i < n;

                            ) (t = e[i]), (e[i++] = e[--r]), (e[r] = t);
                            return e;
                          },
                          some(t) {
                            return tt(
                              It(this),
                              t,
                              arguments.length > 1 ? arguments[1] : void 0,
                            );
                          },
                          sort(t) {
                            return lt.call(It(this), t);
                          },
                          subarray(t, e) {
                            const r = It(this);
                            const n = r.length;
                            const i = g(t, n);
                            return new (P(r, r[wt]))(
                              r.buffer,
                              r.byteOffset + i * r.BYTES_PER_ELEMENT,
                              b((void 0 === e ? n : g(e, n)) - i),
                            );
                          },
                        };
                        const Ut = function (t, e) {
                          return Bt(this, pt.call(It(this), t, e));
                        };
                        const Ft = function (t) {
                          It(this);
                          const e = Rt(arguments[1], 1);
                          const r = this.length;
                          const n = S(t);
                          const i = b(n.length);
                          let o = 0;
                          if (i + e > r) throw W(Et);
                          for (; o < i;) this[e + o] = n[o++];
                        };
                        const qt = {
                          entries() {
                            return ft.call(It(this));
                          },
                          keys() {
                            return st.call(It(this));
                          },
                          values() {
                            return at.call(It(this));
                          },
                        };
                        const zt = function (t, e) {
                          return (
                            _(t)
                                && t[St]
                                && typeof e !== 'symbol'
                                && e in t
                                && String(+e) == String(e)
                          );
                        };
                        const Wt = function (t, e) {
                          return zt(t, (e = y(e, !0))) ? h(2, t[e]) : z(t, e);
                        };
                        const Vt = function (t, e, r) {
                          return !(zt(t, (e = y(e, !0))) && _(r) && m(r, 'value'))
                                || m(r, 'get')
                                || m(r, 'set')
                                || r.configurable
                                || (m(r, 'writable') && !r.writable)
                                || (m(r, 'enumerable') && !r.enumerable)
                            ? q(t, e, r)
                            : ((t[e] = r.value), t);
                        };
                        _t || ((F.f = Wt), (U.f = Vt)),
                        a(a.S + a.F * !_t, 'Object', {
                          getOwnPropertyDescriptor: Wt,
                          defineProperty: Vt,
                        }),
                        o(() => {
                          bt.call({});
                        })
                              && (bt = vt = function () {
                                return dt.call(this);
                              });
                        const Ht = l({}, Dt);
                        l(Ht, qt),
                        d(Ht, gt, qt.values),
                        l(Ht, {
                          slice: Ut,
                          set: Ft,
                          constructor() {},
                          toString: bt,
                          toLocaleString: Nt,
                        }),
                        Ot(Ht, 'buffer', 'b'),
                        Ot(Ht, 'byteOffset', 'o'),
                        Ot(Ht, 'byteLength', 'l'),
                        Ot(Ht, 'length', 'e'),
                        q(Ht, yt, {
                          get() {
                            return this[St];
                          },
                        }),
                        (e.exports = function (t, e, r, f) {
                          const u = `${t + ((f = !!f) ? 'Clamped' : '')}Array`;
                          const h = `get${t}`;
                          const l = `set${t}`;
                          let p = i[u];
                          const g = p || {};
                          const y = p && k(p);
                          const m = !p || !s.ABV;
                          const S = {};
                          let M = p && p.prototype;
                          const A = function (t, r) {
                            q(t, r, {
                              get() {
                                return (function (t, r) {
                                  const n = t._d;
                                  return n.v[h](r * e + n.o, xt);
                                }(this, r));
                              },
                              set(t) {
                                return (function (t, r, n) {
                                  const i = t._d;
                                  f
                                          && (n = (n = Math.round(n)) < 0 ? 0 : n > 255 ? 255 : 255 & n),
                                  i.v[l](r * e + i.o, n, xt);
                                }(this, r, t));
                              },
                              enumerable: !0,
                            });
                          };
                          m
                            ? ((p = r((t, r, n, i) => {
                              c(t, p, u, '_d');
                              let o;
                              let a;
                              let s;
                              let f;
                              let h = 0;
                              let l = 0;
                              if (_(r)) {
                                if (!(r instanceof Y || (f = w(r)) == G || f == K)) return St in r ? Pt(p, r) : Ct.call(p, r);
                                (o = r), (l = Rt(n, e));
                                const g = r.byteLength;
                                if (void 0 === i) {
                                  if (g % e) throw W(Et);
                                  if ((a = g - l) < 0) throw W(Et);
                                } else if ((a = b(i) * e) + l > g) throw W(Et);
                                s = a / e;
                              } else (s = v(r)), (o = new Y((a = s * e)));
                              for (
                                d(t, '_d', {
                                  b: o, o: l, l: a, e: s, v: new J(o),
                                });
                                h < s;

                              ) A(t, h++);
                            })),
                            (M = p.prototype = E(Ht)),
                            d(M, 'constructor', p))
                            : (o(() => {
                              p(1);
                            })
                                    && o(() => {
                                      new p(-1);
                                    })
                                    && L((t) => {
                                      new p(), new p(null), new p(1.5), new p(t);
                                    }, !0))
                                  || ((p = r((t, r, n, i) => {
                                    let o;
                                    return (
                                      c(t, p, u),
                                      _(r)
                                        ? r instanceof Y || (o = w(r)) == G || o == K
                                          ? void 0 !== i
                                            ? new g(r, Rt(n, e), i)
                                            : void 0 !== n
                                              ? new g(r, Rt(n, e))
                                              : new g(r)
                                          : St in r
                                            ? Pt(p, r)
                                            : Ct.call(p, r)
                                        : new g(v(r))
                                    );
                                  })),
                                  $(y !== Function.prototype ? x(g).concat(x(y)) : x(g), (
                                    t,
                                  ) => {
                                    t in p || d(p, t, g[t]);
                                  }),
                                  (p.prototype = M),
                                  n || (M.constructor = p));
                          const R = M[gt];
                          const I = !!R && (R.name == 'values' || R.name == null);
                          const T = qt.values;
                          d(p, mt, !0),
                          d(M, St, u),
                          d(M, Mt, !0),
                          d(M, wt, p),
                          (f ? new p(1)[yt] == u : yt in M)
                                  || q(M, yt, {
                                    get() {
                                      return u;
                                    },
                                  }),
                          (S[u] = p),
                          a(a.G + a.W + a.F * (p != g), S),
                          a(a.S, u, { BYTES_PER_ELEMENT: e }),
                          a(
                            a.S
                                    + a.F
                                      * o(() => {
                                        g.of.call(p, 1);
                                      }),
                            u,
                            { from: Ct, of: Lt },
                          ),
                          X in M || d(M, X, e),
                          a(a.P, u, Dt),
                          j(u),
                          a(a.P + a.F * At, u, { set: Ft }),
                          a(a.P + a.F * !I, u, qt),
                          n || M.toString == bt || (M.toString = bt),
                          a(
                            a.P
                                    + a.F
                                      * o(() => {
                                        new p(1).slice();
                                      }),
                            u,
                            { slice: Ut },
                          ),
                          a(
                            a.P
                                    + a.F
                                      * (o(() => (
                                        [1, 2].toLocaleString() != new p([1, 2]).toLocaleString()
                                      ))
                                        || !o(() => {
                                          M.toLocaleString.call([1, 2]);
                                        })),
                            u,
                            { toLocaleString: Nt },
                          ),
                          (C[u] = I ? R : T),
                          n || I || d(M, gt, T);
                        });
                      } else e.exports = function () {};
                    },
                    {
                      101: 101,
                      103: 103,
                      109: 109,
                      110: 110,
                      111: 111,
                      117: 117,
                      120: 120,
                      125: 125,
                      127: 127,
                      128: 128,
                      139: 139,
                      140: 140,
                      143: 143,
                      145: 145,
                      147: 147,
                      158: 158,
                      159: 159,
                      168: 168,
                      172: 172,
                      182: 182,
                      183: 183,
                      184: 184,
                      186: 186,
                      187: 187,
                      188: 188,
                      190: 190,
                      191: 191,
                      192: 192,
                      197: 197,
                      198: 198,
                      210: 210,
                      74: 74,
                      76: 76,
                      77: 77,
                      79: 79,
                      80: 80,
                      85: 85,
                      93: 93,
                      97: 97,
                    },
                  ],
                  190: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(97);
                      const o = t(128);
                      const a = t(191);
                      const s = t(111);
                      const f = t(159);
                      const u = t(103);
                      const c = t(74);
                      const h = t(184);
                      const d = t(186);
                      const l = t(183);
                      const p = t(145).f;
                      const b = t(140).f;
                      const v = t(77);
                      const g = t(169);
                      const y = 'ArrayBuffer';
                      const m = 'DataView';
                      const w = 'Wrong index!';
                      let _ = n.ArrayBuffer;
                      let S = n.DataView;
                      const M = n.Math;
                      const E = n.RangeError;
                      const k = n.Infinity;
                      const x = _;
                      const A = M.abs;
                      const R = M.pow;
                      const I = M.floor;
                      const T = M.log;
                      const B = M.LN2;
                      const P = 'buffer';
                      const O = 'byteLength';
                      const C = 'byteOffset';
                      const L = i ? '_b' : P;
                      const j = i ? '_l' : O;
                      const N = i ? '_o' : C;
                      function D(t, e, r) {
                        let n;
                        let i;
                        let o;
                        const a = new Array(r);
                        let s = 8 * r - e - 1;
                        const f = (1 << s) - 1;
                        const u = f >> 1;
                        const c = e === 23 ? R(2, -24) - R(2, -77) : 0;
                        let h = 0;
                        const d = t < 0 || (t === 0 && 1 / t < 0) ? 1 : 0;
                        for (
                          (t = A(t)) != t || t === k
                            ? ((i = t != t ? 1 : 0), (n = f))
                            : ((n = I(T(t) / B)),
                            t * (o = R(2, -n)) < 1 && (n--, (o *= 2)),
                            (t += n + u >= 1 ? c / o : c * R(2, 1 - u)) * o >= 2
                                  && (n++, (o /= 2)),
                            n + u >= f
                              ? ((i = 0), (n = f))
                              : n + u >= 1
                                ? ((i = (t * o - 1) * R(2, e)), (n += u))
                                : ((i = t * R(2, u - 1) * R(2, e)), (n = 0)));
                          e >= 8;
                          a[h++] = 255 & i, i /= 256, e -= 8
                        );
                        for (n = (n << e) | i, s += e; s > 0; a[h++] = 255 & n, n /= 256, s -= 8);
                        return (a[--h] |= 128 * d), a;
                      }
                      function U(t, e, r) {
                        let n;
                        const i = 8 * r - e - 1;
                        const o = (1 << i) - 1;
                        const a = o >> 1;
                        let s = i - 7;
                        let f = r - 1;
                        let u = t[f--];
                        let c = 127 & u;
                        for (u >>= 7; s > 0; c = 256 * c + t[f], f--, s -= 8);
                        for (
                          n = c & ((1 << -s) - 1), c >>= -s, s += e;
                          s > 0;
                          n = 256 * n + t[f], f--, s -= 8
                        );
                        if (c === 0) c = 1 - a;
                        else {
                          if (c === o) return n ? NaN : u ? -k : k;
                          (n += R(2, e)), (c -= a);
                        }
                        return (u ? -1 : 1) * n * R(2, c - e);
                      }
                      function F(t) {
                        return (t[3] << 24) | (t[2] << 16) | (t[1] << 8) | t[0];
                      }
                      function q(t) {
                        return [255 & t];
                      }
                      function z(t) {
                        return [255 & t, (t >> 8) & 255];
                      }
                      function W(t) {
                        return [255 & t, (t >> 8) & 255, (t >> 16) & 255, (t >> 24) & 255];
                      }
                      function V(t) {
                        return D(t, 52, 8);
                      }
                      function H(t) {
                        return D(t, 23, 4);
                      }
                      function G(t, e, r) {
                        b(t.prototype, e, {
                          get() {
                            return this[r];
                          },
                        });
                      }
                      function K(t, e, r, n) {
                        const i = l(+r);
                        if (i + e > t[j]) throw E(w);
                        const o = t[L]._b;
                        const a = i + t[N];
                        const s = o.slice(a, a + e);
                        return n ? s : s.reverse();
                      }
                      function X(t, e, r, n, i, o) {
                        const a = l(+r);
                        if (a + e > t[j]) throw E(w);
                        for (let s = t[L]._b, f = a + t[N], u = n(+i), c = 0; c < e; c++) s[f + c] = u[o ? c : e - c - 1];
                      }
                      if (a.ABV) {
                        if (
                          !u(() => {
                            _(1);
                          })
                            || !u(() => {
                              new _(-1);
                            })
                            || u(() => (new _(), new _(1.5), new _(NaN), _.name != y))
                        ) {
                          for (
                            var Z,
                              Y = ((_ = function (t) {
                                return c(this, _), new x(l(t));
                              }).prototype = x.prototype),
                              J = p(x),
                              $ = 0;
                            J.length > $;

                          ) (Z = J[$++]) in _ || s(_, Z, x[Z]);
                          o || (Y.constructor = _);
                        }
                        const Q = new S(new _(2));
                        const tt = S.prototype.setInt8;
                        Q.setInt8(0, 2147483648),
                        Q.setInt8(1, 2147483649),
                        (!Q.getInt8(0) && Q.getInt8(1))
                              || f(
                                S.prototype,
                                {
                                  setInt8(t, e) {
                                    tt.call(this, t, (e << 24) >> 24);
                                  },
                                  setUint8(t, e) {
                                    tt.call(this, t, (e << 24) >> 24);
                                  },
                                },
                                !0,
                              );
                      } else {
                        (_ = function (t) {
                          c(this, _, y);
                          const e = l(t);
                          (this._b = v.call(new Array(e), 0)), (this[j] = e);
                        }),
                        (S = function (t, e, r) {
                          c(this, S, m), c(t, _, m);
                          const n = t[j];
                          const i = h(e);
                          if (i < 0 || i > n) throw E('Wrong offset!');
                          if (i + (r = void 0 === r ? n - i : d(r)) > n) throw E('Wrong length!');
                          (this[L] = t), (this[N] = i), (this[j] = r);
                        }),
                        i && (G(_, O, '_l'), G(S, P, '_b'), G(S, O, '_l'), G(S, C, '_o')),
                        f(S.prototype, {
                          getInt8(t) {
                            return (K(this, 1, t)[0] << 24) >> 24;
                          },
                          getUint8(t) {
                            return K(this, 1, t)[0];
                          },
                          getInt16(t) {
                            const e = K(this, 2, t, arguments[1]);
                            return (((e[1] << 8) | e[0]) << 16) >> 16;
                          },
                          getUint16(t) {
                            const e = K(this, 2, t, arguments[1]);
                            return (e[1] << 8) | e[0];
                          },
                          getInt32(t) {
                            return F(K(this, 4, t, arguments[1]));
                          },
                          getUint32(t) {
                            return F(K(this, 4, t, arguments[1])) >>> 0;
                          },
                          getFloat32(t) {
                            return U(K(this, 4, t, arguments[1]), 23, 4);
                          },
                          getFloat64(t) {
                            return U(K(this, 8, t, arguments[1]), 52, 8);
                          },
                          setInt8(t, e) {
                            X(this, 1, t, q, e);
                          },
                          setUint8(t, e) {
                            X(this, 1, t, q, e);
                          },
                          setInt16(t, e) {
                            X(this, 2, t, z, e, arguments[2]);
                          },
                          setUint16(t, e) {
                            X(this, 2, t, z, e, arguments[2]);
                          },
                          setInt32(t, e) {
                            X(this, 4, t, W, e, arguments[2]);
                          },
                          setUint32(t, e) {
                            X(this, 4, t, W, e, arguments[2]);
                          },
                          setFloat32(t, e) {
                            X(this, 4, t, H, e, arguments[2]);
                          },
                          setFloat64(t, e) {
                            X(this, 8, t, V, e, arguments[2]);
                          },
                        });
                      }
                      g(_, y),
                      g(S, m),
                      s(S.prototype, a.VIEW, !0),
                      (r.ArrayBuffer = _),
                      (r.DataView = S);
                    },
                    {
                      103: 103,
                      109: 109,
                      111: 111,
                      128: 128,
                      140: 140,
                      145: 145,
                      159: 159,
                      169: 169,
                      183: 183,
                      184: 184,
                      186: 186,
                      191: 191,
                      74: 74,
                      77: 77,
                      97: 97,
                    },
                  ],
                  191: [
                    function (t, e, r) {
                      for (
                        var n,
                          i = t(109),
                          o = t(111),
                          a = t(192),
                          s = a('typed_array'),
                          f = a('view'),
                          u = !(!i.ArrayBuffer || !i.DataView),
                          c = u,
                          h = 0,
                          d = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(
                            ',',
                          );
                        h < 9;

                      ) {
                        (n = i[d[h++]])
                          ? (o(n.prototype, s, !0), o(n.prototype, f, !0))
                          : (c = !1);
                      }
                      e.exports = {
                        ABV: u, CONSTR: c, TYPED: s, VIEW: f,
                      };
                    },
                    { 109: 109, 111: 111, 192: 192 },
                  ],
                  192: [
                    function (t, e, r) {
                      let n = 0;
                      const i = Math.random();
                      e.exports = function (t) {
                        return 'Symbol('.concat(
                          void 0 === t ? '' : t,
                          ')_',
                          (++n + i).toString(36),
                        );
                      };
                    },
                    {},
                  ],
                  193: [
                    function (t, e, r) {
                      const n = t(109).navigator;
                      e.exports = (n && n.userAgent) || '';
                    },
                    { 109: 109 },
                  ],
                  194: [
                    function (t, e, r) {
                      const n = t(120);
                      e.exports = function (t, e) {
                        if (!n(t) || t._t !== e) throw TypeError(`Incompatible receiver, ${e} required!`);
                        return t;
                      };
                    },
                    { 120: 120 },
                  ],
                  195: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(91);
                      const o = t(128);
                      const a = t(196);
                      const s = t(140).f;
                      e.exports = function (t) {
                        const e = i.Symbol || (i.Symbol = o ? {} : n.Symbol || {});
                        t.charAt(0) == '_' || t in e || s(e, t, { value: a.f(t) });
                      };
                    },
                    {
                      109: 109, 128: 128, 140: 140, 196: 196, 91: 91,
                    },
                  ],
                  196: [
                    function (t, e, r) {
                      r.f = t(197);
                    },
                    { 197: 197 },
                  ],
                  197: [
                    function (t, e, r) {
                      const n = t(171)('wks');
                      const i = t(192);
                      const o = t(109).Symbol;
                      const a = typeof o === 'function';
                      (e.exports = function (t) {
                        return n[t] || (n[t] = (a && o[t]) || (a ? o : i)(`Symbol.${t}`));
                      }).store = n;
                    },
                    { 109: 109, 171: 171, 192: 192 },
                  ],
                  198: [
                    function (t, e, r) {
                      const n = t(85);
                      const i = t(197)('iterator');
                      const o = t(127);
                      e.exports = t(91).getIteratorMethod = function (t) {
                        if (t != null) return t[i] || t['@@iterator'] || o[n(t)];
                      };
                    },
                    {
                      127: 127, 197: 197, 85: 85, 91: 91,
                    },
                  ],
                  199: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(163)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
                      n(n.S, 'RegExp', {
                        escape(t) {
                          return i(t);
                        },
                      });
                    },
                    { 101: 101, 163: 163 },
                  ],
                  200: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.P, 'Array', { copyWithin: t(76) }), t(72)('copyWithin');
                    },
                    { 101: 101, 72: 72, 76: 76 },
                  ],
                  201: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(80)(4);
                      n(n.P + n.F * !t(173)([].every, !0), 'Array', {
                        every(t) {
                          return i(this, t, arguments[1]);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 80: 80 },
                  ],
                  202: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.P, 'Array', { fill: t(77) }), t(72)('fill');
                    },
                    { 101: 101, 72: 72, 77: 77 },
                  ],
                  203: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(80)(2);
                      n(n.P + n.F * !t(173)([].filter, !0), 'Array', {
                        filter(t) {
                          return i(this, t, arguments[1]);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 80: 80 },
                  ],
                  204: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(80)(6);
                      const o = 'findIndex';
                      let a = !0;
                      o in []
                          && Array(1)[o](() => {
                            a = !1;
                          }),
                      n(n.P + n.F * a, 'Array', {
                        findIndex(t) {
                          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
                        },
                      }),
                      t(72)(o);
                    },
                    { 101: 101, 72: 72, 80: 80 },
                  ],
                  205: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(80)(5);
                      const o = 'find';
                      let a = !0;
                      o in []
                          && Array(1).find(() => {
                            a = !1;
                          }),
                      n(n.P + n.F * a, 'Array', {
                        find(t) {
                          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
                        },
                      }),
                      t(72)(o);
                    },
                    { 101: 101, 72: 72, 80: 80 },
                  ],
                  206: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(80)(0);
                      const o = t(173)([].forEach, !0);
                      n(n.P + n.F * !o, 'Array', {
                        forEach(t) {
                          return i(this, t, arguments[1]);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 80: 80 },
                  ],
                  207: [
                    function (t, e, r) {
                      const n = t(93);
                      const i = t(101);
                      const o = t(187);
                      const a = t(122);
                      const s = t(117);
                      const f = t(186);
                      const u = t(92);
                      const c = t(198);
                      i(
                        i.S
                            + i.F
                              * !t(125)((t) => {
                                Array.from(t);
                              }),
                        'Array',
                        {
                          from(t) {
                            let e;
                            let r;
                            let i;
                            let h;
                            const d = o(t);
                            const l = typeof this === 'function' ? this : Array;
                            const p = arguments.length;
                            let b = p > 1 ? arguments[1] : void 0;
                            const v = void 0 !== b;
                            let g = 0;
                            const y = c(d);
                            if (
                              (v && (b = n(b, p > 2 ? arguments[2] : void 0, 2)),
                              y == null || (l == Array && s(y)))
                            ) for (r = new l((e = f(d.length))); e > g; g++) u(r, g, v ? b(d[g], g) : d[g]);
                            else for (h = y.call(d), r = new l(); !(i = h.next()).done; g++) u(r, g, v ? a(h, b, [i.value, g], !0) : i.value);
                            return (r.length = g), r;
                          },
                        },
                      );
                    },
                    {
                      101: 101,
                      117: 117,
                      122: 122,
                      125: 125,
                      186: 186,
                      187: 187,
                      198: 198,
                      92: 92,
                      93: 93,
                    },
                  ],
                  208: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(79)(!1);
                      const o = [].indexOf;
                      const a = !!o && 1 / [1].indexOf(1, -0) < 0;
                      n(n.P + n.F * (a || !t(173)(o)), 'Array', {
                        indexOf(t) {
                          return a ? o.apply(this, arguments) || 0 : i(this, t, arguments[1]);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 79: 79 },
                  ],
                  209: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Array', { isArray: t(118) });
                    },
                    { 101: 101, 118: 118 },
                  ],
                  210: [
                    function (t, e, r) {
                      const n = t(72);
                      const i = t(126);
                      const o = t(127);
                      const a = t(185);
                      (e.exports = t(124)(
                        Array,
                        'Array',
                        function (t, e) {
                          (this._t = a(t)), (this._i = 0), (this._k = e);
                        },
                        function () {
                          const t = this._t;
                          const e = this._k;
                          const r = this._i++;
                          return !t || r >= t.length
                            ? ((this._t = void 0), i(1))
                            : i(0, e == 'keys' ? r : e == 'values' ? t[r] : [r, t[r]]);
                        },
                        'values',
                      )),
                      (o.Arguments = o.Array),
                      n('keys'),
                      n('values'),
                      n('entries');
                    },
                    {
                      124: 124, 126: 126, 127: 127, 185: 185, 72: 72,
                    },
                  ],
                  211: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(185);
                      const o = [].join;
                      n(n.P + n.F * (t(116) != Object || !t(173)(o)), 'Array', {
                        join(t) {
                          return o.call(i(this), void 0 === t ? ',' : t);
                        },
                      });
                    },
                    {
                      101: 101, 116: 116, 173: 173, 185: 185,
                    },
                  ],
                  212: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(185);
                      const o = t(184);
                      const a = t(186);
                      const s = [].lastIndexOf;
                      const f = !!s && 1 / [1].lastIndexOf(1, -0) < 0;
                      n(n.P + n.F * (f || !t(173)(s)), 'Array', {
                        lastIndexOf(t) {
                          if (f) return s.apply(this, arguments) || 0;
                          const e = i(this);
                          const r = a(e.length);
                          let n = r - 1;
                          for (
                            arguments.length > 1 && (n = Math.min(n, o(arguments[1]))),
                            n < 0 && (n = r + n);
                            n >= 0;
                            n--
                          ) if (n in e && e[n] === t) return n || 0;
                          return -1;
                        },
                      });
                    },
                    {
                      101: 101, 173: 173, 184: 184, 185: 185, 186: 186,
                    },
                  ],
                  213: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(80)(1);
                      n(n.P + n.F * !t(173)([].map, !0), 'Array', {
                        map(t) {
                          return i(this, t, arguments[1]);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 80: 80 },
                  ],
                  214: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(92);
                      n(
                        n.S
                            + n.F
                              * t(103)(() => {
                                function t() {}
                                return !(Array.of.call(t) instanceof t);
                              }),
                        'Array',
                        {
                          of() {
                            for (
                              var t = 0,
                                e = arguments.length,
                                r = new (typeof this === 'function' ? this : Array)(e);
                              e > t;

                            ) i(r, t, arguments[t++]);
                            return (r.length = e), r;
                          },
                        },
                      );
                    },
                    { 101: 101, 103: 103, 92: 92 },
                  ],
                  215: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(81);
                      n(n.P + n.F * !t(173)([].reduceRight, !0), 'Array', {
                        reduceRight(t) {
                          return i(this, t, arguments.length, arguments[1], !0);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 81: 81 },
                  ],
                  216: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(81);
                      n(n.P + n.F * !t(173)([].reduce, !0), 'Array', {
                        reduce(t) {
                          return i(this, t, arguments.length, arguments[1], !1);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 81: 81 },
                  ],
                  217: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(112);
                      const o = t(86);
                      const a = t(182);
                      const s = t(186);
                      const f = [].slice;
                      n(
                        n.P
                            + n.F
                              * t(103)(() => {
                                i && f.call(i);
                              }),
                        'Array',
                        {
                          slice(t, e) {
                            const r = s(this.length);
                            const n = o(this);
                            if (((e = void 0 === e ? r : e), n == 'Array')) return f.call(this, t, e);
                            for (
                              var i = a(t, r), u = a(e, r), c = s(u - i), h = new Array(c), d = 0;
                              d < c;
                              d++
                            ) h[d] = n == 'String' ? this.charAt(i + d) : this[i + d];
                            return h;
                          },
                        },
                      );
                    },
                    {
                      101: 101, 103: 103, 112: 112, 182: 182, 186: 186, 86: 86,
                    },
                  ],
                  218: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(80)(3);
                      n(n.P + n.F * !t(173)([].some, !0), 'Array', {
                        some(t) {
                          return i(this, t, arguments[1]);
                        },
                      });
                    },
                    { 101: 101, 173: 173, 80: 80 },
                  ],
                  219: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(70);
                      const o = t(187);
                      const a = t(103);
                      const s = [].sort;
                      const f = [1, 2, 3];
                      n(
                        n.P
                            + n.F
                              * (a(() => {
                                f.sort(void 0);
                              })
                                || !a(() => {
                                  f.sort(null);
                                })
                                || !t(173)(s)),
                        'Array',
                        {
                          sort(t) {
                            return void 0 === t ? s.call(o(this)) : s.call(o(this), i(t));
                          },
                        },
                      );
                    },
                    {
                      101: 101, 103: 103, 173: 173, 187: 187, 70: 70,
                    },
                  ],
                  220: [
                    function (t, e, r) {
                      t(168)('Array');
                    },
                    { 168: 168 },
                  ],
                  221: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Date', {
                        now() {
                          return new Date().getTime();
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  222: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(94);
                      n(n.P + n.F * (Date.prototype.toISOString !== i), 'Date', {
                        toISOString: i,
                      });
                    },
                    { 101: 101, 94: 94 },
                  ],
                  223: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(187);
                      const o = t(188);
                      n(
                        n.P
                            + n.F
                              * t(103)(() => (
                                new Date(NaN).toJSON() !== null
                                  || Date.prototype.toJSON.call({
                                    toISOString() {
                                      return 1;
                                    },
                                  })
                                    !== 1
                              )),
                        'Date',
                        {
                          toJSON(t) {
                            const e = i(this);
                            const r = o(e);
                            return typeof r !== 'number' || isFinite(r) ? e.toISOString() : null;
                          },
                        },
                      );
                    },
                    {
                      101: 101, 103: 103, 187: 187, 188: 188,
                    },
                  ],
                  224: [
                    function (t, e, r) {
                      const n = t(197)('toPrimitive');
                      const i = Date.prototype;
                      n in i || t(111)(i, n, t(95));
                    },
                    { 111: 111, 197: 197, 95: 95 },
                  ],
                  225: [
                    function (t, e, r) {
                      const n = Date.prototype;
                      const i = 'Invalid Date';
                      const o = 'toString';
                      const a = n.toString;
                      const s = n.getTime;
                      `${new Date(NaN)}` != i
                          && t(160)(n, o, function () {
                            const t = s.call(this);
                            return t == t ? a.call(this) : i;
                          });
                    },
                    { 160: 160 },
                  ],
                  226: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.P, 'Function', { bind: t(84) });
                    },
                    { 101: 101, 84: 84 },
                  ],
                  227: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(147);
                      const o = t(197)('hasInstance');
                      const a = Function.prototype;
                      o in a
                          || t(140).f(a, o, {
                            value(t) {
                              if (typeof this !== 'function' || !n(t)) return !1;
                              if (!n(this.prototype)) return t instanceof this;
                              for (; (t = i(t));) if (this.prototype === t) return !0;
                              return !1;
                            },
                          });
                    },
                    {
                      120: 120, 140: 140, 147: 147, 197: 197,
                    },
                  ],
                  228: [
                    function (t, e, r) {
                      const n = t(140).f;
                      const i = Function.prototype;
                      const o = /^\s*function ([^ (]*)/;
                      const a = 'name';
                      a in i
                          || (t(97)
                            && n(i, a, {
                              configurable: !0,
                              get() {
                                try {
                                  return (`${this}`).match(o)[1];
                                } catch (t) {
                                  return '';
                                }
                              },
                            }));
                    },
                    { 140: 140, 97: 97 },
                  ],
                  229: [
                    function (t, e, r) {
                      const n = t(87);
                      const i = t(194);
                      const o = 'Map';
                      e.exports = t(90)(
                        o,
                        (t) => function () {
                          return t(this, arguments.length > 0 ? arguments[0] : void 0);
                        },
                        {
                          get(t) {
                            const e = n.getEntry(i(this, o), t);
                            return e && e.v;
                          },
                          set(t, e) {
                            return n.def(i(this, o), t === 0 ? 0 : t, e);
                          },
                        },
                        n,
                        !0,
                      );
                    },
                    { 194: 194, 87: 87, 90: 90 },
                  ],
                  230: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(131);
                      const o = Math.sqrt;
                      const a = Math.acosh;
                      n(
                        n.S
                            + n.F
                              * !(a && Math.floor(a(Number.MAX_VALUE)) == 710 && a(1 / 0) == 1 / 0),
                        'Math',
                        {
                          acosh(t) {
                            return (t = +t) < 1
                              ? NaN
                              : t > 94906265.62425156
                                ? Math.log(t) + Math.LN2
                                : i(t - 1 + o(t - 1) * o(t + 1));
                          },
                        },
                      );
                    },
                    { 101: 101, 131: 131 },
                  ],
                  231: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = Math.asinh;
                      n(n.S + n.F * !(i && 1 / i(0) > 0), 'Math', {
                        asinh: function t(e) {
                          return isFinite((e = +e)) && e != 0
                            ? e < 0
                              ? -t(-e)
                              : Math.log(e + Math.sqrt(e * e + 1))
                            : e;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  232: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = Math.atanh;
                      n(n.S + n.F * !(i && 1 / i(-0) < 0), 'Math', {
                        atanh(t) {
                          return (t = +t) == 0 ? t : Math.log((1 + t) / (1 - t)) / 2;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  233: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(133);
                      n(n.S, 'Math', {
                        cbrt(t) {
                          return i((t = +t)) * Math.pow(Math.abs(t), 1 / 3);
                        },
                      });
                    },
                    { 101: 101, 133: 133 },
                  ],
                  234: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        clz32(t) {
                          return (t >>>= 0)
                            ? 31 - Math.floor(Math.log(t + 0.5) * Math.LOG2E)
                            : 32;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  235: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = Math.exp;
                      n(n.S, 'Math', {
                        cosh(t) {
                          return (i((t = +t)) + i(-t)) / 2;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  236: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(129);
                      n(n.S + n.F * (i != Math.expm1), 'Math', { expm1: i });
                    },
                    { 101: 101, 129: 129 },
                  ],
                  237: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', { fround: t(130) });
                    },
                    { 101: 101, 130: 130 },
                  ],
                  238: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = Math.abs;
                      n(n.S, 'Math', {
                        hypot(t, e) {
                          for (var r, n, o = 0, a = 0, s = arguments.length, f = 0; a < s;) {
                            f < (r = i(arguments[a++]))
                              ? ((o = o * (n = f / r) * n + 1), (f = r))
                              : (o += r > 0 ? (n = r / f) * n : r);
                          }
                          return f === 1 / 0 ? 1 / 0 : f * Math.sqrt(o);
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  239: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = Math.imul;
                      n(
                        n.S
                            + n.F
                              * t(103)(() => i(4294967295, 5) != -5 || i.length != 2),
                        'Math',
                        {
                          imul(t, e) {
                            const r = 65535;
                            const n = +t;
                            const i = +e;
                            const o = r & n;
                            const a = r & i;
                            return (
                              0
                                | (o * a
                                  + ((((r & (n >>> 16)) * a + o * (r & (i >>> 16))) << 16) >>> 0))
                            );
                          },
                        },
                      );
                    },
                    { 101: 101, 103: 103 },
                  ],
                  240: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        log10(t) {
                          return Math.log(t) * Math.LOG10E;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  241: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', { log1p: t(131) });
                    },
                    { 101: 101, 131: 131 },
                  ],
                  242: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        log2(t) {
                          return Math.log(t) / Math.LN2;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  243: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', { sign: t(133) });
                    },
                    { 101: 101, 133: 133 },
                  ],
                  244: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(129);
                      const o = Math.exp;
                      n(
                        n.S
                            + n.F
                              * t(103)(() => !Math.sinh(-2e-17) != -2e-17),
                        'Math',
                        {
                          sinh(t) {
                            return Math.abs((t = +t)) < 1
                              ? (i(t) - i(-t)) / 2
                              : (o(t - 1) - o(-t - 1)) * (Math.E / 2);
                          },
                        },
                      );
                    },
                    { 101: 101, 103: 103, 129: 129 },
                  ],
                  245: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(129);
                      const o = Math.exp;
                      n(n.S, 'Math', {
                        tanh(t) {
                          const e = i((t = +t));
                          const r = i(-t);
                          return e == 1 / 0 ? 1 : r == 1 / 0 ? -1 : (e - r) / (o(t) + o(-t));
                        },
                      });
                    },
                    { 101: 101, 129: 129 },
                  ],
                  246: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        trunc(t) {
                          return (t > 0 ? Math.floor : Math.ceil)(t);
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  247: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(110);
                      const o = t(86);
                      const a = t(114);
                      const s = t(188);
                      const f = t(103);
                      const u = t(145).f;
                      const c = t(143).f;
                      const h = t(140).f;
                      const d = t(179).trim;
                      const l = 'Number';
                      let p = n.Number;
                      const b = p;
                      const v = p.prototype;
                      const g = o(t(139)(v)) == l;
                      const y = 'trim' in String.prototype;
                      const m = function (t) {
                        let e = s(t, !1);
                        if (typeof e === 'string' && e.length > 2) {
                          let r;
                          let n;
                          let i;
                          const o = (e = y ? e.trim() : d(e, 3)).charCodeAt(0);
                          if (o === 43 || o === 45) {
                            if ((r = e.charCodeAt(2)) === 88 || r === 120) return NaN;
                          } else if (o === 48) {
                            switch (e.charCodeAt(1)) {
                              case 66:
                              case 98:
                                (n = 2), (i = 49);
                                break;
                              case 79:
                              case 111:
                                (n = 8), (i = 55);
                                break;
                              default:
                                return +e;
                            }
                            for (var a, f = e.slice(2), u = 0, c = f.length; u < c; u++) if ((a = f.charCodeAt(u)) < 48 || a > i) return NaN;
                            return parseInt(f, n);
                          }
                        }
                        return +e;
                      };
                      if (!p(' 0o1') || !p('0b1') || p('+0x1')) {
                        p = function (t) {
                          const e = arguments.length < 1 ? 0 : t;
                          const r = this;
                          return r instanceof p
                              && (g
                                ? f(() => {
                                  v.valueOf.call(r);
                                })
                                : o(r) != l)
                            ? a(new b(m(e)), r, p)
                            : m(e);
                        };
                        for (
                          var w,
                            _ = t(97)
                              ? u(b)
                              : 'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'.split(
                                ',',
                              ),
                            S = 0;
                          _.length > S;
                          S++
                        ) i(b, (w = _[S])) && !i(p, w) && h(p, w, c(b, w));
                        (p.prototype = v), (v.constructor = p), t(160)(n, l, p);
                      }
                    },
                    {
                      103: 103,
                      109: 109,
                      110: 110,
                      114: 114,
                      139: 139,
                      140: 140,
                      143: 143,
                      145: 145,
                      160: 160,
                      179: 179,
                      188: 188,
                      86: 86,
                      97: 97,
                    },
                  ],
                  248: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Number', { EPSILON: Math.pow(2, -52) });
                    },
                    { 101: 101 },
                  ],
                  249: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(109).isFinite;
                      n(n.S, 'Number', {
                        isFinite(t) {
                          return typeof t === 'number' && i(t);
                        },
                      });
                    },
                    { 101: 101, 109: 109 },
                  ],
                  250: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Number', { isInteger: t(119) });
                    },
                    { 101: 101, 119: 119 },
                  ],
                  251: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Number', {
                        isNaN(t) {
                          return t != t;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  252: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(119);
                      const o = Math.abs;
                      n(n.S, 'Number', {
                        isSafeInteger(t) {
                          return i(t) && o(t) <= 9007199254740991;
                        },
                      });
                    },
                    { 101: 101, 119: 119 },
                  ],
                  253: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Number', { MAX_SAFE_INTEGER: 9007199254740991 });
                    },
                    { 101: 101 },
                  ],
                  254: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Number', { MIN_SAFE_INTEGER: -9007199254740991 });
                    },
                    { 101: 101 },
                  ],
                  255: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(154);
                      n(n.S + n.F * (Number.parseFloat != i), 'Number', { parseFloat: i });
                    },
                    { 101: 101, 154: 154 },
                  ],
                  256: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(155);
                      n(n.S + n.F * (Number.parseInt != i), 'Number', { parseInt: i });
                    },
                    { 101: 101, 155: 155 },
                  ],
                  257: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(184);
                      const o = t(71);
                      const a = t(178);
                      const s = (1).toFixed;
                      const f = Math.floor;
                      const u = [0, 0, 0, 0, 0, 0];
                      const c = 'Number.toFixed: incorrect invocation!';
                      const h = '0';
                      const d = function (t, e) {
                        for (let r = -1, n = e; ++r < 6;) (n += t * u[r]), (u[r] = n % 1e7), (n = f(n / 1e7));
                      };
                      const l = function (t) {
                        for (let e = 6, r = 0; --e >= 0;) (r += u[e]), (u[e] = f(r / t)), (r = (r % t) * 1e7);
                      };
                      const p = function () {
                        for (var t = 6, e = ''; --t >= 0;) {
                          if (e !== '' || t === 0 || u[t] !== 0) {
                            const r = String(u[t]);
                            e = e === '' ? r : e + a.call(h, 7 - r.length) + r;
                          }
                        }
                        return e;
                      };
                      var b = function (t, e, r) {
                        return e === 0
                          ? r
                          : e % 2 == 1
                            ? b(t, e - 1, r * t)
                            : b(t * t, e / 2, r);
                      };
                      n(
                        n.P
                            + n.F
                              * ((!!s
                                && ((8e-5).toFixed(3) !== '0.000'
                                  || (0.9).toFixed(0) !== '1'
                                  || (1.255).toFixed(2) !== '1.25'
                                  || (0xde0b6b3a7640080).toFixed(0) !== '1000000000000000128'))
                                || !t(103)(() => {
                                  s.call({});
                                })),
                        'Number',
                        {
                          toFixed(t) {
                            let e;
                            let r;
                            let n;
                            let s;
                            let f = o(this, c);
                            const u = i(t);
                            let v = '';
                            let g = h;
                            if (u < 0 || u > 20) throw RangeError(c);
                            if (f != f) return 'NaN';
                            if (f <= -1e21 || f >= 1e21) return String(f);
                            if ((f < 0 && ((v = '-'), (f = -f)), f > 1e-21)) {
                              if (
                                ((r = (e = (function (t) {
                                  for (var e = 0, r = t; r >= 4096;) (e += 12), (r /= 4096);
                                  for (; r >= 2;) (e += 1), (r /= 2);
                                  return e;
                                }(f * b(2, 69, 1))) - 69) < 0
                                  ? f * b(2, -e, 1)
                                  : f / b(2, e, 1)),
                                (r *= 4503599627370496),
                                (e = 52 - e) > 0)
                              ) {
                                for (d(0, r), n = u; n >= 7;) d(1e7, 0), (n -= 7);
                                for (d(b(10, n, 1), 0), n = e - 1; n >= 23;) l(1 << 23), (n -= 23);
                                l(1 << n), d(1, 1), l(2), (g = p());
                              } else d(0, r), d(1 << -e, 0), (g = p() + a.call(h, u));
                            }
                            return (g = u > 0
                              ? v
                                    + ((s = g.length) <= u
                                      ? `0.${a.call(h, u - s)}${g}`
                                      : `${g.slice(0, s - u)}.${g.slice(s - u)}`)
                              : v + g);
                          },
                        },
                      );
                    },
                    {
                      101: 101, 103: 103, 178: 178, 184: 184, 71: 71,
                    },
                  ],
                  258: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(103);
                      const o = t(71);
                      const a = (1).toPrecision;
                      n(
                        n.P
                            + n.F
                              * (i(() => a.call(1, void 0) !== '1')
                                || !i(() => {
                                  a.call({});
                                })),
                        'Number',
                        {
                          toPrecision(t) {
                            const e = o(this, 'Number#toPrecision: incorrect invocation!');
                            return void 0 === t ? a.call(e) : a.call(e, t);
                          },
                        },
                      );
                    },
                    { 101: 101, 103: 103, 71: 71 },
                  ],
                  259: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S + n.F, 'Object', { assign: t(138) });
                    },
                    { 101: 101, 138: 138 },
                  ],
                  260: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Object', { create: t(139) });
                    },
                    { 101: 101, 139: 139 },
                  ],
                  261: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S + n.F * !t(97), 'Object', { defineProperties: t(141) });
                    },
                    { 101: 101, 141: 141, 97: 97 },
                  ],
                  262: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S + n.F * !t(97), 'Object', { defineProperty: t(140).f });
                    },
                    { 101: 101, 140: 140, 97: 97 },
                  ],
                  263: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(134).onFreeze;
                      t(151)('freeze', (t) => function (e) {
                        return t && n(e) ? t(i(e)) : e;
                      });
                    },
                    { 120: 120, 134: 134, 151: 151 },
                  ],
                  264: [
                    function (t, e, r) {
                      const n = t(185);
                      const i = t(143).f;
                      t(151)('getOwnPropertyDescriptor', () => function (t, e) {
                        return i(n(t), e);
                      });
                    },
                    { 143: 143, 151: 151, 185: 185 },
                  ],
                  265: [
                    function (t, e, r) {
                      t(151)('getOwnPropertyNames', () => t(144).f);
                    },
                    { 144: 144, 151: 151 },
                  ],
                  266: [
                    function (t, e, r) {
                      const n = t(187);
                      const i = t(147);
                      t(151)('getPrototypeOf', () => function (t) {
                        return i(n(t));
                      });
                    },
                    { 147: 147, 151: 151, 187: 187 },
                  ],
                  267: [
                    function (t, e, r) {
                      const n = t(120);
                      t(151)('isExtensible', (t) => function (e) {
                        return !!n(e) && (!t || t(e));
                      });
                    },
                    { 120: 120, 151: 151 },
                  ],
                  268: [
                    function (t, e, r) {
                      const n = t(120);
                      t(151)('isFrozen', (t) => function (e) {
                        return !n(e) || (!!t && t(e));
                      });
                    },
                    { 120: 120, 151: 151 },
                  ],
                  269: [
                    function (t, e, r) {
                      const n = t(120);
                      t(151)('isSealed', (t) => function (e) {
                        return !n(e) || (!!t && t(e));
                      });
                    },
                    { 120: 120, 151: 151 },
                  ],
                  270: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Object', { is: t(164) });
                    },
                    { 101: 101, 164: 164 },
                  ],
                  271: [
                    function (t, e, r) {
                      const n = t(187);
                      const i = t(149);
                      t(151)('keys', () => function (t) {
                        return i(n(t));
                      });
                    },
                    { 149: 149, 151: 151, 187: 187 },
                  ],
                  272: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(134).onFreeze;
                      t(151)('preventExtensions', (t) => function (e) {
                        return t && n(e) ? t(i(e)) : e;
                      });
                    },
                    { 120: 120, 134: 134, 151: 151 },
                  ],
                  273: [
                    function (t, e, r) {
                      const n = t(120);
                      const i = t(134).onFreeze;
                      t(151)('seal', (t) => function (e) {
                        return t && n(e) ? t(i(e)) : e;
                      });
                    },
                    { 120: 120, 134: 134, 151: 151 },
                  ],
                  274: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Object', { setPrototypeOf: t(167).set });
                    },
                    { 101: 101, 167: 167 },
                  ],
                  275: [
                    function (t, e, r) {
                      const n = t(85);
                      const i = {};
                      (i[t(197)('toStringTag')] = 'z'),
                      `${i}` != '[object z]'
                            && t(160)(
                              Object.prototype,
                              'toString',
                              function () {
                                return `[object ${n(this)}]`;
                              },
                              !0,
                            );
                    },
                    { 160: 160, 197: 197, 85: 85 },
                  ],
                  276: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(154);
                      n(n.G + n.F * (parseFloat != i), { parseFloat: i });
                    },
                    { 101: 101, 154: 154 },
                  ],
                  277: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(155);
                      n(n.G + n.F * (parseInt != i), { parseInt: i });
                    },
                    { 101: 101, 155: 155 },
                  ],
                  278: [
                    function (t, e, r) {
                      let n;
                      let i;
                      let o;
                      let a;
                      const s = t(128);
                      const f = t(109);
                      const u = t(93);
                      const c = t(85);
                      const h = t(101);
                      const d = t(120);
                      const l = t(70);
                      const p = t(74);
                      const b = t(107);
                      const v = t(172);
                      const g = t(181).set;
                      const y = t(136)();
                      const m = t(137);
                      const w = t(156);
                      const _ = t(193);
                      const S = t(157);
                      const M = 'Promise';
                      const E = f.TypeError;
                      const k = f.process;
                      const x = k && k.versions;
                      const A = (x && x.v8) || '';
                      let R = f.Promise;
                      const I = c(k) == 'process';
                      const T = function () {};
                      let B = (i = m.f);
                      const P = !!(function () {
                        try {
                          const e = R.resolve(1);
                          const r = ((e.constructor = {})[t(197)('species')] = function (t) {
                            t(T, T);
                          });
                          return (
                            (I || typeof PromiseRejectionEvent === 'function')
                                && e.then(T) instanceof r
                                && A.indexOf('6.6') !== 0
                                && _.indexOf('Chrome/66') === -1
                          );
                        } catch (t) {}
                      }());
                      const O = function (t) {
                        let e;
                        return !(!d(t) || typeof (e = t.then) !== 'function') && e;
                      };
                      const C = function (t, e) {
                        if (!t._n) {
                          t._n = !0;
                          const r = t._c;
                          y(() => {
                            for (
                              var n = t._v,
                                i = t._s == 1,
                                o = 0,
                                a = function (e) {
                                  let r;
                                  let o;
                                  let a;
                                  const s = i ? e.ok : e.fail;
                                  const f = e.resolve;
                                  const u = e.reject;
                                  const c = e.domain;
                                  try {
                                    s
                                      ? (i || (t._h == 2 && N(t), (t._h = 1)),
                                      !0 === s
                                        ? (r = n)
                                        : (c && c.enter(),
                                        (r = s(n)),
                                        c && (c.exit(), (a = !0))),
                                      r === e.promise
                                        ? u(E('Promise-chain cycle'))
                                        : (o = O(r))
                                          ? o.call(r, f, u)
                                          : f(r))
                                      : u(n);
                                  } catch (t) {
                                    c && !a && c.exit(), u(t);
                                  }
                                };
                              r.length > o;

                            ) a(r[o++]);
                            (t._c = []), (t._n = !1), e && !t._h && L(t);
                          });
                        }
                      };
                      var L = function (t) {
                        g.call(f, () => {
                          let e;
                          let r;
                          let n;
                          const i = t._v;
                          const o = j(t);
                          if (
                            (o
                                  && ((e = w(() => {
                                    I
                                      ? k.emit('unhandledRejection', i, t)
                                      : (r = f.onunhandledrejection)
                                        ? r({ promise: t, reason: i })
                                        : (n = f.console)
                                        && n.error
                                        && n.error('Unhandled promise rejection', i);
                                  })),
                                  (t._h = I || j(t) ? 2 : 1)),
                            (t._a = void 0),
                            o && e.e)
                          ) throw e.v;
                        });
                      };
                      var j = function (t) {
                        return t._h !== 1 && (t._a || t._c).length === 0;
                      };
                      var N = function (t) {
                        g.call(f, () => {
                          let e;
                          I
                            ? k.emit('rejectionHandled', t)
                            : (e = f.onrejectionhandled) && e({ promise: t, reason: t._v });
                        });
                      };
                      const D = function (t) {
                        let e = this;
                        e._d
                              || ((e._d = !0),
                              ((e = e._w || e)._v = t),
                              (e._s = 2),
                              e._a || (e._a = e._c.slice()),
                              C(e, !0));
                      };
                      var U = function (t) {
                        let e;
                        let r = this;
                        if (!r._d) {
                          (r._d = !0), (r = r._w || r);
                          try {
                            if (r === t) throw E("Promise can't be resolved itself");
                            (e = O(t))
                              ? y(() => {
                                const n = { _w: r, _d: !1 };
                                try {
                                  e.call(t, u(U, n, 1), u(D, n, 1));
                                } catch (t) {
                                  D.call(n, t);
                                }
                              })
                              : ((r._v = t), (r._s = 1), C(r, !1));
                          } catch (t) {
                            D.call({ _w: r, _d: !1 }, t);
                          }
                        }
                      };
                      P
                          || ((R = function (t) {
                            p(this, R, M, '_h'), l(t), n.call(this);
                            try {
                              t(u(U, this, 1), u(D, this, 1));
                            } catch (t) {
                              D.call(this, t);
                            }
                          }),
                          ((n = function (t) {
                            (this._c = []),
                            (this._a = void 0),
                            (this._s = 0),
                            (this._d = !1),
                            (this._v = void 0),
                            (this._h = 0),
                            (this._n = !1);
                          }).prototype = t(159)(R.prototype, {
                            then(t, e) {
                              const r = B(v(this, R));
                              return (
                                (r.ok = typeof t !== 'function' || t),
                                (r.fail = typeof e === 'function' && e),
                                (r.domain = I ? k.domain : void 0),
                                this._c.push(r),
                                this._a && this._a.push(r),
                                this._s && C(this, !1),
                                r.promise
                              );
                            },
                            catch(t) {
                              return this.then(void 0, t);
                            },
                          })),
                          (o = function () {
                            const t = new n();
                            (this.promise = t),
                            (this.resolve = u(U, t, 1)),
                            (this.reject = u(D, t, 1));
                          }),
                          (m.f = B = function (t) {
                            return t === R || t === a ? new o(t) : i(t);
                          })),
                      h(h.G + h.W + h.F * !P, { Promise: R }),
                      t(169)(R, M),
                      t(168)(M),
                      (a = t(91).Promise),
                      h(h.S + h.F * !P, M, {
                        reject(t) {
                          const e = B(this);
                          return (0, e.reject)(t), e.promise;
                        },
                      }),
                      h(h.S + h.F * (s || !P), M, {
                        resolve(t) {
                          return S(s && this === a ? R : this, t);
                        },
                      }),
                      h(
                        h.S
                              + h.F
                                * !(
                                  P
                                  && t(125)((t) => {
                                    R.all(t).catch(T);
                                  })
                                ),
                        M,
                        {
                          all(t) {
                            const e = this;
                            const r = B(e);
                            const n = r.resolve;
                            const i = r.reject;
                            const o = w(() => {
                              const r = [];
                              let o = 0;
                              let a = 1;
                              b(t, !1, (t) => {
                                const s = o++;
                                let f = !1;
                                r.push(void 0),
                                a++,
                                e.resolve(t).then((t) => {
                                  f || ((f = !0), (r[s] = t), --a || n(r));
                                }, i);
                              }),
                              --a || n(r);
                            });
                            return o.e && i(o.v), r.promise;
                          },
                          race(t) {
                            const e = this;
                            const r = B(e);
                            const n = r.reject;
                            const i = w(() => {
                              b(t, !1, (t) => {
                                e.resolve(t).then(r.resolve, n);
                              });
                            });
                            return i.e && n(i.v), r.promise;
                          },
                        },
                      );
                    },
                    {
                      101: 101,
                      107: 107,
                      109: 109,
                      120: 120,
                      125: 125,
                      128: 128,
                      136: 136,
                      137: 137,
                      156: 156,
                      157: 157,
                      159: 159,
                      168: 168,
                      169: 169,
                      172: 172,
                      181: 181,
                      193: 193,
                      197: 197,
                      70: 70,
                      74: 74,
                      85: 85,
                      91: 91,
                      93: 93,
                    },
                  ],
                  279: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(70);
                      const o = t(75);
                      const a = (t(109).Reflect || {}).apply;
                      const s = Function.apply;
                      n(
                        n.S
                            + n.F
                              * !t(103)(() => {
                                a(() => {});
                              }),
                        'Reflect',
                        {
                          apply(t, e, r) {
                            const n = i(t);
                            const f = o(r);
                            return a ? a(n, e, f) : s.call(n, e, f);
                          },
                        },
                      );
                    },
                    {
                      101: 101, 103: 103, 109: 109, 70: 70, 75: 75,
                    },
                  ],
                  280: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(139);
                      const o = t(70);
                      const a = t(75);
                      const s = t(120);
                      const f = t(103);
                      const u = t(84);
                      const c = (t(109).Reflect || {}).construct;
                      const h = f(() => {
                        function t() {}
                        return !(c(() => {}, [], t) instanceof t);
                      });
                      const d = !f(() => {
                        c(() => {});
                      });
                      n(n.S + n.F * (h || d), 'Reflect', {
                        construct(t, e) {
                          o(t), a(e);
                          const r = arguments.length < 3 ? t : o(arguments[2]);
                          if (d && !h) return c(t, e, r);
                          if (t == r) {
                            switch (e.length) {
                              case 0:
                                return new t();
                              case 1:
                                return new t(e[0]);
                              case 2:
                                return new t(e[0], e[1]);
                              case 3:
                                return new t(e[0], e[1], e[2]);
                              case 4:
                                return new t(e[0], e[1], e[2], e[3]);
                            }
                            const n = [null];
                            return n.push.apply(n, e), new (u.apply(t, n))();
                          }
                          const f = r.prototype;
                          const l = i(s(f) ? f : Object.prototype);
                          const p = Function.apply.call(t, l, e);
                          return s(p) ? p : l;
                        },
                      });
                    },
                    {
                      101: 101, 103: 103, 109: 109, 120: 120, 139: 139, 70: 70, 75: 75, 84: 84,
                    },
                  ],
                  281: [
                    function (t, e, r) {
                      const n = t(140);
                      const i = t(101);
                      const o = t(75);
                      const a = t(188);
                      i(
                        i.S
                            + i.F
                              * t(103)(() => {
                                Reflect.defineProperty(n.f({}, 1, { value: 1 }), 1, { value: 2 });
                              }),
                        'Reflect',
                        {
                          defineProperty(t, e, r) {
                            o(t), (e = a(e, !0)), o(r);
                            try {
                              return n.f(t, e, r), !0;
                            } catch (t) {
                              return !1;
                            }
                          },
                        },
                      );
                    },
                    {
                      101: 101, 103: 103, 140: 140, 188: 188, 75: 75,
                    },
                  ],
                  282: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(143).f;
                      const o = t(75);
                      n(n.S, 'Reflect', {
                        deleteProperty(t, e) {
                          const r = i(o(t), e);
                          return !(r && !r.configurable) && delete t[e];
                        },
                      });
                    },
                    { 101: 101, 143: 143, 75: 75 },
                  ],
                  283: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(75);
                      const o = function (t) {
                        (this._t = i(t)), (this._i = 0);
                        let e;
                        const r = (this._k = []);
                        for (e in t) r.push(e);
                      };
                      t(123)(o, 'Object', function () {
                        let t;
                        const e = this;
                        const r = e._k;
                        do {
                          if (e._i >= r.length) return { value: void 0, done: !0 };
                        } while (!((t = r[e._i++]) in e._t));
                        return { value: t, done: !1 };
                      }),
                      n(n.S, 'Reflect', {
                        enumerate(t) {
                          return new o(t);
                        },
                      });
                    },
                    { 101: 101, 123: 123, 75: 75 },
                  ],
                  284: [
                    function (t, e, r) {
                      const n = t(143);
                      const i = t(101);
                      const o = t(75);
                      i(i.S, 'Reflect', {
                        getOwnPropertyDescriptor(t, e) {
                          return n.f(o(t), e);
                        },
                      });
                    },
                    { 101: 101, 143: 143, 75: 75 },
                  ],
                  285: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(147);
                      const o = t(75);
                      n(n.S, 'Reflect', {
                        getPrototypeOf(t) {
                          return i(o(t));
                        },
                      });
                    },
                    { 101: 101, 147: 147, 75: 75 },
                  ],
                  286: [
                    function (t, e, r) {
                      const n = t(143);
                      const i = t(147);
                      const o = t(110);
                      const a = t(101);
                      const s = t(120);
                      const f = t(75);
                      a(a.S, 'Reflect', {
                        get: function t(e, r) {
                          let a;
                          let u;
                          const c = arguments.length < 3 ? e : arguments[2];
                          return f(e) === c
                            ? e[r]
                            : (a = n.f(e, r))
                              ? o(a, 'value')
                                ? a.value
                                : void 0 !== a.get
                                  ? a.get.call(c)
                                  : void 0
                              : s((u = i(e)))
                                ? t(u, r, c)
                                : void 0;
                        },
                      });
                    },
                    {
                      101: 101, 110: 110, 120: 120, 143: 143, 147: 147, 75: 75,
                    },
                  ],
                  287: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Reflect', {
                        has(t, e) {
                          return e in t;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  288: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(75);
                      const o = Object.isExtensible;
                      n(n.S, 'Reflect', {
                        isExtensible(t) {
                          return i(t), !o || o(t);
                        },
                      });
                    },
                    { 101: 101, 75: 75 },
                  ],
                  289: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Reflect', { ownKeys: t(153) });
                    },
                    { 101: 101, 153: 153 },
                  ],
                  290: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(75);
                      const o = Object.preventExtensions;
                      n(n.S, 'Reflect', {
                        preventExtensions(t) {
                          i(t);
                          try {
                            return o && o(t), !0;
                          } catch (t) {
                            return !1;
                          }
                        },
                      });
                    },
                    { 101: 101, 75: 75 },
                  ],
                  291: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(167);
                      i
                          && n(n.S, 'Reflect', {
                            setPrototypeOf(t, e) {
                              i.check(t, e);
                              try {
                                return i.set(t, e), !0;
                              } catch (t) {
                                return !1;
                              }
                            },
                          });
                    },
                    { 101: 101, 167: 167 },
                  ],
                  292: [
                    function (t, e, r) {
                      const n = t(140);
                      const i = t(143);
                      const o = t(147);
                      const a = t(110);
                      const s = t(101);
                      const f = t(158);
                      const u = t(75);
                      const c = t(120);
                      s(s.S, 'Reflect', {
                        set: function t(e, r, s) {
                          let h;
                          let d;
                          const l = arguments.length < 4 ? e : arguments[3];
                          let p = i.f(u(e), r);
                          if (!p) {
                            if (c((d = o(e)))) return t(d, r, s, l);
                            p = f(0);
                          }
                          if (a(p, 'value')) {
                            if (!1 === p.writable || !c(l)) return !1;
                            if ((h = i.f(l, r))) {
                              if (h.get || h.set || !1 === h.writable) return !1;
                              (h.value = s), n.f(l, r, h);
                            } else n.f(l, r, f(0, s));
                            return !0;
                          }
                          return void 0 !== p.set && (p.set.call(l, s), !0);
                        },
                      });
                    },
                    {
                      101: 101,
                      110: 110,
                      120: 120,
                      140: 140,
                      143: 143,
                      147: 147,
                      158: 158,
                      75: 75,
                    },
                  ],
                  293: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(114);
                      const o = t(140).f;
                      const a = t(145).f;
                      const s = t(121);
                      const f = t(105);
                      let u = n.RegExp;
                      const c = u;
                      const h = u.prototype;
                      const d = /a/g;
                      const l = /a/g;
                      const p = new u(d) !== d;
                      if (
                        t(97)
                          && (!p
                            || t(103)(() => ((
                              (l[t(197)('match')] = !1),
                              u(d) != d || u(l) == l || u(d, 'i') != '/a/i'
                            ))))
                      ) {
                        u = function (t, e) {
                          const r = this instanceof u;
                          let n = s(t);
                          const o = void 0 === e;
                          return !r && n && t.constructor === u && o
                            ? t
                            : i(
                              p
                                ? new c(n && !o ? t.source : t, e)
                                : c(
                                  (n = t instanceof u) ? t.source : t,
                                  n && o ? f.call(t) : e,
                                ),
                              r ? this : h,
                              u,
                            );
                        };
                        for (
                          let b = function (t) {
                              (t in u)
                                  || o(u, t, {
                                    configurable: !0,
                                    get() {
                                      return c[t];
                                    },
                                    set(e) {
                                      c[t] = e;
                                    },
                                  });
                            },
                            v = a(c),
                            g = 0;
                          v.length > g;

                        ) b(v[g++]);
                        (h.constructor = u), (u.prototype = h), t(160)(n, 'RegExp', u);
                      }
                      t(168)('RegExp');
                    },
                    {
                      103: 103,
                      105: 105,
                      109: 109,
                      114: 114,
                      121: 121,
                      140: 140,
                      145: 145,
                      160: 160,
                      168: 168,
                      197: 197,
                      97: 97,
                    },
                  ],
                  294: [
                    function (t, e, r) {
                      const n = t(162);
                      t(101)(
                        { target: 'RegExp', proto: !0, forced: n !== /./.exec },
                        { exec: n },
                      );
                    },
                    { 101: 101, 162: 162 },
                  ],
                  295: [
                    function (t, e, r) {
                      t(97)
                          && /./g.flags != 'g'
                          && t(140).f(RegExp.prototype, 'flags', { configurable: !0, get: t(105) });
                    },
                    { 105: 105, 140: 140, 97: 97 },
                  ],
                  296: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(186);
                      const o = t(73);
                      const a = t(161);
                      t(104)('match', 1, (t, e, r, s) => [
                        function (r) {
                          const n = t(this);
                          const i = r == null ? void 0 : r[e];
                          return void 0 !== i ? i.call(r, n) : new RegExp(r)[e](String(n));
                        },
                        function (t) {
                          const e = s(r, t, this);
                          if (e.done) return e.value;
                          const f = n(t);
                          const u = String(this);
                          if (!f.global) return a(f, u);
                          const c = f.unicode;
                          f.lastIndex = 0;
                          for (var h, d = [], l = 0; (h = a(f, u)) !== null;) {
                            const p = String(h[0]);
                            (d[l] = p),
                            p === '' && (f.lastIndex = o(u, i(f.lastIndex), c)),
                            l++;
                          }
                          return l === 0 ? null : d;
                        },
                      ]);
                    },
                    {
                      104: 104, 161: 161, 186: 186, 73: 73, 75: 75,
                    },
                  ],
                  297: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(187);
                      const o = t(186);
                      const a = t(184);
                      const s = t(73);
                      const f = t(161);
                      const u = Math.max;
                      const c = Math.min;
                      const h = Math.floor;
                      const d = /\$([$&`']|\d\d?|<[^>]*>)/g;
                      const l = /\$([$&`']|\d\d?)/g;
                      t(104)('replace', 2, (t, e, r, p) => {
                        return [
                          function (n, i) {
                            const o = t(this);
                            const a = n == null ? void 0 : n[e];
                            return void 0 !== a ? a.call(n, o, i) : r.call(String(o), n, i);
                          },
                          function (t, e) {
                            const i = p(r, t, this, e);
                            if (i.done) return i.value;
                            const h = n(t);
                            const d = String(this);
                            const l = typeof e === 'function';
                            l || (e = String(e));
                            const v = h.global;
                            if (v) {
                              var g = h.unicode;
                              h.lastIndex = 0;
                            }
                            for (var y = []; ;) {
                              var m = f(h, d);
                              if (m === null) break;
                              if ((y.push(m), !v)) break;
                              String(m[0]) === '' && (h.lastIndex = s(d, o(h.lastIndex), g));
                            }
                            for (var w, _ = '', S = 0, M = 0; M < y.length; M++) {
                              m = y[M];
                              for (
                                var E = String(m[0]),
                                  k = u(c(a(m.index), d.length), 0),
                                  x = [],
                                  A = 1;
                                A < m.length;
                                A++
                              ) x.push(void 0 === (w = m[A]) ? w : String(w));
                              const R = m.groups;
                              if (l) {
                                const I = [E].concat(x, k, d);
                                void 0 !== R && I.push(R);
                                var T = String(e.apply(void 0, I));
                              } else T = b(E, d, k, x, R, e);
                              k >= S && ((_ += d.slice(S, k) + T), (S = k + E.length));
                            }
                            return _ + d.slice(S);
                          },
                        ];
                        function b(t, e, n, o, a, s) {
                          const f = n + t.length;
                          const u = o.length;
                          let c = l;
                          return (
                            void 0 !== a && ((a = i(a)), (c = d)),
                            r.call(s, c, (r, i) => {
                              let s;
                              switch (i.charAt(0)) {
                                case '$':
                                  return '$';
                                case '&':
                                  return t;
                                case '`':
                                  return e.slice(0, n);
                                case "'":
                                  return e.slice(f);
                                case '<':
                                  s = a[i.slice(1, -1)];
                                  break;
                                default:
                                  var c = +i;
                                  if (c === 0) return r;
                                  if (c > u) {
                                    const d = h(c / 10);
                                    return d === 0
                                      ? r
                                      : d <= u
                                        ? void 0 === o[d - 1]
                                          ? i.charAt(1)
                                          : o[d - 1] + i.charAt(1)
                                        : r;
                                  }
                                  s = o[c - 1];
                              }
                              return void 0 === s ? '' : s;
                            })
                          );
                        }
                      });
                    },
                    {
                      104: 104, 161: 161, 184: 184, 186: 186, 187: 187, 73: 73, 75: 75,
                    },
                  ],
                  298: [
                    function (t, e, r) {
                      const n = t(75);
                      const i = t(164);
                      const o = t(161);
                      t(104)('search', 1, (t, e, r, a) => [
                        function (r) {
                          const n = t(this);
                          const i = r == null ? void 0 : r[e];
                          return void 0 !== i ? i.call(r, n) : new RegExp(r)[e](String(n));
                        },
                        function (t) {
                          const e = a(r, t, this);
                          if (e.done) return e.value;
                          const s = n(t);
                          const f = String(this);
                          const u = s.lastIndex;
                          i(u, 0) || (s.lastIndex = 0);
                          const c = o(s, f);
                          return (
                            i(s.lastIndex, u) || (s.lastIndex = u), c === null ? -1 : c.index
                          );
                        },
                      ]);
                    },
                    {
                      104: 104, 161: 161, 164: 164, 75: 75,
                    },
                  ],
                  299: [
                    function (t, e, r) {
                      const n = t(121);
                      const i = t(75);
                      const o = t(172);
                      const a = t(73);
                      const s = t(186);
                      const f = t(161);
                      const u = t(162);
                      const c = t(103);
                      const h = Math.min;
                      const d = [].push;
                      const l = 4294967295;
                      const p = !c(() => {
                        RegExp(l, 'y');
                      });
                      t(104)('split', 2, (t, e, r, c) => {
                        let b;
                        return (
                          (b = 'abbc'.split(/(b)*/)[1] == 'c'
                              || 'test'.split(/(?:)/, -1).length != 4
                              || 'ab'.split(/(?:ab)*/).length != 2
                              || '.'.split(/(.?)(.?)/).length != 4
                              || '.'.split(/()()/).length > 1
                              || ''.split(/.?/).length
                            ? function (t, e) {
                              const i = String(this);
                              if (void 0 === t && e === 0) return [];
                              if (!n(t)) return r.call(i, t, e);
                              for (
                                var o,
                                  a,
                                  s,
                                  f = [],
                                  c = (t.ignoreCase ? 'i' : '')
                                          + (t.multiline ? 'm' : '')
                                          + (t.unicode ? 'u' : '')
                                          + (t.sticky ? 'y' : ''),
                                  h = 0,
                                  p = void 0 === e ? l : e >>> 0,
                                  b = new RegExp(t.source, `${c}g`);
                                (o = u.call(b, i))
                                      && !(
                                        (a = b.lastIndex) > h
                                        && (f.push(i.slice(h, o.index)),
                                        o.length > 1
                                          && o.index < i.length
                                          && d.apply(f, o.slice(1)),
                                        (s = o[0].length),
                                        (h = a),
                                        f.length >= p)
                                      );

                              ) b.lastIndex === o.index && b.lastIndex++;
                              return (
                                h === i.length
                                  ? (!s && b.test('')) || f.push('')
                                  : f.push(i.slice(h)),
                                f.length > p ? f.slice(0, p) : f
                              );
                            }
                            : '0'.split(void 0, 0).length
                              ? function (t, e) {
                                return void 0 === t && e === 0 ? [] : r.call(this, t, e);
                              }
                              : r),
                          [
                            function (r, n) {
                              const i = t(this);
                              const o = r == null ? void 0 : r[e];
                              return void 0 !== o ? o.call(r, i, n) : b.call(String(i), r, n);
                            },
                            function (t, e) {
                              const n = c(b, t, this, e, b !== r);
                              if (n.done) return n.value;
                              const u = i(t);
                              const d = String(this);
                              const v = o(u, RegExp);
                              const g = u.unicode;
                              const y = (u.ignoreCase ? 'i' : '')
                                    + (u.multiline ? 'm' : '')
                                    + (u.unicode ? 'u' : '')
                                    + (p ? 'y' : 'g');
                              const m = new v(p ? u : `^(?:${u.source})`, y);
                              const w = void 0 === e ? l : e >>> 0;
                              if (w === 0) return [];
                              if (d.length === 0) return f(m, d) === null ? [d] : [];
                              for (var _ = 0, S = 0, M = []; S < d.length;) {
                                m.lastIndex = p ? S : 0;
                                var E;
                                const k = f(m, p ? d : d.slice(S));
                                if (
                                  k === null
                                    || (E = h(s(m.lastIndex + (p ? 0 : S)), d.length)) === _
                                ) S = a(d, S, g);
                                else {
                                  if ((M.push(d.slice(_, S)), M.length === w)) return M;
                                  for (let x = 1; x <= k.length - 1; x++) if ((M.push(k[x]), M.length === w)) return M;
                                  S = _ = E;
                                }
                              }
                              return M.push(d.slice(_)), M;
                            },
                          ]
                        );
                      });
                    },
                    {
                      103: 103,
                      104: 104,
                      121: 121,
                      161: 161,
                      162: 162,
                      172: 172,
                      186: 186,
                      73: 73,
                      75: 75,
                    },
                  ],
                  300: [
                    function (t, e, r) {
                      t(295);
                      const n = t(75);
                      const i = t(105);
                      const o = t(97);
                      const a = 'toString';
                      const s = /./.toString;
                      const f = function (e) {
                        t(160)(RegExp.prototype, a, e, !0);
                      };
                      t(103)(() => s.call({ source: 'a', flags: 'b' }) != '/a/b')
                        ? f(function () {
                          const t = n(this);
                          return '/'.concat(
                            t.source,
                            '/',
                            'flags' in t
                              ? t.flags
                              : !o && t instanceof RegExp
                                ? i.call(t)
                                : void 0,
                          );
                        })
                        : s.name != a
                            && f(function () {
                              return s.call(this);
                            });
                    },
                    {
                      103: 103, 105: 105, 160: 160, 295: 295, 75: 75, 97: 97,
                    },
                  ],
                  301: [
                    function (t, e, r) {
                      const n = t(87);
                      const i = t(194);
                      e.exports = t(90)(
                        'Set',
                        (t) => function () {
                          return t(this, arguments.length > 0 ? arguments[0] : void 0);
                        },
                        {
                          add(t) {
                            return n.def(i(this, 'Set'), (t = t === 0 ? 0 : t), t);
                          },
                        },
                        n,
                      );
                    },
                    { 194: 194, 87: 87, 90: 90 },
                  ],
                  302: [
                    function (t, e, r) {
                      t(176)('anchor', (t) => function (e) {
                        return t(this, 'a', 'name', e);
                      });
                    },
                    { 176: 176 },
                  ],
                  303: [
                    function (t, e, r) {
                      t(176)('big', (t) => function () {
                        return t(this, 'big', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  304: [
                    function (t, e, r) {
                      t(176)('blink', (t) => function () {
                        return t(this, 'blink', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  305: [
                    function (t, e, r) {
                      t(176)('bold', (t) => function () {
                        return t(this, 'b', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  306: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(174)(!1);
                      n(n.P, 'String', {
                        codePointAt(t) {
                          return i(this, t);
                        },
                      });
                    },
                    { 101: 101, 174: 174 },
                  ],
                  307: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(186);
                      const o = t(175);
                      const a = 'endsWith';
                      const s = ''.endsWith;
                      n(n.P + n.F * t(102)(a), 'String', {
                        endsWith(t) {
                          const e = o(this, t, a);
                          const r = arguments.length > 1 ? arguments[1] : void 0;
                          const n = i(e.length);
                          const f = void 0 === r ? n : Math.min(i(r), n);
                          const u = String(t);
                          return s ? s.call(e, u, f) : e.slice(f - u.length, f) === u;
                        },
                      });
                    },
                    {
                      101: 101, 102: 102, 175: 175, 186: 186,
                    },
                  ],
                  308: [
                    function (t, e, r) {
                      t(176)('fixed', (t) => function () {
                        return t(this, 'tt', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  309: [
                    function (t, e, r) {
                      t(176)('fontcolor', (t) => function (e) {
                        return t(this, 'font', 'color', e);
                      });
                    },
                    { 176: 176 },
                  ],
                  310: [
                    function (t, e, r) {
                      t(176)('fontsize', (t) => function (e) {
                        return t(this, 'font', 'size', e);
                      });
                    },
                    { 176: 176 },
                  ],
                  311: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(182);
                      const o = String.fromCharCode;
                      const a = String.fromCodePoint;
                      n(n.S + n.F * (!!a && a.length != 1), 'String', {
                        fromCodePoint(t) {
                          for (var e, r = [], n = arguments.length, a = 0; n > a;) {
                            if (((e = +arguments[a++]), i(e, 1114111) !== e)) throw RangeError(`${e} is not a valid code point`);
                            r.push(
                              e < 65536
                                ? o(e)
                                : o(55296 + ((e -= 65536) >> 10), (e % 1024) + 56320),
                            );
                          }
                          return r.join('');
                        },
                      });
                    },
                    { 101: 101, 182: 182 },
                  ],
                  312: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(175);
                      const o = 'includes';
                      n(n.P + n.F * t(102)(o), 'String', {
                        includes(t) {
                          return !!~i(this, t, o).indexOf(
                            t,
                            arguments.length > 1 ? arguments[1] : void 0,
                          );
                        },
                      });
                    },
                    { 101: 101, 102: 102, 175: 175 },
                  ],
                  313: [
                    function (t, e, r) {
                      t(176)('italics', (t) => function () {
                        return t(this, 'i', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  314: [
                    function (t, e, r) {
                      const n = t(174)(!0);
                      t(124)(
                        String,
                        'String',
                        function (t) {
                          (this._t = String(t)), (this._i = 0);
                        },
                        function () {
                          let t;
                          const e = this._t;
                          const r = this._i;
                          return r >= e.length
                            ? { value: void 0, done: !0 }
                            : ((t = n(e, r)), (this._i += t.length), { value: t, done: !1 });
                        },
                      );
                    },
                    { 124: 124, 174: 174 },
                  ],
                  315: [
                    function (t, e, r) {
                      t(176)('link', (t) => function (e) {
                        return t(this, 'a', 'href', e);
                      });
                    },
                    { 176: 176 },
                  ],
                  316: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(185);
                      const o = t(186);
                      n(n.S, 'String', {
                        raw(t) {
                          for (
                            var e = i(t.raw),
                              r = o(e.length),
                              n = arguments.length,
                              a = [],
                              s = 0;
                            r > s;

                          ) a.push(String(e[s++])), s < n && a.push(String(arguments[s]));
                          return a.join('');
                        },
                      });
                    },
                    { 101: 101, 185: 185, 186: 186 },
                  ],
                  317: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.P, 'String', { repeat: t(178) });
                    },
                    { 101: 101, 178: 178 },
                  ],
                  318: [
                    function (t, e, r) {
                      t(176)('small', (t) => function () {
                        return t(this, 'small', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  319: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(186);
                      const o = t(175);
                      const a = 'startsWith';
                      const s = ''.startsWith;
                      n(n.P + n.F * t(102)(a), 'String', {
                        startsWith(t) {
                          const e = o(this, t, a);
                          const r = i(
                            Math.min(arguments.length > 1 ? arguments[1] : void 0, e.length),
                          );
                          const n = String(t);
                          return s ? s.call(e, n, r) : e.slice(r, r + n.length) === n;
                        },
                      });
                    },
                    {
                      101: 101, 102: 102, 175: 175, 186: 186,
                    },
                  ],
                  320: [
                    function (t, e, r) {
                      t(176)('strike', (t) => function () {
                        return t(this, 'strike', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  321: [
                    function (t, e, r) {
                      t(176)('sub', (t) => function () {
                        return t(this, 'sub', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  322: [
                    function (t, e, r) {
                      t(176)('sup', (t) => function () {
                        return t(this, 'sup', '', '');
                      });
                    },
                    { 176: 176 },
                  ],
                  323: [
                    function (t, e, r) {
                      t(179)('trim', (t) => function () {
                        return t(this, 3);
                      });
                    },
                    { 179: 179 },
                  ],
                  324: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(110);
                      const o = t(97);
                      const a = t(101);
                      const s = t(160);
                      const f = t(134).KEY;
                      const u = t(103);
                      const c = t(171);
                      const h = t(169);
                      const d = t(192);
                      const l = t(197);
                      const p = t(196);
                      const b = t(195);
                      const v = t(100);
                      const g = t(118);
                      const y = t(75);
                      const m = t(120);
                      const w = t(187);
                      const _ = t(185);
                      const S = t(188);
                      const M = t(158);
                      const E = t(139);
                      const k = t(144);
                      const x = t(143);
                      const A = t(146);
                      const R = t(140);
                      const I = t(149);
                      const T = x.f;
                      const B = R.f;
                      const P = k.f;
                      let O = n.Symbol;
                      const C = n.JSON;
                      const L = C && C.stringify;
                      const j = l('_hidden');
                      const N = l('toPrimitive');
                      const D = {}.propertyIsEnumerable;
                      const U = c('symbol-registry');
                      const F = c('symbols');
                      const q = c('op-symbols');
                      const z = Object.prototype;
                      const W = typeof O === 'function' && !!A.f;
                      const V = n.QObject;
                      let H = !V || !V.prototype || !V.prototype.findChild;
                      const G = o
                            && u(() => (
                              E(
                                B({}, 'a', {
                                  get() {
                                    return B(this, 'a', { value: 7 }).a;
                                  },
                                }),
                              ).a
                                != 7
                            ))
                        ? function (t, e, r) {
                          const n = T(z, e);
                          n && delete z[e], B(t, e, r), n && t !== z && B(z, e, n);
                        }
                        : B;
                      const K = function (t) {
                        const e = (F[t] = E(O.prototype));
                        return (e._k = t), e;
                      };
                      const X = W && typeof O.iterator === 'symbol'
                        ? function (t) {
                          return typeof t === 'symbol';
                        }
                        : function (t) {
                          return t instanceof O;
                        };
                      var Z = function (t, e, r) {
                        return (
                          t === z && Z(q, e, r),
                          y(t),
                          (e = S(e, !0)),
                          y(r),
                          i(F, e)
                            ? (r.enumerable
                              ? (i(t, j) && t[j][e] && (t[j][e] = !1),
                              (r = E(r, { enumerable: M(0, !1) })))
                              : (i(t, j) || B(t, j, M(1, {})), (t[j][e] = !0)),
                            G(t, e, r))
                            : B(t, e, r)
                        );
                      };
                      const Y = function (t, e) {
                        y(t);
                        for (var r, n = v((e = _(e))), i = 0, o = n.length; o > i;) Z(t, (r = n[i++]), e[r]);
                        return t;
                      };
                      const J = function (t) {
                        const e = D.call(this, (t = S(t, !0)));
                        return (
                          !(this === z && i(F, t) && !i(q, t))
                              && (!(e || !i(this, t) || !i(F, t) || (i(this, j) && this[j][t])) || e)
                        );
                      };
                      const $ = function (t, e) {
                        if (((t = _(t)), (e = S(e, !0)), t !== z || !i(F, e) || i(q, e))) {
                          const r = T(t, e);
                          return (
                            !r || !i(F, e) || (i(t, j) && t[j][e]) || (r.enumerable = !0), r
                          );
                        }
                      };
                      const Q = function (t) {
                        for (var e, r = P(_(t)), n = [], o = 0; r.length > o;) i(F, (e = r[o++])) || e == j || e == f || n.push(e);
                        return n;
                      };
                      const tt = function (t) {
                        for (
                          var e, r = t === z, n = P(r ? q : _(t)), o = [], a = 0;
                          n.length > a;

                        ) !i(F, (e = n[a++])) || (r && !i(z, e)) || o.push(F[e]);
                        return o;
                      };
                      W
                          || (s(
                            (O = function () {
                              if (this instanceof O) throw TypeError('Symbol is not a constructor!');
                              const t = d(arguments.length > 0 ? arguments[0] : void 0);
                              var e = function (r) {
                                this === z && e.call(q, r),
                                i(this, j) && i(this[j], t) && (this[j][t] = !1),
                                G(this, t, M(1, r));
                              };
                              return o && H && G(z, t, { configurable: !0, set: e }), K(t);
                            }).prototype,
                            'toString',
                            function () {
                              return this._k;
                            },
                          ),
                          (x.f = $),
                          (R.f = Z),
                          (t(145).f = k.f = Q),
                          (t(150).f = J),
                          (A.f = tt),
                          o && !t(128) && s(z, 'propertyIsEnumerable', J, !0),
                          (p.f = function (t) {
                            return K(l(t));
                          })),
                      a(a.G + a.W + a.F * !W, { Symbol: O });
                      for (
                        let et = 'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(
                            ',',
                          ),
                          rt = 0;
                        et.length > rt;

                      ) l(et[rt++]);
                      for (let nt = I(l.store), it = 0; nt.length > it;) b(nt[it++]);
                      a(a.S + a.F * !W, 'Symbol', {
                        for(t) {
                          return i(U, (t += '')) ? U[t] : (U[t] = O(t));
                        },
                        keyFor(t) {
                          if (!X(t)) throw TypeError(`${t} is not a symbol!`);
                          for (const e in U) if (U[e] === t) return e;
                        },
                        useSetter() {
                          H = !0;
                        },
                        useSimple() {
                          H = !1;
                        },
                      }),
                      a(a.S + a.F * !W, 'Object', {
                        create(t, e) {
                          return void 0 === e ? E(t) : Y(E(t), e);
                        },
                        defineProperty: Z,
                        defineProperties: Y,
                        getOwnPropertyDescriptor: $,
                        getOwnPropertyNames: Q,
                        getOwnPropertySymbols: tt,
                      });
                      const ot = u(() => {
                        A.f(1);
                      });
                      a(a.S + a.F * ot, 'Object', {
                        getOwnPropertySymbols(t) {
                          return A.f(w(t));
                        },
                      }),
                      C
                            && a(
                              a.S
                                + a.F
                                  * (!W
                                    || u(() => {
                                      const t = O();
                                      return (
                                        L([t]) != '[null]'
                                        || L({ a: t }) != '{}'
                                        || L(Object(t)) != '{}'
                                      );
                                    })),
                              'JSON',
                              {
                                stringify(t) {
                                  for (var e, r, n = [t], i = 1; arguments.length > i;) n.push(arguments[i++]);
                                  if (((r = e = n[1]), (m(e) || void 0 !== t) && !X(t))) {
                                    return (
                                      g(e)
                                        || (e = function (t, e) {
                                          if (
                                            (typeof r === 'function' && (e = r.call(this, t, e)),
                                            !X(e))
                                          ) return e;
                                        }),
                                      (n[1] = e),
                                      L.apply(C, n)
                                    );
                                  }
                                },
                              },
                            ),
                      O.prototype[N] || t(111)(O.prototype, N, O.prototype.valueOf),
                      h(O, 'Symbol'),
                      h(Math, 'Math', !0),
                      h(n.JSON, 'JSON', !0);
                    },
                    {
                      100: 100,
                      101: 101,
                      103: 103,
                      109: 109,
                      110: 110,
                      111: 111,
                      118: 118,
                      120: 120,
                      128: 128,
                      134: 134,
                      139: 139,
                      140: 140,
                      143: 143,
                      144: 144,
                      145: 145,
                      146: 146,
                      149: 149,
                      150: 150,
                      158: 158,
                      160: 160,
                      169: 169,
                      171: 171,
                      185: 185,
                      187: 187,
                      188: 188,
                      192: 192,
                      195: 195,
                      196: 196,
                      197: 197,
                      75: 75,
                      97: 97,
                    },
                  ],
                  325: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(191);
                      const o = t(190);
                      const a = t(75);
                      const s = t(182);
                      const f = t(186);
                      const u = t(120);
                      const c = t(109).ArrayBuffer;
                      const h = t(172);
                      const d = o.ArrayBuffer;
                      const l = o.DataView;
                      const p = i.ABV && c.isView;
                      const b = d.prototype.slice;
                      const v = i.VIEW;
                      const g = 'ArrayBuffer';
                      n(n.G + n.W + n.F * (c !== d), { ArrayBuffer: d }),
                      n(n.S + n.F * !i.CONSTR, g, {
                        isView(t) {
                          return (p && p(t)) || (u(t) && v in t);
                        },
                      }),
                      n(
                        n.P
                              + n.U
                              + n.F
                                * t(103)(() => !new d(2).slice(1, void 0).byteLength),
                        g,
                        {
                          slice(t, e) {
                            if (void 0 !== b && void 0 === e) return b.call(a(this), t);
                            for (
                              var r = a(this).byteLength,
                                n = s(t, r),
                                i = s(void 0 === e ? r : e, r),
                                o = new (h(this, d))(f(i - n)),
                                u = new l(this),
                                c = new l(o),
                                p = 0;
                              n < i;

                            ) c.setUint8(p++, u.getUint8(n++));
                            return o;
                          },
                        },
                      ),
                      t(168)(g);
                    },
                    {
                      101: 101,
                      103: 103,
                      109: 109,
                      120: 120,
                      168: 168,
                      172: 172,
                      182: 182,
                      186: 186,
                      190: 190,
                      191: 191,
                      75: 75,
                    },
                  ],
                  326: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.G + n.W + n.F * !t(191).ABV, { DataView: t(190).DataView });
                    },
                    { 101: 101, 190: 190, 191: 191 },
                  ],
                  327: [
                    function (t, e, r) {
                      t(189)('Float32', 4, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  328: [
                    function (t, e, r) {
                      t(189)('Float64', 8, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  329: [
                    function (t, e, r) {
                      t(189)('Int16', 2, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  330: [
                    function (t, e, r) {
                      t(189)('Int32', 4, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  331: [
                    function (t, e, r) {
                      t(189)('Int8', 1, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  332: [
                    function (t, e, r) {
                      t(189)('Uint16', 2, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  333: [
                    function (t, e, r) {
                      t(189)('Uint32', 4, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  334: [
                    function (t, e, r) {
                      t(189)('Uint8', 1, (t) => function (e, r, n) {
                        return t(this, e, r, n);
                      });
                    },
                    { 189: 189 },
                  ],
                  335: [
                    function (t, e, r) {
                      t(189)(
                        'Uint8',
                        1,
                        (t) => function (e, r, n) {
                          return t(this, e, r, n);
                        },
                        !0,
                      );
                    },
                    { 189: 189 },
                  ],
                  336: [
                    function (t, e, r) {
                      let n;
                      const i = t(109);
                      const o = t(80)(0);
                      const a = t(160);
                      const s = t(134);
                      const f = t(138);
                      const u = t(89);
                      const c = t(120);
                      const h = t(194);
                      const d = t(194);
                      const l = !i.ActiveXObject && 'ActiveXObject' in i;
                      const p = 'WeakMap';
                      const b = s.getWeak;
                      const v = Object.isExtensible;
                      const g = u.ufstore;
                      const y = function (t) {
                        return function () {
                          return t(this, arguments.length > 0 ? arguments[0] : void 0);
                        };
                      };
                      const m = {
                        get(t) {
                          if (c(t)) {
                            const e = b(t);
                            return !0 === e ? g(h(this, p)).get(t) : e ? e[this._i] : void 0;
                          }
                        },
                        set(t, e) {
                          return u.def(h(this, p), t, e);
                        },
                      };
                      const w = (e.exports = t(90)(p, y, m, u, !0, !0));
                      d
                          && l
                          && (f((n = u.getConstructor(y, p)).prototype, m),
                          (s.NEED = !0),
                          o(['delete', 'has', 'get', 'set'], (t) => {
                            const e = w.prototype;
                            const r = e[t];
                            a(e, t, function (e, i) {
                              if (c(e) && !v(e)) {
                                this._f || (this._f = new n());
                                const o = this._f[t](e, i);
                                return t == 'set' ? this : o;
                              }
                              return r.call(this, e, i);
                            });
                          }));
                    },
                    {
                      109: 109,
                      120: 120,
                      134: 134,
                      138: 138,
                      160: 160,
                      194: 194,
                      80: 80,
                      89: 89,
                      90: 90,
                    },
                  ],
                  337: [
                    function (t, e, r) {
                      const n = t(89);
                      const i = t(194);
                      const o = 'WeakSet';
                      t(90)(
                        o,
                        (t) => function () {
                          return t(this, arguments.length > 0 ? arguments[0] : void 0);
                        },
                        {
                          add(t) {
                            return n.def(i(this, o), t, !0);
                          },
                        },
                        n,
                        !1,
                        !0,
                      );
                    },
                    { 194: 194, 89: 89, 90: 90 },
                  ],
                  338: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(106);
                      const o = t(187);
                      const a = t(186);
                      const s = t(70);
                      const f = t(83);
                      n(n.P, 'Array', {
                        flatMap(t) {
                          let e;
                          let r;
                          const n = o(this);
                          return (
                            s(t),
                            (e = a(n.length)),
                            (r = f(n, 0)),
                            i(r, n, n, e, 0, 1, t, arguments[1]),
                            r
                          );
                        },
                      }),
                      t(72)('flatMap');
                    },
                    {
                      101: 101, 106: 106, 186: 186, 187: 187, 70: 70, 72: 72, 83: 83,
                    },
                  ],
                  339: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(106);
                      const o = t(187);
                      const a = t(186);
                      const s = t(184);
                      const f = t(83);
                      n(n.P, 'Array', {
                        flatten() {
                          const t = arguments[0];
                          const e = o(this);
                          const r = a(e.length);
                          const n = f(e, 0);
                          return i(n, e, e, r, 0, void 0 === t ? 1 : s(t)), n;
                        },
                      }),
                      t(72)('flatten');
                    },
                    {
                      101: 101, 106: 106, 184: 184, 186: 186, 187: 187, 72: 72, 83: 83,
                    },
                  ],
                  340: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(79)(!0);
                      n(n.P, 'Array', {
                        includes(t) {
                          return i(this, t, arguments.length > 1 ? arguments[1] : void 0);
                        },
                      }),
                      t(72)('includes');
                    },
                    { 101: 101, 72: 72, 79: 79 },
                  ],
                  341: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(136)();
                      const o = t(109).process;
                      const a = t(86)(o) == 'process';
                      n(n.G, {
                        asap(t) {
                          const e = a && o.domain;
                          i(e ? e.bind(t) : t);
                        },
                      });
                    },
                    {
                      101: 101, 109: 109, 136: 136, 86: 86,
                    },
                  ],
                  342: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(86);
                      n(n.S, 'Error', {
                        isError(t) {
                          return i(t) === 'Error';
                        },
                      });
                    },
                    { 101: 101, 86: 86 },
                  ],
                  343: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.G, { global: t(109) });
                    },
                    { 101: 101, 109: 109 },
                  ],
                  344: [
                    function (t, e, r) {
                      t(165)('Map');
                    },
                    { 165: 165 },
                  ],
                  345: [
                    function (t, e, r) {
                      t(166)('Map');
                    },
                    { 166: 166 },
                  ],
                  346: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.P + n.R, 'Map', { toJSON: t(88)('Map') });
                    },
                    { 101: 101, 88: 88 },
                  ],
                  347: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        clamp(t, e, r) {
                          return Math.min(r, Math.max(e, t));
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  348: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });
                    },
                    { 101: 101 },
                  ],
                  349: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = 180 / Math.PI;
                      n(n.S, 'Math', {
                        degrees(t) {
                          return t * i;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  350: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(132);
                      const o = t(130);
                      n(n.S, 'Math', {
                        fscale(t, e, r, n, a) {
                          return o(i(t, e, r, n, a));
                        },
                      });
                    },
                    { 101: 101, 130: 130, 132: 132 },
                  ],
                  351: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        iaddh(t, e, r, n) {
                          const i = t >>> 0;
                          const o = r >>> 0;
                          return (
                            ((e >>> 0)
                                + (n >>> 0)
                                + (((i & o) | ((i | o) & ~((i + o) >>> 0))) >>> 31))
                              | 0
                          );
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  352: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        imulh(t, e) {
                          const r = 65535;
                          const n = +t;
                          const i = +e;
                          const o = n & r;
                          const a = i & r;
                          const s = n >> 16;
                          const f = i >> 16;
                          const u = ((s * a) >>> 0) + ((o * a) >>> 16);
                          return s * f + (u >> 16) + ((((o * f) >>> 0) + (u & r)) >> 16);
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  353: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        isubh(t, e, r, n) {
                          const i = t >>> 0;
                          const o = r >>> 0;
                          return (
                            ((e >>> 0)
                                - (n >>> 0)
                                - (((~i & o) | (~(i ^ o) & ((i - o) >>> 0))) >>> 31))
                              | 0
                          );
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  354: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });
                    },
                    { 101: 101 },
                  ],
                  355: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = Math.PI / 180;
                      n(n.S, 'Math', {
                        radians(t) {
                          return t * i;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  356: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', { scale: t(132) });
                    },
                    { 101: 101, 132: 132 },
                  ],
                  357: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        signbit(t) {
                          return (t = +t) != t ? t : t == 0 ? 1 / t == 1 / 0 : t > 0;
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  358: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'Math', {
                        umulh(t, e) {
                          const r = 65535;
                          const n = +t;
                          const i = +e;
                          const o = n & r;
                          const a = i & r;
                          const s = n >>> 16;
                          const f = i >>> 16;
                          const u = ((s * a) >>> 0) + ((o * a) >>> 16);
                          return s * f + (u >>> 16) + ((((o * f) >>> 0) + (u & r)) >>> 16);
                        },
                      });
                    },
                    { 101: 101 },
                  ],
                  359: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(187);
                      const o = t(70);
                      const a = t(140);
                      t(97)
                          && n(n.P + t(142), 'Object', {
                            __defineGetter__(t, e) {
                              a.f(i(this), t, { get: o(e), enumerable: !0, configurable: !0 });
                            },
                          });
                    },
                    {
                      101: 101, 140: 140, 142: 142, 187: 187, 70: 70, 97: 97,
                    },
                  ],
                  360: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(187);
                      const o = t(70);
                      const a = t(140);
                      t(97)
                          && n(n.P + t(142), 'Object', {
                            __defineSetter__(t, e) {
                              a.f(i(this), t, { set: o(e), enumerable: !0, configurable: !0 });
                            },
                          });
                    },
                    {
                      101: 101, 140: 140, 142: 142, 187: 187, 70: 70, 97: 97,
                    },
                  ],
                  361: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(152)(!0);
                      n(n.S, 'Object', {
                        entries(t) {
                          return i(t);
                        },
                      });
                    },
                    { 101: 101, 152: 152 },
                  ],
                  362: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(153);
                      const o = t(185);
                      const a = t(143);
                      const s = t(92);
                      n(n.S, 'Object', {
                        getOwnPropertyDescriptors(t) {
                          for (
                            var e, r, n = o(t), { f } = a, u = i(n), c = {}, h = 0;
                            u.length > h;

                          ) void 0 !== (r = f(n, (e = u[h++]))) && s(c, e, r);
                          return c;
                        },
                      });
                    },
                    {
                      101: 101, 143: 143, 153: 153, 185: 185, 92: 92,
                    },
                  ],
                  363: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(187);
                      const o = t(188);
                      const a = t(147);
                      const s = t(143).f;
                      t(97)
                          && n(n.P + t(142), 'Object', {
                            __lookupGetter__(t) {
                              let e;
                              let r = i(this);
                              const n = o(t, !0);
                              do {
                                if ((e = s(r, n))) return e.get;
                              } while ((r = a(r)));
                            },
                          });
                    },
                    {
                      101: 101, 142: 142, 143: 143, 147: 147, 187: 187, 188: 188, 97: 97,
                    },
                  ],
                  364: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(187);
                      const o = t(188);
                      const a = t(147);
                      const s = t(143).f;
                      t(97)
                          && n(n.P + t(142), 'Object', {
                            __lookupSetter__(t) {
                              let e;
                              let r = i(this);
                              const n = o(t, !0);
                              do {
                                if ((e = s(r, n))) return e.set;
                              } while ((r = a(r)));
                            },
                          });
                    },
                    {
                      101: 101, 142: 142, 143: 143, 147: 147, 187: 187, 188: 188, 97: 97,
                    },
                  ],
                  365: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(152)(!1);
                      n(n.S, 'Object', {
                        values(t) {
                          return i(t);
                        },
                      });
                    },
                    { 101: 101, 152: 152 },
                  ],
                  366: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(109);
                      const o = t(91);
                      const a = t(136)();
                      const s = t(197)('observable');
                      const f = t(70);
                      const u = t(75);
                      const c = t(74);
                      const h = t(159);
                      const d = t(111);
                      const l = t(107);
                      const p = l.RETURN;
                      const b = function (t) {
                        return t == null ? void 0 : f(t);
                      };
                      const v = function (t) {
                        const e = t._c;
                        e && ((t._c = void 0), e());
                      };
                      const g = function (t) {
                        return void 0 === t._o;
                      };
                      const y = function (t) {
                        g(t) || ((t._o = void 0), v(t));
                      };
                      const m = function (t, e) {
                        u(t), (this._c = void 0), (this._o = t), (t = new w(this));
                        try {
                          let r = e(t);
                          const n = r;
                          r != null
                                && (typeof r.unsubscribe === 'function'
                                  ? (r = function () {
                                    n.unsubscribe();
                                  })
                                  : f(r),
                                (this._c = r));
                        } catch (e) {
                          return void t.error(e);
                        }
                        g(this) && v(this);
                      };
                      m.prototype = h(
                        {},
                        {
                          unsubscribe() {
                            y(this);
                          },
                        },
                      );
                      var w = function (t) {
                        this._s = t;
                      };
                      w.prototype = h(
                        {},
                        {
                          next(t) {
                            const e = this._s;
                            if (!g(e)) {
                              const r = e._o;
                              try {
                                const n = b(r.next);
                                if (n) return n.call(r, t);
                              } catch (t) {
                                try {
                                  y(e);
                                } finally {
                                  throw t;
                                }
                              }
                            }
                          },
                          error(t) {
                            const e = this._s;
                            if (g(e)) throw t;
                            const r = e._o;
                            e._o = void 0;
                            try {
                              const n = b(r.error);
                              if (!n) throw t;
                              t = n.call(r, t);
                            } catch (t) {
                              try {
                                v(e);
                              } finally {
                                throw t;
                              }
                            }
                            return v(e), t;
                          },
                          complete(t) {
                            const e = this._s;
                            if (!g(e)) {
                              const r = e._o;
                              e._o = void 0;
                              try {
                                const n = b(r.complete);
                                t = n ? n.call(r, t) : void 0;
                              } catch (t) {
                                try {
                                  v(e);
                                } finally {
                                  throw t;
                                }
                              }
                              return v(e), t;
                            }
                          },
                        },
                      );
                      var _ = function (t) {
                        c(this, _, 'Observable', '_f')._f = f(t);
                      };
                      h(_.prototype, {
                        subscribe(t) {
                          return new m(t, this._f);
                        },
                        forEach(t) {
                          const e = this;
                          return new (o.Promise || i.Promise)(((r, n) => {
                            f(t);
                            var i = e.subscribe({
                              next(e) {
                                try {
                                  return t(e);
                                } catch (t) {
                                  n(t), i.unsubscribe();
                                }
                              },
                              error: n,
                              complete: r,
                            });
                          }));
                        },
                      }),
                      h(_, {
                        from(t) {
                          const e = typeof this === 'function' ? this : _;
                          const r = b(u(t)[s]);
                          if (r) {
                            const n = u(r.call(t));
                            return n.constructor === e
                              ? n
                              : new e(((t) => n.subscribe(t)));
                          }
                          return new e(((e) => {
                            let r = !1;
                            return (
                              a(() => {
                                if (!r) {
                                  try {
                                    if (
                                      l(t, !1, (t) => {
                                        if ((e.next(t), r)) return p;
                                      }) === p
                                    ) return;
                                  } catch (t) {
                                    if (r) throw t;
                                    return void e.error(t);
                                  }
                                  e.complete();
                                }
                              }),
                              function () {
                                r = !0;
                              }
                            );
                          }));
                        },
                        of() {
                          for (var t = 0, e = arguments.length, r = new Array(e); t < e;) r[t] = arguments[t++];
                          return new (typeof this === 'function' ? this : _)(((t) => {
                            let e = !1;
                            return (
                              a(() => {
                                if (!e) {
                                  for (let n = 0; n < r.length; ++n) if ((t.next(r[n]), e)) return;
                                  t.complete();
                                }
                              }),
                              function () {
                                e = !0;
                              }
                            );
                          }));
                        },
                      }),
                      d(_.prototype, s, function () {
                        return this;
                      }),
                      n(n.G, { Observable: _ }),
                      t(168)('Observable');
                    },
                    {
                      101: 101,
                      107: 107,
                      109: 109,
                      111: 111,
                      136: 136,
                      159: 159,
                      168: 168,
                      197: 197,
                      70: 70,
                      74: 74,
                      75: 75,
                      91: 91,
                    },
                  ],
                  367: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(91);
                      const o = t(109);
                      const a = t(172);
                      const s = t(157);
                      n(n.P + n.R, 'Promise', {
                        finally(t) {
                          const e = a(this, i.Promise || o.Promise);
                          const r = typeof t === 'function';
                          return this.then(
                            r
                              ? (r) => s(e, t()).then(() => r)
                              : t,
                            r
                              ? (r) => s(e, t()).then(() => {
                                throw r;
                              })
                              : t,
                          );
                        },
                      });
                    },
                    {
                      101: 101, 109: 109, 157: 157, 172: 172, 91: 91,
                    },
                  ],
                  368: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(137);
                      const o = t(156);
                      n(n.S, 'Promise', {
                        try(t) {
                          const e = i.f(this);
                          const r = o(t);
                          return (r.e ? e.reject : e.resolve)(r.v), e.promise;
                        },
                      });
                    },
                    { 101: 101, 137: 137, 156: 156 },
                  ],
                  369: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = n.key;
                      const a = n.set;
                      n.exp({
                        defineMetadata(t, e, r, n) {
                          a(t, e, i(r), o(n));
                        },
                      });
                    },
                    { 135: 135, 75: 75 },
                  ],
                  370: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = n.key;
                      const a = n.map;
                      const s = n.store;
                      n.exp({
                        deleteMetadata(t, e) {
                          const r = arguments.length < 3 ? void 0 : o(arguments[2]);
                          const n = a(i(e), r, !1);
                          if (void 0 === n || !n.delete(t)) return !1;
                          if (n.size) return !0;
                          const f = s.get(e);
                          return f.delete(r), !!f.size || s.delete(e);
                        },
                      });
                    },
                    { 135: 135, 75: 75 },
                  ],
                  371: [
                    function (t, e, r) {
                      const n = t(301);
                      const i = t(78);
                      const o = t(135);
                      const a = t(75);
                      const s = t(147);
                      const f = o.keys;
                      const u = o.key;
                      var c = function (t, e) {
                        const r = f(t, e);
                        const o = s(t);
                        if (o === null) return r;
                        const a = c(o, e);
                        return a.length ? (r.length ? i(new n(r.concat(a))) : a) : r;
                      };
                      o.exp({
                        getMetadataKeys(t) {
                          return c(a(t), arguments.length < 2 ? void 0 : u(arguments[1]));
                        },
                      });
                    },
                    {
                      135: 135, 147: 147, 301: 301, 75: 75, 78: 78,
                    },
                  ],
                  372: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = t(147);
                      const a = n.has;
                      const s = n.get;
                      const f = n.key;
                      var u = function (t, e, r) {
                        if (a(t, e, r)) return s(t, e, r);
                        const n = o(e);
                        return n !== null ? u(t, n, r) : void 0;
                      };
                      n.exp({
                        getMetadata(t, e) {
                          return u(t, i(e), arguments.length < 3 ? void 0 : f(arguments[2]));
                        },
                      });
                    },
                    { 135: 135, 147: 147, 75: 75 },
                  ],
                  373: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = n.keys;
                      const a = n.key;
                      n.exp({
                        getOwnMetadataKeys(t) {
                          return o(i(t), arguments.length < 2 ? void 0 : a(arguments[1]));
                        },
                      });
                    },
                    { 135: 135, 75: 75 },
                  ],
                  374: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = n.get;
                      const a = n.key;
                      n.exp({
                        getOwnMetadata(t, e) {
                          return o(t, i(e), arguments.length < 3 ? void 0 : a(arguments[2]));
                        },
                      });
                    },
                    { 135: 135, 75: 75 },
                  ],
                  375: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = t(147);
                      const a = n.has;
                      const s = n.key;
                      var f = function (t, e, r) {
                        if (a(t, e, r)) return !0;
                        const n = o(e);
                        return n !== null && f(t, n, r);
                      };
                      n.exp({
                        hasMetadata(t, e) {
                          return f(t, i(e), arguments.length < 3 ? void 0 : s(arguments[2]));
                        },
                      });
                    },
                    { 135: 135, 147: 147, 75: 75 },
                  ],
                  376: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = n.has;
                      const a = n.key;
                      n.exp({
                        hasOwnMetadata(t, e) {
                          return o(t, i(e), arguments.length < 3 ? void 0 : a(arguments[2]));
                        },
                      });
                    },
                    { 135: 135, 75: 75 },
                  ],
                  377: [
                    function (t, e, r) {
                      const n = t(135);
                      const i = t(75);
                      const o = t(70);
                      const a = n.key;
                      const s = n.set;
                      n.exp({
                        metadata(t, e) {
                          return function (r, n) {
                            s(t, e, (void 0 !== n ? i : o)(r), a(n));
                          };
                        },
                      });
                    },
                    { 135: 135, 70: 70, 75: 75 },
                  ],
                  378: [
                    function (t, e, r) {
                      t(165)('Set');
                    },
                    { 165: 165 },
                  ],
                  379: [
                    function (t, e, r) {
                      t(166)('Set');
                    },
                    { 166: 166 },
                  ],
                  380: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.P + n.R, 'Set', { toJSON: t(88)('Set') });
                    },
                    { 101: 101, 88: 88 },
                  ],
                  381: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(174)(!0);
                      const o = t(103)(() => 'ð ®·'.at(0) !== 'ð ®·');
                      n(n.P + n.F * o, 'String', {
                        at(t) {
                          return i(this, t);
                        },
                      });
                    },
                    { 101: 101, 103: 103, 174: 174 },
                  ],
                  382: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(96);
                      const o = t(186);
                      const a = t(121);
                      const s = t(105);
                      const f = RegExp.prototype;
                      const u = function (t, e) {
                        (this._r = t), (this._s = e);
                      };
                      t(123)(u, 'RegExp String', function () {
                        const t = this._r.exec(this._s);
                        return { value: t, done: t === null };
                      }),
                      n(n.P, 'String', {
                        matchAll(t) {
                          if ((i(this), !a(t))) throw TypeError(`${t} is not a regexp!`);
                          const e = String(this);
                          const r = 'flags' in f ? String(t.flags) : s.call(t);
                          const n = new RegExp(t.source, ~r.indexOf('g') ? r : `g${r}`);
                          return (n.lastIndex = o(t.lastIndex)), new u(n, e);
                        },
                      });
                    },
                    {
                      101: 101, 105: 105, 121: 121, 123: 123, 186: 186, 96: 96,
                    },
                  ],
                  383: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(177);
                      const o = t(193);
                      const a = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);
                      n(n.P + n.F * a, 'String', {
                        padEnd(t) {
                          return i(this, t, arguments.length > 1 ? arguments[1] : void 0, !1);
                        },
                      });
                    },
                    { 101: 101, 177: 177, 193: 193 },
                  ],
                  384: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(177);
                      const o = t(193);
                      const a = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);
                      n(n.P + n.F * a, 'String', {
                        padStart(t) {
                          return i(this, t, arguments.length > 1 ? arguments[1] : void 0, !0);
                        },
                      });
                    },
                    { 101: 101, 177: 177, 193: 193 },
                  ],
                  385: [
                    function (t, e, r) {
                      t(179)(
                        'trimLeft',
                        (t) => function () {
                          return t(this, 1);
                        },
                        'trimStart',
                      );
                    },
                    { 179: 179 },
                  ],
                  386: [
                    function (t, e, r) {
                      t(179)(
                        'trimRight',
                        (t) => function () {
                          return t(this, 2);
                        },
                        'trimEnd',
                      );
                    },
                    { 179: 179 },
                  ],
                  387: [
                    function (t, e, r) {
                      t(195)('asyncIterator');
                    },
                    { 195: 195 },
                  ],
                  388: [
                    function (t, e, r) {
                      t(195)('observable');
                    },
                    { 195: 195 },
                  ],
                  389: [
                    function (t, e, r) {
                      const n = t(101);
                      n(n.S, 'System', { global: t(109) });
                    },
                    { 101: 101, 109: 109 },
                  ],
                  390: [
                    function (t, e, r) {
                      t(165)('WeakMap');
                    },
                    { 165: 165 },
                  ],
                  391: [
                    function (t, e, r) {
                      t(166)('WeakMap');
                    },
                    { 166: 166 },
                  ],
                  392: [
                    function (t, e, r) {
                      t(165)('WeakSet');
                    },
                    { 165: 165 },
                  ],
                  393: [
                    function (t, e, r) {
                      t(166)('WeakSet');
                    },
                    { 166: 166 },
                  ],
                  394: [
                    function (t, e, r) {
                      for (
                        let n = t(210),
                          i = t(149),
                          o = t(160),
                          a = t(109),
                          s = t(111),
                          f = t(127),
                          u = t(197),
                          c = u('iterator'),
                          h = u('toStringTag'),
                          d = f.Array,
                          l = {
                            CSSRuleList: !0,
                            CSSStyleDeclaration: !1,
                            CSSValueList: !1,
                            ClientRectList: !1,
                            DOMRectList: !1,
                            DOMStringList: !1,
                            DOMTokenList: !0,
                            DataTransferItemList: !1,
                            FileList: !1,
                            HTMLAllCollection: !1,
                            HTMLCollection: !1,
                            HTMLFormElement: !1,
                            HTMLSelectElement: !1,
                            MediaList: !0,
                            MimeTypeArray: !1,
                            NamedNodeMap: !1,
                            NodeList: !0,
                            PaintRequestList: !1,
                            Plugin: !1,
                            PluginArray: !1,
                            SVGLengthList: !1,
                            SVGNumberList: !1,
                            SVGPathSegList: !1,
                            SVGPointList: !1,
                            SVGStringList: !1,
                            SVGTransformList: !1,
                            SourceBufferList: !1,
                            StyleSheetList: !0,
                            TextTrackCueList: !1,
                            TextTrackList: !1,
                            TouchList: !1,
                          },
                          p = i(l),
                          b = 0;
                        b < p.length;
                        b++
                      ) {
                        var v;
                        const g = p[b];
                        const y = l[g];
                        const m = a[g];
                        const w = m && m.prototype;
                        if (w && (w[c] || s(w, c, d), w[h] || s(w, h, g), (f[g] = d), y)) for (v in n) w[v] || o(w, v, n[v], !0);
                      }
                    },
                    {
                      109: 109, 111: 111, 127: 127, 149: 149, 160: 160, 197: 197, 210: 210,
                    },
                  ],
                  395: [
                    function (t, e, r) {
                      const n = t(101);
                      const i = t(181);
                      n(n.G + n.B, { setImmediate: i.set, clearImmediate: i.clear });
                    },
                    { 101: 101, 181: 181 },
                  ],
                  396: [
                    function (t, e, r) {
                      const n = t(109);
                      const i = t(101);
                      const o = t(193);
                      const a = [].slice;
                      const s = /MSIE .\./.test(o);
                      const f = function (t) {
                        return function (e, r) {
                          const n = arguments.length > 2;
                          const i = !!n && a.call(arguments, 2);
                          return t(
                            n
                              ? function () {
                                (typeof e === 'function' ? e : Function(e)).apply(this, i);
                              }
                              : e,
                            r,
                          );
                        };
                      };
                      i(i.G + i.B + i.F * s, {
                        setTimeout: f(n.setTimeout),
                        setInterval: f(n.setInterval),
                      });
                    },
                    { 101: 101, 109: 109, 193: 193 },
                  ],
                  397: [
                    function (t, e, r) {
                      t(324),
                      t(260),
                      t(262),
                      t(261),
                      t(264),
                      t(266),
                      t(271),
                      t(265),
                      t(263),
                      t(273),
                      t(272),
                      t(268),
                      t(269),
                      t(267),
                      t(259),
                      t(270),
                      t(274),
                      t(275),
                      t(226),
                      t(228),
                      t(227),
                      t(277),
                      t(276),
                      t(247),
                      t(257),
                      t(258),
                      t(248),
                      t(249),
                      t(250),
                      t(251),
                      t(252),
                      t(253),
                      t(254),
                      t(255),
                      t(256),
                      t(230),
                      t(231),
                      t(232),
                      t(233),
                      t(234),
                      t(235),
                      t(236),
                      t(237),
                      t(238),
                      t(239),
                      t(240),
                      t(241),
                      t(242),
                      t(243),
                      t(244),
                      t(245),
                      t(246),
                      t(311),
                      t(316),
                      t(323),
                      t(314),
                      t(306),
                      t(307),
                      t(312),
                      t(317),
                      t(319),
                      t(302),
                      t(303),
                      t(304),
                      t(305),
                      t(308),
                      t(309),
                      t(310),
                      t(313),
                      t(315),
                      t(318),
                      t(320),
                      t(321),
                      t(322),
                      t(221),
                      t(223),
                      t(222),
                      t(225),
                      t(224),
                      t(209),
                      t(207),
                      t(214),
                      t(211),
                      t(217),
                      t(219),
                      t(206),
                      t(213),
                      t(203),
                      t(218),
                      t(201),
                      t(216),
                      t(215),
                      t(208),
                      t(212),
                      t(200),
                      t(202),
                      t(205),
                      t(204),
                      t(220),
                      t(210),
                      t(293),
                      t(294),
                      t(300),
                      t(295),
                      t(296),
                      t(297),
                      t(298),
                      t(299),
                      t(278),
                      t(229),
                      t(301),
                      t(336),
                      t(337),
                      t(325),
                      t(326),
                      t(331),
                      t(334),
                      t(335),
                      t(329),
                      t(332),
                      t(330),
                      t(333),
                      t(327),
                      t(328),
                      t(279),
                      t(280),
                      t(281),
                      t(282),
                      t(283),
                      t(286),
                      t(284),
                      t(285),
                      t(287),
                      t(288),
                      t(289),
                      t(290),
                      t(292),
                      t(291),
                      t(340),
                      t(338),
                      t(339),
                      t(381),
                      t(384),
                      t(383),
                      t(385),
                      t(386),
                      t(382),
                      t(387),
                      t(388),
                      t(362),
                      t(365),
                      t(361),
                      t(359),
                      t(360),
                      t(363),
                      t(364),
                      t(346),
                      t(380),
                      t(345),
                      t(379),
                      t(391),
                      t(393),
                      t(344),
                      t(378),
                      t(390),
                      t(392),
                      t(343),
                      t(389),
                      t(342),
                      t(347),
                      t(348),
                      t(349),
                      t(350),
                      t(351),
                      t(353),
                      t(352),
                      t(354),
                      t(355),
                      t(356),
                      t(358),
                      t(357),
                      t(367),
                      t(368),
                      t(369),
                      t(370),
                      t(372),
                      t(371),
                      t(374),
                      t(373),
                      t(375),
                      t(376),
                      t(377),
                      t(341),
                      t(366),
                      t(396),
                      t(395),
                      t(394),
                      (e.exports = t(91));
                    },
                    {
                      200: 200,
                      201: 201,
                      202: 202,
                      203: 203,
                      204: 204,
                      205: 205,
                      206: 206,
                      207: 207,
                      208: 208,
                      209: 209,
                      210: 210,
                      211: 211,
                      212: 212,
                      213: 213,
                      214: 214,
                      215: 215,
                      216: 216,
                      217: 217,
                      218: 218,
                      219: 219,
                      220: 220,
                      221: 221,
                      222: 222,
                      223: 223,
                      224: 224,
                      225: 225,
                      226: 226,
                      227: 227,
                      228: 228,
                      229: 229,
                      230: 230,
                      231: 231,
                      232: 232,
                      233: 233,
                      234: 234,
                      235: 235,
                      236: 236,
                      237: 237,
                      238: 238,
                      239: 239,
                      240: 240,
                      241: 241,
                      242: 242,
                      243: 243,
                      244: 244,
                      245: 245,
                      246: 246,
                      247: 247,
                      248: 248,
                      249: 249,
                      250: 250,
                      251: 251,
                      252: 252,
                      253: 253,
                      254: 254,
                      255: 255,
                      256: 256,
                      257: 257,
                      258: 258,
                      259: 259,
                      260: 260,
                      261: 261,
                      262: 262,
                      263: 263,
                      264: 264,
                      265: 265,
                      266: 266,
                      267: 267,
                      268: 268,
                      269: 269,
                      270: 270,
                      271: 271,
                      272: 272,
                      273: 273,
                      274: 274,
                      275: 275,
                      276: 276,
                      277: 277,
                      278: 278,
                      279: 279,
                      280: 280,
                      281: 281,
                      282: 282,
                      283: 283,
                      284: 284,
                      285: 285,
                      286: 286,
                      287: 287,
                      288: 288,
                      289: 289,
                      290: 290,
                      291: 291,
                      292: 292,
                      293: 293,
                      294: 294,
                      295: 295,
                      296: 296,
                      297: 297,
                      298: 298,
                      299: 299,
                      300: 300,
                      301: 301,
                      302: 302,
                      303: 303,
                      304: 304,
                      305: 305,
                      306: 306,
                      307: 307,
                      308: 308,
                      309: 309,
                      310: 310,
                      311: 311,
                      312: 312,
                      313: 313,
                      314: 314,
                      315: 315,
                      316: 316,
                      317: 317,
                      318: 318,
                      319: 319,
                      320: 320,
                      321: 321,
                      322: 322,
                      323: 323,
                      324: 324,
                      325: 325,
                      326: 326,
                      327: 327,
                      328: 328,
                      329: 329,
                      330: 330,
                      331: 331,
                      332: 332,
                      333: 333,
                      334: 334,
                      335: 335,
                      336: 336,
                      337: 337,
                      338: 338,
                      339: 339,
                      340: 340,
                      341: 341,
                      342: 342,
                      343: 343,
                      344: 344,
                      345: 345,
                      346: 346,
                      347: 347,
                      348: 348,
                      349: 349,
                      350: 350,
                      351: 351,
                      352: 352,
                      353: 353,
                      354: 354,
                      355: 355,
                      356: 356,
                      357: 357,
                      358: 358,
                      359: 359,
                      360: 360,
                      361: 361,
                      362: 362,
                      363: 363,
                      364: 364,
                      365: 365,
                      366: 366,
                      367: 367,
                      368: 368,
                      369: 369,
                      370: 370,
                      371: 371,
                      372: 372,
                      373: 373,
                      374: 374,
                      375: 375,
                      376: 376,
                      377: 377,
                      378: 378,
                      379: 379,
                      380: 380,
                      381: 381,
                      382: 382,
                      383: 383,
                      384: 384,
                      385: 385,
                      386: 386,
                      387: 387,
                      388: 388,
                      389: 389,
                      390: 390,
                      391: 391,
                      392: 392,
                      393: 393,
                      394: 394,
                      395: 395,
                      396: 396,
                      91: 91,
                    },
                  ],
                  398: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          function e(t) {
                            return Object.prototype.toString.call(t);
                          }
                          (r.isArray = function (t) {
                            return Array.isArray ? Array.isArray(t) : e(t) === '[object Array]';
                          }),
                          (r.isBoolean = function (t) {
                            return typeof t === 'boolean';
                          }),
                          (r.isNull = function (t) {
                            return t === null;
                          }),
                          (r.isNullOrUndefined = function (t) {
                            return t == null;
                          }),
                          (r.isNumber = function (t) {
                            return typeof t === 'number';
                          }),
                          (r.isString = function (t) {
                            return typeof t === 'string';
                          }),
                          (r.isSymbol = function (t) {
                            return typeof t === 'symbol';
                          }),
                          (r.isUndefined = function (t) {
                            return void 0 === t;
                          }),
                          (r.isRegExp = function (t) {
                            return e(t) === '[object RegExp]';
                          }),
                          (r.isObject = function (t) {
                            return typeof t === 'object' && t !== null;
                          }),
                          (r.isDate = function (t) {
                            return e(t) === '[object Date]';
                          }),
                          (r.isError = function (t) {
                            return e(t) === '[object Error]' || t instanceof Error;
                          }),
                          (r.isFunction = function (t) {
                            return typeof t === 'function';
                          }),
                          (r.isPrimitive = function (t) {
                            return (
                              t === null
                                  || typeof t === 'boolean'
                                  || typeof t === 'number'
                                  || typeof t === 'string'
                                  || typeof t === 'symbol'
                                  || void 0 === t
                            );
                          }),
                          (r.isBuffer = t.isBuffer);
                        }.call(this));
                      }.call(this, { isBuffer: t(468) }));
                    },
                    { 468: 468 },
                  ],
                  399: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          const n = t(417);
                          const i = t(400);
                          e.exports = function (t) {
                            return new a(t);
                          };
                          const o = {
                            secp256k1: { name: 'secp256k1', byteLength: 32 },
                            secp224r1: { name: 'p224', byteLength: 28 },
                            prime256v1: { name: 'p256', byteLength: 32 },
                            prime192v1: { name: 'p192', byteLength: 24 },
                            ed25519: { name: 'ed25519', byteLength: 32 },
                            secp384r1: { name: 'p384', byteLength: 48 },
                            secp521r1: { name: 'p521', byteLength: 66 },
                          };
                          function a(t) {
                            (this.curveType = o[t]),
                            this.curveType || (this.curveType = { name: t }),
                            (this.curve = new n.ec(this.curveType.name)),
                            (this.keys = void 0);
                          }
                          function s(t, e, n) {
                            Array.isArray(t) || (t = t.toArray());
                            let i = new r(t);
                            if (n && i.length < n) {
                              const o = new r(n - i.length);
                              o.fill(0), (i = r.concat([o, i]));
                            }
                            return e ? i.toString(e) : i;
                          }
                          (o.p224 = o.secp224r1),
                          (o.p256 = o.secp256r1 = o.prime256v1),
                          (o.p192 = o.secp192r1 = o.prime192v1),
                          (o.p384 = o.secp384r1),
                          (o.p521 = o.secp521r1),
                          (a.prototype.generateKeys = function (t, e) {
                            return (
                              (this.keys = this.curve.genKeyPair()), this.getPublicKey(t, e)
                            );
                          }),
                          (a.prototype.computeSecret = function (t, e, n) {
                            return (
                              (e = e || 'utf8'),
                              r.isBuffer(t) || (t = new r(t, e)),
                              s(
                                this.curve
                                  .keyFromPublic(t)
                                  .getPublic()
                                  .mul(this.keys.getPrivate())
                                  .getX(),
                                n,
                                this.curveType.byteLength,
                              )
                            );
                          }),
                          (a.prototype.getPublicKey = function (t, e) {
                            const r = this.keys.getPublic(e === 'compressed', !0);
                            return (
                              e === 'hybrid' && (r[r.length - 1] % 2 ? (r[0] = 7) : (r[0] = 6)),
                              s(r, t)
                            );
                          }),
                          (a.prototype.getPrivateKey = function (t) {
                            return s(this.keys.getPrivate(), t);
                          }),
                          (a.prototype.setPublicKey = function (t, e) {
                            return (
                              (e = e || 'utf8'),
                              r.isBuffer(t) || (t = new r(t, e)),
                              this.keys._importPublic(t),
                              this
                            );
                          }),
                          (a.prototype.setPrivateKey = function (t, e) {
                            (e = e || 'utf8'), r.isBuffer(t) || (t = new r(t, e));
                            let n = new i(t);
                            return (
                              (n = n.toString(16)),
                              (this.keys = this.curve.genKeyPair()),
                              this.keys._importPrivate(n),
                              this
                            );
                          });
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    { 400: 400, 417: 417, 67: 67 },
                  ],
                  400: [
                    function (t, e, r) {
                      arguments[4][16][0].apply(r, arguments);
                    },
                    { 16: 16, 21: 21 },
                  ],
                  401: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(470);
                      const o = t(513);
                      const a = t(518);
                      const s = t(68);
                      function f(t) {
                        s.call(this, 'digest'), (this._hash = t);
                      }
                      n(f, s),
                      (f.prototype._update = function (t) {
                        this._hash.update(t);
                      }),
                      (f.prototype._final = function () {
                        return this._hash.digest();
                      }),
                      (e.exports = function (t) {
                        return (t = t.toLowerCase()) === 'md5'
                          ? new i()
                          : t === 'rmd160' || t === 'ripemd160'
                            ? new o()
                            : new f(a(t));
                      });
                    },
                    {
                      467: 467, 470: 470, 513: 513, 518: 518, 68: 68,
                    },
                  ],
                  402: [
                    function (t, e, r) {
                      const n = t(470);
                      e.exports = function (t) {
                        return new n().update(t).digest();
                      };
                    },
                    { 470: 470 },
                  ],
                  403: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(404);
                      const o = t(68);
                      const a = t(514).Buffer;
                      const s = t(402);
                      const f = t(513);
                      const u = t(518);
                      const c = a.alloc(128);
                      function h(t, e) {
                        o.call(this, 'digest'), typeof e === 'string' && (e = a.from(e));
                        const r = t === 'sha512' || t === 'sha384' ? 128 : 64;
                        ((this._alg = t), (this._key = e), e.length > r)
                          ? (e = (t === 'rmd160' ? new f() : u(t)).update(e).digest())
                          : e.length < r && (e = a.concat([e, c], r));
                        for (
                          var n = (this._ipad = a.allocUnsafe(r)),
                            i = (this._opad = a.allocUnsafe(r)),
                            s = 0;
                          s < r;
                          s++
                        ) (n[s] = 54 ^ e[s]), (i[s] = 92 ^ e[s]);
                        (this._hash = t === 'rmd160' ? new f() : u(t)), this._hash.update(n);
                      }
                      n(h, o),
                      (h.prototype._update = function (t) {
                        this._hash.update(t);
                      }),
                      (h.prototype._final = function () {
                        const t = this._hash.digest();
                        return (this._alg === 'rmd160' ? new f() : u(this._alg))
                          .update(this._opad)
                          .update(t)
                          .digest();
                      }),
                      (e.exports = function (t, e) {
                        return (t = t.toLowerCase()) === 'rmd160' || t === 'ripemd160'
                          ? new h('rmd160', e)
                          : t === 'md5'
                            ? new i(s, e)
                            : new h(t, e);
                      });
                    },
                    {
                      402: 402, 404: 404, 467: 467, 513: 513, 514: 514, 518: 518, 68: 68,
                    },
                  ],
                  404: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(514).Buffer;
                      const o = t(68);
                      const a = i.alloc(128);
                      const s = 64;
                      function f(t, e) {
                        o.call(this, 'digest'),
                        typeof e === 'string' && (e = i.from(e)),
                        (this._alg = t),
                        (this._key = e),
                        e.length > s ? (e = t(e)) : e.length < s && (e = i.concat([e, a], s));
                        for (
                          var r = (this._ipad = i.allocUnsafe(s)),
                            n = (this._opad = i.allocUnsafe(s)),
                            f = 0;
                          f < s;
                          f++
                        ) (r[f] = 54 ^ e[f]), (n[f] = 92 ^ e[f]);
                        this._hash = [r];
                      }
                      n(f, o),
                      (f.prototype._update = function (t) {
                        this._hash.push(t);
                      }),
                      (f.prototype._final = function () {
                        const t = this._alg(i.concat(this._hash));
                        return this._alg(i.concat([this._opad, t]));
                      }),
                      (e.exports = f);
                    },
                    { 467: 467, 514: 514, 68: 68 },
                  ],
                  405: [
                    function (t, e, r) {
                      (r.randomBytes = r.rng = r.pseudoRandomBytes = r.prng = t(497)),
                      (r.createHash = r.Hash = t(401)),
                      (r.createHmac = r.Hmac = t(403));
                      const n = t(43);
                      const i = Object.keys(n);
                      const o = [
                        'sha1',
                        'sha224',
                        'sha256',
                        'sha384',
                        'sha512',
                        'md5',
                        'rmd160',
                      ].concat(i);
                      r.getHashes = function () {
                        return o;
                      };
                      const a = t(481);
                      (r.pbkdf2 = a.pbkdf2), (r.pbkdf2Sync = a.pbkdf2Sync);
                      const s = t(39);
                      (r.Cipher = s.Cipher),
                      (r.createCipher = s.createCipher),
                      (r.Cipheriv = s.Cipheriv),
                      (r.createCipheriv = s.createCipheriv),
                      (r.Decipher = s.Decipher),
                      (r.createDecipher = s.createDecipher),
                      (r.Decipheriv = s.Decipheriv),
                      (r.createDecipheriv = s.createDecipheriv),
                      (r.getCiphers = s.getCiphers),
                      (r.listCiphers = s.listCiphers);
                      const f = t(412);
                      (r.DiffieHellmanGroup = f.DiffieHellmanGroup),
                      (r.createDiffieHellmanGroup = f.createDiffieHellmanGroup),
                      (r.getDiffieHellman = f.getDiffieHellman),
                      (r.createDiffieHellman = f.createDiffieHellman),
                      (r.DiffieHellman = f.DiffieHellman);
                      const u = t(46);
                      (r.createSign = u.createSign),
                      (r.Sign = u.Sign),
                      (r.createVerify = u.createVerify),
                      (r.Verify = u.Verify),
                      (r.createECDH = t(399));
                      const c = t(490);
                      (r.publicEncrypt = c.publicEncrypt),
                      (r.privateEncrypt = c.privateEncrypt),
                      (r.publicDecrypt = c.publicDecrypt),
                      (r.privateDecrypt = c.privateDecrypt);
                      const h = t(498);
                      (r.randomFill = h.randomFill),
                      (r.randomFillSync = h.randomFillSync),
                      (r.createCredentials = function () {
                        throw new Error(
                          [
                            'sorry, createCredentials is not implemented yet',
                            'we accept pull requests',
                            'https://github.com/crypto-browserify/crypto-browserify',
                          ].join('\n'),
                        );
                      }),
                      (r.constants = {
                        DH_CHECK_P_NOT_SAFE_PRIME: 2,
                        DH_CHECK_P_NOT_PRIME: 1,
                        DH_UNABLE_TO_CHECK_GENERATOR: 4,
                        DH_NOT_SUITABLE_GENERATOR: 8,
                        NPN_ENABLED: 1,
                        ALPN_ENABLED: 1,
                        RSA_PKCS1_PADDING: 1,
                        RSA_SSLV23_PADDING: 2,
                        RSA_NO_PADDING: 3,
                        RSA_PKCS1_OAEP_PADDING: 4,
                        RSA_X931_PADDING: 5,
                        RSA_PKCS1_PSS_PADDING: 6,
                        POINT_CONVERSION_COMPRESSED: 2,
                        POINT_CONVERSION_UNCOMPRESSED: 4,
                        POINT_CONVERSION_HYBRID: 6,
                      });
                    },
                    {
                      39: 39,
                      399: 399,
                      401: 401,
                      403: 403,
                      412: 412,
                      43: 43,
                      46: 46,
                      481: 481,
                      490: 490,
                      497: 497,
                      498: 498,
                    },
                  ],
                  406: [
                    function (t, e, r) {
                      (r.utils = t(411)),
                      (r.Cipher = t(408)),
                      (r.DES = t(409)),
                      (r.CBC = t(407)),
                      (r.EDE = t(410));
                    },
                    {
                      407: 407, 408: 408, 409: 409, 410: 410, 411: 411,
                    },
                  ],
                  407: [
                    function (t, e, r) {
                      const n = t(473);
                      const i = t(467);
                      const o = {};
                      function a(t) {
                        n.equal(t.length, 8, 'Invalid IV length'), (this.iv = new Array(8));
                        for (let e = 0; e < this.iv.length; e++) this.iv[e] = t[e];
                      }
                      (r.instantiate = function (t) {
                        function e(e) {
                          t.call(this, e), this._cbcInit();
                        }
                        i(e, t);
                        for (let r = Object.keys(o), n = 0; n < r.length; n++) {
                          const a = r[n];
                          e.prototype[a] = o[a];
                        }
                        return (
                          (e.create = function (t) {
                            return new e(t);
                          }),
                          e
                        );
                      }),
                      (o._cbcInit = function () {
                        const t = new a(this.options.iv);
                        this._cbcState = t;
                      }),
                      (o._update = function (t, e, r, n) {
                        const i = this._cbcState;
                        const o = this.constructor.super_.prototype;
                        const a = i.iv;
                        if (this.type === 'encrypt') {
                          for (var s = 0; s < this.blockSize; s++) a[s] ^= t[e + s];
                          o._update.call(this, a, 0, r, n);
                          for (s = 0; s < this.blockSize; s++) a[s] = r[n + s];
                        } else {
                          o._update.call(this, t, e, r, n);
                          for (s = 0; s < this.blockSize; s++) r[n + s] ^= a[s];
                          for (s = 0; s < this.blockSize; s++) a[s] = t[e + s];
                        }
                      });
                    },
                    { 467: 467, 473: 473 },
                  ],
                  408: [
                    function (t, e, r) {
                      const n = t(473);
                      function i(t) {
                        (this.options = t),
                        (this.type = this.options.type),
                        (this.blockSize = 8),
                        this._init(),
                        (this.buffer = new Array(this.blockSize)),
                        (this.bufferOff = 0);
                      }
                      (e.exports = i),
                      (i.prototype._init = function () {}),
                      (i.prototype.update = function (t) {
                        return t.length === 0
                          ? []
                          : this.type === 'decrypt'
                            ? this._updateDecrypt(t)
                            : this._updateEncrypt(t);
                      }),
                      (i.prototype._buffer = function (t, e) {
                        for (
                          var r = Math.min(this.buffer.length - this.bufferOff, t.length - e),
                            n = 0;
                          n < r;
                          n++
                        ) this.buffer[this.bufferOff + n] = t[e + n];
                        return (this.bufferOff += r), r;
                      }),
                      (i.prototype._flushBuffer = function (t, e) {
                        return (
                          this._update(this.buffer, 0, t, e),
                          (this.bufferOff = 0),
                          this.blockSize
                        );
                      }),
                      (i.prototype._updateEncrypt = function (t) {
                        let e = 0;
                        let r = 0;
                        const n = ((this.bufferOff + t.length) / this.blockSize) | 0;
                        const i = new Array(n * this.blockSize);
                        this.bufferOff !== 0
                              && ((e += this._buffer(t, e)),
                              this.bufferOff === this.buffer.length
                                && (r += this._flushBuffer(i, r)));
                        for (
                          let o = t.length - ((t.length - e) % this.blockSize);
                          e < o;
                          e += this.blockSize
                        ) this._update(t, e, i, r), (r += this.blockSize);
                        for (; e < t.length; e++, this.bufferOff++) this.buffer[this.bufferOff] = t[e];
                        return i;
                      }),
                      (i.prototype._updateDecrypt = function (t) {
                        for (
                          var e = 0,
                            r = 0,
                            n = Math.ceil((this.bufferOff + t.length) / this.blockSize) - 1,
                            i = new Array(n * this.blockSize);
                          n > 0;
                          n--
                        ) (e += this._buffer(t, e)), (r += this._flushBuffer(i, r));
                        return (e += this._buffer(t, e)), i;
                      }),
                      (i.prototype.final = function (t) {
                        let e; let
                          r;
                        return (
                          t && (e = this.update(t)),
                          (r = this.type === 'encrypt'
                            ? this._finalEncrypt()
                            : this._finalDecrypt()),
                          e ? e.concat(r) : r
                        );
                      }),
                      (i.prototype._pad = function (t, e) {
                        if (e === 0) return !1;
                        for (; e < t.length;) t[e++] = 0;
                        return !0;
                      }),
                      (i.prototype._finalEncrypt = function () {
                        if (!this._pad(this.buffer, this.bufferOff)) return [];
                        const t = new Array(this.blockSize);
                        return this._update(this.buffer, 0, t, 0), t;
                      }),
                      (i.prototype._unpad = function (t) {
                        return t;
                      }),
                      (i.prototype._finalDecrypt = function () {
                        n.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
                        const t = new Array(this.blockSize);
                        return this._flushBuffer(t, 0), this._unpad(t);
                      });
                    },
                    { 473: 473 },
                  ],
                  409: [
                    function (t, e, r) {
                      const n = t(473);
                      const i = t(467);
                      const o = t(411);
                      const a = t(408);
                      function s() {
                        (this.tmp = new Array(2)), (this.keys = null);
                      }
                      function f(t) {
                        a.call(this, t);
                        const e = new s();
                        (this._desState = e), this.deriveKeys(e, t.key);
                      }
                      i(f, a),
                      (e.exports = f),
                      (f.create = function (t) {
                        return new f(t);
                      });
                      const u = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
                      (f.prototype.deriveKeys = function (t, e) {
                        (t.keys = new Array(32)),
                        n.equal(e.length, this.blockSize, 'Invalid key length');
                        let r = o.readUInt32BE(e, 0);
                        let i = o.readUInt32BE(e, 4);
                        o.pc1(r, i, t.tmp, 0), (r = t.tmp[0]), (i = t.tmp[1]);
                        for (let a = 0; a < t.keys.length; a += 2) {
                          const s = u[a >>> 1];
                          (r = o.r28shl(r, s)), (i = o.r28shl(i, s)), o.pc2(r, i, t.keys, a);
                        }
                      }),
                      (f.prototype._update = function (t, e, r, n) {
                        const i = this._desState;
                        let a = o.readUInt32BE(t, e);
                        let s = o.readUInt32BE(t, e + 4);
                        o.ip(a, s, i.tmp, 0),
                        (a = i.tmp[0]),
                        (s = i.tmp[1]),
                        this.type === 'encrypt'
                          ? this._encrypt(i, a, s, i.tmp, 0)
                          : this._decrypt(i, a, s, i.tmp, 0),
                        (a = i.tmp[0]),
                        (s = i.tmp[1]),
                        o.writeUInt32BE(r, a, n),
                        o.writeUInt32BE(r, s, n + 4);
                      }),
                      (f.prototype._pad = function (t, e) {
                        for (let r = t.length - e, n = e; n < t.length; n++) t[n] = r;
                        return !0;
                      }),
                      (f.prototype._unpad = function (t) {
                        for (var e = t[t.length - 1], r = t.length - e; r < t.length; r++) n.equal(t[r], e);
                        return t.slice(0, t.length - e);
                      }),
                      (f.prototype._encrypt = function (t, e, r, n, i) {
                        for (var a = e, s = r, f = 0; f < t.keys.length; f += 2) {
                          let u = t.keys[f];
                          let c = t.keys[f + 1];
                          o.expand(s, t.tmp, 0), (u ^= t.tmp[0]), (c ^= t.tmp[1]);
                          const h = o.substitute(u, c);
                          const d = s;
                          (s = (a ^ o.permute(h)) >>> 0), (a = d);
                        }
                        o.rip(s, a, n, i);
                      }),
                      (f.prototype._decrypt = function (t, e, r, n, i) {
                        for (var a = r, s = e, f = t.keys.length - 2; f >= 0; f -= 2) {
                          let u = t.keys[f];
                          let c = t.keys[f + 1];
                          o.expand(a, t.tmp, 0), (u ^= t.tmp[0]), (c ^= t.tmp[1]);
                          const h = o.substitute(u, c);
                          const d = a;
                          (a = (s ^ o.permute(h)) >>> 0), (s = d);
                        }
                        o.rip(a, s, n, i);
                      });
                    },
                    {
                      408: 408, 411: 411, 467: 467, 473: 473,
                    },
                  ],
                  410: [
                    function (t, e, r) {
                      const n = t(473);
                      const i = t(467);
                      const o = t(408);
                      const a = t(409);
                      function s(t, e) {
                        n.equal(e.length, 24, 'Invalid key length');
                        const r = e.slice(0, 8);
                        const i = e.slice(8, 16);
                        const o = e.slice(16, 24);
                        this.ciphers = t === 'encrypt'
                          ? [
                            a.create({ type: 'encrypt', key: r }),
                            a.create({ type: 'decrypt', key: i }),
                            a.create({ type: 'encrypt', key: o }),
                          ]
                          : [
                            a.create({ type: 'decrypt', key: o }),
                            a.create({ type: 'encrypt', key: i }),
                            a.create({ type: 'decrypt', key: r }),
                          ];
                      }
                      function f(t) {
                        o.call(this, t);
                        const e = new s(this.type, this.options.key);
                        this._edeState = e;
                      }
                      i(f, o),
                      (e.exports = f),
                      (f.create = function (t) {
                        return new f(t);
                      }),
                      (f.prototype._update = function (t, e, r, n) {
                        const i = this._edeState;
                        i.ciphers[0]._update(t, e, r, n),
                        i.ciphers[1]._update(r, n, r, n),
                        i.ciphers[2]._update(r, n, r, n);
                      }),
                      (f.prototype._pad = a.prototype._pad),
                      (f.prototype._unpad = a.prototype._unpad);
                    },
                    {
                      408: 408, 409: 409, 467: 467, 473: 473,
                    },
                  ],
                  411: [
                    function (t, e, r) {
                      (r.readUInt32BE = function (t, e) {
                        return (
                          ((t[0 + e] << 24) | (t[1 + e] << 16) | (t[2 + e] << 8) | t[3 + e]) >>> 0
                        );
                      }),
                      (r.writeUInt32BE = function (t, e, r) {
                        (t[0 + r] = e >>> 24),
                        (t[1 + r] = (e >>> 16) & 255),
                        (t[2 + r] = (e >>> 8) & 255),
                        (t[3 + r] = 255 & e);
                      }),
                      (r.ip = function (t, e, r, n) {
                        for (var i = 0, o = 0, a = 6; a >= 0; a -= 2) {
                          for (var s = 0; s <= 24; s += 8) (i <<= 1), (i |= (e >>> (s + a)) & 1);
                          for (s = 0; s <= 24; s += 8) (i <<= 1), (i |= (t >>> (s + a)) & 1);
                        }
                        for (a = 6; a >= 0; a -= 2) {
                          for (s = 1; s <= 25; s += 8) (o <<= 1), (o |= (e >>> (s + a)) & 1);
                          for (s = 1; s <= 25; s += 8) (o <<= 1), (o |= (t >>> (s + a)) & 1);
                        }
                        (r[n + 0] = i >>> 0), (r[n + 1] = o >>> 0);
                      }),
                      (r.rip = function (t, e, r, n) {
                        for (var i = 0, o = 0, a = 0; a < 4; a++) {
                          for (var s = 24; s >= 0; s -= 8) {
                            (i <<= 1),
                            (i |= (e >>> (s + a)) & 1),
                            (i <<= 1),
                            (i |= (t >>> (s + a)) & 1);
                          }
                        }
                        for (a = 4; a < 8; a++) {
                          for (s = 24; s >= 0; s -= 8) {
                            (o <<= 1),
                            (o |= (e >>> (s + a)) & 1),
                            (o <<= 1),
                            (o |= (t >>> (s + a)) & 1);
                          }
                        }
                        (r[n + 0] = i >>> 0), (r[n + 1] = o >>> 0);
                      }),
                      (r.pc1 = function (t, e, r, n) {
                        for (var i = 0, o = 0, a = 7; a >= 5; a--) {
                          for (var s = 0; s <= 24; s += 8) (i <<= 1), (i |= (e >> (s + a)) & 1);
                          for (s = 0; s <= 24; s += 8) (i <<= 1), (i |= (t >> (s + a)) & 1);
                        }
                        for (s = 0; s <= 24; s += 8) (i <<= 1), (i |= (e >> (s + a)) & 1);
                        for (a = 1; a <= 3; a++) {
                          for (s = 0; s <= 24; s += 8) (o <<= 1), (o |= (e >> (s + a)) & 1);
                          for (s = 0; s <= 24; s += 8) (o <<= 1), (o |= (t >> (s + a)) & 1);
                        }
                        for (s = 0; s <= 24; s += 8) (o <<= 1), (o |= (t >> (s + a)) & 1);
                        (r[n + 0] = i >>> 0), (r[n + 1] = o >>> 0);
                      }),
                      (r.r28shl = function (t, e) {
                        return ((t << e) & 268435455) | (t >>> (28 - e));
                      });
                      const n = [
                        14,
                        11,
                        17,
                        4,
                        27,
                        23,
                        25,
                        0,
                        13,
                        22,
                        7,
                        18,
                        5,
                        9,
                        16,
                        24,
                        2,
                        20,
                        12,
                        21,
                        1,
                        8,
                        15,
                        26,
                        15,
                        4,
                        25,
                        19,
                        9,
                        1,
                        26,
                        16,
                        5,
                        11,
                        23,
                        8,
                        12,
                        7,
                        17,
                        0,
                        22,
                        3,
                        10,
                        14,
                        6,
                        20,
                        27,
                        24,
                      ];
                      (r.pc2 = function (t, e, r, i) {
                        for (var o = 0, a = 0, s = n.length >>> 1, f = 0; f < s; f++) (o <<= 1), (o |= (t >>> n[f]) & 1);
                        for (f = s; f < n.length; f++) (a <<= 1), (a |= (e >>> n[f]) & 1);
                        (r[i + 0] = o >>> 0), (r[i + 1] = a >>> 0);
                      }),
                      (r.expand = function (t, e, r) {
                        let n = 0;
                        let i = 0;
                        n = ((1 & t) << 5) | (t >>> 27);
                        for (var o = 23; o >= 15; o -= 4) (n <<= 6), (n |= (t >>> o) & 63);
                        for (o = 11; o >= 3; o -= 4) (i |= (t >>> o) & 63), (i <<= 6);
                        (i |= ((31 & t) << 1) | (t >>> 31)),
                        (e[r + 0] = n >>> 0),
                        (e[r + 1] = i >>> 0);
                      });
                      const i = [
                        14,
                        0,
                        4,
                        15,
                        13,
                        7,
                        1,
                        4,
                        2,
                        14,
                        15,
                        2,
                        11,
                        13,
                        8,
                        1,
                        3,
                        10,
                        10,
                        6,
                        6,
                        12,
                        12,
                        11,
                        5,
                        9,
                        9,
                        5,
                        0,
                        3,
                        7,
                        8,
                        4,
                        15,
                        1,
                        12,
                        14,
                        8,
                        8,
                        2,
                        13,
                        4,
                        6,
                        9,
                        2,
                        1,
                        11,
                        7,
                        15,
                        5,
                        12,
                        11,
                        9,
                        3,
                        7,
                        14,
                        3,
                        10,
                        10,
                        0,
                        5,
                        6,
                        0,
                        13,
                        15,
                        3,
                        1,
                        13,
                        8,
                        4,
                        14,
                        7,
                        6,
                        15,
                        11,
                        2,
                        3,
                        8,
                        4,
                        14,
                        9,
                        12,
                        7,
                        0,
                        2,
                        1,
                        13,
                        10,
                        12,
                        6,
                        0,
                        9,
                        5,
                        11,
                        10,
                        5,
                        0,
                        13,
                        14,
                        8,
                        7,
                        10,
                        11,
                        1,
                        10,
                        3,
                        4,
                        15,
                        13,
                        4,
                        1,
                        2,
                        5,
                        11,
                        8,
                        6,
                        12,
                        7,
                        6,
                        12,
                        9,
                        0,
                        3,
                        5,
                        2,
                        14,
                        15,
                        9,
                        10,
                        13,
                        0,
                        7,
                        9,
                        0,
                        14,
                        9,
                        6,
                        3,
                        3,
                        4,
                        15,
                        6,
                        5,
                        10,
                        1,
                        2,
                        13,
                        8,
                        12,
                        5,
                        7,
                        14,
                        11,
                        12,
                        4,
                        11,
                        2,
                        15,
                        8,
                        1,
                        13,
                        1,
                        6,
                        10,
                        4,
                        13,
                        9,
                        0,
                        8,
                        6,
                        15,
                        9,
                        3,
                        8,
                        0,
                        7,
                        11,
                        4,
                        1,
                        15,
                        2,
                        14,
                        12,
                        3,
                        5,
                        11,
                        10,
                        5,
                        14,
                        2,
                        7,
                        12,
                        7,
                        13,
                        13,
                        8,
                        14,
                        11,
                        3,
                        5,
                        0,
                        6,
                        6,
                        15,
                        9,
                        0,
                        10,
                        3,
                        1,
                        4,
                        2,
                        7,
                        8,
                        2,
                        5,
                        12,
                        11,
                        1,
                        12,
                        10,
                        4,
                        14,
                        15,
                        9,
                        10,
                        3,
                        6,
                        15,
                        9,
                        0,
                        0,
                        6,
                        12,
                        10,
                        11,
                        1,
                        7,
                        13,
                        13,
                        8,
                        15,
                        9,
                        1,
                        4,
                        3,
                        5,
                        14,
                        11,
                        5,
                        12,
                        2,
                        7,
                        8,
                        2,
                        4,
                        14,
                        2,
                        14,
                        12,
                        11,
                        4,
                        2,
                        1,
                        12,
                        7,
                        4,
                        10,
                        7,
                        11,
                        13,
                        6,
                        1,
                        8,
                        5,
                        5,
                        0,
                        3,
                        15,
                        15,
                        10,
                        13,
                        3,
                        0,
                        9,
                        14,
                        8,
                        9,
                        6,
                        4,
                        11,
                        2,
                        8,
                        1,
                        12,
                        11,
                        7,
                        10,
                        1,
                        13,
                        14,
                        7,
                        2,
                        8,
                        13,
                        15,
                        6,
                        9,
                        15,
                        12,
                        0,
                        5,
                        9,
                        6,
                        10,
                        3,
                        4,
                        0,
                        5,
                        14,
                        3,
                        12,
                        10,
                        1,
                        15,
                        10,
                        4,
                        15,
                        2,
                        9,
                        7,
                        2,
                        12,
                        6,
                        9,
                        8,
                        5,
                        0,
                        6,
                        13,
                        1,
                        3,
                        13,
                        4,
                        14,
                        14,
                        0,
                        7,
                        11,
                        5,
                        3,
                        11,
                        8,
                        9,
                        4,
                        14,
                        3,
                        15,
                        2,
                        5,
                        12,
                        2,
                        9,
                        8,
                        5,
                        12,
                        15,
                        3,
                        10,
                        7,
                        11,
                        0,
                        14,
                        4,
                        1,
                        10,
                        7,
                        1,
                        6,
                        13,
                        0,
                        11,
                        8,
                        6,
                        13,
                        4,
                        13,
                        11,
                        0,
                        2,
                        11,
                        14,
                        7,
                        15,
                        4,
                        0,
                        9,
                        8,
                        1,
                        13,
                        10,
                        3,
                        14,
                        12,
                        3,
                        9,
                        5,
                        7,
                        12,
                        5,
                        2,
                        10,
                        15,
                        6,
                        8,
                        1,
                        6,
                        1,
                        6,
                        4,
                        11,
                        11,
                        13,
                        13,
                        8,
                        12,
                        1,
                        3,
                        4,
                        7,
                        10,
                        14,
                        7,
                        10,
                        9,
                        15,
                        5,
                        6,
                        0,
                        8,
                        15,
                        0,
                        14,
                        5,
                        2,
                        9,
                        3,
                        2,
                        12,
                        13,
                        1,
                        2,
                        15,
                        8,
                        13,
                        4,
                        8,
                        6,
                        10,
                        15,
                        3,
                        11,
                        7,
                        1,
                        4,
                        10,
                        12,
                        9,
                        5,
                        3,
                        6,
                        14,
                        11,
                        5,
                        0,
                        0,
                        14,
                        12,
                        9,
                        7,
                        2,
                        7,
                        2,
                        11,
                        1,
                        4,
                        14,
                        1,
                        7,
                        9,
                        4,
                        12,
                        10,
                        14,
                        8,
                        2,
                        13,
                        0,
                        15,
                        6,
                        12,
                        10,
                        9,
                        13,
                        0,
                        15,
                        3,
                        3,
                        5,
                        5,
                        6,
                        8,
                        11,
                      ];
                      r.substitute = function (t, e) {
                        for (var r = 0, n = 0; n < 4; n++) {
                          (r <<= 4), (r |= i[64 * n + ((t >>> (18 - 6 * n)) & 63)]);
                        }
                        for (n = 0; n < 4; n++) {
                          (r <<= 4), (r |= i[256 + 64 * n + ((e >>> (18 - 6 * n)) & 63)]);
                        }
                        return r >>> 0;
                      };
                      const o = [
                        16,
                        25,
                        12,
                        11,
                        3,
                        20,
                        4,
                        15,
                        31,
                        17,
                        9,
                        6,
                        27,
                        14,
                        1,
                        22,
                        30,
                        24,
                        8,
                        18,
                        0,
                        5,
                        29,
                        23,
                        13,
                        19,
                        2,
                        26,
                        10,
                        21,
                        28,
                        7,
                      ];
                      (r.permute = function (t) {
                        for (var e = 0, r = 0; r < o.length; r++) (e <<= 1), (e |= (t >>> o[r]) & 1);
                        return e >>> 0;
                      }),
                      (r.padSplit = function (t, e, r) {
                        for (var n = t.toString(2); n.length < e;) n = `0${n}`;
                        for (var i = [], o = 0; o < e; o += r) i.push(n.slice(o, o + r));
                        return i.join(' ');
                      });
                    },
                    {},
                  ],
                  412: [
                    function (t, e, r) {
                      (function (e) {
                        (function () {
                          const n = t(414);
                          const i = t(415);
                          const o = t(413);
                          const a = { binary: !0, hex: !0, base64: !0 };
                          (r.DiffieHellmanGroup = r.createDiffieHellmanGroup = r.getDiffieHellman = function (
                            t,
                          ) {
                            const r = new e(i[t].prime, 'hex');
                            const n = new e(i[t].gen, 'hex');
                            return new o(r, n);
                          }),
                          (r.createDiffieHellman = r.DiffieHellman = function t(r, i, s, f) {
                            return e.isBuffer(i) || void 0 === a[i]
                              ? t(r, 'binary', i, s)
                              : ((i = i || 'binary'),
                              (f = f || 'binary'),
                              (s = s || new e([2])),
                              e.isBuffer(s) || (s = new e(s, f)),
                              typeof r === 'number'
                                ? new o(n(r, s), s, !0)
                                : (e.isBuffer(r) || (r = new e(r, i)), new o(r, s, !0)));
                          });
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    {
                      413: 413, 414: 414, 415: 415, 67: 67,
                    },
                  ],
                  413: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          const n = t(416);
                          const i = new (t(471))();
                          const o = new n(24);
                          const a = new n(11);
                          const s = new n(10);
                          const f = new n(3);
                          const u = new n(7);
                          const c = t(414);
                          const h = t(497);
                          function d(t, e) {
                            return (
                              (e = e || 'utf8'),
                              r.isBuffer(t) || (t = new r(t, e)),
                              (this._pub = new n(t)),
                              this
                            );
                          }
                          function l(t, e) {
                            return (
                              (e = e || 'utf8'),
                              r.isBuffer(t) || (t = new r(t, e)),
                              (this._priv = new n(t)),
                              this
                            );
                          }
                          e.exports = b;
                          const p = {};
                          function b(t, e, r) {
                            this.setGenerator(e),
                            (this.__prime = new n(t)),
                            (this._prime = n.mont(this.__prime)),
                            (this._primeLen = t.length),
                            (this._pub = void 0),
                            (this._priv = void 0),
                            (this._primeCode = void 0),
                            r
                              ? ((this.setPublicKey = d), (this.setPrivateKey = l))
                              : (this._primeCode = 8);
                          }
                          function v(t, e) {
                            const n = new r(t.toArray());
                            return e ? n.toString(e) : n;
                          }
                          Object.defineProperty(b.prototype, 'verifyError', {
                            enumerable: !0,
                            get() {
                              return (
                                typeof this._primeCode !== 'number'
                                    && (this._primeCode = (function (t, e) {
                                      const r = e.toString('hex');
                                      const n = [r, t.toString(16)].join('_');
                                      if (n in p) return p[n];
                                      let h;
                                      let d = 0;
                                      if (
                                        t.isEven()
                                        || !c.simpleSieve
                                        || !c.fermatTest(t)
                                        || !i.test(t)
                                      ) {
                                        return (
                                          (d += 1),
                                          (d += r === '02' || r === '05' ? 8 : 4),
                                          (p[n] = d),
                                          d
                                        );
                                      }
                                      switch ((i.test(t.shrn(1)) || (d += 2), r)) {
                                        case '02':
                                          t.mod(o).cmp(a) && (d += 8);
                                          break;
                                        case '05':
                                          (h = t.mod(s)).cmp(f) && h.cmp(u) && (d += 8);
                                          break;
                                        default:
                                          d += 4;
                                      }
                                      return (p[n] = d), d;
                                    }(this.__prime, this.__gen))),
                                this._primeCode
                              );
                            },
                          }),
                          (b.prototype.generateKeys = function () {
                            return (
                              this._priv || (this._priv = new n(h(this._primeLen))),
                              (this._pub = this._gen
                                .toRed(this._prime)
                                .redPow(this._priv)
                                .fromRed()),
                              this.getPublicKey()
                            );
                          }),
                          (b.prototype.computeSecret = function (t) {
                            const e = (t = (t = new n(t)).toRed(this._prime))
                              .redPow(this._priv)
                              .fromRed();
                            let i = new r(e.toArray());
                            const o = this.getPrime();
                            if (i.length < o.length) {
                              const a = new r(o.length - i.length);
                              a.fill(0), (i = r.concat([a, i]));
                            }
                            return i;
                          }),
                          (b.prototype.getPublicKey = function (t) {
                            return v(this._pub, t);
                          }),
                          (b.prototype.getPrivateKey = function (t) {
                            return v(this._priv, t);
                          }),
                          (b.prototype.getPrime = function (t) {
                            return v(this.__prime, t);
                          }),
                          (b.prototype.getGenerator = function (t) {
                            return v(this._gen, t);
                          }),
                          (b.prototype.setGenerator = function (t, e) {
                            return (
                              (e = e || 'utf8'),
                              r.isBuffer(t) || (t = new r(t, e)),
                              (this.__gen = t),
                              (this._gen = new n(t)),
                              this
                            );
                          });
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    {
                      414: 414, 416: 416, 471: 471, 497: 497, 67: 67,
                    },
                  ],
                  414: [
                    function (t, e, r) {
                      const n = t(497);
                      (e.exports = y), (y.simpleSieve = v), (y.fermatTest = g);
                      const i = t(416);
                      const o = new i(24);
                      const a = new (t(471))();
                      const s = new i(1);
                      const f = new i(2);
                      const u = new i(5);
                      const c = (new i(16), new i(8), new i(10));
                      const h = new i(3);
                      const d = (new i(7), new i(11));
                      const l = new i(4);
                      let p = (new i(12), null);
                      function b() {
                        if (p !== null) return p;
                        const t = [];
                        t[0] = 2;
                        for (let e = 1, r = 3; r < 1048576; r += 2) {
                          for (
                            var n = Math.ceil(Math.sqrt(r)), i = 0;
                            i < e && t[i] <= n && r % t[i] != 0;
                            i++
                          );
                          (e !== i && t[i] <= n) || (t[e++] = r);
                        }
                        return (p = t), t;
                      }
                      function v(t) {
                        for (let e = b(), r = 0; r < e.length; r++) if (t.modn(e[r]) === 0) return t.cmpn(e[r]) === 0;
                        return !0;
                      }
                      function g(t) {
                        const e = i.mont(t);
                        return (
                          f
                            .toRed(e)
                            .redPow(t.subn(1))
                            .fromRed()
                            .cmpn(1)
                            === 0
                        );
                      }
                      function y(t, e) {
                        if (t < 16) return new i(e === 2 || e === 5 ? [140, 123] : [140, 39]);
                        let r; let
                          p;
                        for (e = new i(e); ;) {
                          for (r = new i(n(Math.ceil(t / 8))); r.bitLength() > t;) r.ishrn(1);
                          if ((r.isEven() && r.iadd(s), r.testn(1) || r.iadd(f), e.cmp(f))) {
                            if (!e.cmp(u)) for (; r.mod(c).cmp(h);) r.iadd(l);
                          } else for (; r.mod(o).cmp(d);) r.iadd(l);
                          if (
                            v((p = r.shrn(1)))
                              && v(r)
                              && g(p)
                              && g(r)
                              && a.test(p)
                              && a.test(r)
                          ) return r;
                        }
                      }
                    },
                    { 416: 416, 471: 471, 497: 497 },
                  ],
                  415: [
                    function (t, e, r) {
                      e.exports = {
                        modp1: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff',
                        },
                        modp2: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff',
                        },
                        modp5: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff',
                        },
                        modp14: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff',
                        },
                        modp15: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff',
                        },
                        modp16: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff',
                        },
                        modp17: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff',
                        },
                        modp18: {
                          gen: '02',
                          prime:
                              'ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff',
                        },
                      };
                    },
                    {},
                  ],
                  416: [
                    function (t, e, r) {
                      arguments[4][16][0].apply(r, arguments);
                    },
                    { 16: 16, 21: 21 },
                  ],
                  417: [
                    function (t, e, r) {
                      const n = r;
                      (n.version = t(433).version),
                      (n.utils = t(431)),
                      (n.rand = t(20)),
                      (n.curve = t(420)),
                      (n.curves = t(423)),
                      (n.ec = t(424)),
                      (n.eddsa = t(427));
                    },
                    {
                      20: 20, 420: 420, 423: 423, 424: 424, 427: 427, 431: 431, 433: 433,
                    },
                  ],
                  418: [
                    function (t, e, r) {
                      const n = t(432);
                      const i = t(431);
                      const o = i.getNAF;
                      const a = i.getJSF;
                      const s = i.assert;
                      function f(t, e) {
                        (this.type = t),
                        (this.p = new n(e.p, 16)),
                        (this.red = e.prime ? n.red(e.prime) : n.mont(this.p)),
                        (this.zero = new n(0).toRed(this.red)),
                        (this.one = new n(1).toRed(this.red)),
                        (this.two = new n(2).toRed(this.red)),
                        (this.n = e.n && new n(e.n, 16)),
                        (this.g = e.g && this.pointFromJSON(e.g, e.gRed)),
                        (this._wnafT1 = new Array(4)),
                        (this._wnafT2 = new Array(4)),
                        (this._wnafT3 = new Array(4)),
                        (this._wnafT4 = new Array(4)),
                        (this._bitLength = this.n ? this.n.bitLength() : 0);
                        const r = this.n && this.p.div(this.n);
                        !r || r.cmpn(100) > 0
                          ? (this.redN = null)
                          : ((this._maxwellTrick = !0), (this.redN = this.n.toRed(this.red)));
                      }
                      function u(t, e) {
                        (this.curve = t), (this.type = e), (this.precomputed = null);
                      }
                      (e.exports = f),
                      (f.prototype.point = function () {
                        throw new Error('Not implemented');
                      }),
                      (f.prototype.validate = function () {
                        throw new Error('Not implemented');
                      }),
                      (f.prototype._fixedNafMul = function (t, e) {
                        s(t.precomputed);
                        const r = t._getDoubles();
                        const n = o(e, 1, this._bitLength);
                        let i = (1 << (r.step + 1)) - (r.step % 2 == 0 ? 2 : 1);
                        i /= 3;
                        let a;
                        let f;
                        const u = [];
                        for (a = 0; a < n.length; a += r.step) {
                          f = 0;
                          for (let c = a + r.step - 1; c >= a; c--) f = (f << 1) + n[c];
                          u.push(f);
                        }
                        for (
                          var h = this.jpoint(null, null, null),
                            d = this.jpoint(null, null, null),
                            l = i;
                          l > 0;
                          l--
                        ) {
                          for (a = 0; a < u.length; a++) {
                            (f = u[a]) === l
                              ? (d = d.mixedAdd(r.points[a]))
                              : f === -l && (d = d.mixedAdd(r.points[a].neg()));
                          }
                          h = h.add(d);
                        }
                        return h.toP();
                      }),
                      (f.prototype._wnafMul = function (t, e) {
                        let r = 4;
                        const n = t._getNAFPoints(r);
                        r = n.wnd;
                        for (
                          var i = n.points,
                            a = o(e, r, this._bitLength),
                            f = this.jpoint(null, null, null),
                            u = a.length - 1;
                          u >= 0;
                          u--
                        ) {
                          for (var c = 0; u >= 0 && a[u] === 0; u--) c++;
                          if ((u >= 0 && c++, (f = f.dblp(c)), u < 0)) break;
                          const h = a[u];
                          s(h !== 0),
                          (f = t.type === 'affine'
                            ? h > 0
                              ? f.mixedAdd(i[(h - 1) >> 1])
                              : f.mixedAdd(i[(-h - 1) >> 1].neg())
                            : h > 0
                              ? f.add(i[(h - 1) >> 1])
                              : f.add(i[(-h - 1) >> 1].neg()));
                        }
                        return t.type === 'affine' ? f.toP() : f;
                      }),
                      (f.prototype._wnafMulAdd = function (t, e, r, n, i) {
                        let s;
                        let f;
                        let u;
                        const c = this._wnafT1;
                        const h = this._wnafT2;
                        const d = this._wnafT3;
                        let l = 0;
                        for (s = 0; s < n; s++) {
                          const p = (u = e[s])._getNAFPoints(t);
                          (c[s] = p.wnd), (h[s] = p.points);
                        }
                        for (s = n - 1; s >= 1; s -= 2) {
                          const b = s - 1;
                          const v = s;
                          if (c[b] === 1 && c[v] === 1) {
                            const g = [e[b], null, null, e[v]];
                            e[b].y.cmp(e[v].y) === 0
                              ? ((g[1] = e[b].add(e[v])),
                              (g[2] = e[b].toJ().mixedAdd(e[v].neg())))
                              : e[b].y.cmp(e[v].y.redNeg()) === 0
                                ? ((g[1] = e[b].toJ().mixedAdd(e[v])),
                                (g[2] = e[b].add(e[v].neg())))
                                : ((g[1] = e[b].toJ().mixedAdd(e[v])),
                                (g[2] = e[b].toJ().mixedAdd(e[v].neg())));
                            const y = [-3, -1, -5, -7, 0, 7, 5, 1, 3];
                            const m = a(r[b], r[v]);
                            for (
                              l = Math.max(m[0].length, l),
                              d[b] = new Array(l),
                              d[v] = new Array(l),
                              f = 0;
                              f < l;
                              f++
                            ) {
                              const w = 0 | m[0][f];
                              const _ = 0 | m[1][f];
                              (d[b][f] = y[3 * (w + 1) + (_ + 1)]), (d[v][f] = 0), (h[b] = g);
                            }
                          } else {
                            (d[b] = o(r[b], c[b], this._bitLength)),
                            (d[v] = o(r[v], c[v], this._bitLength)),
                            (l = Math.max(d[b].length, l)),
                            (l = Math.max(d[v].length, l));
                          }
                        }
                        let S = this.jpoint(null, null, null);
                        const M = this._wnafT4;
                        for (s = l; s >= 0; s--) {
                          for (var E = 0; s >= 0;) {
                            let k = !0;
                            for (f = 0; f < n; f++) (M[f] = 0 | d[f][s]), M[f] !== 0 && (k = !1);
                            if (!k) break;
                            E++, s--;
                          }
                          if ((s >= 0 && E++, (S = S.dblp(E)), s < 0)) break;
                          for (f = 0; f < n; f++) {
                            const x = M[f];
                            x !== 0
                                  && (x > 0
                                    ? (u = h[f][(x - 1) >> 1])
                                    : x < 0 && (u = h[f][(-x - 1) >> 1].neg()),
                                  (S = u.type === 'affine' ? S.mixedAdd(u) : S.add(u)));
                          }
                        }
                        for (s = 0; s < n; s++) h[s] = null;
                        return i ? S : S.toP();
                      }),
                      (f.BasePoint = u),
                      (u.prototype.eq = function () {
                        throw new Error('Not implemented');
                      }),
                      (u.prototype.validate = function () {
                        return this.curve.validate(this);
                      }),
                      (f.prototype.decodePoint = function (t, e) {
                        t = i.toArray(t, e);
                        const r = this.p.byteLength();
                        if ((t[0] === 4 || t[0] === 6 || t[0] === 7) && t.length - 1 == 2 * r) {
                          return (
                            t[0] === 6
                              ? s(t[t.length - 1] % 2 == 0)
                              : t[0] === 7 && s(t[t.length - 1] % 2 == 1),
                            this.point(t.slice(1, 1 + r), t.slice(1 + r, 1 + 2 * r))
                          );
                        }
                        if ((t[0] === 2 || t[0] === 3) && t.length - 1 === r) return this.pointFromX(t.slice(1, 1 + r), t[0] === 3);
                        throw new Error('Unknown point format');
                      }),
                      (u.prototype.encodeCompressed = function (t) {
                        return this.encode(t, !0);
                      }),
                      (u.prototype._encode = function (t) {
                        const e = this.curve.p.byteLength();
                        const r = this.getX().toArray('be', e);
                        return t
                          ? [this.getY().isEven() ? 2 : 3].concat(r)
                          : [4].concat(r, this.getY().toArray('be', e));
                      }),
                      (u.prototype.encode = function (t, e) {
                        return i.encode(this._encode(e), t);
                      }),
                      (u.prototype.precompute = function (t) {
                        if (this.precomputed) return this;
                        const e = { doubles: null, naf: null, beta: null };
                        return (
                          (e.naf = this._getNAFPoints(8)),
                          (e.doubles = this._getDoubles(4, t)),
                          (e.beta = this._getBeta()),
                          (this.precomputed = e),
                          this
                        );
                      }),
                      (u.prototype._hasDoubles = function (t) {
                        if (!this.precomputed) return !1;
                        const e = this.precomputed.doubles;
                        return (
                          !!e && e.points.length >= Math.ceil((t.bitLength() + 1) / e.step)
                        );
                      }),
                      (u.prototype._getDoubles = function (t, e) {
                        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                        for (var r = [this], n = this, i = 0; i < e; i += t) {
                          for (let o = 0; o < t; o++) n = n.dbl();
                          r.push(n);
                        }
                        return { step: t, points: r };
                      }),
                      (u.prototype._getNAFPoints = function (t) {
                        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                        for (
                          var e = [this],
                            r = (1 << t) - 1,
                            n = r === 1 ? null : this.dbl(),
                            i = 1;
                          i < r;
                          i++
                        ) e[i] = e[i - 1].add(n);
                        return { wnd: t, points: e };
                      }),
                      (u.prototype._getBeta = function () {
                        return null;
                      }),
                      (u.prototype.dblp = function (t) {
                        for (var e = this, r = 0; r < t; r++) e = e.dbl();
                        return e;
                      });
                    },
                    { 431: 431, 432: 432 },
                  ],
                  419: [
                    function (t, e, r) {
                      const n = t(431);
                      const i = t(432);
                      const o = t(467);
                      const a = t(418);
                      const s = n.assert;
                      function f(t) {
                        (this.twisted = (0 | t.a) != 1),
                        (this.mOneA = this.twisted && (0 | t.a) == -1),
                        (this.extended = this.mOneA),
                        a.call(this, 'edwards', t),
                        (this.a = new i(t.a, 16).umod(this.red.m)),
                        (this.a = this.a.toRed(this.red)),
                        (this.c = new i(t.c, 16).toRed(this.red)),
                        (this.c2 = this.c.redSqr()),
                        (this.d = new i(t.d, 16).toRed(this.red)),
                        (this.dd = this.d.redAdd(this.d)),
                        s(!this.twisted || this.c.fromRed().cmpn(1) === 0),
                        (this.oneC = (0 | t.c) == 1);
                      }
                      function u(t, e, r, n, o) {
                        a.BasePoint.call(this, t, 'projective'),
                        e === null && r === null && n === null
                          ? ((this.x = this.curve.zero),
                          (this.y = this.curve.one),
                          (this.z = this.curve.one),
                          (this.t = this.curve.zero),
                          (this.zOne = !0))
                          : ((this.x = new i(e, 16)),
                          (this.y = new i(r, 16)),
                          (this.z = n ? new i(n, 16) : this.curve.one),
                          (this.t = o && new i(o, 16)),
                          this.x.red || (this.x = this.x.toRed(this.curve.red)),
                          this.y.red || (this.y = this.y.toRed(this.curve.red)),
                          this.z.red || (this.z = this.z.toRed(this.curve.red)),
                          this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)),
                          (this.zOne = this.z === this.curve.one),
                          this.curve.extended
                                  && !this.t
                                  && ((this.t = this.x.redMul(this.y)),
                                  this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
                      }
                      o(f, a),
                      (e.exports = f),
                      (f.prototype._mulA = function (t) {
                        return this.mOneA ? t.redNeg() : this.a.redMul(t);
                      }),
                      (f.prototype._mulC = function (t) {
                        return this.oneC ? t : this.c.redMul(t);
                      }),
                      (f.prototype.jpoint = function (t, e, r, n) {
                        return this.point(t, e, r, n);
                      }),
                      (f.prototype.pointFromX = function (t, e) {
                        (t = new i(t, 16)).red || (t = t.toRed(this.red));
                        const r = t.redSqr();
                        const n = this.c2.redSub(this.a.redMul(r));
                        const o = this.one.redSub(this.c2.redMul(this.d).redMul(r));
                        const a = n.redMul(o.redInvm());
                        let s = a.redSqrt();
                        if (
                          s
                            .redSqr()
                            .redSub(a)
                            .cmp(this.zero)
                              !== 0
                        ) throw new Error('invalid point');
                        const f = s.fromRed().isOdd();
                        return ((e && !f) || (!e && f)) && (s = s.redNeg()), this.point(t, s);
                      }),
                      (f.prototype.pointFromY = function (t, e) {
                        (t = new i(t, 16)).red || (t = t.toRed(this.red));
                        const r = t.redSqr();
                        const n = r.redSub(this.c2);
                        const o = r
                          .redMul(this.d)
                          .redMul(this.c2)
                          .redSub(this.a);
                        const a = n.redMul(o.redInvm());
                        if (a.cmp(this.zero) === 0) {
                          if (e) throw new Error('invalid point');
                          return this.point(this.zero, t);
                        }
                        let s = a.redSqrt();
                        if (
                          s
                            .redSqr()
                            .redSub(a)
                            .cmp(this.zero)
                              !== 0
                        ) throw new Error('invalid point');
                        return s.fromRed().isOdd() !== e && (s = s.redNeg()), this.point(s, t);
                      }),
                      (f.prototype.validate = function (t) {
                        if (t.isInfinity()) return !0;
                        t.normalize();
                        const e = t.x.redSqr();
                        const r = t.y.redSqr();
                        const n = e.redMul(this.a).redAdd(r);
                        const i = this.c2.redMul(this.one.redAdd(this.d.redMul(e).redMul(r)));
                        return n.cmp(i) === 0;
                      }),
                      o(u, a.BasePoint),
                      (f.prototype.pointFromJSON = function (t) {
                        return u.fromJSON(this, t);
                      }),
                      (f.prototype.point = function (t, e, r, n) {
                        return new u(this, t, e, r, n);
                      }),
                      (u.fromJSON = function (t, e) {
                        return new u(t, e[0], e[1], e[2]);
                      }),
                      (u.prototype.inspect = function () {
                        return this.isInfinity()
                          ? '<EC Point Infinity>'
                          : `<EC Point x: ${
                            this.x.fromRed().toString(16, 2)
                          } y: ${
                            this.y.fromRed().toString(16, 2)
                          } z: ${
                            this.z.fromRed().toString(16, 2)
                          }>`;
                      }),
                      (u.prototype.isInfinity = function () {
                        return (
                          this.x.cmpn(0) === 0
                              && (this.y.cmp(this.z) === 0
                                || (this.zOne && this.y.cmp(this.curve.c) === 0))
                        );
                      }),
                      (u.prototype._extDbl = function () {
                        const t = this.x.redSqr();
                        const e = this.y.redSqr();
                        let r = this.z.redSqr();
                        r = r.redIAdd(r);
                        const n = this.curve._mulA(t);
                        const i = this.x
                          .redAdd(this.y)
                          .redSqr()
                          .redISub(t)
                          .redISub(e);
                        const o = n.redAdd(e);
                        const a = o.redSub(r);
                        const s = n.redSub(e);
                        const f = i.redMul(a);
                        const u = o.redMul(s);
                        const c = i.redMul(s);
                        const h = a.redMul(o);
                        return this.curve.point(f, u, h, c);
                      }),
                      (u.prototype._projDbl = function () {
                        let t;
                        let e;
                        let r;
                        let n;
                        let i;
                        let o;
                        const a = this.x.redAdd(this.y).redSqr();
                        const s = this.x.redSqr();
                        const f = this.y.redSqr();
                        if (this.curve.twisted) {
                          const u = (n = this.curve._mulA(s)).redAdd(f);
                          this.zOne
                            ? ((t = a
                              .redSub(s)
                              .redSub(f)
                              .redMul(u.redSub(this.curve.two))),
                            (e = u.redMul(n.redSub(f))),
                            (r = u
                              .redSqr()
                              .redSub(u)
                              .redSub(u)))
                            : ((i = this.z.redSqr()),
                            (o = u.redSub(i).redISub(i)),
                            (t = a
                              .redSub(s)
                              .redISub(f)
                              .redMul(o)),
                            (e = u.redMul(n.redSub(f))),
                            (r = u.redMul(o)));
                        } else {
                          (n = s.redAdd(f)),
                          (i = this.curve._mulC(this.z).redSqr()),
                          (o = n.redSub(i).redSub(i)),
                          (t = this.curve._mulC(a.redISub(n)).redMul(o)),
                          (e = this.curve._mulC(n).redMul(s.redISub(f))),
                          (r = n.redMul(o));
                        }
                        return this.curve.point(t, e, r);
                      }),
                      (u.prototype.dbl = function () {
                        return this.isInfinity()
                          ? this
                          : this.curve.extended
                            ? this._extDbl()
                            : this._projDbl();
                      }),
                      (u.prototype._extAdd = function (t) {
                        const e = this.y.redSub(this.x).redMul(t.y.redSub(t.x));
                        const r = this.y.redAdd(this.x).redMul(t.y.redAdd(t.x));
                        const n = this.t.redMul(this.curve.dd).redMul(t.t);
                        const i = this.z.redMul(t.z.redAdd(t.z));
                        const o = r.redSub(e);
                        const a = i.redSub(n);
                        const s = i.redAdd(n);
                        const f = r.redAdd(e);
                        const u = o.redMul(a);
                        const c = s.redMul(f);
                        const h = o.redMul(f);
                        const d = a.redMul(s);
                        return this.curve.point(u, c, d, h);
                      }),
                      (u.prototype._projAdd = function (t) {
                        let e;
                        let r;
                        const n = this.z.redMul(t.z);
                        const i = n.redSqr();
                        const o = this.x.redMul(t.x);
                        const a = this.y.redMul(t.y);
                        const s = this.curve.d.redMul(o).redMul(a);
                        const f = i.redSub(s);
                        const u = i.redAdd(s);
                        const c = this.x
                          .redAdd(this.y)
                          .redMul(t.x.redAdd(t.y))
                          .redISub(o)
                          .redISub(a);
                        const h = n.redMul(f).redMul(c);
                        return (
                          this.curve.twisted
                            ? ((e = n.redMul(u).redMul(a.redSub(this.curve._mulA(o)))),
                            (r = f.redMul(u)))
                            : ((e = n.redMul(u).redMul(a.redSub(o))),
                            (r = this.curve._mulC(f).redMul(u))),
                          this.curve.point(h, e, r)
                        );
                      }),
                      (u.prototype.add = function (t) {
                        return this.isInfinity()
                          ? t
                          : t.isInfinity()
                            ? this
                            : this.curve.extended
                              ? this._extAdd(t)
                              : this._projAdd(t);
                      }),
                      (u.prototype.mul = function (t) {
                        return this._hasDoubles(t)
                          ? this.curve._fixedNafMul(this, t)
                          : this.curve._wnafMul(this, t);
                      }),
                      (u.prototype.mulAdd = function (t, e, r) {
                        return this.curve._wnafMulAdd(1, [this, e], [t, r], 2, !1);
                      }),
                      (u.prototype.jmulAdd = function (t, e, r) {
                        return this.curve._wnafMulAdd(1, [this, e], [t, r], 2, !0);
                      }),
                      (u.prototype.normalize = function () {
                        if (this.zOne) return this;
                        const t = this.z.redInvm();
                        return (
                          (this.x = this.x.redMul(t)),
                          (this.y = this.y.redMul(t)),
                          this.t && (this.t = this.t.redMul(t)),
                          (this.z = this.curve.one),
                          (this.zOne = !0),
                          this
                        );
                      }),
                      (u.prototype.neg = function () {
                        return this.curve.point(
                          this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg(),
                        );
                      }),
                      (u.prototype.getX = function () {
                        return this.normalize(), this.x.fromRed();
                      }),
                      (u.prototype.getY = function () {
                        return this.normalize(), this.y.fromRed();
                      }),
                      (u.prototype.eq = function (t) {
                        return (
                          this === t
                              || (this.getX().cmp(t.getX()) === 0 && this.getY().cmp(t.getY()) === 0)
                        );
                      }),
                      (u.prototype.eqXToP = function (t) {
                        const e = t.toRed(this.curve.red).redMul(this.z);
                        if (this.x.cmp(e) === 0) return !0;
                        for (let r = t.clone(), n = this.curve.redN.redMul(this.z); ;) {
                          if ((r.iadd(this.curve.n), r.cmp(this.curve.p) >= 0)) return !1;
                          if ((e.redIAdd(n), this.x.cmp(e) === 0)) return !0;
                        }
                      }),
                      (u.prototype.toP = u.prototype.normalize),
                      (u.prototype.mixedAdd = u.prototype.add);
                    },
                    {
                      418: 418, 431: 431, 432: 432, 467: 467,
                    },
                  ],
                  420: [
                    function (t, e, r) {
                      const n = r;
                      (n.base = t(418)),
                      (n.short = t(422)),
                      (n.mont = t(421)),
                      (n.edwards = t(419));
                    },
                    {
                      418: 418, 419: 419, 421: 421, 422: 422,
                    },
                  ],
                  421: [
                    function (t, e, r) {
                      const n = t(432);
                      const i = t(467);
                      const o = t(418);
                      const a = t(431);
                      function s(t) {
                        o.call(this, 'mont', t),
                        (this.a = new n(t.a, 16).toRed(this.red)),
                        (this.b = new n(t.b, 16).toRed(this.red)),
                        (this.i4 = new n(4).toRed(this.red).redInvm()),
                        (this.two = new n(2).toRed(this.red)),
                        (this.a24 = this.i4.redMul(this.a.redAdd(this.two)));
                      }
                      function f(t, e, r) {
                        o.BasePoint.call(this, t, 'projective'),
                        e === null && r === null
                          ? ((this.x = this.curve.one), (this.z = this.curve.zero))
                          : ((this.x = new n(e, 16)),
                          (this.z = new n(r, 16)),
                          this.x.red || (this.x = this.x.toRed(this.curve.red)),
                          this.z.red || (this.z = this.z.toRed(this.curve.red)));
                      }
                      i(s, o),
                      (e.exports = s),
                      (s.prototype.validate = function (t) {
                        const e = t.normalize().x;
                        const r = e.redSqr();
                        const n = r
                          .redMul(e)
                          .redAdd(r.redMul(this.a))
                          .redAdd(e);
                        return (
                          n
                            .redSqrt()
                            .redSqr()
                            .cmp(n)
                              === 0
                        );
                      }),
                      i(f, o.BasePoint),
                      (s.prototype.decodePoint = function (t, e) {
                        return this.point(a.toArray(t, e), 1);
                      }),
                      (s.prototype.point = function (t, e) {
                        return new f(this, t, e);
                      }),
                      (s.prototype.pointFromJSON = function (t) {
                        return f.fromJSON(this, t);
                      }),
                      (f.prototype.precompute = function () {}),
                      (f.prototype._encode = function () {
                        return this.getX().toArray('be', this.curve.p.byteLength());
                      }),
                      (f.fromJSON = function (t, e) {
                        return new f(t, e[0], e[1] || t.one);
                      }),
                      (f.prototype.inspect = function () {
                        return this.isInfinity()
                          ? '<EC Point Infinity>'
                          : `<EC Point x: ${
                            this.x.fromRed().toString(16, 2)
                          } z: ${
                            this.z.fromRed().toString(16, 2)
                          }>`;
                      }),
                      (f.prototype.isInfinity = function () {
                        return this.z.cmpn(0) === 0;
                      }),
                      (f.prototype.dbl = function () {
                        const t = this.x.redAdd(this.z).redSqr();
                        const e = this.x.redSub(this.z).redSqr();
                        const r = t.redSub(e);
                        const n = t.redMul(e);
                        const i = r.redMul(e.redAdd(this.curve.a24.redMul(r)));
                        return this.curve.point(n, i);
                      }),
                      (f.prototype.add = function () {
                        throw new Error('Not supported on Montgomery curve');
                      }),
                      (f.prototype.diffAdd = function (t, e) {
                        const r = this.x.redAdd(this.z);
                        const n = this.x.redSub(this.z);
                        const i = t.x.redAdd(t.z);
                        const o = t.x.redSub(t.z).redMul(r);
                        const a = i.redMul(n);
                        const s = e.z.redMul(o.redAdd(a).redSqr());
                        const f = e.x.redMul(o.redISub(a).redSqr());
                        return this.curve.point(s, f);
                      }),
                      (f.prototype.mul = function (t) {
                        for (
                          var e = t.clone(), r = this, n = this.curve.point(null, null), i = [];
                          e.cmpn(0) !== 0;
                          e.iushrn(1)
                        ) i.push(e.andln(1));
                        for (let o = i.length - 1; o >= 0; o--) {
                          i[o] === 0
                            ? ((r = r.diffAdd(n, this)), (n = n.dbl()))
                            : ((n = r.diffAdd(n, this)), (r = r.dbl()));
                        }
                        return n;
                      }),
                      (f.prototype.mulAdd = function () {
                        throw new Error('Not supported on Montgomery curve');
                      }),
                      (f.prototype.jumlAdd = function () {
                        throw new Error('Not supported on Montgomery curve');
                      }),
                      (f.prototype.eq = function (t) {
                        return this.getX().cmp(t.getX()) === 0;
                      }),
                      (f.prototype.normalize = function () {
                        return (
                          (this.x = this.x.redMul(this.z.redInvm())),
                          (this.z = this.curve.one),
                          this
                        );
                      }),
                      (f.prototype.getX = function () {
                        return this.normalize(), this.x.fromRed();
                      });
                    },
                    {
                      418: 418, 431: 431, 432: 432, 467: 467,
                    },
                  ],
                  422: [
                    function (t, e, r) {
                      const n = t(431);
                      const i = t(432);
                      const o = t(467);
                      const a = t(418);
                      const s = n.assert;
                      function f(t) {
                        a.call(this, 'short', t),
                        (this.a = new i(t.a, 16).toRed(this.red)),
                        (this.b = new i(t.b, 16).toRed(this.red)),
                        (this.tinv = this.two.redInvm()),
                        (this.zeroA = this.a.fromRed().cmpn(0) === 0),
                        (this.threeA = this.a
                          .fromRed()
                          .sub(this.p)
                          .cmpn(-3)
                              === 0),
                        (this.endo = this._getEndomorphism(t)),
                        (this._endoWnafT1 = new Array(4)),
                        (this._endoWnafT2 = new Array(4));
                      }
                      function u(t, e, r, n) {
                        a.BasePoint.call(this, t, 'affine'),
                        e === null && r === null
                          ? ((this.x = null), (this.y = null), (this.inf = !0))
                          : ((this.x = new i(e, 16)),
                          (this.y = new i(r, 16)),
                          n
                                  && (this.x.forceRed(this.curve.red),
                                  this.y.forceRed(this.curve.red)),
                          this.x.red || (this.x = this.x.toRed(this.curve.red)),
                          this.y.red || (this.y = this.y.toRed(this.curve.red)),
                          (this.inf = !1));
                      }
                      function c(t, e, r, n) {
                        a.BasePoint.call(this, t, 'jacobian'),
                        e === null && r === null && n === null
                          ? ((this.x = this.curve.one),
                          (this.y = this.curve.one),
                          (this.z = new i(0)))
                          : ((this.x = new i(e, 16)),
                          (this.y = new i(r, 16)),
                          (this.z = new i(n, 16))),
                        this.x.red || (this.x = this.x.toRed(this.curve.red)),
                        this.y.red || (this.y = this.y.toRed(this.curve.red)),
                        this.z.red || (this.z = this.z.toRed(this.curve.red)),
                        (this.zOne = this.z === this.curve.one);
                      }
                      o(f, a),
                      (e.exports = f),
                      (f.prototype._getEndomorphism = function (t) {
                        if (this.zeroA && this.g && this.n && this.p.modn(3) === 1) {
                          let e; let
                            r;
                          if (t.beta) e = new i(t.beta, 16).toRed(this.red);
                          else {
                            const n = this._getEndoRoots(this.p);
                            e = (e = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);
                          }
                          if (t.lambda) r = new i(t.lambda, 16);
                          else {
                            const o = this._getEndoRoots(this.n);
                            this.g.mul(o[0]).x.cmp(this.g.x.redMul(e)) === 0
                              ? (r = o[0])
                              : ((r = o[1]), s(this.g.mul(r).x.cmp(this.g.x.redMul(e)) === 0));
                          }
                          return {
                            beta: e,
                            lambda: r,
                            basis: t.basis
                              ? t.basis.map((t) => ({ a: new i(t.a, 16), b: new i(t.b, 16) }))
                              : this._getEndoBasis(r),
                          };
                        }
                      }),
                      (f.prototype._getEndoRoots = function (t) {
                        const e = t === this.p ? this.red : i.mont(t);
                        const r = new i(2).toRed(e).redInvm();
                        const n = r.redNeg();
                        const o = new i(3)
                          .toRed(e)
                          .redNeg()
                          .redSqrt()
                          .redMul(r);
                        return [n.redAdd(o).fromRed(), n.redSub(o).fromRed()];
                      }),
                      (f.prototype._getEndoBasis = function (t) {
                        for (
                          var e,
                            r,
                            n,
                            o,
                            a,
                            s,
                            f,
                            u,
                            c,
                            h = this.n.ushrn(Math.floor(this.n.bitLength() / 2)),
                            d = t,
                            l = this.n.clone(),
                            p = new i(1),
                            b = new i(0),
                            v = new i(0),
                            g = new i(1),
                            y = 0;
                          d.cmpn(0) !== 0;

                        ) {
                          const m = l.div(d);
                          (u = l.sub(m.mul(d))), (c = v.sub(m.mul(p)));
                          const w = g.sub(m.mul(b));
                          if (!n && u.cmp(h) < 0) (e = f.neg()), (r = p), (n = u.neg()), (o = c);
                          else if (n && ++y == 2) break;
                          (f = u), (l = d), (d = u), (v = p), (p = c), (g = b), (b = w);
                        }
                        (a = u.neg()), (s = c);
                        const _ = n.sqr().add(o.sqr());
                        return (
                          a
                            .sqr()
                            .add(s.sqr())
                            .cmp(_) >= 0 && ((a = e), (s = r)),
                          n.negative && ((n = n.neg()), (o = o.neg())),
                          a.negative && ((a = a.neg()), (s = s.neg())),
                          [
                            { a: n, b: o },
                            { a, b: s },
                          ]
                        );
                      }),
                      (f.prototype._endoSplit = function (t) {
                        const e = this.endo.basis;
                        const r = e[0];
                        const n = e[1];
                        const i = n.b.mul(t).divRound(this.n);
                        const o = r.b
                          .neg()
                          .mul(t)
                          .divRound(this.n);
                        const a = i.mul(r.a);
                        const s = o.mul(n.a);
                        const f = i.mul(r.b);
                        const u = o.mul(n.b);
                        return { k1: t.sub(a).sub(s), k2: f.add(u).neg() };
                      }),
                      (f.prototype.pointFromX = function (t, e) {
                        (t = new i(t, 16)).red || (t = t.toRed(this.red));
                        const r = t
                          .redSqr()
                          .redMul(t)
                          .redIAdd(t.redMul(this.a))
                          .redIAdd(this.b);
                        let n = r.redSqrt();
                        if (
                          n
                            .redSqr()
                            .redSub(r)
                            .cmp(this.zero)
                              !== 0
                        ) throw new Error('invalid point');
                        const o = n.fromRed().isOdd();
                        return ((e && !o) || (!e && o)) && (n = n.redNeg()), this.point(t, n);
                      }),
                      (f.prototype.validate = function (t) {
                        if (t.inf) return !0;
                        const e = t.x;
                        const r = t.y;
                        const n = this.a.redMul(e);
                        const i = e
                          .redSqr()
                          .redMul(e)
                          .redIAdd(n)
                          .redIAdd(this.b);
                        return (
                          r
                            .redSqr()
                            .redISub(i)
                            .cmpn(0)
                              === 0
                        );
                      }),
                      (f.prototype._endoWnafMulAdd = function (t, e, r) {
                        for (
                          var n = this._endoWnafT1, i = this._endoWnafT2, o = 0;
                          o < t.length;
                          o++
                        ) {
                          const a = this._endoSplit(e[o]);
                          let s = t[o];
                          let f = s._getBeta();
                          a.k1.negative && (a.k1.ineg(), (s = s.neg(!0))),
                          a.k2.negative && (a.k2.ineg(), (f = f.neg(!0))),
                          (n[2 * o] = s),
                          (n[2 * o + 1] = f),
                          (i[2 * o] = a.k1),
                          (i[2 * o + 1] = a.k2);
                        }
                        for (var u = this._wnafMulAdd(1, n, i, 2 * o, r), c = 0; c < 2 * o; c++) (n[c] = null), (i[c] = null);
                        return u;
                      }),
                      o(u, a.BasePoint),
                      (f.prototype.point = function (t, e, r) {
                        return new u(this, t, e, r);
                      }),
                      (f.prototype.pointFromJSON = function (t, e) {
                        return u.fromJSON(this, t, e);
                      }),
                      (u.prototype._getBeta = function () {
                        if (this.curve.endo) {
                          const t = this.precomputed;
                          if (t && t.beta) return t.beta;
                          const e = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                          if (t) {
                            const r = this.curve;
                            const n = function (t) {
                              return r.point(t.x.redMul(r.endo.beta), t.y);
                            };
                            (t.beta = e),
                            (e.precomputed = {
                              beta: null,
                              naf: t.naf && { wnd: t.naf.wnd, points: t.naf.points.map(n) },
                              doubles: t.doubles && {
                                step: t.doubles.step,
                                points: t.doubles.points.map(n),
                              },
                            });
                          }
                          return e;
                        }
                      }),
                      (u.prototype.toJSON = function () {
                        return this.precomputed
                          ? [
                            this.x,
                            this.y,
                            this.precomputed && {
                              doubles: this.precomputed.doubles && {
                                step: this.precomputed.doubles.step,
                                points: this.precomputed.doubles.points.slice(1),
                              },
                              naf: this.precomputed.naf && {
                                wnd: this.precomputed.naf.wnd,
                                points: this.precomputed.naf.points.slice(1),
                              },
                            },
                          ]
                          : [this.x, this.y];
                      }),
                      (u.fromJSON = function (t, e, r) {
                        typeof e === 'string' && (e = JSON.parse(e));
                        const n = t.point(e[0], e[1], r);
                        if (!e[2]) return n;
                        function i(e) {
                          return t.point(e[0], e[1], r);
                        }
                        const o = e[2];
                        return (
                          (n.precomputed = {
                            beta: null,
                            doubles: o.doubles && {
                              step: o.doubles.step,
                              points: [n].concat(o.doubles.points.map(i)),
                            },
                            naf: o.naf && {
                              wnd: o.naf.wnd,
                              points: [n].concat(o.naf.points.map(i)),
                            },
                          }),
                          n
                        );
                      }),
                      (u.prototype.inspect = function () {
                        return this.isInfinity()
                          ? '<EC Point Infinity>'
                          : `<EC Point x: ${
                            this.x.fromRed().toString(16, 2)
                          } y: ${
                            this.y.fromRed().toString(16, 2)
                          }>`;
                      }),
                      (u.prototype.isInfinity = function () {
                        return this.inf;
                      }),
                      (u.prototype.add = function (t) {
                        if (this.inf) return t;
                        if (t.inf) return this;
                        if (this.eq(t)) return this.dbl();
                        if (this.neg().eq(t)) return this.curve.point(null, null);
                        if (this.x.cmp(t.x) === 0) return this.curve.point(null, null);
                        let e = this.y.redSub(t.y);
                        e.cmpn(0) !== 0 && (e = e.redMul(this.x.redSub(t.x).redInvm()));
                        const r = e
                          .redSqr()
                          .redISub(this.x)
                          .redISub(t.x);
                        const n = e.redMul(this.x.redSub(r)).redISub(this.y);
                        return this.curve.point(r, n);
                      }),
                      (u.prototype.dbl = function () {
                        if (this.inf) return this;
                        const t = this.y.redAdd(this.y);
                        if (t.cmpn(0) === 0) return this.curve.point(null, null);
                        const e = this.curve.a;
                        const r = this.x.redSqr();
                        const n = t.redInvm();
                        const i = r
                          .redAdd(r)
                          .redIAdd(r)
                          .redIAdd(e)
                          .redMul(n);
                        const o = i.redSqr().redISub(this.x.redAdd(this.x));
                        const a = i.redMul(this.x.redSub(o)).redISub(this.y);
                        return this.curve.point(o, a);
                      }),
                      (u.prototype.getX = function () {
                        return this.x.fromRed();
                      }),
                      (u.prototype.getY = function () {
                        return this.y.fromRed();
                      }),
                      (u.prototype.mul = function (t) {
                        return (
                          (t = new i(t, 16)),
                          this.isInfinity()
                            ? this
                            : this._hasDoubles(t)
                              ? this.curve._fixedNafMul(this, t)
                              : this.curve.endo
                                ? this.curve._endoWnafMulAdd([this], [t])
                                : this.curve._wnafMul(this, t)
                        );
                      }),
                      (u.prototype.mulAdd = function (t, e, r) {
                        const n = [this, e];
                        const i = [t, r];
                        return this.curve.endo
                          ? this.curve._endoWnafMulAdd(n, i)
                          : this.curve._wnafMulAdd(1, n, i, 2);
                      }),
                      (u.prototype.jmulAdd = function (t, e, r) {
                        const n = [this, e];
                        const i = [t, r];
                        return this.curve.endo
                          ? this.curve._endoWnafMulAdd(n, i, !0)
                          : this.curve._wnafMulAdd(1, n, i, 2, !0);
                      }),
                      (u.prototype.eq = function (t) {
                        return (
                          this === t
                              || (this.inf === t.inf
                                && (this.inf || (this.x.cmp(t.x) === 0 && this.y.cmp(t.y) === 0)))
                        );
                      }),
                      (u.prototype.neg = function (t) {
                        if (this.inf) return this;
                        const e = this.curve.point(this.x, this.y.redNeg());
                        if (t && this.precomputed) {
                          const r = this.precomputed;
                          const n = function (t) {
                            return t.neg();
                          };
                          e.precomputed = {
                            naf: r.naf && { wnd: r.naf.wnd, points: r.naf.points.map(n) },
                            doubles: r.doubles && {
                              step: r.doubles.step,
                              points: r.doubles.points.map(n),
                            },
                          };
                        }
                        return e;
                      }),
                      (u.prototype.toJ = function () {
                        return this.inf
                          ? this.curve.jpoint(null, null, null)
                          : this.curve.jpoint(this.x, this.y, this.curve.one);
                      }),
                      o(c, a.BasePoint),
                      (f.prototype.jpoint = function (t, e, r) {
                        return new c(this, t, e, r);
                      }),
                      (c.prototype.toP = function () {
                        if (this.isInfinity()) return this.curve.point(null, null);
                        const t = this.z.redInvm();
                        const e = t.redSqr();
                        const r = this.x.redMul(e);
                        const n = this.y.redMul(e).redMul(t);
                        return this.curve.point(r, n);
                      }),
                      (c.prototype.neg = function () {
                        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                      }),
                      (c.prototype.add = function (t) {
                        if (this.isInfinity()) return t;
                        if (t.isInfinity()) return this;
                        const e = t.z.redSqr();
                        const r = this.z.redSqr();
                        const n = this.x.redMul(e);
                        const i = t.x.redMul(r);
                        const o = this.y.redMul(e.redMul(t.z));
                        const a = t.y.redMul(r.redMul(this.z));
                        const s = n.redSub(i);
                        const f = o.redSub(a);
                        if (s.cmpn(0) === 0) {
                          return f.cmpn(0) !== 0
                            ? this.curve.jpoint(null, null, null)
                            : this.dbl();
                        }
                        const u = s.redSqr();
                        const c = u.redMul(s);
                        const h = n.redMul(u);
                        const d = f
                          .redSqr()
                          .redIAdd(c)
                          .redISub(h)
                          .redISub(h);
                        const l = f.redMul(h.redISub(d)).redISub(o.redMul(c));
                        const p = this.z.redMul(t.z).redMul(s);
                        return this.curve.jpoint(d, l, p);
                      }),
                      (c.prototype.mixedAdd = function (t) {
                        if (this.isInfinity()) return t.toJ();
                        if (t.isInfinity()) return this;
                        const e = this.z.redSqr();
                        const r = this.x;
                        const n = t.x.redMul(e);
                        const i = this.y;
                        const o = t.y.redMul(e).redMul(this.z);
                        const a = r.redSub(n);
                        const s = i.redSub(o);
                        if (a.cmpn(0) === 0) {
                          return s.cmpn(0) !== 0
                            ? this.curve.jpoint(null, null, null)
                            : this.dbl();
                        }
                        const f = a.redSqr();
                        const u = f.redMul(a);
                        const c = r.redMul(f);
                        const h = s
                          .redSqr()
                          .redIAdd(u)
                          .redISub(c)
                          .redISub(c);
                        const d = s.redMul(c.redISub(h)).redISub(i.redMul(u));
                        const l = this.z.redMul(a);
                        return this.curve.jpoint(h, d, l);
                      }),
                      (c.prototype.dblp = function (t) {
                        if (t === 0) return this;
                        if (this.isInfinity()) return this;
                        if (!t) return this.dbl();
                        let e;
                        if (this.curve.zeroA || this.curve.threeA) {
                          let r = this;
                          for (e = 0; e < t; e++) r = r.dbl();
                          return r;
                        }
                        const n = this.curve.a;
                        const i = this.curve.tinv;
                        let o = this.x;
                        const a = this.y;
                        let s = this.z;
                        let f = s.redSqr().redSqr();
                        let u = a.redAdd(a);
                        for (e = 0; e < t; e++) {
                          const c = o.redSqr();
                          const h = u.redSqr();
                          const d = h.redSqr();
                          const l = c
                            .redAdd(c)
                            .redIAdd(c)
                            .redIAdd(n.redMul(f));
                          const p = o.redMul(h);
                          const b = l.redSqr().redISub(p.redAdd(p));
                          const v = p.redISub(b);
                          let g = l.redMul(v);
                          g = g.redIAdd(g).redISub(d);
                          const y = u.redMul(s);
                          e + 1 < t && (f = f.redMul(d)), (o = b), (s = y), (u = g);
                        }
                        return this.curve.jpoint(o, u.redMul(i), s);
                      }),
                      (c.prototype.dbl = function () {
                        return this.isInfinity()
                          ? this
                          : this.curve.zeroA
                            ? this._zeroDbl()
                            : this.curve.threeA
                              ? this._threeDbl()
                              : this._dbl();
                      }),
                      (c.prototype._zeroDbl = function () {
                        let t; let e; let
                          r;
                        if (this.zOne) {
                          const n = this.x.redSqr();
                          const i = this.y.redSqr();
                          const o = i.redSqr();
                          let a = this.x
                            .redAdd(i)
                            .redSqr()
                            .redISub(n)
                            .redISub(o);
                          a = a.redIAdd(a);
                          const s = n.redAdd(n).redIAdd(n);
                          const f = s
                            .redSqr()
                            .redISub(a)
                            .redISub(a);
                          let u = o.redIAdd(o);
                          (u = (u = u.redIAdd(u)).redIAdd(u)),
                          (t = f),
                          (e = s.redMul(a.redISub(f)).redISub(u)),
                          (r = this.y.redAdd(this.y));
                        } else {
                          const c = this.x.redSqr();
                          const h = this.y.redSqr();
                          const d = h.redSqr();
                          let l = this.x
                            .redAdd(h)
                            .redSqr()
                            .redISub(c)
                            .redISub(d);
                          l = l.redIAdd(l);
                          const p = c.redAdd(c).redIAdd(c);
                          const b = p.redSqr();
                          let v = d.redIAdd(d);
                          (v = (v = v.redIAdd(v)).redIAdd(v)),
                          (t = b.redISub(l).redISub(l)),
                          (e = p.redMul(l.redISub(t)).redISub(v)),
                          (r = (r = this.y.redMul(this.z)).redIAdd(r));
                        }
                        return this.curve.jpoint(t, e, r);
                      }),
                      (c.prototype._threeDbl = function () {
                        let t; let e; let
                          r;
                        if (this.zOne) {
                          const n = this.x.redSqr();
                          const i = this.y.redSqr();
                          const o = i.redSqr();
                          let a = this.x
                            .redAdd(i)
                            .redSqr()
                            .redISub(n)
                            .redISub(o);
                          a = a.redIAdd(a);
                          const s = n
                            .redAdd(n)
                            .redIAdd(n)
                            .redIAdd(this.curve.a);
                          const f = s
                            .redSqr()
                            .redISub(a)
                            .redISub(a);
                          t = f;
                          let u = o.redIAdd(o);
                          (u = (u = u.redIAdd(u)).redIAdd(u)),
                          (e = s.redMul(a.redISub(f)).redISub(u)),
                          (r = this.y.redAdd(this.y));
                        } else {
                          const c = this.z.redSqr();
                          const h = this.y.redSqr();
                          const d = this.x.redMul(h);
                          let l = this.x.redSub(c).redMul(this.x.redAdd(c));
                          l = l.redAdd(l).redIAdd(l);
                          let p = d.redIAdd(d);
                          const b = (p = p.redIAdd(p)).redAdd(p);
                          (t = l.redSqr().redISub(b)),
                          (r = this.y
                            .redAdd(this.z)
                            .redSqr()
                            .redISub(h)
                            .redISub(c));
                          let v = h.redSqr();
                          (v = (v = (v = v.redIAdd(v)).redIAdd(v)).redIAdd(v)),
                          (e = l.redMul(p.redISub(t)).redISub(v));
                        }
                        return this.curve.jpoint(t, e, r);
                      }),
                      (c.prototype._dbl = function () {
                        const t = this.curve.a;
                        const e = this.x;
                        const r = this.y;
                        const n = this.z;
                        const i = n.redSqr().redSqr();
                        const o = e.redSqr();
                        const a = r.redSqr();
                        const s = o
                          .redAdd(o)
                          .redIAdd(o)
                          .redIAdd(t.redMul(i));
                        let f = e.redAdd(e);
                        const u = (f = f.redIAdd(f)).redMul(a);
                        const c = s.redSqr().redISub(u.redAdd(u));
                        const h = u.redISub(c);
                        let d = a.redSqr();
                        d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
                        const l = s.redMul(h).redISub(d);
                        const p = r.redAdd(r).redMul(n);
                        return this.curve.jpoint(c, l, p);
                      }),
                      (c.prototype.trpl = function () {
                        if (!this.curve.zeroA) return this.dbl().add(this);
                        const t = this.x.redSqr();
                        const e = this.y.redSqr();
                        const r = this.z.redSqr();
                        const n = e.redSqr();
                        const i = t.redAdd(t).redIAdd(t);
                        const o = i.redSqr();
                        let a = this.x
                          .redAdd(e)
                          .redSqr()
                          .redISub(t)
                          .redISub(n);
                        const s = (a = (a = (a = a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(
                          o,
                        )).redSqr();
                        let f = n.redIAdd(n);
                        f = (f = (f = f.redIAdd(f)).redIAdd(f)).redIAdd(f);
                        const u = i
                          .redIAdd(a)
                          .redSqr()
                          .redISub(o)
                          .redISub(s)
                          .redISub(f);
                        let c = e.redMul(u);
                        c = (c = c.redIAdd(c)).redIAdd(c);
                        let h = this.x.redMul(s).redISub(c);
                        h = (h = h.redIAdd(h)).redIAdd(h);
                        let d = this.y.redMul(u.redMul(f.redISub(u)).redISub(a.redMul(s)));
                        d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
                        const l = this.z
                          .redAdd(a)
                          .redSqr()
                          .redISub(r)
                          .redISub(s);
                        return this.curve.jpoint(h, d, l);
                      }),
                      (c.prototype.mul = function (t, e) {
                        return (t = new i(t, e)), this.curve._wnafMul(this, t);
                      }),
                      (c.prototype.eq = function (t) {
                        if (t.type === 'affine') return this.eq(t.toJ());
                        if (this === t) return !0;
                        const e = this.z.redSqr();
                        const r = t.z.redSqr();
                        if (
                          this.x
                            .redMul(r)
                            .redISub(t.x.redMul(e))
                            .cmpn(0)
                              !== 0
                        ) return !1;
                        const n = e.redMul(this.z);
                        const i = r.redMul(t.z);
                        return (
                          this.y
                            .redMul(i)
                            .redISub(t.y.redMul(n))
                            .cmpn(0)
                              === 0
                        );
                      }),
                      (c.prototype.eqXToP = function (t) {
                        const e = this.z.redSqr();
                        const r = t.toRed(this.curve.red).redMul(e);
                        if (this.x.cmp(r) === 0) return !0;
                        for (let n = t.clone(), i = this.curve.redN.redMul(e); ;) {
                          if ((n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0)) return !1;
                          if ((r.redIAdd(i), this.x.cmp(r) === 0)) return !0;
                        }
                      }),
                      (c.prototype.inspect = function () {
                        return this.isInfinity()
                          ? '<EC JPoint Infinity>'
                          : `<EC JPoint x: ${
                            this.x.toString(16, 2)
                          } y: ${
                            this.y.toString(16, 2)
                          } z: ${
                            this.z.toString(16, 2)
                          }>`;
                      }),
                      (c.prototype.isInfinity = function () {
                        return this.z.cmpn(0) === 0;
                      });
                    },
                    {
                      418: 418, 431: 431, 432: 432, 467: 467,
                    },
                  ],
                  423: [
                    function (t, e, r) {
                      let n;
                      const i = r;
                      const o = t(453);
                      const a = t(420);
                      const s = t(431).assert;
                      function f(t) {
                        t.type === 'short'
                          ? (this.curve = new a.short(t))
                          : t.type === 'edwards'
                            ? (this.curve = new a.edwards(t))
                            : (this.curve = new a.mont(t)),
                        (this.g = this.curve.g),
                        (this.n = this.curve.n),
                        (this.hash = t.hash),
                        s(this.g.validate(), 'Invalid curve'),
                        s(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
                      }
                      function u(t, e) {
                        Object.defineProperty(i, t, {
                          configurable: !0,
                          enumerable: !0,
                          get() {
                            const r = new f(e);
                            return (
                              Object.defineProperty(i, t, {
                                configurable: !0,
                                enumerable: !0,
                                value: r,
                              }),
                              r
                            );
                          },
                        });
                      }
                      (i.PresetCurve = f),
                      u('p192', {
                        type: 'short',
                        prime: 'p192',
                        p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
                        a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
                        b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
                        n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
                        hash: o.sha256,
                        gRed: !1,
                        g: [
                          '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                          '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
                        ],
                      }),
                      u('p224', {
                        type: 'short',
                        prime: 'p224',
                        p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
                        a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
                        b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
                        n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
                        hash: o.sha256,
                        gRed: !1,
                        g: [
                          'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                          'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
                        ],
                      }),
                      u('p256', {
                        type: 'short',
                        prime: null,
                        p:
                              'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
                        a:
                              'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
                        b:
                              '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
                        n:
                              'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
                        hash: o.sha256,
                        gRed: !1,
                        g: [
                          '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                          '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
                        ],
                      }),
                      u('p384', {
                        type: 'short',
                        prime: null,
                        p:
                              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff',
                        a:
                              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc',
                        b:
                              'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
                        n:
                              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
                        hash: o.sha384,
                        gRed: !1,
                        g: [
                          'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7',
                          '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
                        ],
                      }),
                      u('p521', {
                        type: 'short',
                        prime: null,
                        p:
                              '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff',
                        a:
                              '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc',
                        b:
                              '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
                        n:
                              '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
                        hash: o.sha512,
                        gRed: !1,
                        g: [
                          '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                          '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650',
                        ],
                      }),
                      u('curve25519', {
                        type: 'mont',
                        prime: 'p25519',
                        p:
                              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                        a: '76d06',
                        b: '1',
                        n:
                              '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                        hash: o.sha256,
                        gRed: !1,
                        g: ['9'],
                      }),
                      u('ed25519', {
                        type: 'edwards',
                        prime: 'p25519',
                        p:
                              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
                        a: '-1',
                        c: '1',
                        d:
                              '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
                        n:
                              '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
                        hash: o.sha256,
                        gRed: !1,
                        g: [
                          '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
                          '6666666666666666666666666666666666666666666666666666666666666658',
                        ],
                      });
                      try {
                        n = t(430);
                      } catch (t) {
                        n = void 0;
                      }
                      u('secp256k1', {
                        type: 'short',
                        prime: 'k256',
                        p:
                            'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
                        a: '0',
                        b: '7',
                        n:
                            'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
                        h: '1',
                        hash: o.sha256,
                        beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
                        lambda:
                            '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
                        basis: [
                          {
                            a: '3086d221a7d46bcde86c90e49284eb15',
                            b: '-e4437ed6010e88286f547fa90abfe4c3',
                          },
                          {
                            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                            b: '3086d221a7d46bcde86c90e49284eb15',
                          },
                        ],
                        gRed: !1,
                        g: [
                          '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                          '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                          n,
                        ],
                      });
                    },
                    {
                      420: 420, 430: 430, 431: 431, 453: 453,
                    },
                  ],
                  424: [
                    function (t, e, r) {
                      const n = t(432);
                      const i = t(465);
                      const o = t(431);
                      const a = t(423);
                      const s = t(20);
                      const f = o.assert;
                      const u = t(425);
                      const c = t(426);
                      function h(t) {
                        if (!(this instanceof h)) return new h(t);
                        typeof t === 'string'
                            && (f(Object.prototype.hasOwnProperty.call(a, t), `Unknown curve ${t}`),
                            (t = a[t])),
                        t instanceof a.PresetCurve && (t = { curve: t }),
                        (this.curve = t.curve.curve),
                        (this.n = this.curve.n),
                        (this.nh = this.n.ushrn(1)),
                        (this.g = this.curve.g),
                        (this.g = t.curve.g),
                        this.g.precompute(t.curve.n.bitLength() + 1),
                        (this.hash = t.hash || t.curve.hash);
                      }
                      (e.exports = h),
                      (h.prototype.keyPair = function (t) {
                        return new u(this, t);
                      }),
                      (h.prototype.keyFromPrivate = function (t, e) {
                        return u.fromPrivate(this, t, e);
                      }),
                      (h.prototype.keyFromPublic = function (t, e) {
                        return u.fromPublic(this, t, e);
                      }),
                      (h.prototype.genKeyPair = function (t) {
                        t || (t = {});
                        for (
                          let e = new i({
                              hash: this.hash,
                              pers: t.pers,
                              persEnc: t.persEnc || 'utf8',
                              entropy: t.entropy || s(this.hash.hmacStrength),
                              entropyEnc: (t.entropy && t.entropyEnc) || 'utf8',
                              nonce: this.n.toArray(),
                            }),
                            r = this.n.byteLength(),
                            o = this.n.sub(new n(2));
                          ;

                        ) {
                          const a = new n(e.generate(r));
                          if (!(a.cmp(o) > 0)) return a.iaddn(1), this.keyFromPrivate(a);
                        }
                      }),
                      (h.prototype._truncateToN = function (t, e) {
                        const r = 8 * t.byteLength() - this.n.bitLength();
                        return (
                          r > 0 && (t = t.ushrn(r)),
                          !e && t.cmp(this.n) >= 0 ? t.sub(this.n) : t
                        );
                      }),
                      (h.prototype.sign = function (t, e, r, o) {
                        typeof r === 'object' && ((o = r), (r = null)),
                        o || (o = {}),
                        (e = this.keyFromPrivate(e, r)),
                        (t = this._truncateToN(new n(t, 16)));
                        for (
                          let a = this.n.byteLength(),
                            s = e.getPrivate().toArray('be', a),
                            f = t.toArray('be', a),
                            u = new i({
                              hash: this.hash,
                              entropy: s,
                              nonce: f,
                              pers: o.pers,
                              persEnc: o.persEnc || 'utf8',
                            }),
                            h = this.n.sub(new n(1)),
                            d = 0;
                          ;
                          d++
                        ) {
                          let l = o.k ? o.k(d) : new n(u.generate(this.n.byteLength()));
                          if (!((l = this._truncateToN(l, !0)).cmpn(1) <= 0 || l.cmp(h) >= 0)) {
                            const p = this.g.mul(l);
                            if (!p.isInfinity()) {
                              const b = p.getX();
                              const v = b.umod(this.n);
                              if (v.cmpn(0) !== 0) {
                                let g = l.invm(this.n).mul(v.mul(e.getPrivate()).iadd(t));
                                if ((g = g.umod(this.n)).cmpn(0) !== 0) {
                                  let y = (p.getY().isOdd() ? 1 : 0) | (b.cmp(v) !== 0 ? 2 : 0);
                                  return (
                                    o.canonical
                                          && g.cmp(this.nh) > 0
                                          && ((g = this.n.sub(g)), (y ^= 1)),
                                    new c({ r: v, s: g, recoveryParam: y })
                                  );
                                }
                              }
                            }
                          }
                        }
                      }),
                      (h.prototype.verify = function (t, e, r, i) {
                        (t = this._truncateToN(new n(t, 16))), (r = this.keyFromPublic(r, i));
                        const o = (e = new c(e, 'hex')).r;
                        const a = e.s;
                        if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
                        if (a.cmpn(1) < 0 || a.cmp(this.n) >= 0) return !1;
                        let s;
                        const f = a.invm(this.n);
                        const u = f.mul(t).umod(this.n);
                        const h = f.mul(o).umod(this.n);
                        return this.curve._maxwellTrick
                          ? !(s = this.g.jmulAdd(u, r.getPublic(), h)).isInfinity()
                                  && s.eqXToP(o)
                          : !(s = this.g.mulAdd(u, r.getPublic(), h)).isInfinity()
                                  && s
                                    .getX()
                                    .umod(this.n)
                                    .cmp(o)
                                    === 0;
                      }),
                      (h.prototype.recoverPubKey = function (t, e, r, i) {
                        f((3 & r) === r, 'The recovery param is more than two bits'),
                        (e = new c(e, i));
                        const o = this.n;
                        const a = new n(t);
                        let s = e.r;
                        const u = e.s;
                        const h = 1 & r;
                        const d = r >> 1;
                        if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && d) throw new Error('Unable to find sencond key candinate');
                        s = d
                          ? this.curve.pointFromX(s.add(this.curve.n), h)
                          : this.curve.pointFromX(s, h);
                        const l = e.r.invm(o);
                        const p = o
                          .sub(a)
                          .mul(l)
                          .umod(o);
                        const b = u.mul(l).umod(o);
                        return this.g.mulAdd(p, s, b);
                      }),
                      (h.prototype.getKeyRecoveryParam = function (t, e, r, n) {
                        if ((e = new c(e, n)).recoveryParam !== null) return e.recoveryParam;
                        for (let i = 0; i < 4; i++) {
                          var o;
                          try {
                            o = this.recoverPubKey(t, e, i);
                          } catch (t) {
                            continue;
                          }
                          if (o.eq(r)) return i;
                        }
                        throw new Error('Unable to find valid recovery factor');
                      });
                    },
                    {
                      20: 20, 423: 423, 425: 425, 426: 426, 431: 431, 432: 432, 465: 465,
                    },
                  ],
                  425: [
                    function (t, e, r) {
                      const n = t(432);
                      const i = t(431).assert;
                      function o(t, e) {
                        (this.ec = t),
                        (this.priv = null),
                        (this.pub = null),
                        e.priv && this._importPrivate(e.priv, e.privEnc),
                        e.pub && this._importPublic(e.pub, e.pubEnc);
                      }
                      (e.exports = o),
                      (o.fromPublic = function (t, e, r) {
                        return e instanceof o ? e : new o(t, { pub: e, pubEnc: r });
                      }),
                      (o.fromPrivate = function (t, e, r) {
                        return e instanceof o ? e : new o(t, { priv: e, privEnc: r });
                      }),
                      (o.prototype.validate = function () {
                        const t = this.getPublic();
                        return t.isInfinity()
                          ? { result: !1, reason: 'Invalid public key' }
                          : t.validate()
                            ? t.mul(this.ec.curve.n).isInfinity()
                              ? { result: !0, reason: null }
                              : { result: !1, reason: 'Public key * N != O' }
                            : { result: !1, reason: 'Public key is not a point' };
                      }),
                      (o.prototype.getPublic = function (t, e) {
                        return (
                          typeof t === 'string' && ((e = t), (t = null)),
                          this.pub || (this.pub = this.ec.g.mul(this.priv)),
                          e ? this.pub.encode(e, t) : this.pub
                        );
                      }),
                      (o.prototype.getPrivate = function (t) {
                        return t === 'hex' ? this.priv.toString(16, 2) : this.priv;
                      }),
                      (o.prototype._importPrivate = function (t, e) {
                        (this.priv = new n(t, e || 16)),
                        (this.priv = this.priv.umod(this.ec.curve.n));
                      }),
                      (o.prototype._importPublic = function (t, e) {
                        if (t.x || t.y) {
                          return (
                            this.ec.curve.type === 'mont'
                              ? i(t.x, 'Need x coordinate')
                              : (this.ec.curve.type !== 'short'
                                      && this.ec.curve.type !== 'edwards')
                                    || i(t.x && t.y, 'Need both x and y coordinate'),
                            void (this.pub = this.ec.curve.point(t.x, t.y))
                          );
                        }
                        this.pub = this.ec.curve.decodePoint(t, e);
                      }),
                      (o.prototype.derive = function (t) {
                        return (
                          t.validate() || i(t.validate(), 'public point not validated'),
                          t.mul(this.priv).getX()
                        );
                      }),
                      (o.prototype.sign = function (t, e, r) {
                        return this.ec.sign(t, this, e, r);
                      }),
                      (o.prototype.verify = function (t, e) {
                        return this.ec.verify(t, e, this);
                      }),
                      (o.prototype.inspect = function () {
                        return (
                          `<Key priv: ${
                            this.priv && this.priv.toString(16, 2)
                          } pub: ${
                            this.pub && this.pub.inspect()
                          } >`
                        );
                      });
                    },
                    { 431: 431, 432: 432 },
                  ],
                  426: [
                    function (t, e, r) {
                      const n = t(432);
                      const i = t(431);
                      const o = i.assert;
                      function a(t, e) {
                        if (t instanceof a) return t;
                        this._importDER(t, e)
                            || (o(t.r && t.s, 'Signature without r or s'),
                            (this.r = new n(t.r, 16)),
                            (this.s = new n(t.s, 16)),
                            void 0 === t.recoveryParam
                              ? (this.recoveryParam = null)
                              : (this.recoveryParam = t.recoveryParam));
                      }
                      function s() {
                        this.place = 0;
                      }
                      function f(t, e) {
                        const r = t[e.place++];
                        if (!(128 & r)) return r;
                        const n = 15 & r;
                        if (n === 0 || n > 4) return !1;
                        for (var i = 0, o = 0, a = e.place; o < n; o++, a++) (i <<= 8), (i |= t[a]), (i >>>= 0);
                        return !(i <= 127) && ((e.place = a), i);
                      }
                      function u(t) {
                        for (var e = 0, r = t.length - 1; !t[e] && !(128 & t[e + 1]) && e < r;) e++;
                        return e === 0 ? t : t.slice(e);
                      }
                      function c(t, e) {
                        if (e < 128) t.push(e);
                        else {
                          let r = 1 + ((Math.log(e) / Math.LN2) >>> 3);
                          for (t.push(128 | r); --r;) t.push((e >>> (r << 3)) & 255);
                          t.push(e);
                        }
                      }
                      (e.exports = a),
                      (a.prototype._importDER = function (t, e) {
                        t = i.toArray(t, e);
                        const r = new s();
                        if (t[r.place++] !== 48) return !1;
                        const o = f(t, r);
                        if (!1 === o) return !1;
                        if (o + r.place !== t.length) return !1;
                        if (t[r.place++] !== 2) return !1;
                        const a = f(t, r);
                        if (!1 === a) return !1;
                        let u = t.slice(r.place, a + r.place);
                        if (((r.place += a), t[r.place++] !== 2)) return !1;
                        const c = f(t, r);
                        if (!1 === c) return !1;
                        if (t.length !== c + r.place) return !1;
                        let h = t.slice(r.place, c + r.place);
                        if (u[0] === 0) {
                          if (!(128 & u[1])) return !1;
                          u = u.slice(1);
                        }
                        if (h[0] === 0) {
                          if (!(128 & h[1])) return !1;
                          h = h.slice(1);
                        }
                        return (
                          (this.r = new n(u)),
                          (this.s = new n(h)),
                          (this.recoveryParam = null),
                          !0
                        );
                      }),
                      (a.prototype.toDER = function (t) {
                        let e = this.r.toArray();
                        let r = this.s.toArray();
                        for (
                          128 & e[0] && (e = [0].concat(e)),
                          128 & r[0] && (r = [0].concat(r)),
                          e = u(e),
                          r = u(r);
                          !(r[0] || 128 & r[1]);

                        ) r = r.slice(1);
                        let n = [2];
                        c(n, e.length), (n = n.concat(e)).push(2), c(n, r.length);
                        const o = n.concat(r);
                        let a = [48];
                        return c(a, o.length), (a = a.concat(o)), i.encode(a, t);
                      });
                    },
                    { 431: 431, 432: 432 },
                  ],
                  427: [
                    function (t, e, r) {
                      const n = t(453);
                      const i = t(423);
                      const o = t(431);
                      const a = o.assert;
                      const s = o.parseBytes;
                      const f = t(428);
                      const u = t(429);
                      function c(t) {
                        if (
                          (a(t === 'ed25519', 'only tested with ed25519 so far'),
                          !(this instanceof c))
                        ) return new c(t);
                        (t = i[t].curve),
                        (this.curve = t),
                        (this.g = t.g),
                        this.g.precompute(t.n.bitLength() + 1),
                        (this.pointClass = t.point().constructor),
                        (this.encodingLength = Math.ceil(t.n.bitLength() / 8)),
                        (this.hash = n.sha512);
                      }
                      (e.exports = c),
                      (c.prototype.sign = function (t, e) {
                        t = s(t);
                        const r = this.keyFromSecret(e);
                        const n = this.hashInt(r.messagePrefix(), t);
                        const i = this.g.mul(n);
                        const o = this.encodePoint(i);
                        const a = this.hashInt(o, r.pubBytes(), t).mul(r.priv());
                        const f = n.add(a).umod(this.curve.n);
                        return this.makeSignature({ R: i, S: f, Rencoded: o });
                      }),
                      (c.prototype.verify = function (t, e, r) {
                        (t = s(t)), (e = this.makeSignature(e));
                        const n = this.keyFromPublic(r);
                        const i = this.hashInt(e.Rencoded(), n.pubBytes(), t);
                        const o = this.g.mul(e.S());
                        return e
                          .R()
                          .add(n.pub().mul(i))
                          .eq(o);
                      }),
                      (c.prototype.hashInt = function () {
                        for (var t = this.hash(), e = 0; e < arguments.length; e++) t.update(arguments[e]);
                        return o.intFromLE(t.digest()).umod(this.curve.n);
                      }),
                      (c.prototype.keyFromPublic = function (t) {
                        return f.fromPublic(this, t);
                      }),
                      (c.prototype.keyFromSecret = function (t) {
                        return f.fromSecret(this, t);
                      }),
                      (c.prototype.makeSignature = function (t) {
                        return t instanceof u ? t : new u(this, t);
                      }),
                      (c.prototype.encodePoint = function (t) {
                        const e = t.getY().toArray('le', this.encodingLength);
                        return (e[this.encodingLength - 1] |= t.getX().isOdd() ? 128 : 0), e;
                      }),
                      (c.prototype.decodePoint = function (t) {
                        const e = (t = o.parseBytes(t)).length - 1;
                        const r = t.slice(0, e).concat(-129 & t[e]);
                        const n = (128 & t[e]) != 0;
                        const i = o.intFromLE(r);
                        return this.curve.pointFromY(i, n);
                      }),
                      (c.prototype.encodeInt = function (t) {
                        return t.toArray('le', this.encodingLength);
                      }),
                      (c.prototype.decodeInt = function (t) {
                        return o.intFromLE(t);
                      }),
                      (c.prototype.isPoint = function (t) {
                        return t instanceof this.pointClass;
                      });
                    },
                    {
                      423: 423, 428: 428, 429: 429, 431: 431, 453: 453,
                    },
                  ],
                  428: [
                    function (t, e, r) {
                      const n = t(431);
                      const i = n.assert;
                      const o = n.parseBytes;
                      const a = n.cachedProperty;
                      function s(t, e) {
                        (this.eddsa = t),
                        (this._secret = o(e.secret)),
                        t.isPoint(e.pub) ? (this._pub = e.pub) : (this._pubBytes = o(e.pub));
                      }
                      (s.fromPublic = function (t, e) {
                        return e instanceof s ? e : new s(t, { pub: e });
                      }),
                      (s.fromSecret = function (t, e) {
                        return e instanceof s ? e : new s(t, { secret: e });
                      }),
                      (s.prototype.secret = function () {
                        return this._secret;
                      }),
                      a(s, 'pubBytes', function () {
                        return this.eddsa.encodePoint(this.pub());
                      }),
                      a(s, 'pub', function () {
                        return this._pubBytes
                          ? this.eddsa.decodePoint(this._pubBytes)
                          : this.eddsa.g.mul(this.priv());
                      }),
                      a(s, 'privBytes', function () {
                        const t = this.eddsa;
                        const e = this.hash();
                        const r = t.encodingLength - 1;
                        const n = e.slice(0, t.encodingLength);
                        return (n[0] &= 248), (n[r] &= 127), (n[r] |= 64), n;
                      }),
                      a(s, 'priv', function () {
                        return this.eddsa.decodeInt(this.privBytes());
                      }),
                      a(s, 'hash', function () {
                        return this.eddsa
                          .hash()
                          .update(this.secret())
                          .digest();
                      }),
                      a(s, 'messagePrefix', function () {
                        return this.hash().slice(this.eddsa.encodingLength);
                      }),
                      (s.prototype.sign = function (t) {
                        return (
                          i(this._secret, 'KeyPair can only verify'), this.eddsa.sign(t, this)
                        );
                      }),
                      (s.prototype.verify = function (t, e) {
                        return this.eddsa.verify(t, e, this);
                      }),
                      (s.prototype.getSecret = function (t) {
                        return (
                          i(this._secret, 'KeyPair is public only'), n.encode(this.secret(), t)
                        );
                      }),
                      (s.prototype.getPublic = function (t) {
                        return n.encode(this.pubBytes(), t);
                      }),
                      (e.exports = s);
                    },
                    { 431: 431 },
                  ],
                  429: [
                    function (t, e, r) {
                      const n = t(432);
                      const i = t(431);
                      const o = i.assert;
                      const a = i.cachedProperty;
                      const s = i.parseBytes;
                      function f(t, e) {
                        (this.eddsa = t),
                        typeof e !== 'object' && (e = s(e)),
                        Array.isArray(e)
                              && (e = {
                                R: e.slice(0, t.encodingLength),
                                S: e.slice(t.encodingLength),
                              }),
                        o(e.R && e.S, 'Signature without R or S'),
                        t.isPoint(e.R) && (this._R = e.R),
                        e.S instanceof n && (this._S = e.S),
                        (this._Rencoded = Array.isArray(e.R) ? e.R : e.Rencoded),
                        (this._Sencoded = Array.isArray(e.S) ? e.S : e.Sencoded);
                      }
                      a(f, 'S', function () {
                        return this.eddsa.decodeInt(this.Sencoded());
                      }),
                      a(f, 'R', function () {
                        return this.eddsa.decodePoint(this.Rencoded());
                      }),
                      a(f, 'Rencoded', function () {
                        return this.eddsa.encodePoint(this.R());
                      }),
                      a(f, 'Sencoded', function () {
                        return this.eddsa.encodeInt(this.S());
                      }),
                      (f.prototype.toBytes = function () {
                        return this.Rencoded().concat(this.Sencoded());
                      }),
                      (f.prototype.toHex = function () {
                        return i.encode(this.toBytes(), 'hex').toUpperCase();
                      }),
                      (e.exports = f);
                    },
                    { 431: 431, 432: 432 },
                  ],
                  430: [
                    function (t, e, r) {
                      e.exports = {
                        doubles: {
                          step: 4,
                          points: [
                            [
                              'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                              'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
                            ],
                            [
                              '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                              '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
                            ],
                            [
                              '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                              'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
                            ],
                            [
                              '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                              '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
                            ],
                            [
                              '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                              '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
                            ],
                            [
                              '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                              '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
                            ],
                            [
                              'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                              '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
                            ],
                            [
                              '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                              'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
                            ],
                            [
                              'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                              '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
                            ],
                            [
                              'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                              'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
                            ],
                            [
                              'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                              '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
                            ],
                            [
                              '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                              '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
                            ],
                            [
                              '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                              '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
                            ],
                            [
                              '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                              '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
                            ],
                            [
                              '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                              '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
                            ],
                            [
                              '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                              '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
                            ],
                            [
                              '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                              '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
                            ],
                            [
                              '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                              '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
                            ],
                            [
                              '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                              'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
                            ],
                            [
                              'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                              '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
                            ],
                            [
                              'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                              '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
                            ],
                            [
                              '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                              '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
                            ],
                            [
                              '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                              '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
                            ],
                            [
                              'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                              '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
                            ],
                            [
                              '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                              'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
                            ],
                            [
                              'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                              '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
                            ],
                            [
                              'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                              'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
                            ],
                            [
                              'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                              '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
                            ],
                            [
                              'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                              'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
                            ],
                            [
                              'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                              '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
                            ],
                            [
                              '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                              'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
                            ],
                            [
                              '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                              '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
                            ],
                            [
                              'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                              '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
                            ],
                            [
                              '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                              'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
                            ],
                            [
                              'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                              '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
                            ],
                            [
                              'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                              '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
                            ],
                            [
                              'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                              'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
                            ],
                            [
                              '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                              '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
                            ],
                            [
                              '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                              '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
                            ],
                            [
                              '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                              'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
                            ],
                            [
                              '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                              '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
                            ],
                            [
                              'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                              '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
                            ],
                            [
                              '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                              '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
                            ],
                            [
                              '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                              'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
                            ],
                            [
                              '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                              '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
                            ],
                            [
                              'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                              '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
                            ],
                            [
                              '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                              'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
                            ],
                            [
                              'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                              'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
                            ],
                            [
                              'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                              '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
                            ],
                            [
                              '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                              'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
                            ],
                            [
                              '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                              'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
                            ],
                            [
                              'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                              '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
                            ],
                            [
                              'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                              '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
                            ],
                            [
                              'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                              '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
                            ],
                            [
                              '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                              'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
                            ],
                            [
                              '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                              '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
                            ],
                            [
                              'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                              'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
                            ],
                            [
                              '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                              'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
                            ],
                            [
                              '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                              '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
                            ],
                            [
                              '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                              '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
                            ],
                            [
                              'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                              'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
                            ],
                            [
                              '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                              '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
                            ],
                            [
                              '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                              '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
                            ],
                            [
                              'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                              '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
                            ],
                            [
                              'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                              'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
                            ],
                          ],
                        },
                        naf: {
                          wnd: 7,
                          points: [
                            [
                              'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                              '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
                            ],
                            [
                              '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                              'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
                            ],
                            [
                              '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                              '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
                            ],
                            [
                              'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                              'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
                            ],
                            [
                              '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                              'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
                            ],
                            [
                              'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                              'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
                            ],
                            [
                              'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                              '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
                            ],
                            [
                              'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                              '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
                            ],
                            [
                              '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                              '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
                            ],
                            [
                              '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                              '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
                            ],
                            [
                              '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                              '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
                            ],
                            [
                              '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                              '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
                            ],
                            [
                              'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                              'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
                            ],
                            [
                              'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                              '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
                            ],
                            [
                              '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                              'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
                            ],
                            [
                              '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                              'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
                            ],
                            [
                              '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                              '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
                            ],
                            [
                              '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                              '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
                            ],
                            [
                              '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                              '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
                            ],
                            [
                              '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                              'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
                            ],
                            [
                              'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                              'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
                            ],
                            [
                              '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                              '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
                            ],
                            [
                              '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                              '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
                            ],
                            [
                              'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                              'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
                            ],
                            [
                              '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                              '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
                            ],
                            [
                              'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                              'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
                            ],
                            [
                              'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                              'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
                            ],
                            [
                              '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                              '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
                            ],
                            [
                              '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                              '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
                            ],
                            [
                              '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                              '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
                            ],
                            [
                              'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                              '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
                            ],
                            [
                              '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                              '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
                            ],
                            [
                              'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                              '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
                            ],
                            [
                              '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                              'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
                            ],
                            [
                              '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                              'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
                            ],
                            [
                              'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                              'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
                            ],
                            [
                              '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                              '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
                            ],
                            [
                              '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                              'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
                            ],
                            [
                              'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                              'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
                            ],
                            [
                              '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                              '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
                            ],
                            [
                              '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                              'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
                            ],
                            [
                              '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                              '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
                            ],
                            [
                              '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                              'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
                            ],
                            [
                              'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                              '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
                            ],
                            [
                              '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                              '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
                            ],
                            [
                              '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                              'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
                            ],
                            [
                              '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                              'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
                            ],
                            [
                              'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                              'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
                            ],
                            [
                              'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                              'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
                            ],
                            [
                              '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                              '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
                            ],
                            [
                              '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                              '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
                            ],
                            [
                              'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                              '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
                            ],
                            [
                              'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                              'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
                            ],
                            [
                              '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                              '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
                            ],
                            [
                              '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                              '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
                            ],
                            [
                              'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                              '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
                            ],
                            [
                              '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                              '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
                            ],
                            [
                              'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                              'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
                            ],
                            [
                              '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                              'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
                            ],
                            [
                              '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                              '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
                            ],
                            [
                              'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                              '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
                            ],
                            [
                              'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                              '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
                            ],
                            [
                              '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                              '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
                            ],
                            [
                              '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                              '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
                            ],
                            [
                              '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                              'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
                            ],
                            [
                              '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                              'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
                            ],
                            [
                              '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                              '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
                            ],
                            [
                              '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                              '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
                            ],
                            [
                              '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                              '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
                            ],
                            [
                              '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                              'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
                            ],
                            [
                              'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                              'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
                            ],
                            [
                              '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                              'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
                            ],
                            [
                              'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                              '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
                            ],
                            [
                              'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                              '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
                            ],
                            [
                              'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                              '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
                            ],
                            [
                              'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                              '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
                            ],
                            [
                              '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                              'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
                            ],
                            [
                              '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                              '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
                            ],
                            [
                              '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                              'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
                            ],
                            [
                              'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                              'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
                            ],
                            [
                              'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                              '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
                            ],
                            [
                              'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                              'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
                            ],
                            [
                              'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                              '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
                            ],
                            [
                              '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                              '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
                            ],
                            [
                              'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                              '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
                            ],
                            [
                              'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                              '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
                            ],
                            [
                              '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                              '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
                            ],
                            [
                              '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                              'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
                            ],
                            [
                              'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                              '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
                            ],
                            [
                              'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                              '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
                            ],
                            [
                              'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                              '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
                            ],
                            [
                              '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                              '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
                            ],
                            [
                              'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                              'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
                            ],
                            [
                              '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                              'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
                            ],
                            [
                              'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                              'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
                            ],
                            [
                              'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                              '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
                            ],
                            [
                              '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                              'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
                            ],
                            [
                              'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                              '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
                            ],
                            [
                              'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                              '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
                            ],
                            [
                              'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                              '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
                            ],
                            [
                              '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                              'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
                            ],
                            [
                              '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                              'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
                            ],
                            [
                              'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                              '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
                            ],
                            [
                              '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                              'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
                            ],
                            [
                              '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                              '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
                            ],
                            [
                              '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                              'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
                            ],
                            [
                              'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                              'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
                            ],
                            [
                              '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                              'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
                            ],
                            [
                              '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                              '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
                            ],
                            [
                              '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                              'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
                            ],
                            [
                              '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                              '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
                            ],
                            [
                              'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                              'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
                            ],
                            [
                              '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                              '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
                            ],
                            [
                              'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                              '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
                            ],
                            [
                              '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                              '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
                            ],
                            [
                              'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                              'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
                            ],
                            [
                              'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                              '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
                            ],
                            [
                              'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                              'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
                            ],
                            [
                              '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                              'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
                            ],
                            [
                              '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                              '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
                            ],
                            [
                              '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                              'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
                            ],
                            [
                              '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                              '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
                            ],
                            [
                              '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                              '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
                            ],
                            [
                              '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                              'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
                            ],
                            [
                              '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                              '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
                            ],
                            [
                              '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                              '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
                            ],
                            [
                              '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                              '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
                            ],
                          ],
                        },
                      };
                    },
                    {},
                  ],
                  431: [
                    function (t, e, r) {
                      const n = r;
                      const i = t(432);
                      const o = t(473);
                      const a = t(474);
                      (n.assert = o),
                      (n.toArray = a.toArray),
                      (n.zero2 = a.zero2),
                      (n.toHex = a.toHex),
                      (n.encode = a.encode),
                      (n.getNAF = function (t, e, r) {
                        const n = new Array(Math.max(t.bitLength(), r) + 1);
                        n.fill(0);
                        for (let i = 1 << (e + 1), o = t.clone(), a = 0; a < n.length; a++) {
                          var s;
                          const f = o.andln(i - 1);
                          o.isOdd()
                            ? ((s = f > (i >> 1) - 1 ? (i >> 1) - f : f), o.isubn(s))
                            : (s = 0),
                          (n[a] = s),
                          o.iushrn(1);
                        }
                        return n;
                      }),
                      (n.getJSF = function (t, e) {
                        const r = [[], []];
                        (t = t.clone()), (e = e.clone());
                        for (var n, i = 0, o = 0; t.cmpn(-i) > 0 || e.cmpn(-o) > 0;) {
                          var a;
                          var s;
                          let f = (t.andln(3) + i) & 3;
                          let u = (e.andln(3) + o) & 3;
                          f === 3 && (f = -1),
                          u === 3 && (u = -1),
                          (a = (1 & f) == 0
                            ? 0
                            : ((n = (t.andln(7) + i) & 7) !== 3 && n !== 5) || u !== 2
                              ? f
                              : -f),
                          r[0].push(a),
                          (s = (1 & u) == 0
                            ? 0
                            : ((n = (e.andln(7) + o) & 7) !== 3 && n !== 5) || f !== 2
                              ? u
                              : -u),
                          r[1].push(s),
                          2 * i === a + 1 && (i = 1 - i),
                          2 * o === s + 1 && (o = 1 - o),
                          t.iushrn(1),
                          e.iushrn(1);
                        }
                        return r;
                      }),
                      (n.cachedProperty = function (t, e, r) {
                        const n = `_${e}`;
                        t.prototype[e] = function () {
                          return void 0 !== this[n] ? this[n] : (this[n] = r.call(this));
                        };
                      }),
                      (n.parseBytes = function (t) {
                        return typeof t === 'string' ? n.toArray(t, 'hex') : t;
                      }),
                      (n.intFromLE = function (t) {
                        return new i(t, 'hex', 'le');
                      });
                    },
                    { 432: 432, 473: 473, 474: 474 },
                  ],
                  432: [
                    function (t, e, r) {
                      arguments[4][16][0].apply(r, arguments);
                    },
                    { 16: 16, 21: 21 },
                  ],
                  433: [
                    function (t, e, r) {
                      e.exports = {
                        _from: 'elliptic@^6.5.3',
                        _id: 'elliptic@6.5.4',
                        _inBundle: !1,
                        _integrity:
                            'sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==',
                        _location: '/elliptic',
                        _phantomChildren: {},
                        _requested: {
                          type: 'range',
                          registry: !0,
                          raw: 'elliptic@^6.5.3',
                          name: 'elliptic',
                          escapedName: 'elliptic',
                          rawSpec: '^6.5.3',
                          saveSpec: null,
                          fetchSpec: '^6.5.3',
                        },
                        _requiredBy: ['/browserify-sign', '/create-ecdh'],
                        _resolved: 'https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz',
                        _shasum: 'da37cebd31e79a1367e941b592ed1fbebd58abbb',
                        _spec: 'elliptic@^6.5.3',
                        _where:
                            '/opt/TeamCityAgent/work/31c80343e72f0995/media-source-media-provider/node_modules/browserify-sign',
                        author: { name: 'Fedor Indutny', email: 'fedor@indutny.com' },
                        bugs: { url: 'https://github.com/indutny/elliptic/issues' },
                        bundleDependencies: !1,
                        dependencies: {
                          'bn.js': '^4.11.9',
                          brorand: '^1.1.0',
                          'hash.js': '^1.0.0',
                          'hmac-drbg': '^1.0.1',
                          inherits: '^2.0.4',
                          'minimalistic-assert': '^1.0.1',
                          'minimalistic-crypto-utils': '^1.0.1',
                        },
                        deprecated: !1,
                        description: 'EC cryptography',
                        devDependencies: {
                          brfs: '^2.0.2',
                          coveralls: '^3.1.0',
                          eslint: '^7.6.0',
                          grunt: '^1.2.1',
                          'grunt-browserify': '^5.3.0',
                          'grunt-cli': '^1.3.2',
                          'grunt-contrib-connect': '^3.0.0',
                          'grunt-contrib-copy': '^1.0.0',
                          'grunt-contrib-uglify': '^5.0.0',
                          'grunt-mocha-istanbul': '^5.0.2',
                          'grunt-saucelabs': '^9.0.1',
                          istanbul: '^0.4.5',
                          mocha: '^8.0.1',
                        },
                        files: ['lib'],
                        homepage: 'https://github.com/indutny/elliptic',
                        keywords: ['EC', 'Elliptic', 'curve', 'Cryptography'],
                        license: 'MIT',
                        main: 'lib/elliptic.js',
                        name: 'elliptic',
                        repository: {
                          type: 'git',
                          url: 'git+ssh://git@github.com/indutny/elliptic.git',
                        },
                        scripts: {
                          lint: 'eslint lib test',
                          'lint:fix': 'npm run lint -- --fix',
                          test: 'npm run lint && npm run unit',
                          unit: 'istanbul test _mocha --reporter=spec test/index.js',
                          version: 'grunt dist && git add dist/',
                        },
                        version: '6.5.4',
                      };
                    },
                    {},
                  ],
                  434: [
                    function (t, e, r) {
                      function n() {
                        (this._events = this._events || {}),
                        (this._maxListeners = this._maxListeners || void 0);
                      }
                      function i(t) {
                        return typeof t === 'function';
                      }
                      function o(t) {
                        return typeof t === 'object' && t !== null;
                      }
                      function a(t) {
                        return void 0 === t;
                      }
                      (e.exports = n),
                      (n.EventEmitter = n),
                      (n.prototype._events = void 0),
                      (n.prototype._maxListeners = void 0),
                      (n.defaultMaxListeners = 10),
                      (n.prototype.setMaxListeners = function (t) {
                        if (typeof t !== 'number' || t < 0 || isNaN(t)) throw TypeError('n must be a positive number');
                        return (this._maxListeners = t), this;
                      }),
                      (n.prototype.emit = function (t) {
                        let e; let r; let n; let s; let f; let
                          u;
                        if (
                          (this._events || (this._events = {}),
                          t === 'error'
                                && (!this._events.error
                                  || (o(this._events.error) && !this._events.error.length)))
                        ) {
                          if ((e = arguments[1]) instanceof Error) throw e;
                          const c = new Error(`Uncaught, unspecified "error" event. (${e})`);
                          throw ((c.context = e), c);
                        }
                        if (a((r = this._events[t]))) return !1;
                        if (i(r)) {
                          switch (arguments.length) {
                            case 1:
                              r.call(this);
                              break;
                            case 2:
                              r.call(this, arguments[1]);
                              break;
                            case 3:
                              r.call(this, arguments[1], arguments[2]);
                              break;
                            default:
                              (s = Array.prototype.slice.call(arguments, 1)), r.apply(this, s);
                          }
                        } else if (o(r)) {
                          for (
                            s = Array.prototype.slice.call(arguments, 1),
                            n = (u = r.slice()).length,
                            f = 0;
                            f < n;
                            f++
                          ) u[f].apply(this, s);
                        }
                        return !0;
                      }),
                      (n.prototype.addListener = function (t, e) {
                        let r;
                        if (!i(e)) throw TypeError('listener must be a function');
                        return (
                          this._events || (this._events = {}),
                          this._events.newListener
                                && this.emit('newListener', t, i(e.listener) ? e.listener : e),
                          this._events[t]
                            ? o(this._events[t])
                              ? this._events[t].push(e)
                              : (this._events[t] = [this._events[t], e])
                            : (this._events[t] = e),
                          o(this._events[t])
                                && !this._events[t].warned
                                && (r = a(this._maxListeners)
                                  ? n.defaultMaxListeners
                                  : this._maxListeners)
                                && r > 0
                                && this._events[t].length > r
                                && ((this._events[t].warned = !0), console.trace),
                          this
                        );
                      }),
                      (n.prototype.on = n.prototype.addListener),
                      (n.prototype.once = function (t, e) {
                        if (!i(e)) throw TypeError('listener must be a function');
                        let r = !1;
                        function n() {
                          this.removeListener(t, n), r || ((r = !0), e.apply(this, arguments));
                        }
                        return (n.listener = e), this.on(t, n), this;
                      }),
                      (n.prototype.removeListener = function (t, e) {
                        let r; let n; let a; let
                          s;
                        if (!i(e)) throw TypeError('listener must be a function');
                        if (!this._events || !this._events[t]) return this;
                        if (
                          ((a = (r = this._events[t]).length),
                          (n = -1),
                          r === e || (i(r.listener) && r.listener === e))
                        ) {
                          delete this._events[t],
                          this._events.removeListener && this.emit('removeListener', t, e);
                        } else if (o(r)) {
                          for (s = a; s-- > 0;) {
                            if (r[s] === e || (r[s].listener && r[s].listener === e)) {
                              n = s;
                              break;
                            }
                          }
                          if (n < 0) return this;
                          r.length === 1
                            ? ((r.length = 0), delete this._events[t])
                            : r.splice(n, 1),
                          this._events.removeListener && this.emit('removeListener', t, e);
                        }
                        return this;
                      }),
                      (n.prototype.removeAllListeners = function (t) {
                        let e; let
                          r;
                        if (!this._events) return this;
                        if (!this._events.removeListener) {
                          return (
                            arguments.length === 0
                              ? (this._events = {})
                              : this._events[t] && delete this._events[t],
                            this
                          );
                        }
                        if (arguments.length === 0) {
                          for (e in this._events) e !== 'removeListener' && this.removeAllListeners(e);
                          return (
                            this.removeAllListeners('removeListener'), (this._events = {}), this
                          );
                        }
                        if (i((r = this._events[t]))) this.removeListener(t, r);
                        else if (r) for (; r.length;) this.removeListener(t, r[r.length - 1]);
                        return delete this._events[t], this;
                      }),
                      (n.prototype.listeners = function (t) {
                        return this._events && this._events[t]
                          ? i(this._events[t])
                            ? [this._events[t]]
                            : this._events[t].slice()
                          : [];
                      }),
                      (n.prototype.listenerCount = function (t) {
                        if (this._events) {
                          const e = this._events[t];
                          if (i(e)) return 1;
                          if (e) return e.length;
                        }
                        return 0;
                      }),
                      (n.listenerCount = function (t, e) {
                        return t.listenerCount(e);
                      });
                    },
                    {},
                  ],
                  435: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      const i = t(470);
                      e.exports = function (t, e, r, o) {
                        if (
                          (n.isBuffer(t) || (t = n.from(t, 'binary')),
                          e && (n.isBuffer(e) || (e = n.from(e, 'binary')), e.length !== 8))
                        ) throw new RangeError('salt should be Buffer with 8 byte length');
                        for (
                          var a = r / 8, s = n.alloc(a), f = n.alloc(o || 0), u = n.alloc(0);
                          a > 0 || o > 0;

                        ) {
                          const c = new i();
                          c.update(u), c.update(t), e && c.update(e), (u = c.digest());
                          let h = 0;
                          if (a > 0) {
                            const d = s.length - a;
                            (h = Math.min(a, u.length)), u.copy(s, d, 0, h), (a -= h);
                          }
                          if (h < u.length && o > 0) {
                            const l = f.length - o;
                            const p = Math.min(o, u.length - h);
                            u.copy(f, l, h, h + p), (o -= p);
                          }
                        }
                        return u.fill(0), { key: s, iv: f };
                      };
                    },
                    { 470: 470, 514: 514 },
                  ],
                  436: [
                    function (t, e, r) {
                      const n = t(452).Buffer;
                      const i = t(451).Transform;
                      function o(t) {
                        i.call(this),
                        (this._block = n.allocUnsafe(t)),
                        (this._blockSize = t),
                        (this._blockOffset = 0),
                        (this._length = [0, 0, 0, 0]),
                        (this._finalized = !1);
                      }
                      t(467)(o, i),
                      (o.prototype._transform = function (t, e, r) {
                        let n = null;
                        try {
                          this.update(t, e);
                        } catch (t) {
                          n = t;
                        }
                        r(n);
                      }),
                      (o.prototype._flush = function (t) {
                        let e = null;
                        try {
                          this.push(this.digest());
                        } catch (t) {
                          e = t;
                        }
                        t(e);
                      }),
                      (o.prototype.update = function (t, e) {
                        if (
                          ((function (t, e) {
                            if (!n.isBuffer(t) && typeof t !== 'string') throw new TypeError(`${e} must be a string or a buffer`);
                          }(t, 'Data')),
                          this._finalized)
                        ) throw new Error('Digest already called');
                        n.isBuffer(t) || (t = n.from(t, e));
                        for (
                          var r = this._block, i = 0;
                          this._blockOffset + t.length - i >= this._blockSize;

                        ) {
                          for (let o = this._blockOffset; o < this._blockSize;) r[o++] = t[i++];
                          this._update(), (this._blockOffset = 0);
                        }
                        for (; i < t.length;) r[this._blockOffset++] = t[i++];
                        for (let a = 0, s = 8 * t.length; s > 0; ++a) {
                          (this._length[a] += s),
                          (s = (this._length[a] / 4294967296) | 0) > 0
                                  && (this._length[a] -= 4294967296 * s);
                        }
                        return this;
                      }),
                      (o.prototype._update = function () {
                        throw new Error('_update is not implemented');
                      }),
                      (o.prototype.digest = function (t) {
                        if (this._finalized) throw new Error('Digest already called');
                        this._finalized = !0;
                        let e = this._digest();
                        void 0 !== t && (e = e.toString(t)),
                        this._block.fill(0),
                        (this._blockOffset = 0);
                        for (let r = 0; r < 4; ++r) this._length[r] = 0;
                        return e;
                      }),
                      (o.prototype._digest = function () {
                        throw new Error('_digest is not implemented');
                      }),
                      (e.exports = o);
                    },
                    { 451: 451, 452: 452, 467: 467 },
                  ],
                  437: [
                    function (t, e, r) {
                      arguments[4][49][0].apply(r, arguments);
                    },
                    { 49: 49 },
                  ],
                  438: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          const n = Object.keys
                              || function (t) {
                                const e = [];
                                for (const r in t) e.push(r);
                                return e;
                              };
                          e.exports = u;
                          const i = t(440);
                          const o = t(442);
                          t(467)(u, i);
                          for (let a = n(o.prototype), s = 0; s < a.length; s++) {
                            const f = a[s];
                            u.prototype[f] || (u.prototype[f] = o.prototype[f]);
                          }
                          function u(t) {
                            if (!(this instanceof u)) return new u(t);
                            i.call(this, t),
                            o.call(this, t),
                            (this.allowHalfOpen = !0),
                            t
                                  && (!1 === t.readable && (this.readable = !1),
                                  !1 === t.writable && (this.writable = !1),
                                  !1 === t.allowHalfOpen
                                    && ((this.allowHalfOpen = !1), this.once('end', c)));
                          }
                          function c() {
                            this._writableState.ended || r.nextTick(h, this);
                          }
                          function h(t) {
                            t.end();
                          }
                          Object.defineProperty(u.prototype, 'writableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._writableState.highWaterMark;
                            },
                          }),
                          Object.defineProperty(u.prototype, 'writableBuffer', {
                            enumerable: !1,
                            get() {
                              return this._writableState && this._writableState.getBuffer();
                            },
                          }),
                          Object.defineProperty(u.prototype, 'writableLength', {
                            enumerable: !1,
                            get() {
                              return this._writableState.length;
                            },
                          }),
                          Object.defineProperty(u.prototype, 'destroyed', {
                            enumerable: !1,
                            get() {
                              return (
                                void 0 !== this._readableState
                                    && void 0 !== this._writableState
                                    && this._readableState.destroyed
                                    && this._writableState.destroyed
                              );
                            },
                            set(t) {
                              void 0 !== this._readableState
                                    && void 0 !== this._writableState
                                    && ((this._readableState.destroyed = t),
                                    (this._writableState.destroyed = t));
                            },
                          });
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    {
                      440: 440, 442: 442, 467: 467, 488: 488,
                    },
                  ],
                  439: [
                    function (t, e, r) {
                      arguments[4][51][0].apply(r, arguments);
                    },
                    { 441: 441, 467: 467, 51: 51 },
                  ],
                  440: [
                    function (t, e, r) {
                      (function (r, n) {
                        (function () {
                          let i;
                          (e.exports = k), (k.ReadableState = E);
                          t(434).EventEmitter;
                          const o = function (t, e) {
                            return t.listeners(e).length;
                          };
                          const a = t(450);
                          const s = t(67).Buffer;
                          const f = n.Uint8Array || function () {};
                          let u;
                          const c = t(21);
                          u = c && c.debuglog ? c.debuglog('stream') : function () {};
                          let h;
                          let d;
                          let l;
                          const p = t(444);
                          const b = t(445);
                          const v = t(449).getHighWaterMark;
                          const g = t(437).codes;
                          const y = g.ERR_INVALID_ARG_TYPE;
                          const m = g.ERR_STREAM_PUSH_AFTER_EOF;
                          const w = g.ERR_METHOD_NOT_IMPLEMENTED;
                          const _ = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
                          t(467)(k, a);
                          const S = b.errorOrDestroy;
                          const M = ['error', 'close', 'destroy', 'pause', 'resume'];
                          function E(e, r, n) {
                            (i = i || t(438)),
                            (e = e || {}),
                            typeof n !== 'boolean' && (n = r instanceof i),
                            (this.objectMode = !!e.objectMode),
                            n && (this.objectMode = this.objectMode || !!e.readableObjectMode),
                            (this.highWaterMark = v(this, e, 'readableHighWaterMark', n)),
                            (this.buffer = new p()),
                            (this.length = 0),
                            (this.pipes = null),
                            (this.pipesCount = 0),
                            (this.flowing = null),
                            (this.ended = !1),
                            (this.endEmitted = !1),
                            (this.reading = !1),
                            (this.sync = !0),
                            (this.needReadable = !1),
                            (this.emittedReadable = !1),
                            (this.readableListening = !1),
                            (this.resumeScheduled = !1),
                            (this.paused = !0),
                            (this.emitClose = !1 !== e.emitClose),
                            (this.autoDestroy = !!e.autoDestroy),
                            (this.destroyed = !1),
                            (this.defaultEncoding = e.defaultEncoding || 'utf8'),
                            (this.awaitDrain = 0),
                            (this.readingMore = !1),
                            (this.decoder = null),
                            (this.encoding = null),
                            e.encoding
                                  && (h || (h = t(526).StringDecoder),
                                  (this.decoder = new h(e.encoding)),
                                  (this.encoding = e.encoding));
                          }
                          function k(e) {
                            if (((i = i || t(438)), !(this instanceof k))) return new k(e);
                            const r = this instanceof i;
                            (this._readableState = new E(e, this, r)),
                            (this.readable = !0),
                            e
                                  && (typeof e.read === 'function' && (this._read = e.read),
                                  typeof e.destroy === 'function' && (this._destroy = e.destroy)),
                            a.call(this);
                          }
                          function x(t, e, r, n, i) {
                            u('readableAddChunk', e);
                            let o;
                            const a = t._readableState;
                            if (e === null) {
                              (a.reading = !1),
                              (function (t, e) {
                                if ((u('onEofChunk'), e.ended)) return;
                                if (e.decoder) {
                                  const r = e.decoder.end();
                                  r
                                        && r.length
                                        && (e.buffer.push(r),
                                        (e.length += e.objectMode ? 1 : r.length));
                                }
                                (e.ended = !0),
                                e.sync
                                  ? T(t)
                                  : ((e.needReadable = !1),
                                  e.emittedReadable || ((e.emittedReadable = !0), B(t)));
                              }(t, a));
                            } else if (
                              (i
                                  || (o = (function (t, e) {
                                    let r;
                                    (n = e),
                                    s.isBuffer(n)
                                        || n instanceof f
                                        || typeof e === 'string'
                                        || void 0 === e
                                        || t.objectMode
                                        || (r = new y('chunk', ['string', 'Buffer', 'Uint8Array'], e));
                                    let n;
                                    return r;
                                  }(a, e))),
                              o)
                            ) S(t, o);
                            else if (a.objectMode || (e && e.length > 0)) {
                              if (
                                (typeof e === 'string'
                                    || a.objectMode
                                    || Object.getPrototypeOf(e) === s.prototype
                                    || (e = (function (t) {
                                      return s.from(t);
                                    }(e))),
                                n)
                              ) a.endEmitted ? S(t, new _()) : A(t, a, e, !0);
                              else if (a.ended) S(t, new m());
                              else {
                                if (a.destroyed) return !1;
                                (a.reading = !1),
                                a.decoder && !r
                                  ? ((e = a.decoder.write(e)),
                                  a.objectMode || e.length !== 0 ? A(t, a, e, !1) : P(t, a))
                                  : A(t, a, e, !1);
                              }
                            } else n || ((a.reading = !1), P(t, a));
                            return !a.ended && (a.length < a.highWaterMark || a.length === 0);
                          }
                          function A(t, e, r, n) {
                            e.flowing && e.length === 0 && !e.sync
                              ? ((e.awaitDrain = 0), t.emit('data', r))
                              : ((e.length += e.objectMode ? 1 : r.length),
                              n ? e.buffer.unshift(r) : e.buffer.push(r),
                              e.needReadable && T(t)),
                            P(t, e);
                          }
                          Object.defineProperty(k.prototype, 'destroyed', {
                            enumerable: !1,
                            get() {
                              return (
                                void 0 !== this._readableState && this._readableState.destroyed
                              );
                            },
                            set(t) {
                              this._readableState && (this._readableState.destroyed = t);
                            },
                          }),
                          (k.prototype.destroy = b.destroy),
                          (k.prototype._undestroy = b.undestroy),
                          (k.prototype._destroy = function (t, e) {
                            e(t);
                          }),
                          (k.prototype.push = function (t, e) {
                            let r;
                            const n = this._readableState;
                            return (
                              n.objectMode
                                ? (r = !0)
                                : typeof t === 'string'
                                      && ((e = e || n.defaultEncoding) !== n.encoding
                                        && ((t = s.from(t, e)), (e = '')),
                                      (r = !0)),
                              x(this, t, e, !1, r)
                            );
                          }),
                          (k.prototype.unshift = function (t) {
                            return x(this, t, null, !0, !1);
                          }),
                          (k.prototype.isPaused = function () {
                            return !1 === this._readableState.flowing;
                          }),
                          (k.prototype.setEncoding = function (e) {
                            h || (h = t(526).StringDecoder);
                            const r = new h(e);
                            (this._readableState.decoder = r),
                            (this._readableState.encoding = this._readableState.decoder.encoding);
                            for (var n = this._readableState.buffer.head, i = ''; n !== null;) (i += r.write(n.data)), (n = n.next);
                            return (
                              this._readableState.buffer.clear(),
                              i !== '' && this._readableState.buffer.push(i),
                              (this._readableState.length = i.length),
                              this
                            );
                          });
                          const R = 1073741824;
                          function I(t, e) {
                            return t <= 0 || (e.length === 0 && e.ended)
                              ? 0
                              : e.objectMode
                                ? 1
                                : t != t
                                  ? e.flowing && e.length
                                    ? e.buffer.head.data.length
                                    : e.length
                                  : (t > e.highWaterMark
                                    && (e.highWaterMark = (function (t) {
                                      return (
                                        t >= R
                                          ? (t = R)
                                          : (t--,
                                          (t |= t >>> 1),
                                          (t |= t >>> 2),
                                          (t |= t >>> 4),
                                          (t |= t >>> 8),
                                          (t |= t >>> 16),
                                          t++),
                                        t
                                      );
                                    }(t))),
                                  t <= e.length
                                    ? t
                                    : e.ended
                                      ? e.length
                                      : ((e.needReadable = !0), 0));
                          }
                          function T(t) {
                            const e = t._readableState;
                            u('emitReadable', e.needReadable, e.emittedReadable),
                            (e.needReadable = !1),
                            e.emittedReadable
                                  || (u('emitReadable', e.flowing),
                                  (e.emittedReadable = !0),
                                  r.nextTick(B, t));
                          }
                          function B(t) {
                            const e = t._readableState;
                            u('emitReadable_', e.destroyed, e.length, e.ended),
                            e.destroyed
                                  || (!e.length && !e.ended)
                                  || (t.emit('readable'), (e.emittedReadable = !1)),
                            (e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark),
                            N(t);
                          }
                          function P(t, e) {
                            e.readingMore || ((e.readingMore = !0), r.nextTick(O, t, e));
                          }
                          function O(t, e) {
                            for (
                              ;
                              !e.reading
                                && !e.ended
                                && (e.length < e.highWaterMark || (e.flowing && e.length === 0));

                            ) {
                              const r = e.length;
                              if ((u('maybeReadMore read 0'), t.read(0), r === e.length)) break;
                            }
                            e.readingMore = !1;
                          }
                          function C(t) {
                            const e = t._readableState;
                            (e.readableListening = t.listenerCount('readable') > 0),
                            e.resumeScheduled && !e.paused
                              ? (e.flowing = !0)
                              : t.listenerCount('data') > 0 && t.resume();
                          }
                          function L(t) {
                            u('readable nexttick read 0'), t.read(0);
                          }
                          function j(t, e) {
                            u('resume', e.reading),
                            e.reading || t.read(0),
                            (e.resumeScheduled = !1),
                            t.emit('resume'),
                            N(t),
                            e.flowing && !e.reading && t.read(0);
                          }
                          function N(t) {
                            const e = t._readableState;
                            for (u('flow', e.flowing); e.flowing && t.read() !== null;);
                          }
                          function D(t, e) {
                            return e.length === 0
                              ? null
                              : (e.objectMode
                                ? (r = e.buffer.shift())
                                : !t || t >= e.length
                                  ? ((r = e.decoder
                                    ? e.buffer.join('')
                                    : e.buffer.length === 1
                                      ? e.buffer.first()
                                      : e.buffer.concat(e.length)),
                                  e.buffer.clear())
                                  : (r = e.buffer.consume(t, e.decoder)),
                              r);
                            let r;
                          }
                          function U(t) {
                            const e = t._readableState;
                            u('endReadable', e.endEmitted),
                            e.endEmitted || ((e.ended = !0), r.nextTick(F, e, t));
                          }
                          function F(t, e) {
                            if (
                              (u('endReadableNT', t.endEmitted, t.length),
                              !t.endEmitted
                                  && t.length === 0
                                  && ((t.endEmitted = !0),
                                  (e.readable = !1),
                                  e.emit('end'),
                                  t.autoDestroy))
                            ) {
                              const r = e._writableState;
                              (!r || (r.autoDestroy && r.finished)) && e.destroy();
                            }
                          }
                          function q(t, e) {
                            for (let r = 0, n = t.length; r < n; r++) if (t[r] === e) return r;
                            return -1;
                          }
                          (k.prototype.read = function (t) {
                            u('read', t), (t = parseInt(t, 10));
                            const e = this._readableState;
                            const r = t;
                            if (
                              (t !== 0 && (e.emittedReadable = !1),
                              t === 0
                                  && e.needReadable
                                  && ((e.highWaterMark !== 0
                                    ? e.length >= e.highWaterMark
                                    : e.length > 0)
                                    || e.ended))
                            ) {
                              return (
                                u('read: emitReadable', e.length, e.ended),
                                e.length === 0 && e.ended ? U(this) : T(this),
                                null
                              );
                            }
                            if ((t = I(t, e)) === 0 && e.ended) return e.length === 0 && U(this), null;
                            let n;
                            let i = e.needReadable;
                            return (
                              u('need readable', i),
                              (e.length === 0 || e.length - t < e.highWaterMark)
                                  && u('length less than watermark', (i = !0)),
                              e.ended || e.reading
                                ? u('reading or ended', (i = !1))
                                : i
                                    && (u('do read'),
                                    (e.reading = !0),
                                    (e.sync = !0),
                                    e.length === 0 && (e.needReadable = !0),
                                    this._read(e.highWaterMark),
                                    (e.sync = !1),
                                    e.reading || (t = I(r, e))),
                              (n = t > 0 ? D(t, e) : null) === null
                                ? ((e.needReadable = e.length <= e.highWaterMark), (t = 0))
                                : ((e.length -= t), (e.awaitDrain = 0)),
                              e.length === 0
                                  && (e.ended || (e.needReadable = !0), r !== t && e.ended && U(this)),
                              n !== null && this.emit('data', n),
                              n
                            );
                          }),
                          (k.prototype._read = function (t) {
                            S(this, new w('_read()'));
                          }),
                          (k.prototype.pipe = function (t, e) {
                            const n = this;
                            const i = this._readableState;
                            switch (i.pipesCount) {
                              case 0:
                                i.pipes = t;
                                break;
                              case 1:
                                i.pipes = [i.pipes, t];
                                break;
                              default:
                                i.pipes.push(t);
                            }
                            (i.pipesCount += 1), u('pipe count=%d opts=%j', i.pipesCount, e);
                            const a = (!e || !1 !== e.end) && t !== r.stdout && t !== r.stderr ? f : v;
                            function s(e, r) {
                              u('onunpipe'),
                              e === n
                                      && r
                                      && !1 === r.hasUnpiped
                                      && ((r.hasUnpiped = !0),
                                      u('cleanup'),
                                      t.removeListener('close', p),
                                      t.removeListener('finish', b),
                                      t.removeListener('drain', c),
                                      t.removeListener('error', l),
                                      t.removeListener('unpipe', s),
                                      n.removeListener('end', f),
                                      n.removeListener('end', v),
                                      n.removeListener('data', d),
                                      (h = !0),
                                      !i.awaitDrain
                                        || (t._writableState && !t._writableState.needDrain)
                                        || c());
                            }
                            function f() {
                              u('onend'), t.end();
                            }
                            i.endEmitted ? r.nextTick(a) : n.once('end', a), t.on('unpipe', s);
                            var c = (function (t) {
                              return function () {
                                const e = t._readableState;
                                u('pipeOnDrain', e.awaitDrain),
                                e.awaitDrain && e.awaitDrain--,
                                e.awaitDrain === 0
                                        && o(t, 'data')
                                        && ((e.flowing = !0), N(t));
                              };
                            }(n));
                            t.on('drain', c);
                            var h = !1;
                            function d(e) {
                              u('ondata');
                              const r = t.write(e);
                              u('dest.write', r),
                              !1 === r
                                      && (((i.pipesCount === 1 && i.pipes === t)
                                        || (i.pipesCount > 1 && q(i.pipes, t) !== -1))
                                        && !h
                                        && (u('false write response, pause', i.awaitDrain),
                                        i.awaitDrain++),
                                      n.pause());
                            }
                            function l(e) {
                              u('onerror', e),
                              v(),
                              t.removeListener('error', l),
                              o(t, 'error') === 0 && S(t, e);
                            }
                            function p() {
                              t.removeListener('finish', b), v();
                            }
                            function b() {
                              u('onfinish'), t.removeListener('close', p), v();
                            }
                            function v() {
                              u('unpipe'), n.unpipe(t);
                            }
                            return (
                              n.on('data', d),
                              (function (t, e, r) {
                                if (typeof t.prependListener === 'function') return t.prependListener(e, r);
                                t._events && t._events[e]
                                  ? Array.isArray(t._events[e])
                                    ? t._events[e].unshift(r)
                                    : (t._events[e] = [r, t._events[e]])
                                  : t.on(e, r);
                              }(t, 'error', l)),
                              t.once('close', p),
                              t.once('finish', b),
                              t.emit('pipe', n),
                              i.flowing || (u('pipe resume'), n.resume()),
                              t
                            );
                          }),
                          (k.prototype.unpipe = function (t) {
                            const e = this._readableState;
                            const r = { hasUnpiped: !1 };
                            if (e.pipesCount === 0) return this;
                            if (e.pipesCount === 1) {
                              return (
                                (t && t !== e.pipes)
                                      || (t || (t = e.pipes),
                                      (e.pipes = null),
                                      (e.pipesCount = 0),
                                      (e.flowing = !1),
                                      t && t.emit('unpipe', this, r)),
                                this
                              );
                            }
                            if (!t) {
                              const n = e.pipes;
                              const i = e.pipesCount;
                              (e.pipes = null), (e.pipesCount = 0), (e.flowing = !1);
                              for (let o = 0; o < i; o++) n[o].emit('unpipe', this, { hasUnpiped: !1 });
                              return this;
                            }
                            const a = q(e.pipes, t);
                            return (
                              a === -1
                                    || (e.pipes.splice(a, 1),
                                    (e.pipesCount -= 1),
                                    e.pipesCount === 1 && (e.pipes = e.pipes[0]),
                                    t.emit('unpipe', this, r)),
                              this
                            );
                          }),
                          (k.prototype.on = function (t, e) {
                            const n = a.prototype.on.call(this, t, e);
                            const i = this._readableState;
                            return (
                              t === 'data'
                                ? ((i.readableListening = this.listenerCount('readable') > 0),
                                !1 !== i.flowing && this.resume())
                                : t === 'readable'
                                      && (i.endEmitted
                                        || i.readableListening
                                        || ((i.readableListening = i.needReadable = !0),
                                        (i.flowing = !1),
                                        (i.emittedReadable = !1),
                                        u('on readable', i.length, i.reading),
                                        i.length ? T(this) : i.reading || r.nextTick(L, this))),
                              n
                            );
                          }),
                          (k.prototype.addListener = k.prototype.on),
                          (k.prototype.removeListener = function (t, e) {
                            const n = a.prototype.removeListener.call(this, t, e);
                            return t === 'readable' && r.nextTick(C, this), n;
                          }),
                          (k.prototype.removeAllListeners = function (t) {
                            const e = a.prototype.removeAllListeners.apply(this, arguments);
                            return (t !== 'readable' && void 0 !== t) || r.nextTick(C, this), e;
                          }),
                          (k.prototype.resume = function () {
                            const t = this._readableState;
                            return (
                              t.flowing
                                    || (u('resume'),
                                    (t.flowing = !t.readableListening),
                                    (function (t, e) {
                                      e.resumeScheduled
                                        || ((e.resumeScheduled = !0), r.nextTick(j, t, e));
                                    }(this, t))),
                              (t.paused = !1),
                              this
                            );
                          }),
                          (k.prototype.pause = function () {
                            return (
                              u('call pause flowing=%j', this._readableState.flowing),
                              !1 !== this._readableState.flowing
                                    && (u('pause'),
                                    (this._readableState.flowing = !1),
                                    this.emit('pause')),
                              (this._readableState.paused = !0),
                              this
                            );
                          }),
                          (k.prototype.wrap = function (t) {
                            const e = this;
                            const r = this._readableState;
                            let n = !1;
                            for (const i in (t.on('end', () => {
                              if ((u('wrapped end'), r.decoder && !r.ended)) {
                                const t = r.decoder.end();
                                t && t.length && e.push(t);
                              }
                              e.push(null);
                            }),
                            t.on('data', (i) => {
                              (u('wrapped data'),
                              r.decoder && (i = r.decoder.write(i)),
                              r.objectMode && i == null)
                                    || ((r.objectMode || (i && i.length))
                                      && (e.push(i) || ((n = !0), t.pause())));
                            }),
                            t)) {
                              void 0 === this[i]
                                    && typeof t[i] === 'function'
                                    && (this[i] = (function (e) {
                                      return function () {
                                        return t[e].apply(t, arguments);
                                      };
                                    }(i)));
                            }
                            for (let o = 0; o < M.length; o++) t.on(M[o], this.emit.bind(this, M[o]));
                            return (
                              (this._read = function (e) {
                                u('wrapped _read', e), n && ((n = !1), t.resume());
                              }),
                              this
                            );
                          }),
                          typeof Symbol === 'function'
                                && (k.prototype[Symbol.asyncIterator] = function () {
                                  return void 0 === d && (d = t(443)), d(this);
                                }),
                          Object.defineProperty(k.prototype, 'readableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._readableState.highWaterMark;
                            },
                          }),
                          Object.defineProperty(k.prototype, 'readableBuffer', {
                            enumerable: !1,
                            get() {
                              return this._readableState && this._readableState.buffer;
                            },
                          }),
                          Object.defineProperty(k.prototype, 'readableFlowing', {
                            enumerable: !1,
                            get() {
                              return this._readableState.flowing;
                            },
                            set(t) {
                              this._readableState && (this._readableState.flowing = t);
                            },
                          }),
                          (k._fromList = D),
                          Object.defineProperty(k.prototype, 'readableLength', {
                            enumerable: !1,
                            get() {
                              return this._readableState.length;
                            },
                          }),
                          typeof Symbol === 'function'
                                && (k.from = function (e, r) {
                                  return void 0 === l && (l = t(447)), l(k, e, r);
                                });
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {
                      21: 21,
                      434: 434,
                      437: 437,
                      438: 438,
                      443: 443,
                      444: 444,
                      445: 445,
                      447: 447,
                      449: 449,
                      450: 450,
                      467: 467,
                      488: 488,
                      526: 526,
                      67: 67,
                    },
                  ],
                  441: [
                    function (t, e, r) {
                      arguments[4][53][0].apply(r, arguments);
                    },
                    {
                      437: 437, 438: 438, 467: 467, 53: 53,
                    },
                  ],
                  442: [
                    function (t, e, r) {
                      (function (r, n) {
                        (function () {
                          function i(t) {
                            const e = this;
                            (this.next = null),
                            (this.entry = null),
                            (this.finish = function () {
                              !(function (t, e, r) {
                                let n = t.entry;
                                t.entry = null;
                                for (; n;) {
                                  const i = n.callback;
                                  e.pendingcb--, i(r), (n = n.next);
                                }
                                e.corkedRequestsFree.next = t;
                              }(e, t));
                            });
                          }
                          let o;
                          (e.exports = k), (k.WritableState = E);
                          const a = { deprecate: t(528) };
                          const s = t(450);
                          const f = t(67).Buffer;
                          const u = n.Uint8Array || function () {};
                          let c;
                          const h = t(445);
                          const d = t(449).getHighWaterMark;
                          const l = t(437).codes;
                          const p = l.ERR_INVALID_ARG_TYPE;
                          const b = l.ERR_METHOD_NOT_IMPLEMENTED;
                          const v = l.ERR_MULTIPLE_CALLBACK;
                          const g = l.ERR_STREAM_CANNOT_PIPE;
                          const y = l.ERR_STREAM_DESTROYED;
                          const m = l.ERR_STREAM_NULL_VALUES;
                          const w = l.ERR_STREAM_WRITE_AFTER_END;
                          const _ = l.ERR_UNKNOWN_ENCODING;
                          const S = h.errorOrDestroy;
                          function M() {}
                          function E(e, n, a) {
                            (o = o || t(438)),
                            (e = e || {}),
                            typeof a !== 'boolean' && (a = n instanceof o),
                            (this.objectMode = !!e.objectMode),
                            a && (this.objectMode = this.objectMode || !!e.writableObjectMode),
                            (this.highWaterMark = d(this, e, 'writableHighWaterMark', a)),
                            (this.finalCalled = !1),
                            (this.needDrain = !1),
                            (this.ending = !1),
                            (this.ended = !1),
                            (this.finished = !1),
                            (this.destroyed = !1);
                            const s = !1 === e.decodeStrings;
                            (this.decodeStrings = !s),
                            (this.defaultEncoding = e.defaultEncoding || 'utf8'),
                            (this.length = 0),
                            (this.writing = !1),
                            (this.corked = 0),
                            (this.sync = !0),
                            (this.bufferProcessing = !1),
                            (this.onwrite = function (t) {
                              !(function (t, e) {
                                const n = t._writableState;
                                const i = n.sync;
                                const o = n.writecb;
                                if (typeof o !== 'function') throw new v();
                                if (
                                  ((function (t) {
                                    (t.writing = !1),
                                    (t.writecb = null),
                                    (t.length -= t.writelen),
                                    (t.writelen = 0);
                                  }(n)),
                                  e)
                                ) {
                                  !(function (t, e, n, i, o) {
                                    --e.pendingcb,
                                    n
                                      ? (r.nextTick(o, i),
                                      r.nextTick(B, t, e),
                                      (t._writableState.errorEmitted = !0),
                                      S(t, i))
                                      : (o(i),
                                      (t._writableState.errorEmitted = !0),
                                      S(t, i),
                                      B(t, e));
                                  }(t, n, i, e, o));
                                } else {
                                  const a = I(n) || t.destroyed;
                                  a
                                        || n.corked
                                        || n.bufferProcessing
                                        || !n.bufferedRequest
                                        || R(t, n),
                                  i ? r.nextTick(A, t, n, a, o) : A(t, n, a, o);
                                }
                              }(n, t));
                            }),
                            (this.writecb = null),
                            (this.writelen = 0),
                            (this.bufferedRequest = null),
                            (this.lastBufferedRequest = null),
                            (this.pendingcb = 0),
                            (this.prefinished = !1),
                            (this.errorEmitted = !1),
                            (this.emitClose = !1 !== e.emitClose),
                            (this.autoDestroy = !!e.autoDestroy),
                            (this.bufferedRequestCount = 0),
                            (this.corkedRequestsFree = new i(this));
                          }
                          function k(e) {
                            const r = this instanceof (o = o || t(438));
                            if (!r && !c.call(k, this)) return new k(e);
                            (this._writableState = new E(e, this, r)),
                            (this.writable = !0),
                            e
                                  && (typeof e.write === 'function' && (this._write = e.write),
                                  typeof e.writev === 'function' && (this._writev = e.writev),
                                  typeof e.destroy === 'function' && (this._destroy = e.destroy),
                                  typeof e.final === 'function' && (this._final = e.final)),
                            s.call(this);
                          }
                          function x(t, e, r, n, i, o, a) {
                            (e.writelen = n),
                            (e.writecb = a),
                            (e.writing = !0),
                            (e.sync = !0),
                            e.destroyed
                              ? e.onwrite(new y('write'))
                              : r
                                ? t._writev(i, e.onwrite)
                                : t._write(i, o, e.onwrite),
                            (e.sync = !1);
                          }
                          function A(t, e, r, n) {
                            r
                                || (function (t, e) {
                                  e.length === 0
                                    && e.needDrain
                                    && ((e.needDrain = !1), t.emit('drain'));
                                }(t, e)),
                            e.pendingcb--,
                            n(),
                            B(t, e);
                          }
                          function R(t, e) {
                            e.bufferProcessing = !0;
                            let r = e.bufferedRequest;
                            if (t._writev && r && r.next) {
                              const n = e.bufferedRequestCount;
                              const o = new Array(n);
                              const a = e.corkedRequestsFree;
                              a.entry = r;
                              for (var s = 0, f = !0; r;) (o[s] = r), r.isBuf || (f = !1), (r = r.next), (s += 1);
                              (o.allBuffers = f),
                              x(t, e, !0, e.length, o, '', a.finish),
                              e.pendingcb++,
                              (e.lastBufferedRequest = null),
                              a.next
                                ? ((e.corkedRequestsFree = a.next), (a.next = null))
                                : (e.corkedRequestsFree = new i(e)),
                              (e.bufferedRequestCount = 0);
                            } else {
                              for (; r;) {
                                const u = r.chunk;
                                const c = r.encoding;
                                const h = r.callback;
                                if (
                                  (x(t, e, !1, e.objectMode ? 1 : u.length, u, c, h),
                                  (r = r.next),
                                  e.bufferedRequestCount--,
                                  e.writing)
                                ) break;
                              }
                              r === null && (e.lastBufferedRequest = null);
                            }
                            (e.bufferedRequest = r), (e.bufferProcessing = !1);
                          }
                          function I(t) {
                            return (
                              t.ending
                                && t.length === 0
                                && t.bufferedRequest === null
                                && !t.finished
                                && !t.writing
                            );
                          }
                          function T(t, e) {
                            t._final((r) => {
                              e.pendingcb--,
                              r && S(t, r),
                              (e.prefinished = !0),
                              t.emit('prefinish'),
                              B(t, e);
                            });
                          }
                          function B(t, e) {
                            const n = I(e);
                            if (
                              n
                                && ((function (t, e) {
                                  e.prefinished
                                    || e.finalCalled
                                    || (typeof t._final !== 'function' || e.destroyed
                                      ? ((e.prefinished = !0), t.emit('prefinish'))
                                      : (e.pendingcb++, (e.finalCalled = !0), r.nextTick(T, t, e)));
                                }(t, e)),
                                e.pendingcb === 0
                                  && ((e.finished = !0), t.emit('finish'), e.autoDestroy))
                            ) {
                              const i = t._readableState;
                              (!i || (i.autoDestroy && i.endEmitted)) && t.destroy();
                            }
                            return n;
                          }
                          t(467)(k, s),
                          (E.prototype.getBuffer = function () {
                            for (var t = this.bufferedRequest, e = []; t;) e.push(t), (t = t.next);
                            return e;
                          }),
                          (function () {
                            try {
                              Object.defineProperty(E.prototype, 'buffer', {
                                get: a.deprecate(
                                  function () {
                                    return this.getBuffer();
                                  },
                                  '_writableState.buffer is deprecated. Use _writableState.getBuffer instead.',
                                  'DEP0003',
                                ),
                              });
                            } catch (t) {}
                          }()),
                          typeof Symbol === 'function'
                              && Symbol.hasInstance
                              && typeof Function.prototype[Symbol.hasInstance] === 'function'
                            ? ((c = Function.prototype[Symbol.hasInstance]),
                            Object.defineProperty(k, Symbol.hasInstance, {
                              value(t) {
                                return (
                                  !!c.call(this, t)
                                        || (this === k && t && t._writableState instanceof E)
                                );
                              },
                            }))
                            : (c = function (t) {
                              return t instanceof this;
                            }),
                          (k.prototype.pipe = function () {
                            S(this, new g());
                          }),
                          (k.prototype.write = function (t, e, n) {
                            let i;
                            const o = this._writableState;
                            let a = !1;
                            const s = !o.objectMode && ((i = t), f.isBuffer(i) || i instanceof u);
                            return (
                              s
                                    && !f.isBuffer(t)
                                    && (t = (function (t) {
                                      return f.from(t);
                                    }(t))),
                              typeof e === 'function' && ((n = e), (e = null)),
                              s ? (e = 'buffer') : e || (e = o.defaultEncoding),
                              typeof n !== 'function' && (n = M),
                              o.ending
                                ? (function (t, e) {
                                  const n = new w();
                                  S(t, n), r.nextTick(e, n);
                                }(this, n))
                                : (s
                                        || (function (t, e, n, i) {
                                          let o;
                                          return (
                                            n === null
                                              ? (o = new m())
                                              : typeof n === 'string'
                                                || e.objectMode
                                                || (o = new p('chunk', ['string', 'Buffer'], n)),
                                            !o || (S(t, o), r.nextTick(i, o), !1)
                                          );
                                        }(this, o, t, n)))
                                      && (o.pendingcb++,
                                      (a = (function (t, e, r, n, i, o) {
                                        if (!r) {
                                          const a = (function (t, e, r) {
                                            t.objectMode
                                              || !1 === t.decodeStrings
                                              || typeof e !== 'string'
                                              || (e = f.from(e, r));
                                            return e;
                                          }(e, n, i));
                                          n !== a && ((r = !0), (i = 'buffer'), (n = a));
                                        }
                                        const s = e.objectMode ? 1 : n.length;
                                        e.length += s;
                                        const u = e.length < e.highWaterMark;
                                        u || (e.needDrain = !0);
                                        if (e.writing || e.corked) {
                                          const c = e.lastBufferedRequest;
                                          (e.lastBufferedRequest = {
                                            chunk: n,
                                            encoding: i,
                                            isBuf: r,
                                            callback: o,
                                            next: null,
                                          }),
                                          c
                                            ? (c.next = e.lastBufferedRequest)
                                            : (e.bufferedRequest = e.lastBufferedRequest),
                                          (e.bufferedRequestCount += 1);
                                        } else x(t, e, !1, s, n, i, o);
                                        return u;
                                      }(this, o, s, t, e, n)))),
                              a
                            );
                          }),
                          (k.prototype.cork = function () {
                            this._writableState.corked++;
                          }),
                          (k.prototype.uncork = function () {
                            const t = this._writableState;
                            t.corked
                                  && (t.corked--,
                                  t.writing
                                    || t.corked
                                    || t.bufferProcessing
                                    || !t.bufferedRequest
                                    || R(this, t));
                          }),
                          (k.prototype.setDefaultEncoding = function (t) {
                            if (
                              (typeof t === 'string' && (t = t.toLowerCase()),
                              !(
                                [
                                  'hex',
                                  'utf8',
                                  'utf-8',
                                  'ascii',
                                  'binary',
                                  'base64',
                                  'ucs2',
                                  'ucs-2',
                                  'utf16le',
                                  'utf-16le',
                                  'raw',
                                ].indexOf((`${t}`).toLowerCase()) > -1
                              ))
                            ) throw new _(t);
                            return (this._writableState.defaultEncoding = t), this;
                          }),
                          Object.defineProperty(k.prototype, 'writableBuffer', {
                            enumerable: !1,
                            get() {
                              return this._writableState && this._writableState.getBuffer();
                            },
                          }),
                          Object.defineProperty(k.prototype, 'writableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._writableState.highWaterMark;
                            },
                          }),
                          (k.prototype._write = function (t, e, r) {
                            r(new b('_write()'));
                          }),
                          (k.prototype._writev = null),
                          (k.prototype.end = function (t, e, n) {
                            const i = this._writableState;
                            return (
                              typeof t === 'function'
                                ? ((n = t), (t = null), (e = null))
                                : typeof e === 'function' && ((n = e), (e = null)),
                              t != null && this.write(t, e),
                              i.corked && ((i.corked = 1), this.uncork()),
                              i.ending
                                    || (function (t, e, n) {
                                      (e.ending = !0),
                                      B(t, e),
                                      n && (e.finished ? r.nextTick(n) : t.once('finish', n));
                                      (e.ended = !0), (t.writable = !1);
                                    }(this, i, n)),
                              this
                            );
                          }),
                          Object.defineProperty(k.prototype, 'writableLength', {
                            enumerable: !1,
                            get() {
                              return this._writableState.length;
                            },
                          }),
                          Object.defineProperty(k.prototype, 'destroyed', {
                            enumerable: !1,
                            get() {
                              return (
                                void 0 !== this._writableState && this._writableState.destroyed
                              );
                            },
                            set(t) {
                              this._writableState && (this._writableState.destroyed = t);
                            },
                          }),
                          (k.prototype.destroy = h.destroy),
                          (k.prototype._undestroy = h.undestroy),
                          (k.prototype._destroy = function (t, e) {
                            e(t);
                          });
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {
                      437: 437,
                      438: 438,
                      445: 445,
                      449: 449,
                      450: 450,
                      467: 467,
                      488: 488,
                      528: 528,
                      67: 67,
                    },
                  ],
                  443: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          let n;
                          function i(t, e, r) {
                            return (
                              e in t
                                ? Object.defineProperty(t, e, {
                                  value: r,
                                  enumerable: !0,
                                  configurable: !0,
                                  writable: !0,
                                })
                                : (t[e] = r),
                              t
                            );
                          }
                          const o = t(446);
                          const a = Symbol('lastResolve');
                          const s = Symbol('lastReject');
                          const f = Symbol('error');
                          const u = Symbol('ended');
                          const c = Symbol('lastPromise');
                          const h = Symbol('handlePromise');
                          const d = Symbol('stream');
                          function l(t, e) {
                            return { value: t, done: e };
                          }
                          function p(t) {
                            const e = t[a];
                            if (e !== null) {
                              const r = t[d].read();
                              r !== null
                                  && ((t[c] = null), (t[a] = null), (t[s] = null), e(l(r, !1)));
                            }
                          }
                          function b(t) {
                            r.nextTick(p, t);
                          }
                          const v = Object.getPrototypeOf(() => {});
                          const g = Object.setPrototypeOf(
                            (i(
                              (n = {
                                get stream() {
                                  return this[d];
                                },
                                next() {
                                  const t = this;
                                  const e = this[f];
                                  if (e !== null) return Promise.reject(e);
                                  if (this[u]) return Promise.resolve(l(void 0, !0));
                                  if (this[d].destroyed) {
                                    return new Promise(((e, n) => {
                                      r.nextTick(() => {
                                        t[f] ? n(t[f]) : e(l(void 0, !0));
                                      });
                                    }));
                                  }
                                  let n;
                                  const i = this[c];
                                  if (i) {
                                    n = new Promise(
                                      (function (t, e) {
                                        return function (r, n) {
                                          t.then(() => {
                                            e[u] ? r(l(void 0, !0)) : e[h](r, n);
                                          }, n);
                                        };
                                      }(i, this)),
                                    );
                                  } else {
                                    const o = this[d].read();
                                    if (o !== null) return Promise.resolve(l(o, !1));
                                    n = new Promise(this[h]);
                                  }
                                  return (this[c] = n), n;
                                },
                              }),
                              Symbol.asyncIterator,
                              function () {
                                return this;
                              },
                            ),
                            i(n, 'return', function () {
                              const t = this;
                              return new Promise(((e, r) => {
                                t[d].destroy(null, (t) => {
                                  t ? r(t) : e(l(void 0, !0));
                                });
                              }));
                            }),
                            n),
                            v,
                          );
                          e.exports = function (t) {
                            let e;
                            var r = Object.create(
                              g,
                              (i((e = {}), d, { value: t, writable: !0 }),
                              i(e, a, { value: null, writable: !0 }),
                              i(e, s, { value: null, writable: !0 }),
                              i(e, f, { value: null, writable: !0 }),
                              i(e, u, { value: t._readableState.endEmitted, writable: !0 }),
                              i(e, h, {
                                value(t, e) {
                                  const n = r[d].read();
                                  n
                                    ? ((r[c] = null), (r[a] = null), (r[s] = null), t(l(n, !1)))
                                    : ((r[a] = t), (r[s] = e));
                                },
                                writable: !0,
                              }),
                              e),
                            );
                            return (
                              (r[c] = null),
                              o(t, (t) => {
                                if (t && t.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
                                  const e = r[s];
                                  return (
                                    e !== null
                                        && ((r[c] = null), (r[a] = null), (r[s] = null), e(t)),
                                    void (r[f] = t)
                                  );
                                }
                                const n = r[a];
                                n !== null
                                    && ((r[c] = null), (r[a] = null), (r[s] = null), n(l(void 0, !0))),
                                (r[u] = !0);
                              }),
                              t.on('readable', b.bind(null, r)),
                              r
                            );
                          };
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    { 446: 446, 488: 488 },
                  ],
                  444: [
                    function (t, e, r) {
                      arguments[4][56][0].apply(r, arguments);
                    },
                    { 21: 21, 56: 56, 67: 67 },
                  ],
                  445: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          function r(t, e) {
                            i(t, e), n(t);
                          }
                          function n(t) {
                            (t._writableState && !t._writableState.emitClose)
                                || (t._readableState && !t._readableState.emitClose)
                                || t.emit('close');
                          }
                          function i(t, e) {
                            t.emit('error', e);
                          }
                          e.exports = {
                            destroy(e, o) {
                              const a = this;
                              const s = this._readableState && this._readableState.destroyed;
                              const f = this._writableState && this._writableState.destroyed;
                              return s || f
                                ? (o
                                  ? o(e)
                                  : e
                                        && (this._writableState
                                          ? this._writableState.errorEmitted
                                            || ((this._writableState.errorEmitted = !0),
                                            t.nextTick(i, this, e))
                                          : t.nextTick(i, this, e)),
                                this)
                                : (this._readableState && (this._readableState.destroyed = !0),
                                this._writableState && (this._writableState.destroyed = !0),
                                this._destroy(e || null, (e) => {
                                  !o && e
                                    ? a._writableState
                                      ? a._writableState.errorEmitted
                                        ? t.nextTick(n, a)
                                        : ((a._writableState.errorEmitted = !0),
                                        t.nextTick(r, a, e))
                                      : t.nextTick(r, a, e)
                                    : o
                                      ? (t.nextTick(n, a), o(e))
                                      : t.nextTick(n, a);
                                }),
                                this);
                            },
                            undestroy() {
                              this._readableState
                                  && ((this._readableState.destroyed = !1),
                                  (this._readableState.reading = !1),
                                  (this._readableState.ended = !1),
                                  (this._readableState.endEmitted = !1)),
                              this._writableState
                                    && ((this._writableState.destroyed = !1),
                                    (this._writableState.ended = !1),
                                    (this._writableState.ending = !1),
                                    (this._writableState.finalCalled = !1),
                                    (this._writableState.prefinished = !1),
                                    (this._writableState.finished = !1),
                                    (this._writableState.errorEmitted = !1));
                            },
                            errorOrDestroy(t, e) {
                              const r = t._readableState;
                              const n = t._writableState;
                              (r && r.autoDestroy) || (n && n.autoDestroy)
                                ? t.destroy(e)
                                : t.emit('error', e);
                            },
                          };
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    { 488: 488 },
                  ],
                  446: [
                    function (t, e, r) {
                      arguments[4][58][0].apply(r, arguments);
                    },
                    { 437: 437, 58: 58 },
                  ],
                  447: [
                    function (t, e, r) {
                      arguments[4][59][0].apply(r, arguments);
                    },
                    { 59: 59 },
                  ],
                  448: [
                    function (t, e, r) {
                      arguments[4][60][0].apply(r, arguments);
                    },
                    { 437: 437, 446: 446, 60: 60 },
                  ],
                  449: [
                    function (t, e, r) {
                      arguments[4][61][0].apply(r, arguments);
                    },
                    { 437: 437, 61: 61 },
                  ],
                  450: [
                    function (t, e, r) {
                      arguments[4][62][0].apply(r, arguments);
                    },
                    { 434: 434, 62: 62 },
                  ],
                  451: [
                    function (t, e, r) {
                      arguments[4][63][0].apply(r, arguments);
                    },
                    {
                      438: 438,
                      439: 439,
                      440: 440,
                      441: 441,
                      442: 442,
                      446: 446,
                      448: 448,
                      63: 63,
                    },
                  ],
                  452: [
                    function (t, e, r) {
                      arguments[4][64][0].apply(r, arguments);
                    },
                    { 64: 64, 67: 67 },
                  ],
                  453: [
                    function (t, e, r) {
                      const n = r;
                      (n.utils = t(464)),
                      (n.common = t(454)),
                      (n.sha = t(457)),
                      (n.ripemd = t(456)),
                      (n.hmac = t(455)),
                      (n.sha1 = n.sha.sha1),
                      (n.sha256 = n.sha.sha256),
                      (n.sha224 = n.sha.sha224),
                      (n.sha384 = n.sha.sha384),
                      (n.sha512 = n.sha.sha512),
                      (n.ripemd160 = n.ripemd.ripemd160);
                    },
                    {
                      454: 454, 455: 455, 456: 456, 457: 457, 464: 464,
                    },
                  ],
                  454: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(473);
                      function o() {
                        (this.pending = null),
                        (this.pendingTotal = 0),
                        (this.blockSize = this.constructor.blockSize),
                        (this.outSize = this.constructor.outSize),
                        (this.hmacStrength = this.constructor.hmacStrength),
                        (this.padLength = this.constructor.padLength / 8),
                        (this.endian = 'big'),
                        (this._delta8 = this.blockSize / 8),
                        (this._delta32 = this.blockSize / 32);
                      }
                      (r.BlockHash = o),
                      (o.prototype.update = function (t, e) {
                        if (
                          ((t = n.toArray(t, e)),
                          this.pending
                            ? (this.pending = this.pending.concat(t))
                            : (this.pending = t),
                          (this.pendingTotal += t.length),
                          this.pending.length >= this._delta8)
                        ) {
                          const r = (t = this.pending).length % this._delta8;
                          (this.pending = t.slice(t.length - r, t.length)),
                          this.pending.length === 0 && (this.pending = null),
                          (t = n.join32(t, 0, t.length - r, this.endian));
                          for (let i = 0; i < t.length; i += this._delta32) this._update(t, i, i + this._delta32);
                        }
                        return this;
                      }),
                      (o.prototype.digest = function (t) {
                        return (
                          this.update(this._pad()), i(this.pending === null), this._digest(t)
                        );
                      }),
                      (o.prototype._pad = function () {
                        let t = this.pendingTotal;
                        const e = this._delta8;
                        const r = e - ((t + this.padLength) % e);
                        const n = new Array(r + this.padLength);
                        n[0] = 128;
                        for (var i = 1; i < r; i++) n[i] = 0;
                        if (((t <<= 3), this.endian === 'big')) {
                          for (var o = 8; o < this.padLength; o++) n[i++] = 0;
                          (n[i++] = 0),
                          (n[i++] = 0),
                          (n[i++] = 0),
                          (n[i++] = 0),
                          (n[i++] = (t >>> 24) & 255),
                          (n[i++] = (t >>> 16) & 255),
                          (n[i++] = (t >>> 8) & 255),
                          (n[i++] = 255 & t);
                        } else {
                          for (
                            n[i++] = 255 & t,
                            n[i++] = (t >>> 8) & 255,
                            n[i++] = (t >>> 16) & 255,
                            n[i++] = (t >>> 24) & 255,
                            n[i++] = 0,
                            n[i++] = 0,
                            n[i++] = 0,
                            n[i++] = 0,
                            o = 8;
                            o < this.padLength;
                            o++
                          ) n[i++] = 0;
                        }
                        return n;
                      });
                    },
                    { 464: 464, 473: 473 },
                  ],
                  455: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(473);
                      function o(t, e, r) {
                        if (!(this instanceof o)) return new o(t, e, r);
                        (this.Hash = t),
                        (this.blockSize = t.blockSize / 8),
                        (this.outSize = t.outSize / 8),
                        (this.inner = null),
                        (this.outer = null),
                        this._init(n.toArray(e, r));
                      }
                      (e.exports = o),
                      (o.prototype._init = function (t) {
                        t.length > this.blockSize && (t = new this.Hash().update(t).digest()),
                        i(t.length <= this.blockSize);
                        for (var e = t.length; e < this.blockSize; e++) t.push(0);
                        for (e = 0; e < t.length; e++) t[e] ^= 54;
                        for (this.inner = new this.Hash().update(t), e = 0; e < t.length; e++) t[e] ^= 106;
                        this.outer = new this.Hash().update(t);
                      }),
                      (o.prototype.update = function (t, e) {
                        return this.inner.update(t, e), this;
                      }),
                      (o.prototype.digest = function (t) {
                        return this.outer.update(this.inner.digest()), this.outer.digest(t);
                      });
                    },
                    { 464: 464, 473: 473 },
                  ],
                  456: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(454);
                      const o = n.rotl32;
                      const a = n.sum32;
                      const s = n.sum32_3;
                      const f = n.sum32_4;
                      const u = i.BlockHash;
                      function c() {
                        if (!(this instanceof c)) return new c();
                        u.call(this),
                        (this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]),
                        (this.endian = 'little');
                      }
                      function h(t, e, r, n) {
                        return t <= 15
                          ? e ^ r ^ n
                          : t <= 31
                            ? (e & r) | (~e & n)
                            : t <= 47
                              ? (e | ~r) ^ n
                              : t <= 63
                                ? (e & n) | (r & ~n)
                                : e ^ (r | ~n);
                      }
                      function d(t) {
                        return t <= 15
                          ? 0
                          : t <= 31
                            ? 1518500249
                            : t <= 47
                              ? 1859775393
                              : t <= 63
                                ? 2400959708
                                : 2840853838;
                      }
                      function l(t) {
                        return t <= 15
                          ? 1352829926
                          : t <= 31
                            ? 1548603684
                            : t <= 47
                              ? 1836072691
                              : t <= 63
                                ? 2053994217
                                : 0;
                      }
                      n.inherits(c, u),
                      (r.ripemd160 = c),
                      (c.blockSize = 512),
                      (c.outSize = 160),
                      (c.hmacStrength = 192),
                      (c.padLength = 64),
                      (c.prototype._update = function (t, e) {
                        for (
                          var r = this.h[0],
                            n = this.h[1],
                            i = this.h[2],
                            u = this.h[3],
                            c = this.h[4],
                            y = r,
                            m = n,
                            w = i,
                            _ = u,
                            S = c,
                            M = 0;
                          M < 80;
                          M++
                        ) {
                          var E = a(o(f(r, h(M, n, i, u), t[p[M] + e], d(M)), v[M]), c);
                          (r = c),
                          (c = u),
                          (u = o(i, 10)),
                          (i = n),
                          (n = E),
                          (E = a(o(f(y, h(79 - M, m, w, _), t[b[M] + e], l(M)), g[M]), S)),
                          (y = S),
                          (S = _),
                          (_ = o(w, 10)),
                          (w = m),
                          (m = E);
                        }
                        (E = s(this.h[1], i, _)),
                        (this.h[1] = s(this.h[2], u, S)),
                        (this.h[2] = s(this.h[3], c, y)),
                        (this.h[3] = s(this.h[4], r, m)),
                        (this.h[4] = s(this.h[0], n, w)),
                        (this.h[0] = E);
                      }),
                      (c.prototype._digest = function (t) {
                        return t === 'hex'
                          ? n.toHex32(this.h, 'little')
                          : n.split32(this.h, 'little');
                      });
                      var p = [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        7,
                        4,
                        13,
                        1,
                        10,
                        6,
                        15,
                        3,
                        12,
                        0,
                        9,
                        5,
                        2,
                        14,
                        11,
                        8,
                        3,
                        10,
                        14,
                        4,
                        9,
                        15,
                        8,
                        1,
                        2,
                        7,
                        0,
                        6,
                        13,
                        11,
                        5,
                        12,
                        1,
                        9,
                        11,
                        10,
                        0,
                        8,
                        12,
                        4,
                        13,
                        3,
                        7,
                        15,
                        14,
                        5,
                        6,
                        2,
                        4,
                        0,
                        5,
                        9,
                        7,
                        12,
                        2,
                        10,
                        14,
                        1,
                        3,
                        8,
                        11,
                        6,
                        15,
                        13,
                      ];
                      var b = [
                        5,
                        14,
                        7,
                        0,
                        9,
                        2,
                        11,
                        4,
                        13,
                        6,
                        15,
                        8,
                        1,
                        10,
                        3,
                        12,
                        6,
                        11,
                        3,
                        7,
                        0,
                        13,
                        5,
                        10,
                        14,
                        15,
                        8,
                        12,
                        4,
                        9,
                        1,
                        2,
                        15,
                        5,
                        1,
                        3,
                        7,
                        14,
                        6,
                        9,
                        11,
                        8,
                        12,
                        2,
                        10,
                        0,
                        4,
                        13,
                        8,
                        6,
                        4,
                        1,
                        3,
                        11,
                        15,
                        0,
                        5,
                        12,
                        2,
                        13,
                        9,
                        7,
                        10,
                        14,
                        12,
                        15,
                        10,
                        4,
                        1,
                        5,
                        8,
                        7,
                        6,
                        2,
                        13,
                        14,
                        0,
                        3,
                        9,
                        11,
                      ];
                      var v = [
                        11,
                        14,
                        15,
                        12,
                        5,
                        8,
                        7,
                        9,
                        11,
                        13,
                        14,
                        15,
                        6,
                        7,
                        9,
                        8,
                        7,
                        6,
                        8,
                        13,
                        11,
                        9,
                        7,
                        15,
                        7,
                        12,
                        15,
                        9,
                        11,
                        7,
                        13,
                        12,
                        11,
                        13,
                        6,
                        7,
                        14,
                        9,
                        13,
                        15,
                        14,
                        8,
                        13,
                        6,
                        5,
                        12,
                        7,
                        5,
                        11,
                        12,
                        14,
                        15,
                        14,
                        15,
                        9,
                        8,
                        9,
                        14,
                        5,
                        6,
                        8,
                        6,
                        5,
                        12,
                        9,
                        15,
                        5,
                        11,
                        6,
                        8,
                        13,
                        12,
                        5,
                        12,
                        13,
                        14,
                        11,
                        8,
                        5,
                        6,
                      ];
                      var g = [
                        8,
                        9,
                        9,
                        11,
                        13,
                        15,
                        15,
                        5,
                        7,
                        7,
                        8,
                        11,
                        14,
                        14,
                        12,
                        6,
                        9,
                        13,
                        15,
                        7,
                        12,
                        8,
                        9,
                        11,
                        7,
                        7,
                        12,
                        7,
                        6,
                        15,
                        13,
                        11,
                        9,
                        7,
                        15,
                        11,
                        8,
                        6,
                        6,
                        14,
                        12,
                        13,
                        5,
                        14,
                        13,
                        13,
                        7,
                        5,
                        15,
                        5,
                        8,
                        11,
                        14,
                        14,
                        6,
                        14,
                        6,
                        9,
                        12,
                        9,
                        12,
                        5,
                        15,
                        8,
                        8,
                        5,
                        12,
                        9,
                        12,
                        5,
                        14,
                        6,
                        8,
                        13,
                        6,
                        5,
                        15,
                        13,
                        11,
                        11,
                      ];
                    },
                    { 454: 454, 464: 464 },
                  ],
                  457: [
                    function (t, e, r) {
                      (r.sha1 = t(458)),
                      (r.sha224 = t(459)),
                      (r.sha256 = t(460)),
                      (r.sha384 = t(461)),
                      (r.sha512 = t(462));
                    },
                    {
                      458: 458, 459: 459, 460: 460, 461: 461, 462: 462,
                    },
                  ],
                  458: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(454);
                      const o = t(463);
                      const a = n.rotl32;
                      const s = n.sum32;
                      const f = n.sum32_5;
                      const u = o.ft_1;
                      const c = i.BlockHash;
                      const h = [1518500249, 1859775393, 2400959708, 3395469782];
                      function d() {
                        if (!(this instanceof d)) return new d();
                        c.call(this),
                        (this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]),
                        (this.W = new Array(80));
                      }
                      n.inherits(d, c),
                      (e.exports = d),
                      (d.blockSize = 512),
                      (d.outSize = 160),
                      (d.hmacStrength = 80),
                      (d.padLength = 64),
                      (d.prototype._update = function (t, e) {
                        for (var r = this.W, n = 0; n < 16; n++) r[n] = t[e + n];
                        for (; n < r.length; n++) r[n] = a(r[n - 3] ^ r[n - 8] ^ r[n - 14] ^ r[n - 16], 1);
                        let i = this.h[0];
                        let o = this.h[1];
                        let c = this.h[2];
                        let d = this.h[3];
                        let l = this.h[4];
                        for (n = 0; n < r.length; n++) {
                          const p = ~~(n / 20);
                          const b = f(a(i, 5), u(p, o, c, d), l, r[n], h[p]);
                          (l = d), (d = c), (c = a(o, 30)), (o = i), (i = b);
                        }
                        (this.h[0] = s(this.h[0], i)),
                        (this.h[1] = s(this.h[1], o)),
                        (this.h[2] = s(this.h[2], c)),
                        (this.h[3] = s(this.h[3], d)),
                        (this.h[4] = s(this.h[4], l));
                      }),
                      (d.prototype._digest = function (t) {
                        return t === 'hex'
                          ? n.toHex32(this.h, 'big')
                          : n.split32(this.h, 'big');
                      });
                    },
                    { 454: 454, 463: 463, 464: 464 },
                  ],
                  459: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(460);
                      function o() {
                        if (!(this instanceof o)) return new o();
                        i.call(this),
                        (this.h = [
                          3238371032,
                          914150663,
                          812702999,
                          4144912697,
                          4290775857,
                          1750603025,
                          1694076839,
                          3204075428,
                        ]);
                      }
                      n.inherits(o, i),
                      (e.exports = o),
                      (o.blockSize = 512),
                      (o.outSize = 224),
                      (o.hmacStrength = 192),
                      (o.padLength = 64),
                      (o.prototype._digest = function (t) {
                        return t === 'hex'
                          ? n.toHex32(this.h.slice(0, 7), 'big')
                          : n.split32(this.h.slice(0, 7), 'big');
                      });
                    },
                    { 460: 460, 464: 464 },
                  ],
                  460: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(454);
                      const o = t(463);
                      const a = t(473);
                      const s = n.sum32;
                      const f = n.sum32_4;
                      const u = n.sum32_5;
                      const c = o.ch32;
                      const h = o.maj32;
                      const d = o.s0_256;
                      const l = o.s1_256;
                      const p = o.g0_256;
                      const b = o.g1_256;
                      const v = i.BlockHash;
                      const g = [
                        1116352408,
                        1899447441,
                        3049323471,
                        3921009573,
                        961987163,
                        1508970993,
                        2453635748,
                        2870763221,
                        3624381080,
                        310598401,
                        607225278,
                        1426881987,
                        1925078388,
                        2162078206,
                        2614888103,
                        3248222580,
                        3835390401,
                        4022224774,
                        264347078,
                        604807628,
                        770255983,
                        1249150122,
                        1555081692,
                        1996064986,
                        2554220882,
                        2821834349,
                        2952996808,
                        3210313671,
                        3336571891,
                        3584528711,
                        113926993,
                        338241895,
                        666307205,
                        773529912,
                        1294757372,
                        1396182291,
                        1695183700,
                        1986661051,
                        2177026350,
                        2456956037,
                        2730485921,
                        2820302411,
                        3259730800,
                        3345764771,
                        3516065817,
                        3600352804,
                        4094571909,
                        275423344,
                        430227734,
                        506948616,
                        659060556,
                        883997877,
                        958139571,
                        1322822218,
                        1537002063,
                        1747873779,
                        1955562222,
                        2024104815,
                        2227730452,
                        2361852424,
                        2428436474,
                        2756734187,
                        3204031479,
                        3329325298,
                      ];
                      function y() {
                        if (!(this instanceof y)) return new y();
                        v.call(this),
                        (this.h = [
                          1779033703,
                          3144134277,
                          1013904242,
                          2773480762,
                          1359893119,
                          2600822924,
                          528734635,
                          1541459225,
                        ]),
                        (this.k = g),
                        (this.W = new Array(64));
                      }
                      n.inherits(y, v),
                      (e.exports = y),
                      (y.blockSize = 512),
                      (y.outSize = 256),
                      (y.hmacStrength = 192),
                      (y.padLength = 64),
                      (y.prototype._update = function (t, e) {
                        for (var r = this.W, n = 0; n < 16; n++) r[n] = t[e + n];
                        for (; n < r.length; n++) r[n] = f(b(r[n - 2]), r[n - 7], p(r[n - 15]), r[n - 16]);
                        let i = this.h[0];
                        let o = this.h[1];
                        let v = this.h[2];
                        let g = this.h[3];
                        let y = this.h[4];
                        let m = this.h[5];
                        let w = this.h[6];
                        let _ = this.h[7];
                        for (a(this.k.length === r.length), n = 0; n < r.length; n++) {
                          const S = u(_, l(y), c(y, m, w), this.k[n], r[n]);
                          const M = s(d(i), h(i, o, v));
                          (_ = w),
                          (w = m),
                          (m = y),
                          (y = s(g, S)),
                          (g = v),
                          (v = o),
                          (o = i),
                          (i = s(S, M));
                        }
                        (this.h[0] = s(this.h[0], i)),
                        (this.h[1] = s(this.h[1], o)),
                        (this.h[2] = s(this.h[2], v)),
                        (this.h[3] = s(this.h[3], g)),
                        (this.h[4] = s(this.h[4], y)),
                        (this.h[5] = s(this.h[5], m)),
                        (this.h[6] = s(this.h[6], w)),
                        (this.h[7] = s(this.h[7], _));
                      }),
                      (y.prototype._digest = function (t) {
                        return t === 'hex'
                          ? n.toHex32(this.h, 'big')
                          : n.split32(this.h, 'big');
                      });
                    },
                    {
                      454: 454, 463: 463, 464: 464, 473: 473,
                    },
                  ],
                  461: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(462);
                      function o() {
                        if (!(this instanceof o)) return new o();
                        i.call(this),
                        (this.h = [
                          3418070365,
                          3238371032,
                          1654270250,
                          914150663,
                          2438529370,
                          812702999,
                          355462360,
                          4144912697,
                          1731405415,
                          4290775857,
                          2394180231,
                          1750603025,
                          3675008525,
                          1694076839,
                          1203062813,
                          3204075428,
                        ]);
                      }
                      n.inherits(o, i),
                      (e.exports = o),
                      (o.blockSize = 1024),
                      (o.outSize = 384),
                      (o.hmacStrength = 192),
                      (o.padLength = 128),
                      (o.prototype._digest = function (t) {
                        return t === 'hex'
                          ? n.toHex32(this.h.slice(0, 12), 'big')
                          : n.split32(this.h.slice(0, 12), 'big');
                      });
                    },
                    { 462: 462, 464: 464 },
                  ],
                  462: [
                    function (t, e, r) {
                      const n = t(464);
                      const i = t(454);
                      const o = t(473);
                      const a = n.rotr64_hi;
                      const s = n.rotr64_lo;
                      const f = n.shr64_hi;
                      const u = n.shr64_lo;
                      const c = n.sum64;
                      const h = n.sum64_hi;
                      const d = n.sum64_lo;
                      const l = n.sum64_4_hi;
                      const p = n.sum64_4_lo;
                      const b = n.sum64_5_hi;
                      const v = n.sum64_5_lo;
                      const g = i.BlockHash;
                      const y = [
                        1116352408,
                        3609767458,
                        1899447441,
                        602891725,
                        3049323471,
                        3964484399,
                        3921009573,
                        2173295548,
                        961987163,
                        4081628472,
                        1508970993,
                        3053834265,
                        2453635748,
                        2937671579,
                        2870763221,
                        3664609560,
                        3624381080,
                        2734883394,
                        310598401,
                        1164996542,
                        607225278,
                        1323610764,
                        1426881987,
                        3590304994,
                        1925078388,
                        4068182383,
                        2162078206,
                        991336113,
                        2614888103,
                        633803317,
                        3248222580,
                        3479774868,
                        3835390401,
                        2666613458,
                        4022224774,
                        944711139,
                        264347078,
                        2341262773,
                        604807628,
                        2007800933,
                        770255983,
                        1495990901,
                        1249150122,
                        1856431235,
                        1555081692,
                        3175218132,
                        1996064986,
                        2198950837,
                        2554220882,
                        3999719339,
                        2821834349,
                        766784016,
                        2952996808,
                        2566594879,
                        3210313671,
                        3203337956,
                        3336571891,
                        1034457026,
                        3584528711,
                        2466948901,
                        113926993,
                        3758326383,
                        338241895,
                        168717936,
                        666307205,
                        1188179964,
                        773529912,
                        1546045734,
                        1294757372,
                        1522805485,
                        1396182291,
                        2643833823,
                        1695183700,
                        2343527390,
                        1986661051,
                        1014477480,
                        2177026350,
                        1206759142,
                        2456956037,
                        344077627,
                        2730485921,
                        1290863460,
                        2820302411,
                        3158454273,
                        3259730800,
                        3505952657,
                        3345764771,
                        106217008,
                        3516065817,
                        3606008344,
                        3600352804,
                        1432725776,
                        4094571909,
                        1467031594,
                        275423344,
                        851169720,
                        430227734,
                        3100823752,
                        506948616,
                        1363258195,
                        659060556,
                        3750685593,
                        883997877,
                        3785050280,
                        958139571,
                        3318307427,
                        1322822218,
                        3812723403,
                        1537002063,
                        2003034995,
                        1747873779,
                        3602036899,
                        1955562222,
                        1575990012,
                        2024104815,
                        1125592928,
                        2227730452,
                        2716904306,
                        2361852424,
                        442776044,
                        2428436474,
                        593698344,
                        2756734187,
                        3733110249,
                        3204031479,
                        2999351573,
                        3329325298,
                        3815920427,
                        3391569614,
                        3928383900,
                        3515267271,
                        566280711,
                        3940187606,
                        3454069534,
                        4118630271,
                        4000239992,
                        116418474,
                        1914138554,
                        174292421,
                        2731055270,
                        289380356,
                        3203993006,
                        460393269,
                        320620315,
                        685471733,
                        587496836,
                        852142971,
                        1086792851,
                        1017036298,
                        365543100,
                        1126000580,
                        2618297676,
                        1288033470,
                        3409855158,
                        1501505948,
                        4234509866,
                        1607167915,
                        987167468,
                        1816402316,
                        1246189591,
                      ];
                      function m() {
                        if (!(this instanceof m)) return new m();
                        g.call(this),
                        (this.h = [
                          1779033703,
                          4089235720,
                          3144134277,
                          2227873595,
                          1013904242,
                          4271175723,
                          2773480762,
                          1595750129,
                          1359893119,
                          2917565137,
                          2600822924,
                          725511199,
                          528734635,
                          4215389547,
                          1541459225,
                          327033209,
                        ]),
                        (this.k = y),
                        (this.W = new Array(160));
                      }
                      function w(t, e, r, n, i) {
                        let o = (t & r) ^ (~t & i);
                        return o < 0 && (o += 4294967296), o;
                      }
                      function _(t, e, r, n, i, o) {
                        let a = (e & n) ^ (~e & o);
                        return a < 0 && (a += 4294967296), a;
                      }
                      function S(t, e, r, n, i) {
                        let o = (t & r) ^ (t & i) ^ (r & i);
                        return o < 0 && (o += 4294967296), o;
                      }
                      function M(t, e, r, n, i, o) {
                        let a = (e & n) ^ (e & o) ^ (n & o);
                        return a < 0 && (a += 4294967296), a;
                      }
                      function E(t, e) {
                        let r = a(t, e, 28) ^ a(e, t, 2) ^ a(e, t, 7);
                        return r < 0 && (r += 4294967296), r;
                      }
                      function k(t, e) {
                        let r = s(t, e, 28) ^ s(e, t, 2) ^ s(e, t, 7);
                        return r < 0 && (r += 4294967296), r;
                      }
                      function x(t, e) {
                        let r = a(t, e, 14) ^ a(t, e, 18) ^ a(e, t, 9);
                        return r < 0 && (r += 4294967296), r;
                      }
                      function A(t, e) {
                        let r = s(t, e, 14) ^ s(t, e, 18) ^ s(e, t, 9);
                        return r < 0 && (r += 4294967296), r;
                      }
                      function R(t, e) {
                        let r = a(t, e, 1) ^ a(t, e, 8) ^ f(t, e, 7);
                        return r < 0 && (r += 4294967296), r;
                      }
                      function I(t, e) {
                        let r = s(t, e, 1) ^ s(t, e, 8) ^ u(t, e, 7);
                        return r < 0 && (r += 4294967296), r;
                      }
                      function T(t, e) {
                        let r = a(t, e, 19) ^ a(e, t, 29) ^ f(t, e, 6);
                        return r < 0 && (r += 4294967296), r;
                      }
                      function B(t, e) {
                        let r = s(t, e, 19) ^ s(e, t, 29) ^ u(t, e, 6);
                        return r < 0 && (r += 4294967296), r;
                      }
                      n.inherits(m, g),
                      (e.exports = m),
                      (m.blockSize = 1024),
                      (m.outSize = 512),
                      (m.hmacStrength = 192),
                      (m.padLength = 128),
                      (m.prototype._prepareBlock = function (t, e) {
                        for (var r = this.W, n = 0; n < 32; n++) r[n] = t[e + n];
                        for (; n < r.length; n += 2) {
                          const i = T(r[n - 4], r[n - 3]);
                          const o = B(r[n - 4], r[n - 3]);
                          const a = r[n - 14];
                          const s = r[n - 13];
                          const f = R(r[n - 30], r[n - 29]);
                          const u = I(r[n - 30], r[n - 29]);
                          const c = r[n - 32];
                          const h = r[n - 31];
                          (r[n] = l(i, o, a, s, f, u, c, h)),
                          (r[n + 1] = p(i, o, a, s, f, u, c, h));
                        }
                      }),
                      (m.prototype._update = function (t, e) {
                        this._prepareBlock(t, e);
                        const r = this.W;
                        let n = this.h[0];
                        let i = this.h[1];
                        let a = this.h[2];
                        let s = this.h[3];
                        let f = this.h[4];
                        let u = this.h[5];
                        let l = this.h[6];
                        let p = this.h[7];
                        let g = this.h[8];
                        let y = this.h[9];
                        let m = this.h[10];
                        let R = this.h[11];
                        let I = this.h[12];
                        let T = this.h[13];
                        let B = this.h[14];
                        let P = this.h[15];
                        o(this.k.length === r.length);
                        for (let O = 0; O < r.length; O += 2) {
                          let C = B;
                          let L = P;
                          let j = x(g, y);
                          let N = A(g, y);
                          const D = w(g, y, m, R, I);
                          const U = _(g, y, m, R, I, T);
                          const F = this.k[O];
                          const q = this.k[O + 1];
                          const z = r[O];
                          const W = r[O + 1];
                          const V = b(C, L, j, N, D, U, F, q, z, W);
                          const H = v(C, L, j, N, D, U, F, q, z, W);
                          (C = E(n, i)),
                          (L = k(n, i)),
                          (j = S(n, i, a, s, f)),
                          (N = M(n, i, a, s, f, u));
                          const G = h(C, L, j, N);
                          const K = d(C, L, j, N);
                          (B = I),
                          (P = T),
                          (I = m),
                          (T = R),
                          (m = g),
                          (R = y),
                          (g = h(l, p, V, H)),
                          (y = d(p, p, V, H)),
                          (l = f),
                          (p = u),
                          (f = a),
                          (u = s),
                          (a = n),
                          (s = i),
                          (n = h(V, H, G, K)),
                          (i = d(V, H, G, K));
                        }
                        c(this.h, 0, n, i),
                        c(this.h, 2, a, s),
                        c(this.h, 4, f, u),
                        c(this.h, 6, l, p),
                        c(this.h, 8, g, y),
                        c(this.h, 10, m, R),
                        c(this.h, 12, I, T),
                        c(this.h, 14, B, P);
                      }),
                      (m.prototype._digest = function (t) {
                        return t === 'hex'
                          ? n.toHex32(this.h, 'big')
                          : n.split32(this.h, 'big');
                      });
                    },
                    { 454: 454, 464: 464, 473: 473 },
                  ],
                  463: [
                    function (t, e, r) {
                      const n = t(464).rotr32;
                      function i(t, e, r) {
                        return (t & e) ^ (~t & r);
                      }
                      function o(t, e, r) {
                        return (t & e) ^ (t & r) ^ (e & r);
                      }
                      function a(t, e, r) {
                        return t ^ e ^ r;
                      }
                      (r.ft_1 = function (t, e, r, n) {
                        return t === 0
                          ? i(e, r, n)
                          : t === 1 || t === 3
                            ? a(e, r, n)
                            : t === 2
                              ? o(e, r, n)
                              : void 0;
                      }),
                      (r.ch32 = i),
                      (r.maj32 = o),
                      (r.p32 = a),
                      (r.s0_256 = function (t) {
                        return n(t, 2) ^ n(t, 13) ^ n(t, 22);
                      }),
                      (r.s1_256 = function (t) {
                        return n(t, 6) ^ n(t, 11) ^ n(t, 25);
                      }),
                      (r.g0_256 = function (t) {
                        return n(t, 7) ^ n(t, 18) ^ (t >>> 3);
                      }),
                      (r.g1_256 = function (t) {
                        return n(t, 17) ^ n(t, 19) ^ (t >>> 10);
                      });
                    },
                    { 464: 464 },
                  ],
                  464: [
                    function (t, e, r) {
                      const n = t(473);
                      const i = t(467);
                      function o(t, e) {
                        return (
                          (64512 & t.charCodeAt(e)) == 55296
                            && !(e < 0 || e + 1 >= t.length)
                            && (64512 & t.charCodeAt(e + 1)) == 56320
                        );
                      }
                      function a(t) {
                        return (
                          ((t >>> 24)
                              | ((t >>> 8) & 65280)
                              | ((t << 8) & 16711680)
                              | ((255 & t) << 24))
                            >>> 0
                        );
                      }
                      function s(t) {
                        return t.length === 1 ? `0${t}` : t;
                      }
                      function f(t) {
                        return t.length === 7
                          ? `0${t}`
                          : t.length === 6
                            ? `00${t}`
                            : t.length === 5
                              ? `000${t}`
                              : t.length === 4
                                ? `0000${t}`
                                : t.length === 3
                                  ? `00000${t}`
                                  : t.length === 2
                                    ? `000000${t}`
                                    : t.length === 1
                                      ? `0000000${t}`
                                      : t;
                      }
                      (r.inherits = i),
                      (r.toArray = function (t, e) {
                        if (Array.isArray(t)) return t.slice();
                        if (!t) return [];
                        const r = [];
                        if (typeof t === 'string') {
                          if (e) {
                            if (e === 'hex') {
                              for (
                                (t = t.replace(/[^a-z0-9]+/gi, '')).length % 2 != 0
                                      && (t = `0${t}`),
                                i = 0;
                                i < t.length;
                                i += 2
                              ) r.push(parseInt(t[i] + t[i + 1], 16));
                            }
                          } else {
                            for (var n = 0, i = 0; i < t.length; i++) {
                              let a = t.charCodeAt(i);
                              a < 128
                                ? (r[n++] = a)
                                : a < 2048
                                  ? ((r[n++] = (a >> 6) | 192), (r[n++] = (63 & a) | 128))
                                  : o(t, i)
                                    ? ((a = 65536 + ((1023 & a) << 10) + (1023 & t.charCodeAt(++i))),
                                    (r[n++] = (a >> 18) | 240),
                                    (r[n++] = ((a >> 12) & 63) | 128),
                                    (r[n++] = ((a >> 6) & 63) | 128),
                                    (r[n++] = (63 & a) | 128))
                                    : ((r[n++] = (a >> 12) | 224),
                                    (r[n++] = ((a >> 6) & 63) | 128),
                                    (r[n++] = (63 & a) | 128));
                            }
                          }
                        } else for (i = 0; i < t.length; i++) r[i] = 0 | t[i];
                        return r;
                      }),
                      (r.toHex = function (t) {
                        for (var e = '', r = 0; r < t.length; r++) e += s(t[r].toString(16));
                        return e;
                      }),
                      (r.htonl = a),
                      (r.toHex32 = function (t, e) {
                        for (var r = '', n = 0; n < t.length; n++) {
                          let i = t[n];
                          e === 'little' && (i = a(i)), (r += f(i.toString(16)));
                        }
                        return r;
                      }),
                      (r.zero2 = s),
                      (r.zero8 = f),
                      (r.join32 = function (t, e, r, i) {
                        const o = r - e;
                        n(o % 4 == 0);
                        for (
                          var a = new Array(o / 4), s = 0, f = e;
                          s < a.length;
                          s++, f += 4
                        ) {
                          var u;
                          (u = i === 'big'
                            ? (t[f] << 24) | (t[f + 1] << 16) | (t[f + 2] << 8) | t[f + 3]
                            : (t[f + 3] << 24) | (t[f + 2] << 16) | (t[f + 1] << 8) | t[f]),
                          (a[s] = u >>> 0);
                        }
                        return a;
                      }),
                      (r.split32 = function (t, e) {
                        for (
                          var r = new Array(4 * t.length), n = 0, i = 0;
                          n < t.length;
                          n++, i += 4
                        ) {
                          const o = t[n];
                          e === 'big'
                            ? ((r[i] = o >>> 24),
                            (r[i + 1] = (o >>> 16) & 255),
                            (r[i + 2] = (o >>> 8) & 255),
                            (r[i + 3] = 255 & o))
                            : ((r[i + 3] = o >>> 24),
                            (r[i + 2] = (o >>> 16) & 255),
                            (r[i + 1] = (o >>> 8) & 255),
                            (r[i] = 255 & o));
                        }
                        return r;
                      }),
                      (r.rotr32 = function (t, e) {
                        return (t >>> e) | (t << (32 - e));
                      }),
                      (r.rotl32 = function (t, e) {
                        return (t << e) | (t >>> (32 - e));
                      }),
                      (r.sum32 = function (t, e) {
                        return (t + e) >>> 0;
                      }),
                      (r.sum32_3 = function (t, e, r) {
                        return (t + e + r) >>> 0;
                      }),
                      (r.sum32_4 = function (t, e, r, n) {
                        return (t + e + r + n) >>> 0;
                      }),
                      (r.sum32_5 = function (t, e, r, n, i) {
                        return (t + e + r + n + i) >>> 0;
                      }),
                      (r.sum64 = function (t, e, r, n) {
                        const i = t[e];
                        const o = (n + t[e + 1]) >>> 0;
                        const a = (o < n ? 1 : 0) + r + i;
                        (t[e] = a >>> 0), (t[e + 1] = o);
                      }),
                      (r.sum64_hi = function (t, e, r, n) {
                        return (((e + n) >>> 0 < e ? 1 : 0) + t + r) >>> 0;
                      }),
                      (r.sum64_lo = function (t, e, r, n) {
                        return (e + n) >>> 0;
                      }),
                      (r.sum64_4_hi = function (t, e, r, n, i, o, a, s) {
                        let f = 0;
                        let u = e;
                        return (
                          (f += (u = (u + n) >>> 0) < e ? 1 : 0),
                          (f += (u = (u + o) >>> 0) < o ? 1 : 0),
                          (t + r + i + a + (f += (u = (u + s) >>> 0) < s ? 1 : 0)) >>> 0
                        );
                      }),
                      (r.sum64_4_lo = function (t, e, r, n, i, o, a, s) {
                        return (e + n + o + s) >>> 0;
                      }),
                      (r.sum64_5_hi = function (t, e, r, n, i, o, a, s, f, u) {
                        let c = 0;
                        let h = e;
                        return (
                          (c += (h = (h + n) >>> 0) < e ? 1 : 0),
                          (c += (h = (h + o) >>> 0) < o ? 1 : 0),
                          (c += (h = (h + s) >>> 0) < s ? 1 : 0),
                          (t + r + i + a + f + (c += (h = (h + u) >>> 0) < u ? 1 : 0)) >>> 0
                        );
                      }),
                      (r.sum64_5_lo = function (t, e, r, n, i, o, a, s, f, u) {
                        return (e + n + o + s + u) >>> 0;
                      }),
                      (r.rotr64_hi = function (t, e, r) {
                        return ((e << (32 - r)) | (t >>> r)) >>> 0;
                      }),
                      (r.rotr64_lo = function (t, e, r) {
                        return ((t << (32 - r)) | (e >>> r)) >>> 0;
                      }),
                      (r.shr64_hi = function (t, e, r) {
                        return t >>> r;
                      }),
                      (r.shr64_lo = function (t, e, r) {
                        return ((t << (32 - r)) | (e >>> r)) >>> 0;
                      });
                    },
                    { 467: 467, 473: 473 },
                  ],
                  465: [
                    function (t, e, r) {
                      const n = t(453);
                      const i = t(474);
                      const o = t(473);
                      function a(t) {
                        if (!(this instanceof a)) return new a(t);
                        (this.hash = t.hash),
                        (this.predResist = !!t.predResist),
                        (this.outLen = this.hash.outSize),
                        (this.minEntropy = t.minEntropy || this.hash.hmacStrength),
                        (this._reseed = null),
                        (this.reseedInterval = null),
                        (this.K = null),
                        (this.V = null);
                        const e = i.toArray(t.entropy, t.entropyEnc || 'hex');
                        const r = i.toArray(t.nonce, t.nonceEnc || 'hex');
                        const n = i.toArray(t.pers, t.persEnc || 'hex');
                        o(
                          e.length >= this.minEntropy / 8,
                          `Not enough entropy. Minimum is: ${this.minEntropy} bits`,
                        ),
                        this._init(e, r, n);
                      }
                      (e.exports = a),
                      (a.prototype._init = function (t, e, r) {
                        const n = t.concat(e).concat(r);
                        (this.K = new Array(this.outLen / 8)),
                        (this.V = new Array(this.outLen / 8));
                        for (let i = 0; i < this.V.length; i++) (this.K[i] = 0), (this.V[i] = 1);
                        this._update(n),
                        (this._reseed = 1),
                        (this.reseedInterval = 281474976710656);
                      }),
                      (a.prototype._hmac = function () {
                        return new n.hmac(this.hash, this.K);
                      }),
                      (a.prototype._update = function (t) {
                        let e = this._hmac()
                          .update(this.V)
                          .update([0]);
                        t && (e = e.update(t)),
                        (this.K = e.digest()),
                        (this.V = this._hmac()
                          .update(this.V)
                          .digest()),
                        t
                                && ((this.K = this._hmac()
                                  .update(this.V)
                                  .update([1])
                                  .update(t)
                                  .digest()),
                                (this.V = this._hmac()
                                  .update(this.V)
                                  .digest()));
                      }),
                      (a.prototype.reseed = function (t, e, r, n) {
                        typeof e !== 'string' && ((n = r), (r = e), (e = null)),
                        (t = i.toArray(t, e)),
                        (r = i.toArray(r, n)),
                        o(
                          t.length >= this.minEntropy / 8,
                          `Not enough entropy. Minimum is: ${this.minEntropy} bits`,
                        ),
                        this._update(t.concat(r || [])),
                        (this._reseed = 1);
                      }),
                      (a.prototype.generate = function (t, e, r, n) {
                        if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
                        typeof e !== 'string' && ((n = r), (r = e), (e = null)),
                        r && ((r = i.toArray(r, n || 'hex')), this._update(r));
                        for (var o = []; o.length < t;) {
                          (this.V = this._hmac()
                            .update(this.V)
                            .digest()),
                          (o = o.concat(this.V));
                        }
                        const a = o.slice(0, t);
                        return this._update(r), this._reseed++, i.encode(a, e);
                      });
                    },
                    { 453: 453, 473: 473, 474: 474 },
                  ],
                  466: [
                    function (t, e, r) {
                      /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ (r.read = function (
                        t,
                        e,
                        r,
                        n,
                        i,
                      ) {
                        let o;
                        let a;
                        const s = 8 * i - n - 1;
                        const f = (1 << s) - 1;
                        const u = f >> 1;
                        let c = -7;
                        let h = r ? i - 1 : 0;
                        const d = r ? -1 : 1;
                        let l = t[e + h];
                        for (
                          h += d, o = l & ((1 << -c) - 1), l >>= -c, c += s;
                          c > 0;
                          o = 256 * o + t[e + h], h += d, c -= 8
                        );
                        for (
                          a = o & ((1 << -c) - 1), o >>= -c, c += n;
                          c > 0;
                          a = 256 * a + t[e + h], h += d, c -= 8
                        );
                        if (o === 0) o = 1 - u;
                        else {
                          if (o === f) return a ? NaN : (1 / 0) * (l ? -1 : 1);
                          (a += Math.pow(2, n)), (o -= u);
                        }
                        return (l ? -1 : 1) * a * Math.pow(2, o - n);
                      }),
                      (r.write = function (t, e, r, n, i, o) {
                        let a;
                        let s;
                        let f;
                        let u = 8 * o - i - 1;
                        const c = (1 << u) - 1;
                        const h = c >> 1;
                        const d = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                        let l = n ? 0 : o - 1;
                        const p = n ? 1 : -1;
                        const b = e < 0 || (e === 0 && 1 / e < 0) ? 1 : 0;
                        for (
                          e = Math.abs(e),
                          isNaN(e) || e === 1 / 0
                            ? ((s = isNaN(e) ? 1 : 0), (a = c))
                            : ((a = Math.floor(Math.log(e) / Math.LN2)),
                            e * (f = Math.pow(2, -a)) < 1 && (a--, (f *= 2)),
                            (e += a + h >= 1 ? d / f : d * Math.pow(2, 1 - h)) * f >= 2
                                      && (a++, (f /= 2)),
                            a + h >= c
                              ? ((s = 0), (a = c))
                              : a + h >= 1
                                ? ((s = (e * f - 1) * Math.pow(2, i)), (a += h))
                                : ((s = e * Math.pow(2, h - 1) * Math.pow(2, i)), (a = 0)));
                          i >= 8;
                          t[r + l] = 255 & s, l += p, s /= 256, i -= 8
                        );
                        for (
                          a = (a << i) | s, u += i;
                          u > 0;
                          t[r + l] = 255 & a, l += p, a /= 256, u -= 8
                        );
                        t[r + l - p] |= 128 * b;
                      });
                    },
                    {},
                  ],
                  467: [
                    function (t, e, r) {
                      typeof Object.create === 'function'
                        ? (e.exports = function (t, e) {
                          e
                                && ((t.super_ = e),
                                (t.prototype = Object.create(e.prototype, {
                                  constructor: {
                                    value: t,
                                    enumerable: !1,
                                    writable: !0,
                                    configurable: !0,
                                  },
                                })));
                        })
                        : (e.exports = function (t, e) {
                          if (e) {
                            t.super_ = e;
                            const r = function () {};
                            (r.prototype = e.prototype),
                            (t.prototype = new r()),
                            (t.prototype.constructor = t);
                          }
                        });
                    },
                    {},
                  ],
                  468: [
                    function (t, e, r) {
                      function n(t) {
                        return (
                          !!t.constructor
                            && typeof t.constructor.isBuffer === 'function'
                            && t.constructor.isBuffer(t)
                        );
                      }
                      /*!
                         * Determine if an object is a Buffer
                         *
                         * @author   Feross Aboukhadijeh <https://feross.org>
                         * @license  MIT
                         */ e.exports = function (t) {
                        return (
                          t != null
                            && (n(t)
                              || (function (t) {
                                return (
                                  typeof t.readFloatLE === 'function'
                                  && typeof t.slice === 'function'
                                  && n(t.slice(0, 0))
                                );
                              }(t))
                              || !!t._isBuffer)
                        );
                      };
                    },
                    {},
                  ],
                  469: [
                    function (t, e, r) {
                      const n = {}.toString;
                      e.exports = Array.isArray
                          || function (t) {
                            return n.call(t) == '[object Array]';
                          };
                    },
                    {},
                  ],
                  470: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(436);
                      const o = t(514).Buffer;
                      const a = new Array(16);
                      function s() {
                        i.call(this, 64),
                        (this._a = 1732584193),
                        (this._b = 4023233417),
                        (this._c = 2562383102),
                        (this._d = 271733878);
                      }
                      function f(t, e) {
                        return (t << e) | (t >>> (32 - e));
                      }
                      function u(t, e, r, n, i, o, a) {
                        return (f((t + ((e & r) | (~e & n)) + i + o) | 0, a) + e) | 0;
                      }
                      function c(t, e, r, n, i, o, a) {
                        return (f((t + ((e & n) | (r & ~n)) + i + o) | 0, a) + e) | 0;
                      }
                      function h(t, e, r, n, i, o, a) {
                        return (f((t + (e ^ r ^ n) + i + o) | 0, a) + e) | 0;
                      }
                      function d(t, e, r, n, i, o, a) {
                        return (f((t + (r ^ (e | ~n)) + i + o) | 0, a) + e) | 0;
                      }
                      n(s, i),
                      (s.prototype._update = function () {
                        for (var t = a, e = 0; e < 16; ++e) t[e] = this._block.readInt32LE(4 * e);
                        let r = this._a;
                        let n = this._b;
                        let i = this._c;
                        let o = this._d;
                        (r = u(r, n, i, o, t[0], 3614090360, 7)),
                        (o = u(o, r, n, i, t[1], 3905402710, 12)),
                        (i = u(i, o, r, n, t[2], 606105819, 17)),
                        (n = u(n, i, o, r, t[3], 3250441966, 22)),
                        (r = u(r, n, i, o, t[4], 4118548399, 7)),
                        (o = u(o, r, n, i, t[5], 1200080426, 12)),
                        (i = u(i, o, r, n, t[6], 2821735955, 17)),
                        (n = u(n, i, o, r, t[7], 4249261313, 22)),
                        (r = u(r, n, i, o, t[8], 1770035416, 7)),
                        (o = u(o, r, n, i, t[9], 2336552879, 12)),
                        (i = u(i, o, r, n, t[10], 4294925233, 17)),
                        (n = u(n, i, o, r, t[11], 2304563134, 22)),
                        (r = u(r, n, i, o, t[12], 1804603682, 7)),
                        (o = u(o, r, n, i, t[13], 4254626195, 12)),
                        (i = u(i, o, r, n, t[14], 2792965006, 17)),
                        (r = c(
                          r,
                          (n = u(n, i, o, r, t[15], 1236535329, 22)),
                          i,
                          o,
                          t[1],
                          4129170786,
                          5,
                        )),
                        (o = c(o, r, n, i, t[6], 3225465664, 9)),
                        (i = c(i, o, r, n, t[11], 643717713, 14)),
                        (n = c(n, i, o, r, t[0], 3921069994, 20)),
                        (r = c(r, n, i, o, t[5], 3593408605, 5)),
                        (o = c(o, r, n, i, t[10], 38016083, 9)),
                        (i = c(i, o, r, n, t[15], 3634488961, 14)),
                        (n = c(n, i, o, r, t[4], 3889429448, 20)),
                        (r = c(r, n, i, o, t[9], 568446438, 5)),
                        (o = c(o, r, n, i, t[14], 3275163606, 9)),
                        (i = c(i, o, r, n, t[3], 4107603335, 14)),
                        (n = c(n, i, o, r, t[8], 1163531501, 20)),
                        (r = c(r, n, i, o, t[13], 2850285829, 5)),
                        (o = c(o, r, n, i, t[2], 4243563512, 9)),
                        (i = c(i, o, r, n, t[7], 1735328473, 14)),
                        (r = h(
                          r,
                          (n = c(n, i, o, r, t[12], 2368359562, 20)),
                          i,
                          o,
                          t[5],
                          4294588738,
                          4,
                        )),
                        (o = h(o, r, n, i, t[8], 2272392833, 11)),
                        (i = h(i, o, r, n, t[11], 1839030562, 16)),
                        (n = h(n, i, o, r, t[14], 4259657740, 23)),
                        (r = h(r, n, i, o, t[1], 2763975236, 4)),
                        (o = h(o, r, n, i, t[4], 1272893353, 11)),
                        (i = h(i, o, r, n, t[7], 4139469664, 16)),
                        (n = h(n, i, o, r, t[10], 3200236656, 23)),
                        (r = h(r, n, i, o, t[13], 681279174, 4)),
                        (o = h(o, r, n, i, t[0], 3936430074, 11)),
                        (i = h(i, o, r, n, t[3], 3572445317, 16)),
                        (n = h(n, i, o, r, t[6], 76029189, 23)),
                        (r = h(r, n, i, o, t[9], 3654602809, 4)),
                        (o = h(o, r, n, i, t[12], 3873151461, 11)),
                        (i = h(i, o, r, n, t[15], 530742520, 16)),
                        (r = d(
                          r,
                          (n = h(n, i, o, r, t[2], 3299628645, 23)),
                          i,
                          o,
                          t[0],
                          4096336452,
                          6,
                        )),
                        (o = d(o, r, n, i, t[7], 1126891415, 10)),
                        (i = d(i, o, r, n, t[14], 2878612391, 15)),
                        (n = d(n, i, o, r, t[5], 4237533241, 21)),
                        (r = d(r, n, i, o, t[12], 1700485571, 6)),
                        (o = d(o, r, n, i, t[3], 2399980690, 10)),
                        (i = d(i, o, r, n, t[10], 4293915773, 15)),
                        (n = d(n, i, o, r, t[1], 2240044497, 21)),
                        (r = d(r, n, i, o, t[8], 1873313359, 6)),
                        (o = d(o, r, n, i, t[15], 4264355552, 10)),
                        (i = d(i, o, r, n, t[6], 2734768916, 15)),
                        (n = d(n, i, o, r, t[13], 1309151649, 21)),
                        (r = d(r, n, i, o, t[4], 4149444226, 6)),
                        (o = d(o, r, n, i, t[11], 3174756917, 10)),
                        (i = d(i, o, r, n, t[2], 718787259, 15)),
                        (n = d(n, i, o, r, t[9], 3951481745, 21)),
                        (this._a = (this._a + r) | 0),
                        (this._b = (this._b + n) | 0),
                        (this._c = (this._c + i) | 0),
                        (this._d = (this._d + o) | 0);
                      }),
                      (s.prototype._digest = function () {
                        (this._block[this._blockOffset++] = 128),
                        this._blockOffset > 56
                                && (this._block.fill(0, this._blockOffset, 64),
                                this._update(),
                                (this._blockOffset = 0)),
                        this._block.fill(0, this._blockOffset, 56),
                        this._block.writeUInt32LE(this._length[0], 56),
                        this._block.writeUInt32LE(this._length[1], 60),
                        this._update();
                        const t = o.allocUnsafe(16);
                        return (
                          t.writeInt32LE(this._a, 0),
                          t.writeInt32LE(this._b, 4),
                          t.writeInt32LE(this._c, 8),
                          t.writeInt32LE(this._d, 12),
                          t
                        );
                      }),
                      (e.exports = s);
                    },
                    { 436: 436, 467: 467, 514: 514 },
                  ],
                  471: [
                    function (t, e, r) {
                      const n = t(472);
                      const i = t(20);
                      function o(t) {
                        this.rand = t || new i.Rand();
                      }
                      (e.exports = o),
                      (o.create = function (t) {
                        return new o(t);
                      }),
                      (o.prototype._randbelow = function (t) {
                        const e = t.bitLength();
                        const r = Math.ceil(e / 8);
                        do {
                          var i = new n(this.rand.generate(r));
                        } while (i.cmp(t) >= 0);
                        return i;
                      }),
                      (o.prototype._randrange = function (t, e) {
                        const r = e.sub(t);
                        return t.add(this._randbelow(r));
                      }),
                      (o.prototype.test = function (t, e, r) {
                        const i = t.bitLength();
                        const o = n.mont(t);
                        const a = new n(1).toRed(o);
                        e || (e = Math.max(1, (i / 48) | 0));
                        for (var s = t.subn(1), f = 0; !s.testn(f); f++);
                        for (let u = t.shrn(f), c = s.toRed(o); e > 0; e--) {
                          const h = this._randrange(new n(2), s);
                          r && r(h);
                          let d = h.toRed(o).redPow(u);
                          if (d.cmp(a) !== 0 && d.cmp(c) !== 0) {
                            for (var l = 1; l < f; l++) {
                              if ((d = d.redSqr()).cmp(a) === 0) return !1;
                              if (d.cmp(c) === 0) break;
                            }
                            if (l === f) return !1;
                          }
                        }
                        return !0;
                      }),
                      (o.prototype.getDivisor = function (t, e) {
                        const r = t.bitLength();
                        const i = n.mont(t);
                        const o = new n(1).toRed(i);
                        e || (e = Math.max(1, (r / 48) | 0));
                        for (var a = t.subn(1), s = 0; !a.testn(s); s++);
                        for (let f = t.shrn(s), u = a.toRed(i); e > 0; e--) {
                          const c = this._randrange(new n(2), a);
                          const h = t.gcd(c);
                          if (h.cmpn(1) !== 0) return h;
                          let d = c.toRed(i).redPow(f);
                          if (d.cmp(o) !== 0 && d.cmp(u) !== 0) {
                            for (var l = 1; l < s; l++) {
                              if ((d = d.redSqr()).cmp(o) === 0) {
                                return d
                                  .fromRed()
                                  .subn(1)
                                  .gcd(t);
                              }
                              if (d.cmp(u) === 0) break;
                            }
                            if (l === s) {
                              return (d = d.redSqr())
                                .fromRed()
                                .subn(1)
                                .gcd(t);
                            }
                          }
                        }
                        return !1;
                      });
                    },
                    { 20: 20, 472: 472 },
                  ],
                  472: [
                    function (t, e, r) {
                      arguments[4][16][0].apply(r, arguments);
                    },
                    { 16: 16, 21: 21 },
                  ],
                  473: [
                    function (t, e, r) {
                      function n(t, e) {
                        if (!t) throw new Error(e || 'Assertion failed');
                      }
                      (e.exports = n),
                      (n.equal = function (t, e, r) {
                        if (t != e) throw new Error(r || `Assertion failed: ${t} != ${e}`);
                      });
                    },
                    {},
                  ],
                  474: [
                    function (t, e, r) {
                      const n = r;
                      function i(t) {
                        return t.length === 1 ? `0${t}` : t;
                      }
                      function o(t) {
                        for (var e = '', r = 0; r < t.length; r++) e += i(t[r].toString(16));
                        return e;
                      }
                      (n.toArray = function (t, e) {
                        if (Array.isArray(t)) return t.slice();
                        if (!t) return [];
                        const r = [];
                        if (typeof t !== 'string') {
                          for (var n = 0; n < t.length; n++) r[n] = 0 | t[n];
                          return r;
                        }
                        if (e === 'hex') {
                          (t = t.replace(/[^a-z0-9]+/gi, '')).length % 2 != 0 && (t = `0${t}`);
                          for (n = 0; n < t.length; n += 2) r.push(parseInt(t[n] + t[n + 1], 16));
                        } else {
                          for (n = 0; n < t.length; n++) {
                            const i = t.charCodeAt(n);
                            const o = i >> 8;
                            const a = 255 & i;
                            o ? r.push(o, a) : r.push(a);
                          }
                        }
                        return r;
                      }),
                      (n.zero2 = i),
                      (n.toHex = o),
                      (n.encode = function (t, e) {
                        return e === 'hex' ? o(t) : t;
                      });
                    },
                    {},
                  ],
                  475: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          !(function (n) {
                            let i; let o; let a; let s; let
                              f;
                            n
                              ? (function () {
                                const t = n.crypto || n.msCrypto;
                                if (!i && t && t.getRandomValues) {
                                  try {
                                    const e = new Uint8Array(16);
                                    (s = i = function () {
                                      return t.getRandomValues(e), e;
                                    }),
                                    i();
                                  } catch (t) {}
                                }
                                if (!i) {
                                  const r = new Array(16);
                                  (o = i = function () {
                                    for (var t, e = 0; e < 16; e++) {
                                      (3 & e) == 0 && (t = 4294967296 * Math.random()),
                                      (r[e] = (t >>> ((3 & e) << 3)) & 255);
                                    }
                                    return r;
                                  }),
                                  typeof console !== 'undefined' && console.warn;
                                }
                              }())
                              : (function () {
                                if (typeof t === 'function') {
                                  try {
                                    const e = t(405).randomBytes;
                                    (a = i = e
                                          && function () {
                                            return e(16);
                                          }),
                                    i();
                                  } catch (t) {}
                                }
                              }());
                            for (
                              var u = typeof r === 'function' ? r : Array, c = [], h = {}, d = 0;
                              d < 256;
                              d++
                            ) (c[d] = (d + 256).toString(16).substr(1)), (h[c[d]] = d);
                            function l(t, e) {
                              let r = e || 0;
                              const n = c;
                              return (
                                `${n[t[r++]]
                                  + n[t[r++]]
                                  + n[t[r++]]
                                  + n[t[r++]]
                                }-${
                                  n[t[r++]]
                                }${n[t[r++]]
                                }-${
                                  n[t[r++]]
                                }${n[t[r++]]
                                }-${
                                  n[t[r++]]
                                }${n[t[r++]]
                                }-${
                                  n[t[r++]]
                                }${n[t[r++]]
                                }${n[t[r++]]
                                }${n[t[r++]]
                                }${n[t[r++]]
                                }${n[t[r++]]}`
                              );
                            }
                            const p = i();
                            const b = [1 | p[0], p[1], p[2], p[3], p[4], p[5]];
                            let v = 16383 & ((p[6] << 8) | p[7]);
                            let g = 0;
                            let y = 0;
                            function m(t, e, r) {
                              const n = (e && r) || 0;
                              typeof t === 'string'
                                  && ((e = t === 'binary' ? new u(16) : null), (t = null));
                              const o = (t = t || {}).random || (t.rng || i)();
                              if (((o[6] = (15 & o[6]) | 64), (o[8] = (63 & o[8]) | 128), e)) for (let a = 0; a < 16; a++) e[n + a] = o[a];
                              return e || l(o);
                            }
                            const w = m;
                            (w.v1 = function (t, e, r) {
                              let n = (e && r) || 0;
                              const i = e || [];
                              let o = (t = t || {}).clockseq != null ? t.clockseq : v;
                              let a = t.msecs != null ? t.msecs : new Date().getTime();
                              let s = t.nsecs != null ? t.nsecs : y + 1;
                              const f = a - g + (s - y) / 1e4;
                              if (
                                (f < 0 && t.clockseq == null && (o = (o + 1) & 16383),
                                (f < 0 || a > g) && t.nsecs == null && (s = 0),
                                s >= 1e4)
                              ) {
                                throw new Error(
                                  "uuid.v1(): Can't create more than 10M uuids/sec",
                                );
                              }
                              (g = a), (y = s), (v = o);
                              const u = (1e4 * (268435455 & (a += 122192928e5)) + s) % 4294967296;
                              (i[n++] = (u >>> 24) & 255),
                              (i[n++] = (u >>> 16) & 255),
                              (i[n++] = (u >>> 8) & 255),
                              (i[n++] = 255 & u);
                              const c = ((a / 4294967296) * 1e4) & 268435455;
                              (i[n++] = (c >>> 8) & 255),
                              (i[n++] = 255 & c),
                              (i[n++] = ((c >>> 24) & 15) | 16),
                              (i[n++] = (c >>> 16) & 255),
                              (i[n++] = (o >>> 8) | 128),
                              (i[n++] = 255 & o);
                              for (let h = t.node || b, d = 0; d < 6; d++) i[n + d] = h[d];
                              return e || l(i);
                            }),
                            (w.v4 = m),
                            (w.parse = function (t, e, r) {
                              const n = (e && r) || 0;
                              let i = 0;
                              for (
                                e = e || [],
                                t.toLowerCase().replace(/[0-9a-f]{2}/g, (t) => {
                                  i < 16 && (e[n + i++] = h[t]);
                                });
                                i < 16;

                              ) e[n + i++] = 0;
                              return e;
                            }),
                            (w.unparse = l),
                            (w.BufferClass = u),
                            (w._rng = i),
                            (w._mathRNG = o),
                            (w._nodeRNG = a),
                            (w._whatwgRNG = s),
                            void 0 !== e && e.exports
                              ? (e.exports = w)
                              : ((f = n.uuid),
                              (w.noConflict = function () {
                                return (n.uuid = f), w;
                              }),
                              (n.uuid = w));
                          }(typeof window !== 'undefined' ? window : null));
                        }.call(this));
                      }.call(this, t(67).Buffer));
                    },
                    { 405: 405, 67: 67 },
                  ],
                  476: [
                    function (t, e, r) {
                      e.exports = {
                        '2.16.840.1.101.3.4.1.1': 'aes-128-ecb',
                        '2.16.840.1.101.3.4.1.2': 'aes-128-cbc',
                        '2.16.840.1.101.3.4.1.3': 'aes-128-ofb',
                        '2.16.840.1.101.3.4.1.4': 'aes-128-cfb',
                        '2.16.840.1.101.3.4.1.21': 'aes-192-ecb',
                        '2.16.840.1.101.3.4.1.22': 'aes-192-cbc',
                        '2.16.840.1.101.3.4.1.23': 'aes-192-ofb',
                        '2.16.840.1.101.3.4.1.24': 'aes-192-cfb',
                        '2.16.840.1.101.3.4.1.41': 'aes-256-ecb',
                        '2.16.840.1.101.3.4.1.42': 'aes-256-cbc',
                        '2.16.840.1.101.3.4.1.43': 'aes-256-ofb',
                        '2.16.840.1.101.3.4.1.44': 'aes-256-cfb',
                      };
                    },
                    {},
                  ],
                  477: [
                    function (t, e, r) {
                      const n = t(2);
                      r.certificate = t(478);
                      const i = n.define('RSAPrivateKey', function () {
                        this.seq().obj(
                          this.key('version').int(),
                          this.key('modulus').int(),
                          this.key('publicExponent').int(),
                          this.key('privateExponent').int(),
                          this.key('prime1').int(),
                          this.key('prime2').int(),
                          this.key('exponent1').int(),
                          this.key('exponent2').int(),
                          this.key('coefficient').int(),
                        );
                      });
                      r.RSAPrivateKey = i;
                      const o = n.define('RSAPublicKey', function () {
                        this.seq().obj(
                          this.key('modulus').int(),
                          this.key('publicExponent').int(),
                        );
                      });
                      r.RSAPublicKey = o;
                      const a = n.define('SubjectPublicKeyInfo', function () {
                        this.seq().obj(
                          this.key('algorithm').use(s),
                          this.key('subjectPublicKey').bitstr(),
                        );
                      });
                      r.PublicKey = a;
                      var s = n.define('AlgorithmIdentifier', function () {
                        this.seq().obj(
                          this.key('algorithm').objid(),
                          this.key('none')
                            .null_()
                            .optional(),
                          this.key('curve')
                            .objid()
                            .optional(),
                          this.key('params')
                            .seq()
                            .obj(this.key('p').int(), this.key('q').int(), this.key('g').int())
                            .optional(),
                        );
                      });
                      const f = n.define('PrivateKeyInfo', function () {
                        this.seq().obj(
                          this.key('version').int(),
                          this.key('algorithm').use(s),
                          this.key('subjectPrivateKey').octstr(),
                        );
                      });
                      r.PrivateKey = f;
                      const u = n.define('EncryptedPrivateKeyInfo', function () {
                        this.seq().obj(
                          this.key('algorithm')
                            .seq()
                            .obj(
                              this.key('id').objid(),
                              this.key('decrypt')
                                .seq()
                                .obj(
                                  this.key('kde')
                                    .seq()
                                    .obj(
                                      this.key('id').objid(),
                                      this.key('kdeparams')
                                        .seq()
                                        .obj(this.key('salt').octstr(), this.key('iters').int()),
                                    ),
                                  this.key('cipher')
                                    .seq()
                                    .obj(this.key('algo').objid(), this.key('iv').octstr()),
                                ),
                            ),
                          this.key('subjectPrivateKey').octstr(),
                        );
                      });
                      r.EncryptedPrivateKey = u;
                      const c = n.define('DSAPrivateKey', function () {
                        this.seq().obj(
                          this.key('version').int(),
                          this.key('p').int(),
                          this.key('q').int(),
                          this.key('g').int(),
                          this.key('pub_key').int(),
                          this.key('priv_key').int(),
                        );
                      });
                      (r.DSAPrivateKey = c),
                      (r.DSAparam = n.define('DSAparam', function () {
                        this.int();
                      }));
                      const h = n.define('ECPrivateKey', function () {
                        this.seq().obj(
                          this.key('version').int(),
                          this.key('privateKey').octstr(),
                          this.key('parameters')
                            .optional()
                            .explicit(0)
                            .use(d),
                          this.key('publicKey')
                            .optional()
                            .explicit(1)
                            .bitstr(),
                        );
                      });
                      r.ECPrivateKey = h;
                      var d = n.define('ECParameters', function () {
                        this.choice({ namedCurve: this.objid() });
                      });
                      r.signature = n.define('signature', function () {
                        this.seq().obj(this.key('r').int(), this.key('s').int());
                      });
                    },
                    { 2: 2, 478: 478 },
                  ],
                  478: [
                    function (t, e, r) {
                      const n = t(2);
                      const i = n.define('Time', function () {
                        this.choice({ utcTime: this.utctime(), generalTime: this.gentime() });
                      });
                      const o = n.define('AttributeTypeValue', function () {
                        this.seq().obj(this.key('type').objid(), this.key('value').any());
                      });
                      const a = n.define('AlgorithmIdentifier', function () {
                        this.seq().obj(
                          this.key('algorithm').objid(),
                          this.key('parameters').optional(),
                          this.key('curve')
                            .objid()
                            .optional(),
                        );
                      });
                      const s = n.define('SubjectPublicKeyInfo', function () {
                        this.seq().obj(
                          this.key('algorithm').use(a),
                          this.key('subjectPublicKey').bitstr(),
                        );
                      });
                      const f = n.define('RelativeDistinguishedName', function () {
                        this.setof(o);
                      });
                      const u = n.define('RDNSequence', function () {
                        this.seqof(f);
                      });
                      const c = n.define('Name', function () {
                        this.choice({ rdnSequence: this.use(u) });
                      });
                      const h = n.define('Validity', function () {
                        this.seq().obj(
                          this.key('notBefore').use(i),
                          this.key('notAfter').use(i),
                        );
                      });
                      const d = n.define('Extension', function () {
                        this.seq().obj(
                          this.key('extnID').objid(),
                          this.key('critical')
                            .bool()
                            .def(!1),
                          this.key('extnValue').octstr(),
                        );
                      });
                      const l = n.define('TBSCertificate', function () {
                        this.seq().obj(
                          this.key('version')
                            .explicit(0)
                            .int()
                            .optional(),
                          this.key('serialNumber').int(),
                          this.key('signature').use(a),
                          this.key('issuer').use(c),
                          this.key('validity').use(h),
                          this.key('subject').use(c),
                          this.key('subjectPublicKeyInfo').use(s),
                          this.key('issuerUniqueID')
                            .implicit(1)
                            .bitstr()
                            .optional(),
                          this.key('subjectUniqueID')
                            .implicit(2)
                            .bitstr()
                            .optional(),
                          this.key('extensions')
                            .explicit(3)
                            .seqof(d)
                            .optional(),
                        );
                      });
                      const p = n.define('X509Certificate', function () {
                        this.seq().obj(
                          this.key('tbsCertificate').use(l),
                          this.key('signatureAlgorithm').use(a),
                          this.key('signatureValue').bitstr(),
                        );
                      });
                      e.exports = p;
                    },
                    { 2: 2 },
                  ],
                  479: [
                    function (t, e, r) {
                      const n = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
                      const i = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
                      const o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
                      const a = t(435);
                      const s = t(24);
                      const f = t(514).Buffer;
                      e.exports = function (t, e) {
                        let r;
                        const u = t.toString();
                        const c = u.match(n);
                        if (c) {
                          const h = `aes${c[1]}`;
                          const d = f.from(c[2], 'hex');
                          const l = f.from(c[3].replace(/[\r\n]/g, ''), 'base64');
                          const p = a(e, d.slice(0, 8), parseInt(c[1], 10)).key;
                          const b = [];
                          const v = s.createDecipheriv(h, p, d);
                          b.push(v.update(l)), b.push(v.final()), (r = f.concat(b));
                        } else {
                          const g = u.match(o);
                          r = f.from(g[2].replace(/[\r\n]/g, ''), 'base64');
                        }
                        return { tag: u.match(i)[1], data: r };
                      };
                    },
                    { 24: 24, 435: 435, 514: 514 },
                  ],
                  480: [
                    function (t, e, r) {
                      const n = t(477);
                      const i = t(476);
                      const o = t(479);
                      const a = t(24);
                      const s = t(481);
                      const f = t(514).Buffer;
                      function u(t) {
                        let e;
                        typeof t !== 'object'
                            || f.isBuffer(t)
                            || ((e = t.passphrase), (t = t.key)),
                        typeof t === 'string' && (t = f.from(t));
                        let r;
                        let u;
                        const c = o(t, e);
                        const h = c.tag;
                        let d = c.data;
                        switch (h) {
                          case 'CERTIFICATE':
                            u = n.certificate.decode(d, 'der').tbsCertificate
                              .subjectPublicKeyInfo;
                          case 'PUBLIC KEY':
                            switch (
                              (u || (u = n.PublicKey.decode(d, 'der')),
                              (r = u.algorithm.algorithm.join('.')))
                            ) {
                              case '1.2.840.113549.1.1.1':
                                return n.RSAPublicKey.decode(u.subjectPublicKey.data, 'der');
                              case '1.2.840.10045.2.1':
                                return (
                                  (u.subjectPrivateKey = u.subjectPublicKey),
                                  { type: 'ec', data: u }
                                );
                              case '1.2.840.10040.4.1':
                                return (
                                  (u.algorithm.params.pub_key = n.DSAparam.decode(
                                    u.subjectPublicKey.data,
                                    'der',
                                  )),
                                  { type: 'dsa', data: u.algorithm.params }
                                );
                              default:
                                throw new Error(`unknown key id ${r}`);
                            }
                          case 'ENCRYPTED PRIVATE KEY':
                            d = (function (t, e) {
                              const r = t.algorithm.decrypt.kde.kdeparams.salt;
                              const n = parseInt(
                                t.algorithm.decrypt.kde.kdeparams.iters.toString(),
                                10,
                              );
                              const o = i[t.algorithm.decrypt.cipher.algo.join('.')];
                              const u = t.algorithm.decrypt.cipher.iv;
                              const c = t.subjectPrivateKey;
                              const h = parseInt(o.split('-')[1], 10) / 8;
                              const d = s.pbkdf2Sync(e, r, n, h, 'sha1');
                              const l = a.createDecipheriv(o, d, u);
                              const p = [];
                              return p.push(l.update(c)), p.push(l.final()), f.concat(p);
                            }((d = n.EncryptedPrivateKey.decode(d, 'der')), e));
                          case 'PRIVATE KEY':
                            switch (
                              (r = (u = n.PrivateKey.decode(d, 'der')).algorithm.algorithm.join(
                                '.',
                              ))
                            ) {
                              case '1.2.840.113549.1.1.1':
                                return n.RSAPrivateKey.decode(u.subjectPrivateKey, 'der');
                              case '1.2.840.10045.2.1':
                                return {
                                  curve: u.algorithm.curve,
                                  privateKey: n.ECPrivateKey.decode(u.subjectPrivateKey, 'der')
                                    .privateKey,
                                };
                              case '1.2.840.10040.4.1':
                                return (
                                  (u.algorithm.params.priv_key = n.DSAparam.decode(
                                    u.subjectPrivateKey,
                                    'der',
                                  )),
                                  { type: 'dsa', params: u.algorithm.params }
                                );
                              default:
                                throw new Error(`unknown key id ${r}`);
                            }
                          case 'RSA PUBLIC KEY':
                            return n.RSAPublicKey.decode(d, 'der');
                          case 'RSA PRIVATE KEY':
                            return n.RSAPrivateKey.decode(d, 'der');
                          case 'DSA PRIVATE KEY':
                            return { type: 'dsa', params: n.DSAPrivateKey.decode(d, 'der') };
                          case 'EC PRIVATE KEY':
                            return {
                              curve: (d = n.ECPrivateKey.decode(d, 'der')).parameters.value,
                              privateKey: d.privateKey,
                            };
                          default:
                            throw new Error(`unknown key type ${h}`);
                        }
                      }
                      (e.exports = u), (u.signature = n.signature);
                    },
                    {
                      24: 24, 476: 476, 477: 477, 479: 479, 481: 481, 514: 514,
                    },
                  ],
                  481: [
                    function (t, e, r) {
                      (r.pbkdf2 = t(482)), (r.pbkdf2Sync = t(485));
                    },
                    { 482: 482, 485: 485 },
                  ],
                  482: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          let n;
                          let i;
                          const o = t(514).Buffer;
                          const a = t(484);
                          const s = t(483);
                          const f = t(485);
                          const u = t(486);
                          const c = r.crypto && r.crypto.subtle;
                          const h = {
                            sha: 'SHA-1',
                            'sha-1': 'SHA-1',
                            sha1: 'SHA-1',
                            sha256: 'SHA-256',
                            'sha-256': 'SHA-256',
                            sha384: 'SHA-384',
                            'sha-384': 'SHA-384',
                            'sha-512': 'SHA-512',
                            sha512: 'SHA-512',
                          };
                          const d = [];
                          function l() {
                            return (
                              i
                                || (i = r.process && r.process.nextTick
                                  ? r.process.nextTick
                                  : r.queueMicrotask
                                    ? r.queueMicrotask
                                    : r.setImmediate
                                      ? r.setImmediate
                                      : r.setTimeout)
                            );
                          }
                          function p(t, e, r, n, i) {
                            return c
                              .importKey('raw', t, { name: 'PBKDF2' }, !1, ['deriveBits'])
                              .then((t) => c.deriveBits(
                                {
                                  name: 'PBKDF2', salt: e, iterations: r, hash: { name: i },
                                },
                                t,
                                n << 3,
                              ))
                              .then((t) => o.from(t));
                          }
                          e.exports = function (t, e, i, b, v, g) {
                            typeof v === 'function' && ((g = v), (v = void 0));
                            const y = h[(v = v || 'sha1').toLowerCase()];
                            if (y && typeof r.Promise === 'function') {
                              if (
                                (a(i, b),
                                (t = u(t, s, 'Password')),
                                (e = u(e, s, 'Salt')),
                                typeof g !== 'function')
                              ) throw new Error('No callback provided to pbkdf2');
                              !(function (t, e) {
                                t.then(
                                  (t) => {
                                    l()(() => {
                                      e(null, t);
                                    });
                                  },
                                  (t) => {
                                    l()(() => {
                                      e(t);
                                    });
                                  },
                                );
                              }(
                                (function (t) {
                                  if (r.process && !r.process.browser) return Promise.resolve(!1);
                                  if (!c || !c.importKey || !c.deriveBits) return Promise.resolve(!1);
                                  if (void 0 !== d[t]) return d[t];
                                  const e = p((n = n || o.alloc(8)), n, 10, 128, t)
                                    .then(() => !0)
                                    .catch(() => !1);
                                  return (d[t] = e), e;
                                }(y)).then((r) => (r ? p(t, e, i, b, y) : f(t, e, i, b, v))),
                                g,
                              ));
                            } else {
                              l()(() => {
                                let r;
                                try {
                                  r = f(t, e, i, b, v);
                                } catch (t) {
                                  return g(t);
                                }
                                g(null, r);
                              });
                            }
                          };
                        }.call(this));
                      }.call(
                        this,
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {
                      483: 483, 484: 484, 485: 485, 486: 486, 514: 514,
                    },
                  ],
                  483: [
                    function (t, e, r) {
                      (function (t, r) {
                        (function () {
                          let n;
                          if (r.process && r.process.browser) n = 'utf-8';
                          else if (r.process && r.process.version) {
                            n = parseInt(t.version.split('.')[0].slice(1), 10) >= 6
                              ? 'utf-8'
                              : 'binary';
                          } else n = 'utf-8';
                          e.exports = n;
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    { 488: 488 },
                  ],
                  484: [
                    function (t, e, r) {
                      const n = Math.pow(2, 30) - 1;
                      e.exports = function (t, e) {
                        if (typeof t !== 'number') throw new TypeError('Iterations not a number');
                        if (t < 0) throw new TypeError('Bad iterations');
                        if (typeof e !== 'number') throw new TypeError('Key length not a number');
                        if (e < 0 || e > n || e != e) throw new TypeError('Bad key length');
                      };
                    },
                    {},
                  ],
                  485: [
                    function (t, e, r) {
                      const n = t(402);
                      const i = t(513);
                      const o = t(518);
                      const a = t(514).Buffer;
                      const s = t(484);
                      const f = t(483);
                      const u = t(486);
                      const c = a.alloc(128);
                      const h = {
                        md5: 16,
                        sha1: 20,
                        sha224: 28,
                        sha256: 32,
                        sha384: 48,
                        sha512: 64,
                        rmd160: 20,
                        ripemd160: 20,
                      };
                      function d(t, e, r) {
                        const s = (function (t) {
                          function e(e) {
                            return o(t)
                              .update(e)
                              .digest();
                          }
                          function r(t) {
                            return new i().update(t).digest();
                          }
                          return t === 'rmd160' || t === 'ripemd160' ? r : t === 'md5' ? n : e;
                        }(t));
                        const f = t === 'sha512' || t === 'sha384' ? 128 : 64;
                        e.length > f ? (e = s(e)) : e.length < f && (e = a.concat([e, c], f));
                        for (
                          var u = a.allocUnsafe(f + h[t]), d = a.allocUnsafe(f + h[t]), l = 0;
                          l < f;
                          l++
                        ) (u[l] = 54 ^ e[l]), (d[l] = 92 ^ e[l]);
                        const p = a.allocUnsafe(f + r + 4);
                        u.copy(p, 0, 0, f),
                        (this.ipad1 = p),
                        (this.ipad2 = u),
                        (this.opad = d),
                        (this.alg = t),
                        (this.blocksize = f),
                        (this.hash = s),
                        (this.size = h[t]);
                      }
                      (d.prototype.run = function (t, e) {
                        return (
                          t.copy(e, this.blocksize),
                          this.hash(e).copy(this.opad, this.blocksize),
                          this.hash(this.opad)
                        );
                      }),
                      (e.exports = function (t, e, r, n, i) {
                        s(r, n);
                        const o = new d(
                          (i = i || 'sha1'),
                          (t = u(t, f, 'Password')),
                          (e = u(e, f, 'Salt')).length,
                        );
                        const c = a.allocUnsafe(n);
                        const l = a.allocUnsafe(e.length + 4);
                        e.copy(l, 0, 0, e.length);
                        for (let p = 0, b = h[i], v = Math.ceil(n / b), g = 1; g <= v; g++) {
                          l.writeUInt32BE(g, e.length);
                          for (var y = o.run(l, o.ipad1), m = y, w = 1; w < r; w++) {
                            m = o.run(m, o.ipad2);
                            for (let _ = 0; _ < b; _++) y[_] ^= m[_];
                          }
                          y.copy(c, p), (p += b);
                        }
                        return c;
                      });
                    },
                    {
                      402: 402, 483: 483, 484: 484, 486: 486, 513: 513, 514: 514, 518: 518,
                    },
                  ],
                  486: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      e.exports = function (t, e, r) {
                        if (n.isBuffer(t)) return t;
                        if (typeof t === 'string') return n.from(t, e);
                        if (ArrayBuffer.isView(t)) return n.from(t.buffer);
                        throw new TypeError(
                          `${r} must be a string, a Buffer, a typed array or a DataView`,
                        );
                      };
                    },
                    { 514: 514 },
                  ],
                  487: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          void 0 === t
                            || !t.version
                            || t.version.indexOf('v0.') === 0
                            || (t.version.indexOf('v1.') === 0 && t.version.indexOf('v1.8.') !== 0)
                            ? (e.exports = {
                              nextTick(e, r, n, i) {
                                if (typeof e !== 'function') throw new TypeError('"callback" argument must be a function');
                                let o;
                                let a;
                                const s = arguments.length;
                                switch (s) {
                                  case 0:
                                  case 1:
                                    return t.nextTick(e);
                                  case 2:
                                    return t.nextTick(() => {
                                      e.call(null, r);
                                    });
                                  case 3:
                                    return t.nextTick(() => {
                                      e.call(null, r, n);
                                    });
                                  case 4:
                                    return t.nextTick(() => {
                                      e.call(null, r, n, i);
                                    });
                                  default:
                                    for (o = new Array(s - 1), a = 0; a < o.length;) o[a++] = arguments[a];
                                    return t.nextTick(() => {
                                      e.apply(null, o);
                                    });
                                }
                              },
                            })
                            : (e.exports = t);
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    { 488: 488 },
                  ],
                  488: [
                    function (t, e, r) {
                      let n;
                      let i;
                      const o = (e.exports = {});
                      function a() {
                        throw new Error('setTimeout has not been defined');
                      }
                      function s() {
                        throw new Error('clearTimeout has not been defined');
                      }
                      function f(t) {
                        if (n === setTimeout) return setTimeout(t, 0);
                        if ((n === a || !n) && setTimeout) return (n = setTimeout), setTimeout(t, 0);
                        try {
                          return n(t, 0);
                        } catch (e) {
                          try {
                            return n.call(null, t, 0);
                          } catch (e) {
                            return n.call(this, t, 0);
                          }
                        }
                      }
                      !(function () {
                        try {
                          n = typeof setTimeout === 'function' ? setTimeout : a;
                        } catch (t) {
                          n = a;
                        }
                        try {
                          i = typeof clearTimeout === 'function' ? clearTimeout : s;
                        } catch (t) {
                          i = s;
                        }
                      }());
                      let u;
                      let c = [];
                      let h = !1;
                      let d = -1;
                      function l() {
                        h
                            && u
                            && ((h = !1), u.length ? (c = u.concat(c)) : (d = -1), c.length && p());
                      }
                      function p() {
                        if (!h) {
                          const t = f(l);
                          h = !0;
                          for (let e = c.length; e;) {
                            for (u = c, c = []; ++d < e;) u && u[d].run();
                            (d = -1), (e = c.length);
                          }
                          (u = null),
                          (h = !1),
                          (function (t) {
                            if (i === clearTimeout) return clearTimeout(t);
                            if ((i === s || !i) && clearTimeout) return (i = clearTimeout), clearTimeout(t);
                            try {
                              i(t);
                            } catch (e) {
                              try {
                                return i.call(null, t);
                              } catch (e) {
                                return i.call(this, t);
                              }
                            }
                          }(t));
                        }
                      }
                      function b(t, e) {
                        (this.fun = t), (this.array = e);
                      }
                      function v() {}
                      (o.nextTick = function (t) {
                        const e = new Array(arguments.length - 1);
                        if (arguments.length > 1) for (let r = 1; r < arguments.length; r++) e[r - 1] = arguments[r];
                        c.push(new b(t, e)), c.length !== 1 || h || f(p);
                      }),
                      (b.prototype.run = function () {
                        this.fun.apply(null, this.array);
                      }),
                      (o.title = 'browser'),
                      (o.browser = !0),
                      (o.env = {}),
                      (o.argv = []),
                      (o.version = ''),
                      (o.versions = {}),
                      (o.on = v),
                      (o.addListener = v),
                      (o.once = v),
                      (o.off = v),
                      (o.removeListener = v),
                      (o.removeAllListeners = v),
                      (o.emit = v),
                      (o.prependListener = v),
                      (o.prependOnceListener = v),
                      (o.listeners = function (t) {
                        return [];
                      }),
                      (o.binding = function (t) {
                        throw new Error('process.binding is not supported');
                      }),
                      (o.cwd = function () {
                        return '/';
                      }),
                      (o.chdir = function (t) {
                        throw new Error('process.chdir is not supported');
                      }),
                      (o.umask = function () {
                        return 0;
                      });
                    },
                    {},
                  ],
                  489: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          !(function (r) {
                            const n = setTimeout;
                            function i() {}
                            function o(t) {
                              if (!(this instanceof o)) throw new TypeError('Promises must be constructed via new');
                              if (typeof t !== 'function') throw new TypeError('not a function');
                              (this._state = 0),
                              (this._handled = !1),
                              (this._value = void 0),
                              (this._deferreds = []),
                              h(t, this);
                            }
                            function a(t, e) {
                              for (; t._state === 3;) t = t._value;
                              t._state !== 0
                                ? ((t._handled = !0),
                                o._immediateFn(() => {
                                  const r = t._state === 1 ? e.onFulfilled : e.onRejected;
                                  if (r !== null) {
                                    let n;
                                    try {
                                      n = r(t._value);
                                    } catch (t) {
                                      return void f(e.promise, t);
                                    }
                                    s(e.promise, n);
                                  } else (t._state === 1 ? s : f)(e.promise, t._value);
                                }))
                                : t._deferreds.push(e);
                            }
                            function s(t, e) {
                              try {
                                if (e === t) {
                                  throw new TypeError(
                                    'A promise cannot be resolved with itself.',
                                  );
                                }
                                if (e && (typeof e === 'object' || typeof e === 'function')) {
                                  const r = e.then;
                                  if (e instanceof o) return (t._state = 3), (t._value = e), void u(t);
                                  if (typeof r === 'function') {
                                    return void h(
                                      ((n = r),
                                      (i = e),
                                      function () {
                                        n.apply(i, arguments);
                                      }),
                                      t,
                                    );
                                  }
                                }
                                (t._state = 1), (t._value = e), u(t);
                              } catch (e) {
                                f(t, e);
                              }
                              let n; let
                                i;
                            }
                            function f(t, e) {
                              (t._state = 2), (t._value = e), u(t);
                            }
                            function u(t) {
                              t._state === 2
                                  && t._deferreds.length === 0
                                  && o._immediateFn(() => {
                                    t._handled || o._unhandledRejectionFn(t._value);
                                  });
                              for (let e = 0, r = t._deferreds.length; e < r; e++) a(t, t._deferreds[e]);
                              t._deferreds = null;
                            }
                            function c(t, e, r) {
                              (this.onFulfilled = typeof t === 'function' ? t : null),
                              (this.onRejected = typeof e === 'function' ? e : null),
                              (this.promise = r);
                            }
                            function h(t, e) {
                              let r = !1;
                              try {
                                t(
                                  (t) => {
                                    r || ((r = !0), s(e, t));
                                  },
                                  (t) => {
                                    r || ((r = !0), f(e, t));
                                  },
                                );
                              } catch (t) {
                                if (r) return;
                                (r = !0), f(e, t);
                              }
                            }
                            (o.prototype.catch = function (t) {
                              return this.then(null, t);
                            }),
                            (o.prototype.then = function (t, e) {
                              const r = new this.constructor(i);
                              return a(this, new c(t, e, r)), r;
                            }),
                            (o.all = function (t) {
                              return new o(((e, r) => {
                                if (!t || void 0 === t.length) throw new TypeError('Promise.all accepts an array');
                                const n = Array.prototype.slice.call(t);
                                if (n.length === 0) return e([]);
                                let i = n.length;
                                function o(t, a) {
                                  try {
                                    if (a && (typeof a === 'object' || typeof a === 'function')) {
                                      const s = a.then;
                                      if (typeof s === 'function') {
                                        return void s.call(
                                          a,
                                          (e) => {
                                            o(t, e);
                                          },
                                          r,
                                        );
                                      }
                                    }
                                    (n[t] = a), --i == 0 && e(n);
                                  } catch (t) {
                                    r(t);
                                  }
                                }
                                for (let a = 0; a < n.length; a++) o(a, n[a]);
                              }));
                            }),
                            (o.resolve = function (t) {
                              return t && typeof t === 'object' && t.constructor === o
                                ? t
                                : new o(((e) => {
                                  e(t);
                                }));
                            }),
                            (o.reject = function (t) {
                              return new o(((e, r) => {
                                r(t);
                              }));
                            }),
                            (o.race = function (t) {
                              return new o(((e, r) => {
                                for (let n = 0, i = t.length; n < i; n++) t[n].then(e, r);
                              }));
                            }),
                            (o._immediateFn = (typeof t === 'function'
                                    && function (e) {
                                      t(e);
                                    })
                                  || function (t) {
                                    n(t, 0);
                                  }),
                            (o._unhandledRejectionFn = function (t) {
                              typeof console !== 'undefined' && console;
                            }),
                            (o._setImmediateFn = function (t) {
                              o._immediateFn = t;
                            }),
                            (o._setUnhandledRejectionFn = function (t) {
                              o._unhandledRejectionFn = t;
                            }),
                            void 0 !== e && e.exports
                              ? (e.exports = o)
                              : r.Promise || (r.Promise = o);
                          }(this));
                        }.call(this));
                      }.call(this, t(527).setImmediate));
                    },
                    { 527: 527 },
                  ],
                  490: [
                    function (t, e, r) {
                      (r.publicEncrypt = t(494)),
                      (r.privateDecrypt = t(493)),
                      (r.privateEncrypt = function (t, e) {
                        return r.publicEncrypt(t, e, !0);
                      }),
                      (r.publicDecrypt = function (t, e) {
                        return r.privateDecrypt(t, e, !0);
                      });
                    },
                    { 493: 493, 494: 494 },
                  ],
                  491: [
                    function (t, e, r) {
                      const n = t(401);
                      const i = t(514).Buffer;
                      function o(t) {
                        const e = i.allocUnsafe(4);
                        return e.writeUInt32BE(t, 0), e;
                      }
                      e.exports = function (t, e) {
                        for (var r, a = i.alloc(0), s = 0; a.length < e;) {
                          (r = o(s++)),
                          (a = i.concat([
                            a,
                            n('sha1')
                              .update(t)
                              .update(r)
                              .digest(),
                          ]));
                        }
                        return a.slice(0, e);
                      };
                    },
                    { 401: 401, 514: 514 },
                  ],
                  492: [
                    function (t, e, r) {
                      arguments[4][16][0].apply(r, arguments);
                    },
                    { 16: 16, 21: 21 },
                  ],
                  493: [
                    function (t, e, r) {
                      const n = t(480);
                      const i = t(491);
                      const o = t(496);
                      const a = t(492);
                      const s = t(42);
                      const f = t(401);
                      const u = t(495);
                      const c = t(514).Buffer;
                      e.exports = function (t, e, r) {
                        let h;
                        h = t.padding ? t.padding : r ? 1 : 4;
                        let d;
                        const l = n(t);
                        const p = l.modulus.byteLength();
                        if (e.length > p || new a(e).cmp(l.modulus) >= 0) throw new Error('decryption error');
                        d = r ? u(new a(e), l) : s(e, l);
                        const b = c.alloc(p - d.length);
                        if (((d = c.concat([b, d], p)), h === 4)) {
                          return (function (t, e) {
                            const r = t.modulus.byteLength();
                            const n = f('sha1')
                              .update(c.alloc(0))
                              .digest();
                            const a = n.length;
                            if (e[0] !== 0) throw new Error('decryption error');
                            const s = e.slice(1, a + 1);
                            const u = e.slice(a + 1);
                            const h = o(s, i(u, a));
                            const d = o(u, i(h, r - a - 1));
                            if (
                              (function (t, e) {
                                (t = c.from(t)), (e = c.from(e));
                                let r = 0;
                                let n = t.length;
                                t.length !== e.length
                                    && (r++, (n = Math.min(t.length, e.length)));
                                let i = -1;
                                for (; ++i < n;) r += t[i] ^ e[i];
                                return r;
                              })(n, d.slice(0, a))
                            ) throw new Error('decryption error');
                            let l = a;
                            for (; d[l] === 0;) l++;
                            if (d[l++] !== 1) throw new Error('decryption error');
                            return d.slice(l);
                          }(l, d));
                        }
                        if (h === 1) {
                          return (function (t, e, r) {
                            const n = e.slice(0, 2);
                            let i = 2;
                            let o = 0;
                            for (; e[i++] !== 0;) {
                              if (i >= e.length) {
                                o++;
                                break;
                              }
                            }
                            const a = e.slice(2, i - 1);
                            ((n.toString('hex') !== '0002' && !r)
                                || (n.toString('hex') !== '0001' && r))
                                && o++;
                            a.length < 8 && o++;
                            if (o) throw new Error('decryption error');
                            return e.slice(i);
                          }(0, d, r));
                        }
                        if (h === 3) return d;
                        throw new Error('unknown padding');
                      };
                    },
                    {
                      401: 401,
                      42: 42,
                      480: 480,
                      491: 491,
                      492: 492,
                      495: 495,
                      496: 496,
                      514: 514,
                    },
                  ],
                  494: [
                    function (t, e, r) {
                      const n = t(480);
                      const i = t(497);
                      const o = t(401);
                      const a = t(491);
                      const s = t(496);
                      const f = t(492);
                      const u = t(495);
                      const c = t(42);
                      const h = t(514).Buffer;
                      e.exports = function (t, e, r) {
                        let d;
                        d = t.padding ? t.padding : r ? 1 : 4;
                        let l;
                        const p = n(t);
                        if (d === 4) {
                          l = (function (t, e) {
                            const r = t.modulus.byteLength();
                            const n = e.length;
                            const u = o('sha1')
                              .update(h.alloc(0))
                              .digest();
                            const c = u.length;
                            const d = 2 * c;
                            if (n > r - d - 2) throw new Error('message too long');
                            const l = h.alloc(r - n - d - 2);
                            const p = r - c - 1;
                            const b = i(c);
                            const v = s(h.concat([u, l, h.alloc(1, 1), e], p), a(b, p));
                            const g = s(b, a(v, c));
                            return new f(h.concat([h.alloc(1), g, v], r));
                          }(p, e));
                        } else if (d === 1) {
                          l = (function (t, e, r) {
                            let n;
                            const o = e.length;
                            const a = t.modulus.byteLength();
                            if (o > a - 11) throw new Error('message too long');
                            n = r
                              ? h.alloc(a - o - 3, 255)
                              : (function (t) {
                                let e;
                                const r = h.allocUnsafe(t);
                                let n = 0;
                                let o = i(2 * t);
                                let a = 0;
                                for (; n < t;) {
                                  a === o.length && ((o = i(2 * t)), (a = 0)),
                                  (e = o[a++]) && (r[n++] = e);
                                }
                                return r;
                              }(a - o - 3));
                            return new f(h.concat([h.from([0, r ? 1 : 2]), n, h.alloc(1), e], a));
                          }(p, e, r));
                        } else {
                          if (d !== 3) throw new Error('unknown padding');
                          if ((l = new f(e)).cmp(p.modulus) >= 0) throw new Error('data too long for modulus');
                        }
                        return r ? c(l, p) : u(l, p);
                      };
                    },
                    {
                      401: 401,
                      42: 42,
                      480: 480,
                      491: 491,
                      492: 492,
                      495: 495,
                      496: 496,
                      497: 497,
                      514: 514,
                    },
                  ],
                  495: [
                    function (t, e, r) {
                      const n = t(492);
                      const i = t(514).Buffer;
                      e.exports = function (t, e) {
                        return i.from(
                          t
                            .toRed(n.mont(e.modulus))
                            .redPow(new n(e.publicExponent))
                            .fromRed()
                            .toArray(),
                        );
                      };
                    },
                    { 492: 492, 514: 514 },
                  ],
                  496: [
                    function (t, e, r) {
                      e.exports = function (t, e) {
                        for (let r = t.length, n = -1; ++n < r;) t[n] ^= e[n];
                        return t;
                      };
                    },
                    {},
                  ],
                  497: [
                    function (t, e, r) {
                      (function (r, n) {
                        (function () {
                          const i = 65536;
                          const o = 4294967295;
                          const a = t(514).Buffer;
                          const s = n.crypto || n.msCrypto;
                          s && s.getRandomValues
                            ? (e.exports = function (t, e) {
                              if (t > o) throw new RangeError('requested too many random bytes');
                              const n = a.allocUnsafe(t);
                              if (t > 0) {
                                if (t > i) for (let f = 0; f < t; f += i) s.getRandomValues(n.slice(f, f + i));
                                else s.getRandomValues(n);
                              }
                              if (typeof e === 'function') {
                                return r.nextTick(() => {
                                  e(null, n);
                                });
                              }
                              return n;
                            })
                            : (e.exports = function () {
                              throw new Error(
                                'Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11',
                              );
                            });
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    { 488: 488, 514: 514 },
                  ],
                  498: [
                    function (t, e, r) {
                      (function (e, n) {
                        (function () {
                          function i() {
                            throw new Error(
                              'secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11',
                            );
                          }
                          const o = t(514);
                          const a = t(497);
                          const s = o.Buffer;
                          const f = o.kMaxLength;
                          const u = n.crypto || n.msCrypto;
                          const c = Math.pow(2, 32) - 1;
                          function h(t, e) {
                            if (typeof t !== 'number' || t != t) throw new TypeError('offset must be a number');
                            if (t > c || t < 0) throw new TypeError('offset must be a uint32');
                            if (t > f || t > e) throw new RangeError('offset out of range');
                          }
                          function d(t, e, r) {
                            if (typeof t !== 'number' || t != t) throw new TypeError('size must be a number');
                            if (t > c || t < 0) throw new TypeError('size must be a uint32');
                            if (t + e > r || t > f) throw new RangeError('buffer too small');
                          }
                          function l(t, r, n, i) {
                            if (e.browser) {
                              const o = t.buffer;
                              const s = new Uint8Array(o, r, n);
                              return (
                                u.getRandomValues(s),
                                i
                                  ? void e.nextTick(() => {
                                    i(null, t);
                                  })
                                  : t
                              );
                            }
                            if (!i) return a(n).copy(t, r), t;
                            a(n, (e, n) => {
                              if (e) return i(e);
                              n.copy(t, r), i(null, t);
                            });
                          }
                          (u && u.getRandomValues) || !e.browser
                            ? ((r.randomFill = function (t, e, r, i) {
                              if (!(s.isBuffer(t) || t instanceof n.Uint8Array)) {
                                throw new TypeError(
                                  '"buf" argument must be a Buffer or Uint8Array',
                                );
                              }
                              if (typeof e === 'function') (i = e), (e = 0), (r = t.length);
                              else if (typeof r === 'function') (i = r), (r = t.length - e);
                              else if (typeof i !== 'function') throw new TypeError('"cb" argument must be a function');
                              return h(e, t.length), d(r, e, t.length), l(t, e, r, i);
                            }),
                            (r.randomFillSync = function (t, e, r) {
                              void 0 === e && (e = 0);
                              if (!(s.isBuffer(t) || t instanceof n.Uint8Array)) {
                                throw new TypeError(
                                  '"buf" argument must be a Buffer or Uint8Array',
                                );
                              }
                              h(e, t.length), void 0 === r && (r = t.length - e);
                              return d(r, e, t.length), l(t, e, r);
                            }))
                            : ((r.randomFill = i), (r.randomFillSync = i));
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    { 488: 488, 497: 497, 514: 514 },
                  ],
                  499: [
                    function (t, e, r) {
                      e.exports = t(500);
                    },
                    { 500: 500 },
                  ],
                  500: [
                    function (t, e, r) {
                      const n = t(487);
                      const i = Object.keys
                            || function (t) {
                              const e = [];
                              for (const r in t) e.push(r);
                              return e;
                            };
                      e.exports = h;
                      const o = Object.create(t(398));
                      o.inherits = t(467);
                      const a = t(502);
                      const s = t(504);
                      o.inherits(h, a);
                      for (let f = i(s.prototype), u = 0; u < f.length; u++) {
                        const c = f[u];
                        h.prototype[c] || (h.prototype[c] = s.prototype[c]);
                      }
                      function h(t) {
                        if (!(this instanceof h)) return new h(t);
                        a.call(this, t),
                        s.call(this, t),
                        t && !1 === t.readable && (this.readable = !1),
                        t && !1 === t.writable && (this.writable = !1),
                        (this.allowHalfOpen = !0),
                        t && !1 === t.allowHalfOpen && (this.allowHalfOpen = !1),
                        this.once('end', d);
                      }
                      function d() {
                        this.allowHalfOpen || this._writableState.ended || n.nextTick(l, this);
                      }
                      function l(t) {
                        t.end();
                      }
                      Object.defineProperty(h.prototype, 'writableHighWaterMark', {
                        enumerable: !1,
                        get() {
                          return this._writableState.highWaterMark;
                        },
                      }),
                      Object.defineProperty(h.prototype, 'destroyed', {
                        get() {
                          return (
                            void 0 !== this._readableState
                                && void 0 !== this._writableState
                                && this._readableState.destroyed
                                && this._writableState.destroyed
                          );
                        },
                        set(t) {
                          void 0 !== this._readableState
                                && void 0 !== this._writableState
                                && ((this._readableState.destroyed = t),
                                (this._writableState.destroyed = t));
                        },
                      }),
                      (h.prototype._destroy = function (t, e) {
                        this.push(null), this.end(), n.nextTick(e, t);
                      });
                    },
                    {
                      398: 398, 467: 467, 487: 487, 502: 502, 504: 504,
                    },
                  ],
                  501: [
                    function (t, e, r) {
                      e.exports = o;
                      const n = t(503);
                      const i = Object.create(t(398));
                      function o(t) {
                        if (!(this instanceof o)) return new o(t);
                        n.call(this, t);
                      }
                      (i.inherits = t(467)),
                      i.inherits(o, n),
                      (o.prototype._transform = function (t, e, r) {
                        r(null, t);
                      });
                    },
                    { 398: 398, 467: 467, 503: 503 },
                  ],
                  502: [
                    function (t, e, r) {
                      (function (r, n) {
                        (function () {
                          const i = t(487);
                          e.exports = m;
                          let o;
                          const a = t(469);
                          m.ReadableState = y;
                          t(434).EventEmitter;
                          const s = function (t, e) {
                            return t.listeners(e).length;
                          };
                          const f = t(507);
                          const u = t(514).Buffer;
                          const c = n.Uint8Array || function () {};
                          const h = Object.create(t(398));
                          h.inherits = t(467);
                          const d = t(21);
                          let l = void 0;
                          l = d && d.debuglog ? d.debuglog('stream') : function () {};
                          let p;
                          const b = t(505);
                          const v = t(506);
                          h.inherits(m, f);
                          const g = ['error', 'close', 'destroy', 'pause', 'resume'];
                          function y(e, r) {
                            e = e || {};
                            const n = r instanceof (o = o || t(500));
                            (this.objectMode = !!e.objectMode),
                            n && (this.objectMode = this.objectMode || !!e.readableObjectMode);
                            const i = e.highWaterMark;
                            const a = e.readableHighWaterMark;
                            const s = this.objectMode ? 16 : 16384;
                            (this.highWaterMark = i || i === 0 ? i : n && (a || a === 0) ? a : s),
                            (this.highWaterMark = Math.floor(this.highWaterMark)),
                            (this.buffer = new b()),
                            (this.length = 0),
                            (this.pipes = null),
                            (this.pipesCount = 0),
                            (this.flowing = null),
                            (this.ended = !1),
                            (this.endEmitted = !1),
                            (this.reading = !1),
                            (this.sync = !0),
                            (this.needReadable = !1),
                            (this.emittedReadable = !1),
                            (this.readableListening = !1),
                            (this.resumeScheduled = !1),
                            (this.destroyed = !1),
                            (this.defaultEncoding = e.defaultEncoding || 'utf8'),
                            (this.awaitDrain = 0),
                            (this.readingMore = !1),
                            (this.decoder = null),
                            (this.encoding = null),
                            e.encoding
                                  && (p || (p = t(526).StringDecoder),
                                  (this.decoder = new p(e.encoding)),
                                  (this.encoding = e.encoding));
                          }
                          function m(e) {
                            if (((o = o || t(500)), !(this instanceof m))) return new m(e);
                            (this._readableState = new y(e, this)),
                            (this.readable = !0),
                            e
                                  && (typeof e.read === 'function' && (this._read = e.read),
                                  typeof e.destroy === 'function' && (this._destroy = e.destroy)),
                            f.call(this);
                          }
                          function w(t, e, r, n, i) {
                            let o;
                            const a = t._readableState;
                            e === null
                              ? ((a.reading = !1),
                              (function (t, e) {
                                if (e.ended) return;
                                if (e.decoder) {
                                  const r = e.decoder.end();
                                  r
                                        && r.length
                                        && (e.buffer.push(r),
                                        (e.length += e.objectMode ? 1 : r.length));
                                }
                                (e.ended = !0), E(t);
                              }(t, a)))
                              : (i
                                    || (o = (function (t, e) {
                                      let r;
                                      (n = e),
                                      u.isBuffer(n)
                                          || n instanceof c
                                          || typeof e === 'string'
                                          || void 0 === e
                                          || t.objectMode
                                          || (r = new TypeError('Invalid non-string/buffer chunk'));
                                      let n;
                                      return r;
                                    }(a, e))),
                              o
                                ? t.emit('error', o)
                                : a.objectMode || (e && e.length > 0)
                                  ? (typeof e === 'string'
                                        || a.objectMode
                                        || Object.getPrototypeOf(e) === u.prototype
                                        || (e = (function (t) {
                                          return u.from(t);
                                        }(e))),
                                  n
                                    ? a.endEmitted
                                      ? t.emit(
                                        'error',
                                        new Error('stream.unshift() after end event'),
                                      )
                                      : _(t, a, e, !0)
                                    : a.ended
                                      ? t.emit('error', new Error('stream.push() after EOF'))
                                      : ((a.reading = !1),
                                      a.decoder && !r
                                        ? ((e = a.decoder.write(e)),
                                        a.objectMode || e.length !== 0
                                          ? _(t, a, e, !1)
                                          : x(t, a))
                                        : _(t, a, e, !1)))
                                  : n || (a.reading = !1));
                            return (function (t) {
                              return (
                                !t.ended
                                  && (t.needReadable || t.length < t.highWaterMark || t.length === 0)
                              );
                            }(a));
                          }
                          function _(t, e, r, n) {
                            e.flowing && e.length === 0 && !e.sync
                              ? (t.emit('data', r), t.read(0))
                              : ((e.length += e.objectMode ? 1 : r.length),
                              n ? e.buffer.unshift(r) : e.buffer.push(r),
                              e.needReadable && E(t)),
                            x(t, e);
                          }
                          Object.defineProperty(m.prototype, 'destroyed', {
                            get() {
                              return (
                                void 0 !== this._readableState && this._readableState.destroyed
                              );
                            },
                            set(t) {
                              this._readableState && (this._readableState.destroyed = t);
                            },
                          }),
                          (m.prototype.destroy = v.destroy),
                          (m.prototype._undestroy = v.undestroy),
                          (m.prototype._destroy = function (t, e) {
                            this.push(null), e(t);
                          }),
                          (m.prototype.push = function (t, e) {
                            let r;
                            const n = this._readableState;
                            return (
                              n.objectMode
                                ? (r = !0)
                                : typeof t === 'string'
                                      && ((e = e || n.defaultEncoding) !== n.encoding
                                        && ((t = u.from(t, e)), (e = '')),
                                      (r = !0)),
                              w(this, t, e, !1, r)
                            );
                          }),
                          (m.prototype.unshift = function (t) {
                            return w(this, t, null, !0, !1);
                          }),
                          (m.prototype.isPaused = function () {
                            return !1 === this._readableState.flowing;
                          }),
                          (m.prototype.setEncoding = function (e) {
                            return (
                              p || (p = t(526).StringDecoder),
                              (this._readableState.decoder = new p(e)),
                              (this._readableState.encoding = e),
                              this
                            );
                          });
                          const S = 8388608;
                          function M(t, e) {
                            return t <= 0 || (e.length === 0 && e.ended)
                              ? 0
                              : e.objectMode
                                ? 1
                                : t != t
                                  ? e.flowing && e.length
                                    ? e.buffer.head.data.length
                                    : e.length
                                  : (t > e.highWaterMark
                                    && (e.highWaterMark = (function (t) {
                                      return (
                                        t >= S
                                          ? (t = S)
                                          : (t--,
                                          (t |= t >>> 1),
                                          (t |= t >>> 2),
                                          (t |= t >>> 4),
                                          (t |= t >>> 8),
                                          (t |= t >>> 16),
                                          t++),
                                        t
                                      );
                                    }(t))),
                                  t <= e.length
                                    ? t
                                    : e.ended
                                      ? e.length
                                      : ((e.needReadable = !0), 0));
                          }
                          function E(t) {
                            const e = t._readableState;
                            (e.needReadable = !1),
                            e.emittedReadable
                                  || (l('emitReadable', e.flowing),
                                  (e.emittedReadable = !0),
                                  e.sync ? i.nextTick(k, t) : k(t));
                          }
                          function k(t) {
                            l('emit readable'), t.emit('readable'), T(t);
                          }
                          function x(t, e) {
                            e.readingMore || ((e.readingMore = !0), i.nextTick(A, t, e));
                          }
                          function A(t, e) {
                            for (
                              let r = e.length;
                              !e.reading
                                && !e.flowing
                                && !e.ended
                                && e.length < e.highWaterMark
                                && (l('maybeReadMore read 0'), t.read(0), r !== e.length);

                            ) r = e.length;
                            e.readingMore = !1;
                          }
                          function R(t) {
                            l('readable nexttick read 0'), t.read(0);
                          }
                          function I(t, e) {
                            e.reading || (l('resume read 0'), t.read(0)),
                            (e.resumeScheduled = !1),
                            (e.awaitDrain = 0),
                            t.emit('resume'),
                            T(t),
                            e.flowing && !e.reading && t.read(0);
                          }
                          function T(t) {
                            const e = t._readableState;
                            for (l('flow', e.flowing); e.flowing && t.read() !== null;);
                          }
                          function B(t, e) {
                            return e.length === 0
                              ? null
                              : (e.objectMode
                                ? (r = e.buffer.shift())
                                : !t || t >= e.length
                                  ? ((r = e.decoder
                                    ? e.buffer.join('')
                                    : e.buffer.length === 1
                                      ? e.buffer.head.data
                                      : e.buffer.concat(e.length)),
                                  e.buffer.clear())
                                  : (r = (function (t, e, r) {
                                    let n;
                                    t < e.head.data.length
                                      ? ((n = e.head.data.slice(0, t)),
                                      (e.head.data = e.head.data.slice(t)))
                                      : (n = t === e.head.data.length
                                        ? e.shift()
                                        : r
                                          ? (function (t, e) {
                                            let r = e.head;
                                            let n = 1;
                                            let i = r.data;
                                            t -= i.length;
                                            for (; (r = r.next);) {
                                              const o = r.data;
                                              const a = t > o.length ? o.length : t;
                                              if (
                                                (a === o.length
                                                  ? (i += o)
                                                  : (i += o.slice(0, t)),
                                                (t -= a) === 0)
                                              ) {
                                                a === o.length
                                                  ? (++n,
                                                  r.next
                                                    ? (e.head = r.next)
                                                    : (e.head = e.tail = null))
                                                  : ((e.head = r), (r.data = o.slice(a)));
                                                break;
                                              }
                                              ++n;
                                            }
                                            return (e.length -= n), i;
                                          }(t, e))
                                          : (function (t, e) {
                                            const r = u.allocUnsafe(t);
                                            let n = e.head;
                                            let i = 1;
                                            n.data.copy(r), (t -= n.data.length);
                                            for (; (n = n.next);) {
                                              const o = n.data;
                                              const a = t > o.length ? o.length : t;
                                              if (
                                                (o.copy(r, r.length - t, 0, a),
                                                (t -= a) === 0)
                                              ) {
                                                a === o.length
                                                  ? (++i,
                                                  n.next
                                                    ? (e.head = n.next)
                                                    : (e.head = e.tail = null))
                                                  : ((e.head = n), (n.data = o.slice(a)));
                                                break;
                                              }
                                              ++i;
                                            }
                                            return (e.length -= i), r;
                                          }(t, e)));
                                    return n;
                                  }(t, e.buffer, e.decoder))),
                              r);
                            let r;
                          }
                          function P(t) {
                            const e = t._readableState;
                            if (e.length > 0) throw new Error('"endReadable()" called on non-empty stream');
                            e.endEmitted || ((e.ended = !0), i.nextTick(O, e, t));
                          }
                          function O(t, e) {
                            t.endEmitted
                                || t.length !== 0
                                || ((t.endEmitted = !0), (e.readable = !1), e.emit('end'));
                          }
                          function C(t, e) {
                            for (let r = 0, n = t.length; r < n; r++) if (t[r] === e) return r;
                            return -1;
                          }
                          (m.prototype.read = function (t) {
                            l('read', t), (t = parseInt(t, 10));
                            const e = this._readableState;
                            const r = t;
                            if (
                              (t !== 0 && (e.emittedReadable = !1),
                              t === 0
                                  && e.needReadable
                                  && (e.length >= e.highWaterMark || e.ended))
                            ) {
                              return (
                                l('read: emitReadable', e.length, e.ended),
                                e.length === 0 && e.ended ? P(this) : E(this),
                                null
                              );
                            }
                            if ((t = M(t, e)) === 0 && e.ended) return e.length === 0 && P(this), null;
                            let n;
                            let i = e.needReadable;
                            return (
                              l('need readable', i),
                              (e.length === 0 || e.length - t < e.highWaterMark)
                                  && l('length less than watermark', (i = !0)),
                              e.ended || e.reading
                                ? l('reading or ended', (i = !1))
                                : i
                                    && (l('do read'),
                                    (e.reading = !0),
                                    (e.sync = !0),
                                    e.length === 0 && (e.needReadable = !0),
                                    this._read(e.highWaterMark),
                                    (e.sync = !1),
                                    e.reading || (t = M(r, e))),
                              (n = t > 0 ? B(t, e) : null) === null
                                ? ((e.needReadable = !0), (t = 0))
                                : (e.length -= t),
                              e.length === 0
                                  && (e.ended || (e.needReadable = !0), r !== t && e.ended && P(this)),
                              n !== null && this.emit('data', n),
                              n
                            );
                          }),
                          (m.prototype._read = function (t) {
                            this.emit('error', new Error('_read() is not implemented'));
                          }),
                          (m.prototype.pipe = function (t, e) {
                            const n = this;
                            const o = this._readableState;
                            switch (o.pipesCount) {
                              case 0:
                                o.pipes = t;
                                break;
                              case 1:
                                o.pipes = [o.pipes, t];
                                break;
                              default:
                                o.pipes.push(t);
                            }
                            (o.pipesCount += 1), l('pipe count=%d opts=%j', o.pipesCount, e);
                            const f = (!e || !1 !== e.end) && t !== r.stdout && t !== r.stderr ? c : m;
                            function u(e, r) {
                              l('onunpipe'),
                              e === n
                                      && r
                                      && !1 === r.hasUnpiped
                                      && ((r.hasUnpiped = !0),
                                      l('cleanup'),
                                      t.removeListener('close', g),
                                      t.removeListener('finish', y),
                                      t.removeListener('drain', h),
                                      t.removeListener('error', v),
                                      t.removeListener('unpipe', u),
                                      n.removeListener('end', c),
                                      n.removeListener('end', m),
                                      n.removeListener('data', b),
                                      (d = !0),
                                      !o.awaitDrain
                                        || (t._writableState && !t._writableState.needDrain)
                                        || h());
                            }
                            function c() {
                              l('onend'), t.end();
                            }
                            o.endEmitted ? i.nextTick(f) : n.once('end', f), t.on('unpipe', u);
                            var h = (function (t) {
                              return function () {
                                const e = t._readableState;
                                l('pipeOnDrain', e.awaitDrain),
                                e.awaitDrain && e.awaitDrain--,
                                e.awaitDrain === 0
                                        && s(t, 'data')
                                        && ((e.flowing = !0), T(t));
                              };
                            }(n));
                            t.on('drain', h);
                            var d = !1;
                            let p = !1;
                            function b(e) {
                              l('ondata'),
                              (p = !1),
                              !1 !== t.write(e)
                                      || p
                                      || (((o.pipesCount === 1 && o.pipes === t)
                                        || (o.pipesCount > 1 && C(o.pipes, t) !== -1))
                                        && !d
                                        && (l(
                                          'false write response, pause',
                                          n._readableState.awaitDrain,
                                        ),
                                        n._readableState.awaitDrain++,
                                        (p = !0)),
                                      n.pause());
                            }
                            function v(e) {
                              l('onerror', e),
                              m(),
                              t.removeListener('error', v),
                              s(t, 'error') === 0 && t.emit('error', e);
                            }
                            function g() {
                              t.removeListener('finish', y), m();
                            }
                            function y() {
                              l('onfinish'), t.removeListener('close', g), m();
                            }
                            function m() {
                              l('unpipe'), n.unpipe(t);
                            }
                            return (
                              n.on('data', b),
                              (function (t, e, r) {
                                if (typeof t.prependListener === 'function') return t.prependListener(e, r);
                                t._events && t._events[e]
                                  ? a(t._events[e])
                                    ? t._events[e].unshift(r)
                                    : (t._events[e] = [r, t._events[e]])
                                  : t.on(e, r);
                              }(t, 'error', v)),
                              t.once('close', g),
                              t.once('finish', y),
                              t.emit('pipe', n),
                              o.flowing || (l('pipe resume'), n.resume()),
                              t
                            );
                          }),
                          (m.prototype.unpipe = function (t) {
                            const e = this._readableState;
                            const r = { hasUnpiped: !1 };
                            if (e.pipesCount === 0) return this;
                            if (e.pipesCount === 1) {
                              return (
                                (t && t !== e.pipes)
                                      || (t || (t = e.pipes),
                                      (e.pipes = null),
                                      (e.pipesCount = 0),
                                      (e.flowing = !1),
                                      t && t.emit('unpipe', this, r)),
                                this
                              );
                            }
                            if (!t) {
                              const n = e.pipes;
                              const i = e.pipesCount;
                              (e.pipes = null), (e.pipesCount = 0), (e.flowing = !1);
                              for (let o = 0; o < i; o++) n[o].emit('unpipe', this, r);
                              return this;
                            }
                            const a = C(e.pipes, t);
                            return (
                              a === -1
                                    || (e.pipes.splice(a, 1),
                                    (e.pipesCount -= 1),
                                    e.pipesCount === 1 && (e.pipes = e.pipes[0]),
                                    t.emit('unpipe', this, r)),
                              this
                            );
                          }),
                          (m.prototype.on = function (t, e) {
                            const r = f.prototype.on.call(this, t, e);
                            if (t === 'data') !1 !== this._readableState.flowing && this.resume();
                            else if (t === 'readable') {
                              const n = this._readableState;
                              n.endEmitted
                                    || n.readableListening
                                    || ((n.readableListening = n.needReadable = !0),
                                    (n.emittedReadable = !1),
                                    n.reading ? n.length && E(this) : i.nextTick(R, this));
                            }
                            return r;
                          }),
                          (m.prototype.addListener = m.prototype.on),
                          (m.prototype.resume = function () {
                            const t = this._readableState;
                            return (
                              t.flowing
                                    || (l('resume'),
                                    (t.flowing = !0),
                                    (function (t, e) {
                                      e.resumeScheduled
                                        || ((e.resumeScheduled = !0), i.nextTick(I, t, e));
                                    }(this, t))),
                              this
                            );
                          }),
                          (m.prototype.pause = function () {
                            return (
                              l('call pause flowing=%j', this._readableState.flowing),
                              !1 !== this._readableState.flowing
                                    && (l('pause'),
                                    (this._readableState.flowing = !1),
                                    this.emit('pause')),
                              this
                            );
                          }),
                          (m.prototype.wrap = function (t) {
                            const e = this;
                            const r = this._readableState;
                            let n = !1;
                            for (const i in (t.on('end', () => {
                              if ((l('wrapped end'), r.decoder && !r.ended)) {
                                const t = r.decoder.end();
                                t && t.length && e.push(t);
                              }
                              e.push(null);
                            }),
                            t.on('data', (i) => {
                              (l('wrapped data'),
                              r.decoder && (i = r.decoder.write(i)),
                              r.objectMode && i == null)
                                    || ((r.objectMode || (i && i.length))
                                      && (e.push(i) || ((n = !0), t.pause())));
                            }),
                            t)) {
                              void 0 === this[i]
                                    && typeof t[i] === 'function'
                                    && (this[i] = (function (e) {
                                      return function () {
                                        return t[e].apply(t, arguments);
                                      };
                                    }(i)));
                            }
                            for (let o = 0; o < g.length; o++) t.on(g[o], this.emit.bind(this, g[o]));
                            return (
                              (this._read = function (e) {
                                l('wrapped _read', e), n && ((n = !1), t.resume());
                              }),
                              this
                            );
                          }),
                          Object.defineProperty(m.prototype, 'readableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._readableState.highWaterMark;
                            },
                          }),
                          (m._fromList = B);
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {
                      21: 21,
                      398: 398,
                      434: 434,
                      467: 467,
                      469: 469,
                      487: 487,
                      488: 488,
                      500: 500,
                      505: 505,
                      506: 506,
                      507: 507,
                      514: 514,
                      526: 526,
                    },
                  ],
                  503: [
                    function (t, e, r) {
                      e.exports = a;
                      const n = t(500);
                      const i = Object.create(t(398));
                      function o(t, e) {
                        const r = this._transformState;
                        r.transforming = !1;
                        const n = r.writecb;
                        if (!n) {
                          return this.emit(
                            'error',
                            new Error('write callback called multiple times'),
                          );
                        }
                        (r.writechunk = null),
                        (r.writecb = null),
                        e != null && this.push(e),
                        n(t);
                        const i = this._readableState;
                        (i.reading = !1),
                        (i.needReadable || i.length < i.highWaterMark)
                              && this._read(i.highWaterMark);
                      }
                      function a(t) {
                        if (!(this instanceof a)) return new a(t);
                        n.call(this, t),
                        (this._transformState = {
                          afterTransform: o.bind(this),
                          needTransform: !1,
                          transforming: !1,
                          writecb: null,
                          writechunk: null,
                          writeencoding: null,
                        }),
                        (this._readableState.needReadable = !0),
                        (this._readableState.sync = !1),
                        t
                              && (typeof t.transform === 'function' && (this._transform = t.transform),
                              typeof t.flush === 'function' && (this._flush = t.flush)),
                        this.on('prefinish', s);
                      }
                      function s() {
                        const t = this;
                        typeof this._flush === 'function'
                          ? this._flush((e, r) => {
                            f(t, e, r);
                          })
                          : f(this, null, null);
                      }
                      function f(t, e, r) {
                        if (e) return t.emit('error', e);
                        if ((r != null && t.push(r), t._writableState.length)) throw new Error('Calling transform done when ws.length != 0');
                        if (t._transformState.transforming) throw new Error('Calling transform done when still transforming');
                        return t.push(null);
                      }
                      (i.inherits = t(467)),
                      i.inherits(a, n),
                      (a.prototype.push = function (t, e) {
                        return (
                          (this._transformState.needTransform = !1),
                          n.prototype.push.call(this, t, e)
                        );
                      }),
                      (a.prototype._transform = function (t, e, r) {
                        throw new Error('_transform() is not implemented');
                      }),
                      (a.prototype._write = function (t, e, r) {
                        const n = this._transformState;
                        if (
                          ((n.writecb = r),
                          (n.writechunk = t),
                          (n.writeencoding = e),
                          !n.transforming)
                        ) {
                          const i = this._readableState;
                          (n.needTransform || i.needReadable || i.length < i.highWaterMark)
                                && this._read(i.highWaterMark);
                        }
                      }),
                      (a.prototype._read = function (t) {
                        const e = this._transformState;
                        e.writechunk !== null && e.writecb && !e.transforming
                          ? ((e.transforming = !0),
                          this._transform(e.writechunk, e.writeencoding, e.afterTransform))
                          : (e.needTransform = !0);
                      }),
                      (a.prototype._destroy = function (t, e) {
                        const r = this;
                        n.prototype._destroy.call(this, t, (t) => {
                          e(t), r.emit('close');
                        });
                      });
                    },
                    { 398: 398, 467: 467, 500: 500 },
                  ],
                  504: [
                    function (t, e, r) {
                      (function (r, n, i) {
                        (function () {
                          const o = t(487);
                          function a(t) {
                            const e = this;
                            (this.next = null),
                            (this.entry = null),
                            (this.finish = function () {
                              !(function (t, e, r) {
                                let n = t.entry;
                                t.entry = null;
                                for (; n;) {
                                  const i = n.callback;
                                  e.pendingcb--, i(r), (n = n.next);
                                }
                                e.corkedRequestsFree
                                  ? (e.corkedRequestsFree.next = t)
                                  : (e.corkedRequestsFree = t);
                              }(e, t));
                            });
                          }
                          e.exports = y;
                          let s;
                          const f = !r.browser && ['v0.10', 'v0.9.'].indexOf(r.version.slice(0, 5)) > -1
                            ? i
                            : o.nextTick;
                          y.WritableState = g;
                          const u = Object.create(t(398));
                          u.inherits = t(467);
                          const c = { deprecate: t(528) };
                          const h = t(507);
                          const d = t(514).Buffer;
                          const l = n.Uint8Array || function () {};
                          let p;
                          const b = t(506);
                          function v() {}
                          function g(e, r) {
                            (s = s || t(500)), (e = e || {});
                            const n = r instanceof s;
                            (this.objectMode = !!e.objectMode),
                            n && (this.objectMode = this.objectMode || !!e.writableObjectMode);
                            const i = e.highWaterMark;
                            const u = e.writableHighWaterMark;
                            const c = this.objectMode ? 16 : 16384;
                            (this.highWaterMark = i || i === 0 ? i : n && (u || u === 0) ? u : c),
                            (this.highWaterMark = Math.floor(this.highWaterMark)),
                            (this.finalCalled = !1),
                            (this.needDrain = !1),
                            (this.ending = !1),
                            (this.ended = !1),
                            (this.finished = !1),
                            (this.destroyed = !1);
                            const h = !1 === e.decodeStrings;
                            (this.decodeStrings = !h),
                            (this.defaultEncoding = e.defaultEncoding || 'utf8'),
                            (this.length = 0),
                            (this.writing = !1),
                            (this.corked = 0),
                            (this.sync = !0),
                            (this.bufferProcessing = !1),
                            (this.onwrite = function (t) {
                              !(function (t, e) {
                                const r = t._writableState;
                                const n = r.sync;
                                const i = r.writecb;
                                if (
                                  ((function (t) {
                                    (t.writing = !1),
                                    (t.writecb = null),
                                    (t.length -= t.writelen),
                                    (t.writelen = 0);
                                  }(r)),
                                  e)
                                ) {
                                  !(function (t, e, r, n, i) {
                                    --e.pendingcb,
                                    r
                                      ? (o.nextTick(i, n),
                                      o.nextTick(E, t, e),
                                      (t._writableState.errorEmitted = !0),
                                      t.emit('error', n))
                                      : (i(n),
                                      (t._writableState.errorEmitted = !0),
                                      t.emit('error', n),
                                      E(t, e));
                                  }(t, r, n, e, i));
                                } else {
                                  const a = S(r);
                                  a
                                        || r.corked
                                        || r.bufferProcessing
                                        || !r.bufferedRequest
                                        || _(t, r),
                                  n ? f(w, t, r, a, i) : w(t, r, a, i);
                                }
                              }(r, t));
                            }),
                            (this.writecb = null),
                            (this.writelen = 0),
                            (this.bufferedRequest = null),
                            (this.lastBufferedRequest = null),
                            (this.pendingcb = 0),
                            (this.prefinished = !1),
                            (this.errorEmitted = !1),
                            (this.bufferedRequestCount = 0),
                            (this.corkedRequestsFree = new a(this));
                          }
                          function y(e) {
                            if (((s = s || t(500)), !(p.call(y, this) || this instanceof s))) return new y(e);
                            (this._writableState = new g(e, this)),
                            (this.writable = !0),
                            e
                                  && (typeof e.write === 'function' && (this._write = e.write),
                                  typeof e.writev === 'function' && (this._writev = e.writev),
                                  typeof e.destroy === 'function' && (this._destroy = e.destroy),
                                  typeof e.final === 'function' && (this._final = e.final)),
                            h.call(this);
                          }
                          function m(t, e, r, n, i, o, a) {
                            (e.writelen = n),
                            (e.writecb = a),
                            (e.writing = !0),
                            (e.sync = !0),
                            r ? t._writev(i, e.onwrite) : t._write(i, o, e.onwrite),
                            (e.sync = !1);
                          }
                          function w(t, e, r, n) {
                            r
                                || (function (t, e) {
                                  e.length === 0
                                    && e.needDrain
                                    && ((e.needDrain = !1), t.emit('drain'));
                                }(t, e)),
                            e.pendingcb--,
                            n(),
                            E(t, e);
                          }
                          function _(t, e) {
                            e.bufferProcessing = !0;
                            let r = e.bufferedRequest;
                            if (t._writev && r && r.next) {
                              const n = e.bufferedRequestCount;
                              const i = new Array(n);
                              const o = e.corkedRequestsFree;
                              o.entry = r;
                              for (var s = 0, f = !0; r;) (i[s] = r), r.isBuf || (f = !1), (r = r.next), (s += 1);
                              (i.allBuffers = f),
                              m(t, e, !0, e.length, i, '', o.finish),
                              e.pendingcb++,
                              (e.lastBufferedRequest = null),
                              o.next
                                ? ((e.corkedRequestsFree = o.next), (o.next = null))
                                : (e.corkedRequestsFree = new a(e)),
                              (e.bufferedRequestCount = 0);
                            } else {
                              for (; r;) {
                                const u = r.chunk;
                                const c = r.encoding;
                                const h = r.callback;
                                if (
                                  (m(t, e, !1, e.objectMode ? 1 : u.length, u, c, h),
                                  (r = r.next),
                                  e.bufferedRequestCount--,
                                  e.writing)
                                ) break;
                              }
                              r === null && (e.lastBufferedRequest = null);
                            }
                            (e.bufferedRequest = r), (e.bufferProcessing = !1);
                          }
                          function S(t) {
                            return (
                              t.ending
                                && t.length === 0
                                && t.bufferedRequest === null
                                && !t.finished
                                && !t.writing
                            );
                          }
                          function M(t, e) {
                            t._final((r) => {
                              e.pendingcb--,
                              r && t.emit('error', r),
                              (e.prefinished = !0),
                              t.emit('prefinish'),
                              E(t, e);
                            });
                          }
                          function E(t, e) {
                            const r = S(e);
                            return (
                              r
                                  && (!(function (t, e) {
                                    e.prefinished
                                      || e.finalCalled
                                      || (typeof t._final === 'function'
                                        ? (e.pendingcb++, (e.finalCalled = !0), o.nextTick(M, t, e))
                                        : ((e.prefinished = !0), t.emit('prefinish')));
                                  }(t, e)),
                                  e.pendingcb === 0 && ((e.finished = !0), t.emit('finish'))),
                              r
                            );
                          }
                          u.inherits(y, h),
                          (g.prototype.getBuffer = function () {
                            for (var t = this.bufferedRequest, e = []; t;) e.push(t), (t = t.next);
                            return e;
                          }),
                          (function () {
                            try {
                              Object.defineProperty(g.prototype, 'buffer', {
                                get: c.deprecate(
                                  function () {
                                    return this.getBuffer();
                                  },
                                  '_writableState.buffer is deprecated. Use _writableState.getBuffer instead.',
                                  'DEP0003',
                                ),
                              });
                            } catch (t) {}
                          }()),
                          typeof Symbol === 'function'
                              && Symbol.hasInstance
                              && typeof Function.prototype[Symbol.hasInstance] === 'function'
                            ? ((p = Function.prototype[Symbol.hasInstance]),
                            Object.defineProperty(y, Symbol.hasInstance, {
                              value(t) {
                                return (
                                  !!p.call(this, t)
                                        || (this === y && t && t._writableState instanceof g)
                                );
                              },
                            }))
                            : (p = function (t) {
                              return t instanceof this;
                            }),
                          (y.prototype.pipe = function () {
                            this.emit('error', new Error('Cannot pipe, not readable'));
                          }),
                          (y.prototype.write = function (t, e, r) {
                            let n;
                            const i = this._writableState;
                            let a = !1;
                            const s = !i.objectMode && ((n = t), d.isBuffer(n) || n instanceof l);
                            return (
                              s
                                    && !d.isBuffer(t)
                                    && (t = (function (t) {
                                      return d.from(t);
                                    }(t))),
                              typeof e === 'function' && ((r = e), (e = null)),
                              s ? (e = 'buffer') : e || (e = i.defaultEncoding),
                              typeof r !== 'function' && (r = v),
                              i.ended
                                ? (function (t, e) {
                                  const r = new Error('write after end');
                                  t.emit('error', r), o.nextTick(e, r);
                                }(this, r))
                                : (s
                                        || (function (t, e, r, n) {
                                          let i = !0;
                                          let a = !1;
                                          return (
                                            r === null
                                              ? (a = new TypeError(
                                                'May not write null values to stream',
                                              ))
                                              : typeof r === 'string'
                                                || void 0 === r
                                                || e.objectMode
                                                || (a = new TypeError(
                                                  'Invalid non-string/buffer chunk',
                                                )),
                                            a && (t.emit('error', a), o.nextTick(n, a), (i = !1)),
                                            i
                                          );
                                        }(this, i, t, r)))
                                      && (i.pendingcb++,
                                      (a = (function (t, e, r, n, i, o) {
                                        if (!r) {
                                          const a = (function (t, e, r) {
                                            t.objectMode
                                              || !1 === t.decodeStrings
                                              || typeof e !== 'string'
                                              || (e = d.from(e, r));
                                            return e;
                                          }(e, n, i));
                                          n !== a && ((r = !0), (i = 'buffer'), (n = a));
                                        }
                                        const s = e.objectMode ? 1 : n.length;
                                        e.length += s;
                                        const f = e.length < e.highWaterMark;
                                        f || (e.needDrain = !0);
                                        if (e.writing || e.corked) {
                                          const u = e.lastBufferedRequest;
                                          (e.lastBufferedRequest = {
                                            chunk: n,
                                            encoding: i,
                                            isBuf: r,
                                            callback: o,
                                            next: null,
                                          }),
                                          u
                                            ? (u.next = e.lastBufferedRequest)
                                            : (e.bufferedRequest = e.lastBufferedRequest),
                                          (e.bufferedRequestCount += 1);
                                        } else m(t, e, !1, s, n, i, o);
                                        return f;
                                      }(this, i, s, t, e, r)))),
                              a
                            );
                          }),
                          (y.prototype.cork = function () {
                            this._writableState.corked++;
                          }),
                          (y.prototype.uncork = function () {
                            const t = this._writableState;
                            t.corked
                                  && (t.corked--,
                                  t.writing
                                    || t.corked
                                    || t.finished
                                    || t.bufferProcessing
                                    || !t.bufferedRequest
                                    || _(this, t));
                          }),
                          (y.prototype.setDefaultEncoding = function (t) {
                            if (
                              (typeof t === 'string' && (t = t.toLowerCase()),
                              !(
                                [
                                  'hex',
                                  'utf8',
                                  'utf-8',
                                  'ascii',
                                  'binary',
                                  'base64',
                                  'ucs2',
                                  'ucs-2',
                                  'utf16le',
                                  'utf-16le',
                                  'raw',
                                ].indexOf((`${t}`).toLowerCase()) > -1
                              ))
                            ) throw new TypeError(`Unknown encoding: ${t}`);
                            return (this._writableState.defaultEncoding = t), this;
                          }),
                          Object.defineProperty(y.prototype, 'writableHighWaterMark', {
                            enumerable: !1,
                            get() {
                              return this._writableState.highWaterMark;
                            },
                          }),
                          (y.prototype._write = function (t, e, r) {
                            r(new Error('_write() is not implemented'));
                          }),
                          (y.prototype._writev = null),
                          (y.prototype.end = function (t, e, r) {
                            const n = this._writableState;
                            typeof t === 'function'
                              ? ((r = t), (t = null), (e = null))
                              : typeof e === 'function' && ((r = e), (e = null)),
                            t != null && this.write(t, e),
                            n.corked && ((n.corked = 1), this.uncork()),
                            n.ending
                                    || n.finished
                                    || (function (t, e, r) {
                                      (e.ending = !0),
                                      E(t, e),
                                      r && (e.finished ? o.nextTick(r) : t.once('finish', r));
                                      (e.ended = !0), (t.writable = !1);
                                    }(this, n, r));
                          }),
                          Object.defineProperty(y.prototype, 'destroyed', {
                            get() {
                              return (
                                void 0 !== this._writableState && this._writableState.destroyed
                              );
                            },
                            set(t) {
                              this._writableState && (this._writableState.destroyed = t);
                            },
                          }),
                          (y.prototype.destroy = b.destroy),
                          (y.prototype._undestroy = b.undestroy),
                          (y.prototype._destroy = function (t, e) {
                            this.end(), e(t);
                          });
                        }.call(this));
                      }.call(
                        this,
                        t(488),
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                        t(527).setImmediate,
                      ));
                    },
                    {
                      398: 398,
                      467: 467,
                      487: 487,
                      488: 488,
                      500: 500,
                      506: 506,
                      507: 507,
                      514: 514,
                      527: 527,
                      528: 528,
                    },
                  ],
                  505: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      const i = t(21);
                      (e.exports = (function () {
                        function t() {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t)),
                          (this.head = null),
                          (this.tail = null),
                          (this.length = 0);
                        }
                        return (
                          (t.prototype.push = function (t) {
                            const e = { data: t, next: null };
                            this.length > 0 ? (this.tail.next = e) : (this.head = e),
                            (this.tail = e),
                            ++this.length;
                          }),
                          (t.prototype.unshift = function (t) {
                            const e = { data: t, next: this.head };
                            this.length === 0 && (this.tail = e), (this.head = e), ++this.length;
                          }),
                          (t.prototype.shift = function () {
                            if (this.length !== 0) {
                              const t = this.head.data;
                              return (
                                this.length === 1
                                  ? (this.head = this.tail = null)
                                  : (this.head = this.head.next),
                                --this.length,
                                t
                              );
                            }
                          }),
                          (t.prototype.clear = function () {
                            (this.head = this.tail = null), (this.length = 0);
                          }),
                          (t.prototype.join = function (t) {
                            if (this.length === 0) return '';
                            for (var e = this.head, r = `${e.data}`; (e = e.next);) r += t + e.data;
                            return r;
                          }),
                          (t.prototype.concat = function (t) {
                            if (this.length === 0) return n.alloc(0);
                            if (this.length === 1) return this.head.data;
                            for (
                              var e, r, i, o = n.allocUnsafe(t >>> 0), a = this.head, s = 0;
                              a;

                            ) {
                              (e = a.data),
                              (r = o),
                              (i = s),
                              e.copy(r, i),
                              (s += a.data.length),
                              (a = a.next);
                            }
                            return o;
                          }),
                          t
                        );
                      }())),
                      i
                            && i.inspect
                            && i.inspect.custom
                            && (e.exports.prototype[i.inspect.custom] = function () {
                              const t = i.inspect({ length: this.length });
                              return `${this.constructor.name} ${t}`;
                            });
                    },
                    { 21: 21, 514: 514 },
                  ],
                  506: [
                    function (t, e, r) {
                      const n = t(487);
                      function i(t, e) {
                        t.emit('error', e);
                      }
                      e.exports = {
                        destroy(t, e) {
                          const r = this;
                          const o = this._readableState && this._readableState.destroyed;
                          const a = this._writableState && this._writableState.destroyed;
                          return o || a
                            ? (e
                              ? e(t)
                              : !t
                                    || (this._writableState && this._writableState.errorEmitted)
                                    || n.nextTick(i, this, t),
                            this)
                            : (this._readableState && (this._readableState.destroyed = !0),
                            this._writableState && (this._writableState.destroyed = !0),
                            this._destroy(t || null, (t) => {
                              !e && t
                                ? (n.nextTick(i, r, t),
                                r._writableState && (r._writableState.errorEmitted = !0))
                                : e && e(t);
                            }),
                            this);
                        },
                        undestroy() {
                          this._readableState
                              && ((this._readableState.destroyed = !1),
                              (this._readableState.reading = !1),
                              (this._readableState.ended = !1),
                              (this._readableState.endEmitted = !1)),
                          this._writableState
                                && ((this._writableState.destroyed = !1),
                                (this._writableState.ended = !1),
                                (this._writableState.ending = !1),
                                (this._writableState.finished = !1),
                                (this._writableState.errorEmitted = !1));
                        },
                      };
                    },
                    { 487: 487 },
                  ],
                  507: [
                    function (t, e, r) {
                      arguments[4][62][0].apply(r, arguments);
                    },
                    { 434: 434, 62: 62 },
                  ],
                  508: [
                    function (t, e, r) {
                      e.exports = t(509).PassThrough;
                    },
                    { 509: 509 },
                  ],
                  509: [
                    function (t, e, r) {
                      ((r = e.exports = t(502)).Stream = r),
                      (r.Readable = r),
                      (r.Writable = t(504)),
                      (r.Duplex = t(500)),
                      (r.Transform = t(503)),
                      (r.PassThrough = t(501));
                    },
                    {
                      500: 500, 501: 501, 502: 502, 503: 503, 504: 504,
                    },
                  ],
                  510: [
                    function (t, e, r) {
                      e.exports = t(509).Transform;
                    },
                    { 509: 509 },
                  ],
                  511: [
                    function (t, e, r) {
                      e.exports = t(504);
                    },
                    { 504: 504 },
                  ],
                  512: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          !(function (t) {
                            let r;
                            const n = Object.prototype;
                            const i = n.hasOwnProperty;
                            const o = typeof Symbol === 'function' ? Symbol : {};
                            const a = o.iterator || '@@iterator';
                            const s = o.asyncIterator || '@@asyncIterator';
                            const f = o.toStringTag || '@@toStringTag';
                            const u = typeof e === 'object';
                            let c = t.regeneratorRuntime;
                            if (c) u && (e.exports = c);
                            else {
                              (c = t.regeneratorRuntime = u ? e.exports : {}).wrap = w;
                              var h = 'suspendedStart';
                              var d = 'suspendedYield';
                              var l = 'executing';
                              var p = 'completed';
                              var b = {};
                              let v = {};
                              v[a] = function () {
                                return this;
                              };
                              const g = Object.getPrototypeOf;
                              const y = g && g(g(B([])));
                              y && y !== n && i.call(y, a) && (v = y);
                              const m = (E.prototype = S.prototype = Object.create(v));
                              (M.prototype = m.constructor = E),
                              (E.constructor = M),
                              (E[f] = M.displayName = 'GeneratorFunction'),
                              (c.isGeneratorFunction = function (t) {
                                const e = typeof t === 'function' && t.constructor;
                                return (
                                  !!e
                                      && (e === M || (e.displayName || e.name) === 'GeneratorFunction')
                                );
                              }),
                              (c.mark = function (t) {
                                return (
                                  Object.setPrototypeOf
                                    ? Object.setPrototypeOf(t, E)
                                    : ((t.__proto__ = E),
                                    f in t || (t[f] = 'GeneratorFunction')),
                                  (t.prototype = Object.create(m)),
                                  t
                                );
                              }),
                              (c.awrap = function (t) {
                                return { __await: t };
                              }),
                              k(x.prototype),
                              (x.prototype[s] = function () {
                                return this;
                              }),
                              (c.AsyncIterator = x),
                              (c.async = function (t, e, r, n) {
                                const i = new x(w(t, e, r, n));
                                return c.isGeneratorFunction(e)
                                  ? i
                                  : i.next().then((t) => (t.done ? t.value : i.next()));
                              }),
                              k(m),
                              (m[f] = 'Generator'),
                              (m[a] = function () {
                                return this;
                              }),
                              (m.toString = function () {
                                return '[object Generator]';
                              }),
                              (c.keys = function (t) {
                                const e = [];
                                for (const r in t) e.push(r);
                                return (
                                  e.reverse(),
                                  function r() {
                                    for (; e.length;) {
                                      const n = e.pop();
                                      if (n in t) return (r.value = n), (r.done = !1), r;
                                    }
                                    return (r.done = !0), r;
                                  }
                                );
                              }),
                              (c.values = B),
                              (T.prototype = {
                                constructor: T,
                                reset(t) {
                                  if (
                                    ((this.prev = 0),
                                    (this.next = 0),
                                    (this.sent = this._sent = r),
                                    (this.done = !1),
                                    (this.delegate = null),
                                    (this.method = 'next'),
                                    (this.arg = r),
                                    this.tryEntries.forEach(I),
                                    !t)
                                  ) {
                                    for (const e in this) {
                                      e.charAt(0) === 't'
                                            && i.call(this, e)
                                            && !isNaN(+e.slice(1))
                                            && (this[e] = r);
                                    }
                                  }
                                },
                                stop() {
                                  this.done = !0;
                                  const t = this.tryEntries[0].completion;
                                  if (t.type === 'throw') throw t.arg;
                                  return this.rval;
                                },
                                dispatchException(t) {
                                  if (this.done) throw t;
                                  const e = this;
                                  function n(n, i) {
                                    return (
                                      (s.type = 'throw'),
                                      (s.arg = t),
                                      (e.next = n),
                                      i && ((e.method = 'next'), (e.arg = r)),
                                      !!i
                                    );
                                  }
                                  for (let o = this.tryEntries.length - 1; o >= 0; --o) {
                                    const a = this.tryEntries[o];
                                    var s = a.completion;
                                    if (a.tryLoc === 'root') return n('end');
                                    if (a.tryLoc <= this.prev) {
                                      const f = i.call(a, 'catchLoc');
                                      const u = i.call(a, 'finallyLoc');
                                      if (f && u) {
                                        if (this.prev < a.catchLoc) return n(a.catchLoc, !0);
                                        if (this.prev < a.finallyLoc) return n(a.finallyLoc);
                                      } else if (f) {
                                        if (this.prev < a.catchLoc) return n(a.catchLoc, !0);
                                      } else {
                                        if (!u) {
                                          throw new Error(
                                            'try statement without catch or finally',
                                          );
                                        }
                                        if (this.prev < a.finallyLoc) return n(a.finallyLoc);
                                      }
                                    }
                                  }
                                },
                                abrupt(t, e) {
                                  for (let r = this.tryEntries.length - 1; r >= 0; --r) {
                                    const n = this.tryEntries[r];
                                    if (
                                      n.tryLoc <= this.prev
                                          && i.call(n, 'finallyLoc')
                                          && this.prev < n.finallyLoc
                                    ) {
                                      var o = n;
                                      break;
                                    }
                                  }
                                  o
                                        && (t === 'break' || t === 'continue')
                                        && o.tryLoc <= e
                                        && e <= o.finallyLoc
                                        && (o = null);
                                  const a = o ? o.completion : {};
                                  return (
                                    (a.type = t),
                                    (a.arg = e),
                                    o
                                      ? ((this.method = 'next'), (this.next = o.finallyLoc), b)
                                      : this.complete(a)
                                  );
                                },
                                complete(t, e) {
                                  if (t.type === 'throw') throw t.arg;
                                  return (
                                    t.type === 'break' || t.type === 'continue'
                                      ? (this.next = t.arg)
                                      : t.type === 'return'
                                        ? ((this.rval = this.arg = t.arg),
                                        (this.method = 'return'),
                                        (this.next = 'end'))
                                        : t.type === 'normal' && e && (this.next = e),
                                    b
                                  );
                                },
                                finish(t) {
                                  for (let e = this.tryEntries.length - 1; e >= 0; --e) {
                                    const r = this.tryEntries[e];
                                    if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), I(r), b;
                                  }
                                },
                                catch(t) {
                                  for (let e = this.tryEntries.length - 1; e >= 0; --e) {
                                    const r = this.tryEntries[e];
                                    if (r.tryLoc === t) {
                                      const n = r.completion;
                                      if (n.type === 'throw') {
                                        var i = n.arg;
                                        I(r);
                                      }
                                      return i;
                                    }
                                  }
                                  throw new Error('illegal catch attempt');
                                },
                                delegateYield(t, e, n) {
                                  return (
                                    (this.delegate = {
                                      iterator: B(t),
                                      resultName: e,
                                      nextLoc: n,
                                    }),
                                    this.method === 'next' && (this.arg = r),
                                    b
                                  );
                                },
                              });
                            }
                            function w(t, e, r, n) {
                              const i = e && e.prototype instanceof S ? e : S;
                              const o = Object.create(i.prototype);
                              const a = new T(n || []);
                              return (
                                (o._invoke = (function (t, e, r) {
                                  let n = h;
                                  return function (i, o) {
                                    if (n === l) throw new Error('Generator is already running');
                                    if (n === p) {
                                      if (i === 'throw') throw o;
                                      return P();
                                    }
                                    for (r.method = i, r.arg = o; ;) {
                                      const a = r.delegate;
                                      if (a) {
                                        const s = A(a, r);
                                        if (s) {
                                          if (s === b) continue;
                                          return s;
                                        }
                                      }
                                      if (r.method === 'next') r.sent = r._sent = r.arg;
                                      else if (r.method === 'throw') {
                                        if (n === h) throw ((n = p), r.arg);
                                        r.dispatchException(r.arg);
                                      } else r.method === 'return' && r.abrupt('return', r.arg);
                                      n = l;
                                      const f = _(t, e, r);
                                      if (f.type === 'normal') {
                                        if (((n = r.done ? p : d), f.arg === b)) continue;
                                        return { value: f.arg, done: r.done };
                                      }
                                      f.type === 'throw'
                                          && ((n = p), (r.method = 'throw'), (r.arg = f.arg));
                                    }
                                  };
                                }(t, r, a))),
                                o
                              );
                            }
                            function _(t, e, r) {
                              try {
                                return { type: 'normal', arg: t.call(e, r) };
                              } catch (t) {
                                return { type: 'throw', arg: t };
                              }
                            }
                            function S() {}
                            function M() {}
                            function E() {}
                            function k(t) {
                              ['next', 'throw', 'return'].forEach((e) => {
                                t[e] = function (t) {
                                  return this._invoke(e, t);
                                };
                              });
                            }
                            function x(e) {
                              function r(t, n, o, a) {
                                const s = _(e[t], e, n);
                                if (s.type !== 'throw') {
                                  const f = s.arg;
                                  const u = f.value;
                                  return u && typeof u === 'object' && i.call(u, '__await')
                                    ? Promise.resolve(u.__await).then(
                                      (t) => {
                                        r('next', t, o, a);
                                      },
                                      (t) => {
                                        r('throw', t, o, a);
                                      },
                                    )
                                    : Promise.resolve(u).then((t) => {
                                      (f.value = t), o(f);
                                    }, a);
                                }
                                a(s.arg);
                              }
                              let n;
                              typeof t.process === 'object'
                                  && t.process.domain
                                  && (r = t.process.domain.bind(r)),
                              (this._invoke = function (t, e) {
                                function i() {
                                  return new Promise(((n, i) => {
                                    r(t, e, n, i);
                                  }));
                                }
                                return (n = n ? n.then(i, i) : i());
                              });
                            }
                            function A(t, e) {
                              const n = t.iterator[e.method];
                              if (n === r) {
                                if (((e.delegate = null), e.method === 'throw')) {
                                  if (
                                    t.iterator.return
                                      && ((e.method = 'return'),
                                      (e.arg = r),
                                      A(t, e),
                                      e.method === 'throw')
                                  ) return b;
                                  (e.method = 'throw'),
                                  (e.arg = new TypeError(
                                    "The iterator does not provide a 'throw' method",
                                  ));
                                }
                                return b;
                              }
                              const i = _(n, t.iterator, e.arg);
                              if (i.type === 'throw') {
                                return (
                                  (e.method = 'throw'), (e.arg = i.arg), (e.delegate = null), b
                                );
                              }
                              const o = i.arg;
                              return o
                                ? o.done
                                  ? ((e[t.resultName] = o.value),
                                  (e.next = t.nextLoc),
                                  e.method !== 'return' && ((e.method = 'next'), (e.arg = r)),
                                  (e.delegate = null),
                                  b)
                                  : o
                                : ((e.method = 'throw'),
                                (e.arg = new TypeError('iterator result is not an object')),
                                (e.delegate = null),
                                b);
                            }
                            function R(t) {
                              const e = { tryLoc: t[0] };
                              1 in t && (e.catchLoc = t[1]),
                              2 in t && ((e.finallyLoc = t[2]), (e.afterLoc = t[3])),
                              this.tryEntries.push(e);
                            }
                            function I(t) {
                              const e = t.completion || {};
                              (e.type = 'normal'), delete e.arg, (t.completion = e);
                            }
                            function T(t) {
                              (this.tryEntries = [{ tryLoc: 'root' }]),
                              t.forEach(R, this),
                              this.reset(!0);
                            }
                            function B(t) {
                              if (t) {
                                const e = t[a];
                                if (e) return e.call(t);
                                if (typeof t.next === 'function') return t;
                                if (!isNaN(t.length)) {
                                  let n = -1;
                                  const o = function e() {
                                    for (; ++n < t.length;) if (i.call(t, n)) return (e.value = t[n]), (e.done = !1), e;
                                    return (e.value = r), (e.done = !0), e;
                                  };
                                  return (o.next = o);
                                }
                              }
                              return { next: P };
                            }
                            function P() {
                              return { value: r, done: !0 };
                            }
                          }(
                            typeof t === 'object'
                              ? t
                              : typeof window === 'object'
                                ? window
                                : typeof self === 'object'
                                  ? self
                                  : this,
                          ));
                        }.call(this));
                      }.call(
                        this,
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {},
                  ],
                  513: [
                    function (t, e, r) {
                      const n = t(67).Buffer;
                      const i = t(467);
                      const o = t(436);
                      const a = new Array(16);
                      const s = [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        7,
                        4,
                        13,
                        1,
                        10,
                        6,
                        15,
                        3,
                        12,
                        0,
                        9,
                        5,
                        2,
                        14,
                        11,
                        8,
                        3,
                        10,
                        14,
                        4,
                        9,
                        15,
                        8,
                        1,
                        2,
                        7,
                        0,
                        6,
                        13,
                        11,
                        5,
                        12,
                        1,
                        9,
                        11,
                        10,
                        0,
                        8,
                        12,
                        4,
                        13,
                        3,
                        7,
                        15,
                        14,
                        5,
                        6,
                        2,
                        4,
                        0,
                        5,
                        9,
                        7,
                        12,
                        2,
                        10,
                        14,
                        1,
                        3,
                        8,
                        11,
                        6,
                        15,
                        13,
                      ];
                      const f = [
                        5,
                        14,
                        7,
                        0,
                        9,
                        2,
                        11,
                        4,
                        13,
                        6,
                        15,
                        8,
                        1,
                        10,
                        3,
                        12,
                        6,
                        11,
                        3,
                        7,
                        0,
                        13,
                        5,
                        10,
                        14,
                        15,
                        8,
                        12,
                        4,
                        9,
                        1,
                        2,
                        15,
                        5,
                        1,
                        3,
                        7,
                        14,
                        6,
                        9,
                        11,
                        8,
                        12,
                        2,
                        10,
                        0,
                        4,
                        13,
                        8,
                        6,
                        4,
                        1,
                        3,
                        11,
                        15,
                        0,
                        5,
                        12,
                        2,
                        13,
                        9,
                        7,
                        10,
                        14,
                        12,
                        15,
                        10,
                        4,
                        1,
                        5,
                        8,
                        7,
                        6,
                        2,
                        13,
                        14,
                        0,
                        3,
                        9,
                        11,
                      ];
                      const u = [
                        11,
                        14,
                        15,
                        12,
                        5,
                        8,
                        7,
                        9,
                        11,
                        13,
                        14,
                        15,
                        6,
                        7,
                        9,
                        8,
                        7,
                        6,
                        8,
                        13,
                        11,
                        9,
                        7,
                        15,
                        7,
                        12,
                        15,
                        9,
                        11,
                        7,
                        13,
                        12,
                        11,
                        13,
                        6,
                        7,
                        14,
                        9,
                        13,
                        15,
                        14,
                        8,
                        13,
                        6,
                        5,
                        12,
                        7,
                        5,
                        11,
                        12,
                        14,
                        15,
                        14,
                        15,
                        9,
                        8,
                        9,
                        14,
                        5,
                        6,
                        8,
                        6,
                        5,
                        12,
                        9,
                        15,
                        5,
                        11,
                        6,
                        8,
                        13,
                        12,
                        5,
                        12,
                        13,
                        14,
                        11,
                        8,
                        5,
                        6,
                      ];
                      const c = [
                        8,
                        9,
                        9,
                        11,
                        13,
                        15,
                        15,
                        5,
                        7,
                        7,
                        8,
                        11,
                        14,
                        14,
                        12,
                        6,
                        9,
                        13,
                        15,
                        7,
                        12,
                        8,
                        9,
                        11,
                        7,
                        7,
                        12,
                        7,
                        6,
                        15,
                        13,
                        11,
                        9,
                        7,
                        15,
                        11,
                        8,
                        6,
                        6,
                        14,
                        12,
                        13,
                        5,
                        14,
                        13,
                        13,
                        7,
                        5,
                        15,
                        5,
                        8,
                        11,
                        14,
                        14,
                        6,
                        14,
                        6,
                        9,
                        12,
                        9,
                        12,
                        5,
                        15,
                        8,
                        8,
                        5,
                        12,
                        9,
                        12,
                        5,
                        14,
                        6,
                        8,
                        13,
                        6,
                        5,
                        15,
                        13,
                        11,
                        11,
                      ];
                      const h = [0, 1518500249, 1859775393, 2400959708, 2840853838];
                      const d = [1352829926, 1548603684, 1836072691, 2053994217, 0];
                      function l() {
                        o.call(this, 64),
                        (this._a = 1732584193),
                        (this._b = 4023233417),
                        (this._c = 2562383102),
                        (this._d = 271733878),
                        (this._e = 3285377520);
                      }
                      function p(t, e) {
                        return (t << e) | (t >>> (32 - e));
                      }
                      function b(t, e, r, n, i, o, a, s) {
                        return (p((t + (e ^ r ^ n) + o + a) | 0, s) + i) | 0;
                      }
                      function v(t, e, r, n, i, o, a, s) {
                        return (p((t + ((e & r) | (~e & n)) + o + a) | 0, s) + i) | 0;
                      }
                      function g(t, e, r, n, i, o, a, s) {
                        return (p((t + ((e | ~r) ^ n) + o + a) | 0, s) + i) | 0;
                      }
                      function y(t, e, r, n, i, o, a, s) {
                        return (p((t + ((e & n) | (r & ~n)) + o + a) | 0, s) + i) | 0;
                      }
                      function m(t, e, r, n, i, o, a, s) {
                        return (p((t + (e ^ (r | ~n)) + o + a) | 0, s) + i) | 0;
                      }
                      i(l, o),
                      (l.prototype._update = function () {
                        for (var t = a, e = 0; e < 16; ++e) t[e] = this._block.readInt32LE(4 * e);
                        for (
                          var r = 0 | this._a,
                            n = 0 | this._b,
                            i = 0 | this._c,
                            o = 0 | this._d,
                            l = 0 | this._e,
                            w = 0 | this._a,
                            _ = 0 | this._b,
                            S = 0 | this._c,
                            M = 0 | this._d,
                            E = 0 | this._e,
                            k = 0;
                          k < 80;
                          k += 1
                        ) {
                          var x; var
                            A;
                          k < 16
                            ? ((x = b(r, n, i, o, l, t[s[k]], h[0], u[k])),
                            (A = m(w, _, S, M, E, t[f[k]], d[0], c[k])))
                            : k < 32
                              ? ((x = v(r, n, i, o, l, t[s[k]], h[1], u[k])),
                              (A = y(w, _, S, M, E, t[f[k]], d[1], c[k])))
                              : k < 48
                                ? ((x = g(r, n, i, o, l, t[s[k]], h[2], u[k])),
                                (A = g(w, _, S, M, E, t[f[k]], d[2], c[k])))
                                : k < 64
                                  ? ((x = y(r, n, i, o, l, t[s[k]], h[3], u[k])),
                                  (A = v(w, _, S, M, E, t[f[k]], d[3], c[k])))
                                  : ((x = m(r, n, i, o, l, t[s[k]], h[4], u[k])),
                                  (A = b(w, _, S, M, E, t[f[k]], d[4], c[k]))),
                          (r = l),
                          (l = o),
                          (o = p(i, 10)),
                          (i = n),
                          (n = x),
                          (w = E),
                          (E = M),
                          (M = p(S, 10)),
                          (S = _),
                          (_ = A);
                        }
                        const R = (this._b + i + M) | 0;
                        (this._b = (this._c + o + E) | 0),
                        (this._c = (this._d + l + w) | 0),
                        (this._d = (this._e + r + _) | 0),
                        (this._e = (this._a + n + S) | 0),
                        (this._a = R);
                      }),
                      (l.prototype._digest = function () {
                        (this._block[this._blockOffset++] = 128),
                        this._blockOffset > 56
                                && (this._block.fill(0, this._blockOffset, 64),
                                this._update(),
                                (this._blockOffset = 0)),
                        this._block.fill(0, this._blockOffset, 56),
                        this._block.writeUInt32LE(this._length[0], 56),
                        this._block.writeUInt32LE(this._length[1], 60),
                        this._update();
                        const t = n.alloc ? n.alloc(20) : new n(20);
                        return (
                          t.writeInt32LE(this._a, 0),
                          t.writeInt32LE(this._b, 4),
                          t.writeInt32LE(this._c, 8),
                          t.writeInt32LE(this._d, 12),
                          t.writeInt32LE(this._e, 16),
                          t
                        );
                      }),
                      (e.exports = l);
                    },
                    { 436: 436, 467: 467, 67: 67 },
                  ],
                  514: [
                    function (t, e, r) {
                      const n = t(67);
                      const i = n.Buffer;
                      function o(t, e) {
                        for (const r in t) e[r] = t[r];
                      }
                      function a(t, e, r) {
                        return i(t, e, r);
                      }
                      i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow
                        ? (e.exports = n)
                        : (o(n, r), (r.Buffer = a)),
                      o(i, a),
                      (a.from = function (t, e, r) {
                        if (typeof t === 'number') throw new TypeError('Argument must not be a number');
                        return i(t, e, r);
                      }),
                      (a.alloc = function (t, e, r) {
                        if (typeof t !== 'number') throw new TypeError('Argument must be a number');
                        const n = i(t);
                        return (
                          void 0 !== e
                            ? typeof r === 'string'
                              ? n.fill(e, r)
                              : n.fill(e)
                            : n.fill(0),
                          n
                        );
                      }),
                      (a.allocUnsafe = function (t) {
                        if (typeof t !== 'number') throw new TypeError('Argument must be a number');
                        return i(t);
                      }),
                      (a.allocUnsafeSlow = function (t) {
                        if (typeof t !== 'number') throw new TypeError('Argument must be a number');
                        return n.SlowBuffer(t);
                      });
                    },
                    { 67: 67 },
                  ],
                  515: [
                    function (t, e, r) {
                      (function (r) {
                        (function () {
                          let n;
                          const i = t(67);
                          const o = i.Buffer;
                          const a = {};
                          for (n in i) {
                            i.hasOwnProperty(n)
                                && n !== 'SlowBuffer'
                                && n !== 'Buffer'
                                && (a[n] = i[n]);
                          }
                          const s = (a.Buffer = {});
                          for (n in o) {
                            o.hasOwnProperty(n)
                                && n !== 'allocUnsafe'
                                && n !== 'allocUnsafeSlow'
                                && (s[n] = o[n]);
                          }
                          if (
                            ((a.Buffer.prototype = o.prototype),
                            (s.from && s.from !== Uint8Array.from)
                                || (s.from = function (t, e, r) {
                                  if (typeof t === 'number') {
                                    throw new TypeError(
                                      `The "value" argument must not be of type number. Received type ${
                                        typeof t}`,
                                    );
                                  }
                                  if (t && void 0 === t.length) {
                                    throw new TypeError(
                                      `The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ${
                                        typeof t}`,
                                    );
                                  }
                                  return o(t, e, r);
                                }),
                            s.alloc
                                || (s.alloc = function (t, e, r) {
                                  if (typeof t !== 'number') {
                                    throw new TypeError(
                                      `The "size" argument must be of type number. Received type ${
                                        typeof t}`,
                                    );
                                  }
                                  if (t < 0 || t >= 2 * (1 << 30)) {
                                    throw new RangeError(
                                      `The value "${t}" is invalid for option "size"`,
                                    );
                                  }
                                  const n = o(t);
                                  return (
                                    e && e.length !== 0
                                      ? typeof r === 'string'
                                        ? n.fill(e, r)
                                        : n.fill(e)
                                      : n.fill(0),
                                    n
                                  );
                                }),
                            !a.kStringMaxLength)
                          ) {
                            try {
                              a.kStringMaxLength = r.binding('buffer').kStringMaxLength;
                            } catch (t) {}
                          }
                          a.constants
                              || ((a.constants = { MAX_LENGTH: a.kMaxLength }),
                              a.kStringMaxLength
                                && (a.constants.MAX_STRING_LENGTH = a.kStringMaxLength)),
                          (e.exports = a);
                        }.call(this));
                      }.call(this, t(488)));
                    },
                    { 488: 488, 67: 67 },
                  ],
                  516: [
                    function (t, e, r) {
                      const n = {
                        generateIdentifier() {
                          return Math.random()
                            .toString(36)
                            .substr(2, 10);
                        },
                      };
                      (n.localCName = n.generateIdentifier()),
                      (n.splitLines = function (t) {
                        return t
                          .trim()
                          .split('\n')
                          .map((t) => t.trim());
                      }),
                      (n.splitSections = function (t) {
                        return t.split('\nm=').map((t, e) => `${(e > 0 ? `m=${t}` : t).trim()}\r\n`);
                      }),
                      (n.getDescription = function (t) {
                        const e = n.splitSections(t);
                        return e && e[0];
                      }),
                      (n.getMediaSections = function (t) {
                        const e = n.splitSections(t);
                        return e.shift(), e;
                      }),
                      (n.matchPrefix = function (t, e) {
                        return n.splitLines(t).filter((t) => t.indexOf(e) === 0);
                      }),
                      (n.parseCandidate = function (t) {
                        for (
                          var e,
                            r = {
                              foundation: (e = t.indexOf('a=candidate:') === 0
                                ? t.substring(12).split(' ')
                                : t.substring(10).split(' '))[0],
                              component: parseInt(e[1], 10),
                              protocol: e[2].toLowerCase(),
                              priority: parseInt(e[3], 10),
                              ip: e[4],
                              address: e[4],
                              port: parseInt(e[5], 10),
                              type: e[7],
                            },
                            n = 8;
                          n < e.length;
                          n += 2
                        ) {
                          switch (e[n]) {
                            case 'raddr':
                              r.relatedAddress = e[n + 1];
                              break;
                            case 'rport':
                              r.relatedPort = parseInt(e[n + 1], 10);
                              break;
                            case 'tcptype':
                              r.tcpType = e[n + 1];
                              break;
                            case 'ufrag':
                              (r.ufrag = e[n + 1]), (r.usernameFragment = e[n + 1]);
                              break;
                            default:
                              r[e[n]] = e[n + 1];
                          }
                        }
                        return r;
                      }),
                      (n.writeCandidate = function (t) {
                        const e = [];
                        e.push(t.foundation),
                        e.push(t.component),
                        e.push(t.protocol.toUpperCase()),
                        e.push(t.priority),
                        e.push(t.address || t.ip),
                        e.push(t.port);
                        const r = t.type;
                        return (
                          e.push('typ'),
                          e.push(r),
                          r !== 'host'
                                && t.relatedAddress
                                && t.relatedPort
                                && (e.push('raddr'),
                                e.push(t.relatedAddress),
                                e.push('rport'),
                                e.push(t.relatedPort)),
                          t.tcpType
                                && t.protocol.toLowerCase() === 'tcp'
                                && (e.push('tcptype'), e.push(t.tcpType)),
                          (t.usernameFragment || t.ufrag)
                                && (e.push('ufrag'), e.push(t.usernameFragment || t.ufrag)),
                          `candidate:${e.join(' ')}`
                        );
                      }),
                      (n.parseIceOptions = function (t) {
                        return t.substr(14).split(' ');
                      }),
                      (n.parseRtpMap = function (t) {
                        let e = t.substr(9).split(' ');
                        const r = { payloadType: parseInt(e.shift(), 10) };
                        return (
                          (e = e[0].split('/')),
                          (r.name = e[0]),
                          (r.clockRate = parseInt(e[1], 10)),
                          (r.channels = e.length === 3 ? parseInt(e[2], 10) : 1),
                          (r.numChannels = r.channels),
                          r
                        );
                      }),
                      (n.writeRtpMap = function (t) {
                        let e = t.payloadType;
                        void 0 !== t.preferredPayloadType && (e = t.preferredPayloadType);
                        const r = t.channels || t.numChannels || 1;
                        return (
                          `a=rtpmap:${
                            e
                          } ${
                            t.name
                          }/${
                            t.clockRate
                          }${r !== 1 ? `/${r}` : ''
                          }\r\n`
                        );
                      }),
                      (n.parseExtmap = function (t) {
                        const e = t.substr(9).split(' ');
                        return {
                          id: parseInt(e[0], 10),
                          direction: e[0].indexOf('/') > 0 ? e[0].split('/')[1] : 'sendrecv',
                          uri: e[1],
                        };
                      }),
                      (n.writeExtmap = function (t) {
                        return (
                          `a=extmap:${
                            t.id || t.preferredId
                          }${t.direction && t.direction !== 'sendrecv' ? `/${t.direction}` : ''
                          } ${
                            t.uri
                          }\r\n`
                        );
                      }),
                      (n.parseFmtp = function (t) {
                        for (
                          var e, r = {}, n = t.substr(t.indexOf(' ') + 1).split(';'), i = 0;
                          i < n.length;
                          i++
                        ) r[(e = n[i].trim().split('='))[0].trim()] = e[1];
                        return r;
                      }),
                      (n.writeFmtp = function (t) {
                        let e = '';
                        let r = t.payloadType;
                        if (
                          (void 0 !== t.preferredPayloadType && (r = t.preferredPayloadType),
                          t.parameters && Object.keys(t.parameters).length)
                        ) {
                          const n = [];
                          Object.keys(t.parameters).forEach((e) => {
                            t.parameters[e] ? n.push(`${e}=${t.parameters[e]}`) : n.push(e);
                          }),
                          (e += `a=fmtp:${r} ${n.join(';')}\r\n`);
                        }
                        return e;
                      }),
                      (n.parseRtcpFb = function (t) {
                        const e = t.substr(t.indexOf(' ') + 1).split(' ');
                        return { type: e.shift(), parameter: e.join(' ') };
                      }),
                      (n.writeRtcpFb = function (t) {
                        let e = '';
                        let r = t.payloadType;
                        return (
                          void 0 !== t.preferredPayloadType && (r = t.preferredPayloadType),
                          t.rtcpFeedback
                                && t.rtcpFeedback.length
                                && t.rtcpFeedback.forEach((t) => {
                                  e
                                    += `a=rtcp-fb:${
                                      r
                                    } ${
                                      t.type
                                    }${t.parameter && t.parameter.length ? ` ${t.parameter}` : ''
                                    }\r\n`;
                                }),
                          e
                        );
                      }),
                      (n.parseSsrcMedia = function (t) {
                        const e = t.indexOf(' ');
                        const r = { ssrc: parseInt(t.substr(7, e - 7), 10) };
                        const n = t.indexOf(':', e);
                        return (
                          n > -1
                            ? ((r.attribute = t.substr(e + 1, n - e - 1)),
                            (r.value = t.substr(n + 1)))
                            : (r.attribute = t.substr(e + 1)),
                          r
                        );
                      }),
                      (n.parseSsrcGroup = function (t) {
                        const e = t.substr(13).split(' ');
                        return {
                          semantics: e.shift(),
                          ssrcs: e.map((t) => parseInt(t, 10)),
                        };
                      }),
                      (n.getMid = function (t) {
                        const e = n.matchPrefix(t, 'a=mid:')[0];
                        if (e) return e.substr(6);
                      }),
                      (n.parseFingerprint = function (t) {
                        const e = t.substr(14).split(' ');
                        return { algorithm: e[0].toLowerCase(), value: e[1] };
                      }),
                      (n.getDtlsParameters = function (t, e) {
                        return {
                          role: 'auto',
                          fingerprints: n
                            .matchPrefix(t + e, 'a=fingerprint:')
                            .map(n.parseFingerprint),
                        };
                      }),
                      (n.writeDtlsParameters = function (t, e) {
                        let r = `a=setup:${e}\r\n`;
                        return (
                          t.fingerprints.forEach((t) => {
                            r += `a=fingerprint:${t.algorithm} ${t.value}\r\n`;
                          }),
                          r
                        );
                      }),
                      (n.parseCryptoLine = function (t) {
                        const e = t.substr(9).split(' ');
                        return {
                          tag: parseInt(e[0], 10),
                          cryptoSuite: e[1],
                          keyParams: e[2],
                          sessionParams: e.slice(3),
                        };
                      }),
                      (n.writeCryptoLine = function (t) {
                        return (
                          `a=crypto:${
                            t.tag
                          } ${
                            t.cryptoSuite
                          } ${
                            typeof t.keyParams === 'object'
                              ? n.writeCryptoKeyParams(t.keyParams)
                              : t.keyParams
                          }${t.sessionParams ? ` ${t.sessionParams.join(' ')}` : ''
                          }\r\n`
                        );
                      }),
                      (n.parseCryptoKeyParams = function (t) {
                        if (t.indexOf('inline:') !== 0) return null;
                        const e = t.substr(7).split('|');
                        return {
                          keyMethod: 'inline',
                          keySalt: e[0],
                          lifeTime: e[1],
                          mkiValue: e[2] ? e[2].split(':')[0] : void 0,
                          mkiLength: e[2] ? e[2].split(':')[1] : void 0,
                        };
                      }),
                      (n.writeCryptoKeyParams = function (t) {
                        return (
                          `${t.keyMethod
                          }:${
                            t.keySalt
                          }${t.lifeTime ? `|${t.lifeTime}` : ''
                          }${t.mkiValue && t.mkiLength
                            ? `|${t.mkiValue}:${t.mkiLength}`
                            : ''}`
                        );
                      }),
                      (n.getCryptoParameters = function (t, e) {
                        return n.matchPrefix(t + e, 'a=crypto:').map(n.parseCryptoLine);
                      }),
                      (n.getIceParameters = function (t, e) {
                        const r = n.matchPrefix(t + e, 'a=ice-ufrag:')[0];
                        const i = n.matchPrefix(t + e, 'a=ice-pwd:')[0];
                        return r && i
                          ? { usernameFragment: r.substr(12), password: i.substr(10) }
                          : null;
                      }),
                      (n.writeIceParameters = function (t) {
                        return (
                          `a=ice-ufrag:${
                            t.usernameFragment
                          }\r\na=ice-pwd:${
                            t.password
                          }\r\n`
                        );
                      }),
                      (n.parseRtpParameters = function (t) {
                        for (
                          var e = {
                              codecs: [],
                              headerExtensions: [],
                              fecMechanisms: [],
                              rtcp: [],
                            },
                            r = n.splitLines(t)[0].split(' '),
                            i = 3;
                          i < r.length;
                          i++
                        ) {
                          const o = r[i];
                          const a = n.matchPrefix(t, `a=rtpmap:${o} `)[0];
                          if (a) {
                            const s = n.parseRtpMap(a);
                            const f = n.matchPrefix(t, `a=fmtp:${o} `);
                            switch (
                              ((s.parameters = f.length ? n.parseFmtp(f[0]) : {}),
                              (s.rtcpFeedback = n
                                .matchPrefix(t, `a=rtcp-fb:${o} `)
                                .map(n.parseRtcpFb)),
                              e.codecs.push(s),
                              s.name.toUpperCase())
                            ) {
                              case 'RED':
                              case 'ULPFEC':
                                e.fecMechanisms.push(s.name.toUpperCase());
                            }
                          }
                        }
                        return (
                          n.matchPrefix(t, 'a=extmap:').forEach((t) => {
                            e.headerExtensions.push(n.parseExtmap(t));
                          }),
                          e
                        );
                      }),
                      (n.writeRtpDescription = function (t, e) {
                        let r = '';
                        (r += `m=${t} `),
                        (r += e.codecs.length > 0 ? '9' : '0'),
                        (r += ' UDP/TLS/RTP/SAVPF '),
                        (r
                                += `${e.codecs
                            .map((t) => (void 0 !== t.preferredPayloadType
                              ? t.preferredPayloadType
                              : t.payloadType))
                            .join(' ')}\r\n`),
                        (r += 'c=IN IP4 0.0.0.0\r\n'),
                        (r += 'a=rtcp:9 IN IP4 0.0.0.0\r\n'),
                        e.codecs.forEach((t) => {
                          (r += n.writeRtpMap(t)),
                          (r += n.writeFmtp(t)),
                          (r += n.writeRtcpFb(t));
                        });
                        let i = 0;
                        return (
                          e.codecs.forEach((t) => {
                            t.maxptime > i && (i = t.maxptime);
                          }),
                          i > 0 && (r += `a=maxptime:${i}\r\n`),
                          (r += 'a=rtcp-mux\r\n'),
                          e.headerExtensions
                                && e.headerExtensions.forEach((t) => {
                                  r += n.writeExtmap(t);
                                }),
                          r
                        );
                      }),
                      (n.parseRtpEncodingParameters = function (t) {
                        let e;
                        const r = [];
                        const i = n.parseRtpParameters(t);
                        const o = i.fecMechanisms.indexOf('RED') !== -1;
                        const a = i.fecMechanisms.indexOf('ULPFEC') !== -1;
                        const s = n
                          .matchPrefix(t, 'a=ssrc:')
                          .map((t) => n.parseSsrcMedia(t))
                          .filter((t) => t.attribute === 'cname');
                        const f = s.length > 0 && s[0].ssrc;
                        const u = n.matchPrefix(t, 'a=ssrc-group:FID').map((t) => t
                          .substr(17)
                          .split(' ')
                          .map((t) => parseInt(t, 10)));
                        u.length > 0 && u[0].length > 1 && u[0][0] === f && (e = u[0][1]),
                        i.codecs.forEach((t) => {
                          if (t.name.toUpperCase() === 'RTX' && t.parameters.apt) {
                            let n = {
                              ssrc: f,
                              codecPayloadType: parseInt(t.parameters.apt, 10),
                            };
                            f && e && (n.rtx = { ssrc: e }),
                            r.push(n),
                            o
                                      && (((n = JSON.parse(JSON.stringify(n))).fec = {
                                        ssrc: f,
                                        mechanism: a ? 'red+ulpfec' : 'red',
                                      }),
                                      r.push(n));
                          }
                        }),
                        r.length === 0 && f && r.push({ ssrc: f });
                        let c = n.matchPrefix(t, 'b=');
                        return (
                          c.length
                                && ((c = c[0].indexOf('b=TIAS:') === 0
                                  ? parseInt(c[0].substr(7), 10)
                                  : c[0].indexOf('b=AS:') === 0
                                    ? 1e3 * parseInt(c[0].substr(5), 10) * 0.95 - 16e3
                                    : void 0),
                                r.forEach((t) => {
                                  t.maxBitrate = c;
                                })),
                          r
                        );
                      }),
                      (n.parseRtcpParameters = function (t) {
                        const e = {};
                        const r = n
                          .matchPrefix(t, 'a=ssrc:')
                          .map((t) => n.parseSsrcMedia(t))
                          .filter((t) => t.attribute === 'cname')[0];
                        r && ((e.cname = r.value), (e.ssrc = r.ssrc));
                        const i = n.matchPrefix(t, 'a=rtcp-rsize');
                        (e.reducedSize = i.length > 0), (e.compound = i.length === 0);
                        const o = n.matchPrefix(t, 'a=rtcp-mux');
                        return (e.mux = o.length > 0), e;
                      }),
                      (n.parseMsid = function (t) {
                        let e;
                        const r = n.matchPrefix(t, 'a=msid:');
                        if (r.length === 1) return { stream: (e = r[0].substr(7).split(' '))[0], track: e[1] };
                        const i = n
                          .matchPrefix(t, 'a=ssrc:')
                          .map((t) => n.parseSsrcMedia(t))
                          .filter((t) => t.attribute === 'msid');
                        return i.length > 0
                          ? { stream: (e = i[0].value.split(' '))[0], track: e[1] }
                          : void 0;
                      }),
                      (n.parseSctpDescription = function (t) {
                        let e;
                        const r = n.parseMLine(t);
                        const i = n.matchPrefix(t, 'a=max-message-size:');
                        i.length > 0 && (e = parseInt(i[0].substr(19), 10)),
                        isNaN(e) && (e = 65536);
                        const o = n.matchPrefix(t, 'a=sctp-port:');
                        if (o.length > 0) {
                          return {
                            port: parseInt(o[0].substr(12), 10),
                            protocol: r.fmt,
                            maxMessageSize: e,
                          };
                        }
                        if (n.matchPrefix(t, 'a=sctpmap:').length > 0) {
                          const a = n
                            .matchPrefix(t, 'a=sctpmap:')[0]
                            .substr(10)
                            .split(' ');
                          return {
                            port: parseInt(a[0], 10),
                            protocol: a[1],
                            maxMessageSize: e,
                          };
                        }
                      }),
                      (n.writeSctpDescription = function (t, e) {
                        let r = [];
                        return (
                          (r = t.protocol !== 'DTLS/SCTP'
                            ? [
                              `m=${
                                t.kind
                              } 9 ${
                                t.protocol
                              } ${
                                e.protocol
                              }\r\n`,
                              'c=IN IP4 0.0.0.0\r\n',
                              `a=sctp-port:${e.port}\r\n`,
                            ]
                            : [
                              `m=${t.kind} 9 ${t.protocol} ${e.port}\r\n`,
                              'c=IN IP4 0.0.0.0\r\n',
                              `a=sctpmap:${e.port} ${e.protocol} 65535\r\n`,
                            ]),
                          void 0 !== e.maxMessageSize
                                && r.push(`a=max-message-size:${e.maxMessageSize}\r\n`),
                          r.join('')
                        );
                      }),
                      (n.generateSessionId = function () {
                        return Math.random()
                          .toString()
                          .substr(2, 21);
                      }),
                      (n.writeSessionBoilerplate = function (t, e, r) {
                        const i = void 0 !== e ? e : 2;
                        return (
                          `v=0\r\no=${
                            r || 'thisisadapterortc'
                          } ${
                            t || n.generateSessionId()
                          } ${
                            i
                          } IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n`
                        );
                      }),
                      (n.writeMediaSection = function (t, e, r, i) {
                        let o = n.writeRtpDescription(t.kind, e);
                        if (
                          ((o += n.writeIceParameters(t.iceGatherer.getLocalParameters())),
                          (o += n.writeDtlsParameters(
                            t.dtlsTransport.getLocalParameters(),
                            r === 'offer' ? 'actpass' : 'active',
                          )),
                          (o += `a=mid:${t.mid}\r\n`),
                          t.direction
                            ? (o += `a=${t.direction}\r\n`)
                            : t.rtpSender && t.rtpReceiver
                              ? (o += 'a=sendrecv\r\n')
                              : t.rtpSender
                                ? (o += 'a=sendonly\r\n')
                                : t.rtpReceiver
                                  ? (o += 'a=recvonly\r\n')
                                  : (o += 'a=inactive\r\n'),
                          t.rtpSender)
                        ) {
                          const a = `msid:${i.id} ${t.rtpSender.track.id}\r\n`;
                          (o += `a=${a}`),
                          (o += `a=ssrc:${t.sendEncodingParameters[0].ssrc} ${a}`),
                          t.sendEncodingParameters[0].rtx
                                  && ((o
                                    += `a=ssrc:${t.sendEncodingParameters[0].rtx.ssrc} ${a}`),
                                  (o
                                    += `a=ssrc-group:FID ${
                                      t.sendEncodingParameters[0].ssrc
                                    } ${
                                      t.sendEncodingParameters[0].rtx.ssrc
                                    }\r\n`));
                        }
                        return (
                          (o
                                += `a=ssrc:${
                              t.sendEncodingParameters[0].ssrc
                            } cname:${
                              n.localCName
                            }\r\n`),
                          t.rtpSender
                                && t.sendEncodingParameters[0].rtx
                                && (o
                                  += `a=ssrc:${
                                    t.sendEncodingParameters[0].rtx.ssrc
                                  } cname:${
                                    n.localCName
                                  }\r\n`),
                          o
                        );
                      }),
                      (n.getDirection = function (t, e) {
                        for (let r = n.splitLines(t), i = 0; i < r.length; i++) {
                          switch (r[i]) {
                            case 'a=sendrecv':
                            case 'a=sendonly':
                            case 'a=recvonly':
                            case 'a=inactive':
                              return r[i].substr(2);
                          }
                        }
                        return e ? n.getDirection(e) : 'sendrecv';
                      }),
                      (n.getKind = function (t) {
                        return n
                          .splitLines(t)[0]
                          .split(' ')[0]
                          .substr(2);
                      }),
                      (n.isRejected = function (t) {
                        return t.split(' ', 2)[1] === '0';
                      }),
                      (n.parseMLine = function (t) {
                        const e = n
                          .splitLines(t)[0]
                          .substr(2)
                          .split(' ');
                        return {
                          kind: e[0],
                          port: parseInt(e[1], 10),
                          protocol: e[2],
                          fmt: e.slice(3).join(' '),
                        };
                      }),
                      (n.parseOLine = function (t) {
                        const e = n
                          .matchPrefix(t, 'o=')[0]
                          .substr(2)
                          .split(' ');
                        return {
                          username: e[0],
                          sessionId: e[1],
                          sessionVersion: parseInt(e[2], 10),
                          netType: e[3],
                          addressType: e[4],
                          address: e[5],
                        };
                      }),
                      (n.isValidSDP = function (t) {
                        if (typeof t !== 'string' || t.length === 0) return !1;
                        for (let e = n.splitLines(t), r = 0; r < e.length; r++) if (e[r].length < 2 || e[r].charAt(1) !== '=') return !1;
                        return !0;
                      }),
                      typeof e === 'object' && (e.exports = n);
                    },
                    {},
                  ],
                  517: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      function i(t, e) {
                        (this._block = n.alloc(t)),
                        (this._finalSize = e),
                        (this._blockSize = t),
                        (this._len = 0);
                      }
                      (i.prototype.update = function (t, e) {
                        typeof t === 'string' && ((e = e || 'utf8'), (t = n.from(t, e)));
                        for (
                          var r = this._block,
                            i = this._blockSize,
                            o = t.length,
                            a = this._len,
                            s = 0;
                          s < o;

                        ) {
                          for (var f = a % i, u = Math.min(o - s, i - f), c = 0; c < u; c++) r[f + c] = t[s + c];
                          (s += u), (a += u) % i == 0 && this._update(r);
                        }
                        return (this._len += o), this;
                      }),
                      (i.prototype.digest = function (t) {
                        const e = this._len % this._blockSize;
                        (this._block[e] = 128),
                        this._block.fill(0, e + 1),
                        e >= this._finalSize
                                && (this._update(this._block), this._block.fill(0));
                        const r = 8 * this._len;
                        if (r <= 4294967295) this._block.writeUInt32BE(r, this._blockSize - 4);
                        else {
                          const n = (4294967295 & r) >>> 0;
                          const i = (r - n) / 4294967296;
                          this._block.writeUInt32BE(i, this._blockSize - 8),
                          this._block.writeUInt32BE(n, this._blockSize - 4);
                        }
                        this._update(this._block);
                        const o = this._hash();
                        return t ? o.toString(t) : o;
                      }),
                      (i.prototype._update = function () {
                        throw new Error('_update must be implemented by subclass');
                      }),
                      (e.exports = i);
                    },
                    { 514: 514 },
                  ],
                  518: [
                    function (t, e, r) {
                      ((r = e.exports = function (t) {
                        t = t.toLowerCase();
                        const e = r[t];
                        if (!e) throw new Error(`${t} is not supported (we accept pull requests)`);
                        return new e();
                      }).sha = t(519)),
                      (r.sha1 = t(520)),
                      (r.sha224 = t(521)),
                      (r.sha256 = t(522)),
                      (r.sha384 = t(523)),
                      (r.sha512 = t(524));
                    },
                    {
                      519: 519, 520: 520, 521: 521, 522: 522, 523: 523, 524: 524,
                    },
                  ],
                  519: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(517);
                      const o = t(514).Buffer;
                      const a = [1518500249, 1859775393, -1894007588, -899497514];
                      const s = new Array(80);
                      function f() {
                        this.init(), (this._w = s), i.call(this, 64, 56);
                      }
                      function u(t) {
                        return (t << 30) | (t >>> 2);
                      }
                      function c(t, e, r, n) {
                        return t === 0
                          ? (e & r) | (~e & n)
                          : t === 2
                            ? (e & r) | (e & n) | (r & n)
                            : e ^ r ^ n;
                      }
                      n(f, i),
                      (f.prototype.init = function () {
                        return (
                          (this._a = 1732584193),
                          (this._b = 4023233417),
                          (this._c = 2562383102),
                          (this._d = 271733878),
                          (this._e = 3285377520),
                          this
                        );
                      }),
                      (f.prototype._update = function (t) {
                        for (
                          var e,
                            r = this._w,
                            n = 0 | this._a,
                            i = 0 | this._b,
                            o = 0 | this._c,
                            s = 0 | this._d,
                            f = 0 | this._e,
                            h = 0;
                          h < 16;
                          ++h
                        ) r[h] = t.readInt32BE(4 * h);
                        for (; h < 80; ++h) r[h] = r[h - 3] ^ r[h - 8] ^ r[h - 14] ^ r[h - 16];
                        for (let d = 0; d < 80; ++d) {
                          const l = ~~(d / 20);
                          const p = 0
                                  | ((((e = n) << 5) | (e >>> 27)) + c(l, i, o, s) + f + r[d] + a[l]);
                          (f = s), (s = o), (o = u(i)), (i = n), (n = p);
                        }
                        (this._a = (n + this._a) | 0),
                        (this._b = (i + this._b) | 0),
                        (this._c = (o + this._c) | 0),
                        (this._d = (s + this._d) | 0),
                        (this._e = (f + this._e) | 0);
                      }),
                      (f.prototype._hash = function () {
                        const t = o.allocUnsafe(20);
                        return (
                          t.writeInt32BE(0 | this._a, 0),
                          t.writeInt32BE(0 | this._b, 4),
                          t.writeInt32BE(0 | this._c, 8),
                          t.writeInt32BE(0 | this._d, 12),
                          t.writeInt32BE(0 | this._e, 16),
                          t
                        );
                      }),
                      (e.exports = f);
                    },
                    { 467: 467, 514: 514, 517: 517 },
                  ],
                  520: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(517);
                      const o = t(514).Buffer;
                      const a = [1518500249, 1859775393, -1894007588, -899497514];
                      const s = new Array(80);
                      function f() {
                        this.init(), (this._w = s), i.call(this, 64, 56);
                      }
                      function u(t) {
                        return (t << 5) | (t >>> 27);
                      }
                      function c(t) {
                        return (t << 30) | (t >>> 2);
                      }
                      function h(t, e, r, n) {
                        return t === 0
                          ? (e & r) | (~e & n)
                          : t === 2
                            ? (e & r) | (e & n) | (r & n)
                            : e ^ r ^ n;
                      }
                      n(f, i),
                      (f.prototype.init = function () {
                        return (
                          (this._a = 1732584193),
                          (this._b = 4023233417),
                          (this._c = 2562383102),
                          (this._d = 271733878),
                          (this._e = 3285377520),
                          this
                        );
                      }),
                      (f.prototype._update = function (t) {
                        for (
                          var e,
                            r = this._w,
                            n = 0 | this._a,
                            i = 0 | this._b,
                            o = 0 | this._c,
                            s = 0 | this._d,
                            f = 0 | this._e,
                            d = 0;
                          d < 16;
                          ++d
                        ) r[d] = t.readInt32BE(4 * d);
                        for (; d < 80; ++d) {
                          r[d] = ((e = r[d - 3] ^ r[d - 8] ^ r[d - 14] ^ r[d - 16]) << 1)
                                | (e >>> 31);
                        }
                        for (let l = 0; l < 80; ++l) {
                          const p = ~~(l / 20);
                          const b = (u(n) + h(p, i, o, s) + f + r[l] + a[p]) | 0;
                          (f = s), (s = o), (o = c(i)), (i = n), (n = b);
                        }
                        (this._a = (n + this._a) | 0),
                        (this._b = (i + this._b) | 0),
                        (this._c = (o + this._c) | 0),
                        (this._d = (s + this._d) | 0),
                        (this._e = (f + this._e) | 0);
                      }),
                      (f.prototype._hash = function () {
                        const t = o.allocUnsafe(20);
                        return (
                          t.writeInt32BE(0 | this._a, 0),
                          t.writeInt32BE(0 | this._b, 4),
                          t.writeInt32BE(0 | this._c, 8),
                          t.writeInt32BE(0 | this._d, 12),
                          t.writeInt32BE(0 | this._e, 16),
                          t
                        );
                      }),
                      (e.exports = f);
                    },
                    { 467: 467, 514: 514, 517: 517 },
                  ],
                  521: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(522);
                      const o = t(517);
                      const a = t(514).Buffer;
                      const s = new Array(64);
                      function f() {
                        this.init(), (this._w = s), o.call(this, 64, 56);
                      }
                      n(f, i),
                      (f.prototype.init = function () {
                        return (
                          (this._a = 3238371032),
                          (this._b = 914150663),
                          (this._c = 812702999),
                          (this._d = 4144912697),
                          (this._e = 4290775857),
                          (this._f = 1750603025),
                          (this._g = 1694076839),
                          (this._h = 3204075428),
                          this
                        );
                      }),
                      (f.prototype._hash = function () {
                        const t = a.allocUnsafe(28);
                        return (
                          t.writeInt32BE(this._a, 0),
                          t.writeInt32BE(this._b, 4),
                          t.writeInt32BE(this._c, 8),
                          t.writeInt32BE(this._d, 12),
                          t.writeInt32BE(this._e, 16),
                          t.writeInt32BE(this._f, 20),
                          t.writeInt32BE(this._g, 24),
                          t
                        );
                      }),
                      (e.exports = f);
                    },
                    {
                      467: 467, 514: 514, 517: 517, 522: 522,
                    },
                  ],
                  522: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(517);
                      const o = t(514).Buffer;
                      const a = [
                        1116352408,
                        1899447441,
                        3049323471,
                        3921009573,
                        961987163,
                        1508970993,
                        2453635748,
                        2870763221,
                        3624381080,
                        310598401,
                        607225278,
                        1426881987,
                        1925078388,
                        2162078206,
                        2614888103,
                        3248222580,
                        3835390401,
                        4022224774,
                        264347078,
                        604807628,
                        770255983,
                        1249150122,
                        1555081692,
                        1996064986,
                        2554220882,
                        2821834349,
                        2952996808,
                        3210313671,
                        3336571891,
                        3584528711,
                        113926993,
                        338241895,
                        666307205,
                        773529912,
                        1294757372,
                        1396182291,
                        1695183700,
                        1986661051,
                        2177026350,
                        2456956037,
                        2730485921,
                        2820302411,
                        3259730800,
                        3345764771,
                        3516065817,
                        3600352804,
                        4094571909,
                        275423344,
                        430227734,
                        506948616,
                        659060556,
                        883997877,
                        958139571,
                        1322822218,
                        1537002063,
                        1747873779,
                        1955562222,
                        2024104815,
                        2227730452,
                        2361852424,
                        2428436474,
                        2756734187,
                        3204031479,
                        3329325298,
                      ];
                      const s = new Array(64);
                      function f() {
                        this.init(), (this._w = s), i.call(this, 64, 56);
                      }
                      function u(t, e, r) {
                        return r ^ (t & (e ^ r));
                      }
                      function c(t, e, r) {
                        return (t & e) | (r & (t | e));
                      }
                      function h(t) {
                        return (
                          ((t >>> 2) | (t << 30))
                            ^ ((t >>> 13) | (t << 19))
                            ^ ((t >>> 22) | (t << 10))
                        );
                      }
                      function d(t) {
                        return (
                          ((t >>> 6) | (t << 26))
                            ^ ((t >>> 11) | (t << 21))
                            ^ ((t >>> 25) | (t << 7))
                        );
                      }
                      function l(t) {
                        return ((t >>> 7) | (t << 25)) ^ ((t >>> 18) | (t << 14)) ^ (t >>> 3);
                      }
                      n(f, i),
                      (f.prototype.init = function () {
                        return (
                          (this._a = 1779033703),
                          (this._b = 3144134277),
                          (this._c = 1013904242),
                          (this._d = 2773480762),
                          (this._e = 1359893119),
                          (this._f = 2600822924),
                          (this._g = 528734635),
                          (this._h = 1541459225),
                          this
                        );
                      }),
                      (f.prototype._update = function (t) {
                        for (
                          var e,
                            r = this._w,
                            n = 0 | this._a,
                            i = 0 | this._b,
                            o = 0 | this._c,
                            s = 0 | this._d,
                            f = 0 | this._e,
                            p = 0 | this._f,
                            b = 0 | this._g,
                            v = 0 | this._h,
                            g = 0;
                          g < 16;
                          ++g
                        ) r[g] = t.readInt32BE(4 * g);
                        for (; g < 64; ++g) {
                          r[g] = 0
                                | (((((e = r[g - 2]) >>> 17) | (e << 15))
                                  ^ ((e >>> 19) | (e << 13))
                                  ^ (e >>> 10))
                                  + r[g - 7]
                                  + l(r[g - 15])
                                  + r[g - 16]);
                        }
                        for (let y = 0; y < 64; ++y) {
                          const m = (v + d(f) + u(f, p, b) + a[y] + r[y]) | 0;
                          const w = (h(n) + c(n, i, o)) | 0;
                          (v = b),
                          (b = p),
                          (p = f),
                          (f = (s + m) | 0),
                          (s = o),
                          (o = i),
                          (i = n),
                          (n = (m + w) | 0);
                        }
                        (this._a = (n + this._a) | 0),
                        (this._b = (i + this._b) | 0),
                        (this._c = (o + this._c) | 0),
                        (this._d = (s + this._d) | 0),
                        (this._e = (f + this._e) | 0),
                        (this._f = (p + this._f) | 0),
                        (this._g = (b + this._g) | 0),
                        (this._h = (v + this._h) | 0);
                      }),
                      (f.prototype._hash = function () {
                        const t = o.allocUnsafe(32);
                        return (
                          t.writeInt32BE(this._a, 0),
                          t.writeInt32BE(this._b, 4),
                          t.writeInt32BE(this._c, 8),
                          t.writeInt32BE(this._d, 12),
                          t.writeInt32BE(this._e, 16),
                          t.writeInt32BE(this._f, 20),
                          t.writeInt32BE(this._g, 24),
                          t.writeInt32BE(this._h, 28),
                          t
                        );
                      }),
                      (e.exports = f);
                    },
                    { 467: 467, 514: 514, 517: 517 },
                  ],
                  523: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(524);
                      const o = t(517);
                      const a = t(514).Buffer;
                      const s = new Array(160);
                      function f() {
                        this.init(), (this._w = s), o.call(this, 128, 112);
                      }
                      n(f, i),
                      (f.prototype.init = function () {
                        return (
                          (this._ah = 3418070365),
                          (this._bh = 1654270250),
                          (this._ch = 2438529370),
                          (this._dh = 355462360),
                          (this._eh = 1731405415),
                          (this._fh = 2394180231),
                          (this._gh = 3675008525),
                          (this._hh = 1203062813),
                          (this._al = 3238371032),
                          (this._bl = 914150663),
                          (this._cl = 812702999),
                          (this._dl = 4144912697),
                          (this._el = 4290775857),
                          (this._fl = 1750603025),
                          (this._gl = 1694076839),
                          (this._hl = 3204075428),
                          this
                        );
                      }),
                      (f.prototype._hash = function () {
                        const t = a.allocUnsafe(48);
                        function e(e, r, n) {
                          t.writeInt32BE(e, n), t.writeInt32BE(r, n + 4);
                        }
                        return (
                          e(this._ah, this._al, 0),
                          e(this._bh, this._bl, 8),
                          e(this._ch, this._cl, 16),
                          e(this._dh, this._dl, 24),
                          e(this._eh, this._el, 32),
                          e(this._fh, this._fl, 40),
                          t
                        );
                      }),
                      (e.exports = f);
                    },
                    {
                      467: 467, 514: 514, 517: 517, 524: 524,
                    },
                  ],
                  524: [
                    function (t, e, r) {
                      const n = t(467);
                      const i = t(517);
                      const o = t(514).Buffer;
                      const a = [
                        1116352408,
                        3609767458,
                        1899447441,
                        602891725,
                        3049323471,
                        3964484399,
                        3921009573,
                        2173295548,
                        961987163,
                        4081628472,
                        1508970993,
                        3053834265,
                        2453635748,
                        2937671579,
                        2870763221,
                        3664609560,
                        3624381080,
                        2734883394,
                        310598401,
                        1164996542,
                        607225278,
                        1323610764,
                        1426881987,
                        3590304994,
                        1925078388,
                        4068182383,
                        2162078206,
                        991336113,
                        2614888103,
                        633803317,
                        3248222580,
                        3479774868,
                        3835390401,
                        2666613458,
                        4022224774,
                        944711139,
                        264347078,
                        2341262773,
                        604807628,
                        2007800933,
                        770255983,
                        1495990901,
                        1249150122,
                        1856431235,
                        1555081692,
                        3175218132,
                        1996064986,
                        2198950837,
                        2554220882,
                        3999719339,
                        2821834349,
                        766784016,
                        2952996808,
                        2566594879,
                        3210313671,
                        3203337956,
                        3336571891,
                        1034457026,
                        3584528711,
                        2466948901,
                        113926993,
                        3758326383,
                        338241895,
                        168717936,
                        666307205,
                        1188179964,
                        773529912,
                        1546045734,
                        1294757372,
                        1522805485,
                        1396182291,
                        2643833823,
                        1695183700,
                        2343527390,
                        1986661051,
                        1014477480,
                        2177026350,
                        1206759142,
                        2456956037,
                        344077627,
                        2730485921,
                        1290863460,
                        2820302411,
                        3158454273,
                        3259730800,
                        3505952657,
                        3345764771,
                        106217008,
                        3516065817,
                        3606008344,
                        3600352804,
                        1432725776,
                        4094571909,
                        1467031594,
                        275423344,
                        851169720,
                        430227734,
                        3100823752,
                        506948616,
                        1363258195,
                        659060556,
                        3750685593,
                        883997877,
                        3785050280,
                        958139571,
                        3318307427,
                        1322822218,
                        3812723403,
                        1537002063,
                        2003034995,
                        1747873779,
                        3602036899,
                        1955562222,
                        1575990012,
                        2024104815,
                        1125592928,
                        2227730452,
                        2716904306,
                        2361852424,
                        442776044,
                        2428436474,
                        593698344,
                        2756734187,
                        3733110249,
                        3204031479,
                        2999351573,
                        3329325298,
                        3815920427,
                        3391569614,
                        3928383900,
                        3515267271,
                        566280711,
                        3940187606,
                        3454069534,
                        4118630271,
                        4000239992,
                        116418474,
                        1914138554,
                        174292421,
                        2731055270,
                        289380356,
                        3203993006,
                        460393269,
                        320620315,
                        685471733,
                        587496836,
                        852142971,
                        1086792851,
                        1017036298,
                        365543100,
                        1126000580,
                        2618297676,
                        1288033470,
                        3409855158,
                        1501505948,
                        4234509866,
                        1607167915,
                        987167468,
                        1816402316,
                        1246189591,
                      ];
                      const s = new Array(160);
                      function f() {
                        this.init(), (this._w = s), i.call(this, 128, 112);
                      }
                      function u(t, e, r) {
                        return r ^ (t & (e ^ r));
                      }
                      function c(t, e, r) {
                        return (t & e) | (r & (t | e));
                      }
                      function h(t, e) {
                        return (
                          ((t >>> 28) | (e << 4))
                            ^ ((e >>> 2) | (t << 30))
                            ^ ((e >>> 7) | (t << 25))
                        );
                      }
                      function d(t, e) {
                        return (
                          ((t >>> 14) | (e << 18))
                            ^ ((t >>> 18) | (e << 14))
                            ^ ((e >>> 9) | (t << 23))
                        );
                      }
                      function l(t, e) {
                        return ((t >>> 1) | (e << 31)) ^ ((t >>> 8) | (e << 24)) ^ (t >>> 7);
                      }
                      function p(t, e) {
                        return (
                          ((t >>> 1) | (e << 31))
                            ^ ((t >>> 8) | (e << 24))
                            ^ ((t >>> 7) | (e << 25))
                        );
                      }
                      function b(t, e) {
                        return ((t >>> 19) | (e << 13)) ^ ((e >>> 29) | (t << 3)) ^ (t >>> 6);
                      }
                      function v(t, e) {
                        return (
                          ((t >>> 19) | (e << 13))
                            ^ ((e >>> 29) | (t << 3))
                            ^ ((t >>> 6) | (e << 26))
                        );
                      }
                      function g(t, e) {
                        return t >>> 0 < e >>> 0 ? 1 : 0;
                      }
                      n(f, i),
                      (f.prototype.init = function () {
                        return (
                          (this._ah = 1779033703),
                          (this._bh = 3144134277),
                          (this._ch = 1013904242),
                          (this._dh = 2773480762),
                          (this._eh = 1359893119),
                          (this._fh = 2600822924),
                          (this._gh = 528734635),
                          (this._hh = 1541459225),
                          (this._al = 4089235720),
                          (this._bl = 2227873595),
                          (this._cl = 4271175723),
                          (this._dl = 1595750129),
                          (this._el = 2917565137),
                          (this._fl = 725511199),
                          (this._gl = 4215389547),
                          (this._hl = 327033209),
                          this
                        );
                      }),
                      (f.prototype._update = function (t) {
                        for (
                          var e = this._w,
                            r = 0 | this._ah,
                            n = 0 | this._bh,
                            i = 0 | this._ch,
                            o = 0 | this._dh,
                            s = 0 | this._eh,
                            f = 0 | this._fh,
                            y = 0 | this._gh,
                            m = 0 | this._hh,
                            w = 0 | this._al,
                            _ = 0 | this._bl,
                            S = 0 | this._cl,
                            M = 0 | this._dl,
                            E = 0 | this._el,
                            k = 0 | this._fl,
                            x = 0 | this._gl,
                            A = 0 | this._hl,
                            R = 0;
                          R < 32;
                          R += 2
                        ) (e[R] = t.readInt32BE(4 * R)), (e[R + 1] = t.readInt32BE(4 * R + 4));
                        for (; R < 160; R += 2) {
                          let I = e[R - 30];
                          let T = e[R - 30 + 1];
                          const B = l(I, T);
                          const P = p(T, I);
                          const O = b((I = e[R - 4]), (T = e[R - 4 + 1]));
                          const C = v(T, I);
                          const L = e[R - 14];
                          const j = e[R - 14 + 1];
                          const N = e[R - 32];
                          const D = e[R - 32 + 1];
                          var U = (P + j) | 0;
                          var F = (B + L + g(U, P)) | 0;
                          (F = ((F = (F + O + g((U = (U + C) | 0), C)) | 0)
                                  + N
                                  + g((U = (U + D) | 0), D))
                                | 0),
                          (e[R] = F),
                          (e[R + 1] = U);
                        }
                        for (let q = 0; q < 160; q += 2) {
                          (F = e[q]), (U = e[q + 1]);
                          const z = c(r, n, i);
                          const W = c(w, _, S);
                          const V = h(r, w);
                          const H = h(w, r);
                          const G = d(s, E);
                          const K = d(E, s);
                          const X = a[q];
                          const Z = a[q + 1];
                          const Y = u(s, f, y);
                          const J = u(E, k, x);
                          let $ = (A + K) | 0;
                          let Q = (m + G + g($, A)) | 0;
                          Q = ((Q = ((Q = (Q + Y + g(($ = ($ + J) | 0), J)) | 0)
                                    + X
                                    + g(($ = ($ + Z) | 0), Z))
                                  | 0)
                                  + F
                                  + g(($ = ($ + U) | 0), U))
                                | 0;
                          const tt = (H + W) | 0;
                          const et = (V + z + g(tt, H)) | 0;
                          (m = y),
                          (A = x),
                          (y = f),
                          (x = k),
                          (f = s),
                          (k = E),
                          (s = (o + Q + g((E = (M + $) | 0), M)) | 0),
                          (o = i),
                          (M = S),
                          (i = n),
                          (S = _),
                          (n = r),
                          (_ = w),
                          (r = (Q + et + g((w = ($ + tt) | 0), $)) | 0);
                        }
                        (this._al = (this._al + w) | 0),
                        (this._bl = (this._bl + _) | 0),
                        (this._cl = (this._cl + S) | 0),
                        (this._dl = (this._dl + M) | 0),
                        (this._el = (this._el + E) | 0),
                        (this._fl = (this._fl + k) | 0),
                        (this._gl = (this._gl + x) | 0),
                        (this._hl = (this._hl + A) | 0),
                        (this._ah = (this._ah + r + g(this._al, w)) | 0),
                        (this._bh = (this._bh + n + g(this._bl, _)) | 0),
                        (this._ch = (this._ch + i + g(this._cl, S)) | 0),
                        (this._dh = (this._dh + o + g(this._dl, M)) | 0),
                        (this._eh = (this._eh + s + g(this._el, E)) | 0),
                        (this._fh = (this._fh + f + g(this._fl, k)) | 0),
                        (this._gh = (this._gh + y + g(this._gl, x)) | 0),
                        (this._hh = (this._hh + m + g(this._hl, A)) | 0);
                      }),
                      (f.prototype._hash = function () {
                        const t = o.allocUnsafe(64);
                        function e(e, r, n) {
                          t.writeInt32BE(e, n), t.writeInt32BE(r, n + 4);
                        }
                        return (
                          e(this._ah, this._al, 0),
                          e(this._bh, this._bl, 8),
                          e(this._ch, this._cl, 16),
                          e(this._dh, this._dl, 24),
                          e(this._eh, this._el, 32),
                          e(this._fh, this._fl, 40),
                          e(this._gh, this._gl, 48),
                          e(this._hh, this._hl, 56),
                          t
                        );
                      }),
                      (e.exports = f);
                    },
                    { 467: 467, 514: 514, 517: 517 },
                  ],
                  525: [
                    function (t, e, r) {
                      e.exports = i;
                      const n = t(434).EventEmitter;
                      function i() {
                        n.call(this);
                      }
                      t(467)(i, n),
                      (i.Readable = t(509)),
                      (i.Writable = t(511)),
                      (i.Duplex = t(499)),
                      (i.Transform = t(510)),
                      (i.PassThrough = t(508)),
                      (i.Stream = i),
                      (i.prototype.pipe = function (t, e) {
                        const r = this;
                        function i(e) {
                          t.writable && !1 === t.write(e) && r.pause && r.pause();
                        }
                        function o() {
                          r.readable && r.resume && r.resume();
                        }
                        r.on('data', i),
                        t.on('drain', o),
                        t._isStdio
                                || (e && !1 === e.end)
                                || (r.on('end', s), r.on('close', f));
                        let a = !1;
                        function s() {
                          a || ((a = !0), t.end());
                        }
                        function f() {
                          a || ((a = !0), typeof t.destroy === 'function' && t.destroy());
                        }
                        function u(t) {
                          if ((c(), n.listenerCount(this, 'error') === 0)) throw t;
                        }
                        function c() {
                          r.removeListener('data', i),
                          t.removeListener('drain', o),
                          r.removeListener('end', s),
                          r.removeListener('close', f),
                          r.removeListener('error', u),
                          t.removeListener('error', u),
                          r.removeListener('end', c),
                          r.removeListener('close', c),
                          t.removeListener('close', c);
                        }
                        return (
                          r.on('error', u),
                          t.on('error', u),
                          r.on('end', c),
                          r.on('close', c),
                          t.on('close', c),
                          t.emit('pipe', r),
                          t
                        );
                      });
                    },
                    {
                      434: 434, 467: 467, 499: 499, 508: 508, 509: 509, 510: 510, 511: 511,
                    },
                  ],
                  526: [
                    function (t, e, r) {
                      const n = t(514).Buffer;
                      const i = n.isEncoding
                            || function (t) {
                              switch ((t = `${t}`) && t.toLowerCase()) {
                                case 'hex':
                                case 'utf8':
                                case 'utf-8':
                                case 'ascii':
                                case 'binary':
                                case 'base64':
                                case 'ucs2':
                                case 'ucs-2':
                                case 'utf16le':
                                case 'utf-16le':
                                case 'raw':
                                  return !0;
                                default:
                                  return !1;
                              }
                            };
                      function o(t) {
                        let e;
                        switch (
                          ((this.encoding = (function (t) {
                            const e = (function (t) {
                              if (!t) return 'utf8';
                              for (var e; ;) {
                                switch (t) {
                                  case 'utf8':
                                  case 'utf-8':
                                    return 'utf8';
                                  case 'ucs2':
                                  case 'ucs-2':
                                  case 'utf16le':
                                  case 'utf-16le':
                                    return 'utf16le';
                                  case 'latin1':
                                  case 'binary':
                                    return 'latin1';
                                  case 'base64':
                                  case 'ascii':
                                  case 'hex':
                                    return t;
                                  default:
                                    if (e) return;
                                    (t = (`${t}`).toLowerCase()), (e = !0);
                                }
                              }
                            }(t));
                            if (typeof e !== 'string' && (n.isEncoding === i || !i(t))) throw new Error(`Unknown encoding: ${t}`);
                            return e || t;
                          }(t))),
                          this.encoding)
                        ) {
                          case 'utf16le':
                            (this.text = f), (this.end = u), (e = 4);
                            break;
                          case 'utf8':
                            (this.fillLast = s), (e = 4);
                            break;
                          case 'base64':
                            (this.text = c), (this.end = h), (e = 3);
                            break;
                          default:
                            return (this.write = d), void (this.end = l);
                        }
                        (this.lastNeed = 0),
                        (this.lastTotal = 0),
                        (this.lastChar = n.allocUnsafe(e));
                      }
                      function a(t) {
                        return t <= 127
                          ? 0
                          : t >> 5 == 6
                            ? 2
                            : t >> 4 == 14
                              ? 3
                              : t >> 3 == 30
                                ? 4
                                : t >> 6 == 2
                                  ? -1
                                  : -2;
                      }
                      function s(t) {
                        const e = this.lastTotal - this.lastNeed;
                        const r = (function (t, e, r) {
                          if ((192 & e[0]) != 128) return (t.lastNeed = 0), 'ï¿½';
                          if (t.lastNeed > 1 && e.length > 1) {
                            if ((192 & e[1]) != 128) return (t.lastNeed = 1), 'ï¿½';
                            if (t.lastNeed > 2 && e.length > 2 && (192 & e[2]) != 128) return (t.lastNeed = 2), 'ï¿½';
                          }
                        }(this, t));
                        return void 0 !== r
                          ? r
                          : this.lastNeed <= t.length
                            ? (t.copy(this.lastChar, e, 0, this.lastNeed),
                            this.lastChar.toString(this.encoding, 0, this.lastTotal))
                            : (t.copy(this.lastChar, e, 0, t.length),
                            void (this.lastNeed -= t.length));
                      }
                      function f(t, e) {
                        if ((t.length - e) % 2 == 0) {
                          const r = t.toString('utf16le', e);
                          if (r) {
                            const n = r.charCodeAt(r.length - 1);
                            if (n >= 55296 && n <= 56319) {
                              return (
                                (this.lastNeed = 2),
                                (this.lastTotal = 4),
                                (this.lastChar[0] = t[t.length - 2]),
                                (this.lastChar[1] = t[t.length - 1]),
                                r.slice(0, -1)
                              );
                            }
                          }
                          return r;
                        }
                        return (
                          (this.lastNeed = 1),
                          (this.lastTotal = 2),
                          (this.lastChar[0] = t[t.length - 1]),
                          t.toString('utf16le', e, t.length - 1)
                        );
                      }
                      function u(t) {
                        const e = t && t.length ? this.write(t) : '';
                        if (this.lastNeed) {
                          const r = this.lastTotal - this.lastNeed;
                          return e + this.lastChar.toString('utf16le', 0, r);
                        }
                        return e;
                      }
                      function c(t, e) {
                        const r = (t.length - e) % 3;
                        return r === 0
                          ? t.toString('base64', e)
                          : ((this.lastNeed = 3 - r),
                          (this.lastTotal = 3),
                          r === 1
                            ? (this.lastChar[0] = t[t.length - 1])
                            : ((this.lastChar[0] = t[t.length - 2]),
                            (this.lastChar[1] = t[t.length - 1])),
                          t.toString('base64', e, t.length - r));
                      }
                      function h(t) {
                        const e = t && t.length ? this.write(t) : '';
                        return this.lastNeed
                          ? e + this.lastChar.toString('base64', 0, 3 - this.lastNeed)
                          : e;
                      }
                      function d(t) {
                        return t.toString(this.encoding);
                      }
                      function l(t) {
                        return t && t.length ? this.write(t) : '';
                      }
                      (r.StringDecoder = o),
                      (o.prototype.write = function (t) {
                        if (t.length === 0) return '';
                        let e; let
                          r;
                        if (this.lastNeed) {
                          if (void 0 === (e = this.fillLast(t))) return '';
                          (r = this.lastNeed), (this.lastNeed = 0);
                        } else r = 0;
                        return r < t.length
                          ? e
                            ? e + this.text(t, r)
                            : this.text(t, r)
                          : e || '';
                      }),
                      (o.prototype.end = function (t) {
                        const e = t && t.length ? this.write(t) : '';
                        return this.lastNeed ? `${e}ï¿½` : e;
                      }),
                      (o.prototype.text = function (t, e) {
                        const r = (function (t, e, r) {
                          let n = e.length - 1;
                          if (n < r) return 0;
                          let i = a(e[n]);
                          if (i >= 0) return i > 0 && (t.lastNeed = i - 1), i;
                          if (--n < r || i === -2) return 0;
                          if ((i = a(e[n])) >= 0) return i > 0 && (t.lastNeed = i - 2), i;
                          if (--n < r || i === -2) return 0;
                          if ((i = a(e[n])) >= 0) return i > 0 && (i === 2 ? (i = 0) : (t.lastNeed = i - 3)), i;
                          return 0;
                        }(this, t, e));
                        if (!this.lastNeed) return t.toString('utf8', e);
                        this.lastTotal = r;
                        const n = t.length - (r - this.lastNeed);
                        return t.copy(this.lastChar, 0, n), t.toString('utf8', e, n);
                      }),
                      (o.prototype.fillLast = function (t) {
                        if (this.lastNeed <= t.length) {
                          return (
                            t.copy(
                              this.lastChar,
                              this.lastTotal - this.lastNeed,
                              0,
                              this.lastNeed,
                            ),
                            this.lastChar.toString(this.encoding, 0, this.lastTotal)
                          );
                        }
                        t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length),
                        (this.lastNeed -= t.length);
                      });
                    },
                    { 514: 514 },
                  ],
                  527: [
                    function (t, e, r) {
                      (function (e, n) {
                        (function () {
                          const i = t(488).nextTick;
                          const o = Function.prototype.apply;
                          const a = Array.prototype.slice;
                          const s = {};
                          let f = 0;
                          function u(t, e) {
                            (this._id = t), (this._clearFn = e);
                          }
                          (r.setTimeout = function () {
                            return new u(o.call(setTimeout, window, arguments), clearTimeout);
                          }),
                          (r.setInterval = function () {
                            return new u(o.call(setInterval, window, arguments), clearInterval);
                          }),
                          (r.clearTimeout = r.clearInterval = function (t) {
                            t.close();
                          }),
                          (u.prototype.unref = u.prototype.ref = function () {}),
                          (u.prototype.close = function () {
                            this._clearFn.call(window, this._id);
                          }),
                          (r.enroll = function (t, e) {
                            clearTimeout(t._idleTimeoutId), (t._idleTimeout = e);
                          }),
                          (r.unenroll = function (t) {
                            clearTimeout(t._idleTimeoutId), (t._idleTimeout = -1);
                          }),
                          (r._unrefActive = r.active = function (t) {
                            clearTimeout(t._idleTimeoutId);
                            const e = t._idleTimeout;
                            e >= 0
                                  && (t._idleTimeoutId = setTimeout(() => {
                                    t._onTimeout && t._onTimeout();
                                  }, e));
                          }),
                          (r.setImmediate = typeof e === 'function'
                            ? e
                            : function (t) {
                              const e = f++;
                              const n = !(arguments.length < 2) && a.call(arguments, 1);
                              return (
                                (s[e] = !0),
                                i(() => {
                                  s[e]
                                            && (n ? t.apply(null, n) : t.call(null),
                                            r.clearImmediate(e));
                                }),
                                e
                              );
                            }),
                          (r.clearImmediate = typeof n === 'function'
                            ? n
                            : function (t) {
                              delete s[t];
                            });
                        }.call(this));
                      }.call(this, t(527).setImmediate, t(527).clearImmediate));
                    },
                    { 488: 488, 527: 527 },
                  ],
                  528: [
                    function (t, e, r) {
                      (function (t) {
                        (function () {
                          function r(e) {
                            try {
                              if (!t.localStorage) return !1;
                            } catch (t) {
                              return !1;
                            }
                            const r = t.localStorage[e];
                            return r != null && String(r).toLowerCase() === 'true';
                          }
                          e.exports = function (t, e) {
                            if (r('noDeprecation')) return t;
                            let n = !1;
                            return function () {
                              if (!n) {
                                if (r('throwDeprecation')) throw new Error(e);
                                r('traceDeprecation'), (n = !0);
                              }
                              return t.apply(this, arguments);
                            };
                          };
                        }.call(this));
                      }.call(
                        this,
                        typeof global !== 'undefined'
                          ? global
                          : typeof self !== 'undefined'
                            ? self
                            : typeof window !== 'undefined'
                              ? window
                              : {},
                      ));
                    },
                    {},
                  ],
                  529: [
                    function (t, e, r) {
                      const n = arguments[3];
                      const i = arguments[4];
                      const o = arguments[5];
                      const a = JSON.stringify;
                      e.exports = function (t, e) {
                        for (var r, s = Object.keys(o), f = 0, u = s.length; f < u; f++) {
                          var c = s[f];
                          const h = o[c].exports;
                          if (h === t || (h && h.default === t)) {
                            r = c;
                            break;
                          }
                        }
                        if (!r) {
                          r = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
                          const d = {};
                          for (f = 0, u = s.length; f < u; f++) {
                            d[(c = s[f])] = c;
                          }
                          i[r] = [`function(require,module,exports){${t}(self); }`, d];
                        }
                        const l = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
                        const p = {};
                        (p[r] = r),
                        (i[l] = [
                          `function(require,module,exports){var f = require(${
                            a(r)
                          });(f.default ? f.default : f)(self);}`,
                          p,
                        ]);
                        const b = {};
                        !(function t(e) {
                          for (const r in ((b[e] = !0), i[e][1])) {
                            const n = i[e][1][r];
                            b[n] || t(n);
                          }
                        }(l));
                        const v = `(${
                          n
                        })({${
                          Object.keys(b)
                            .map((t) => `${a(t)}:[${i[t][0]},${a(i[t][1])}]`)
                            .join(',')
                        }},{},[${
                          a(l)
                        }])`;
                        const g = window.URL || window.webkitURL || window.mozURL || window.msURL;
                        const y = new Blob([v], { type: 'text/javascript' });
                        if (e && e.bare) return y;
                        const m = g.createObjectURL(y);
                        const w = new Worker(m);
                        return (w.objectURL = m), w;
                      };
                    },
                    {},
                  ],
                  530: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      (r.ErrorTypes = {
                        NETWORK_ERROR: 'networkError',
                        MEDIA_ERROR: 'mediaError',
                        MUX_ERROR: 'muxError',
                        BUFFER_ERROR: 'bufferError',
                        OTHER_ERROR: 'otherError',
                      }),
                      (r.ErrorDetails = {
                        FRAG_PARSING_ERROR: 'fragParsingError',
                        REMUX_ALLOC_ERROR: 'remuxAllocError',
                        BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',
                        BUFFER_APPEND_ERROR: 'bufferAppendError',
                        BUFFER_APPENDING_ERROR: 'bufferAppendingError',
                        INTERNAL_EXCEPTION: 'internalException',
                      });
                    },
                    {},
                  ],
                  531: [
                    function (t, e, r) {
                      e.exports = {
                        TRANSPORT_CONNECTED: 'transportConnected',
                        TRANSPORT_DISCONNECTED: 'transportDisconnected',
                        FRAG_LOADED: 'fragLoaded',
                        FRAG_PARSING_INIT_SEGMENT: 'fragParsingInitSegment',
                        FRAG_PARSING_DATA: 'fragParsingData',
                        INIT_PTS_FOUND: 'initPtsFound',
                        FRAG_PARSED: 'fragParsed',
                        TS_RESET: 'tsReset',
                        ERROR: 'providerError',
                      };
                    },
                    {},
                  ],
                  532: [
                    function (t, e, r) {
                      e.exports = t(542).default;
                    },
                    { 542: 542 },
                  ],
                  533: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = (function () {
                        function t() {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t));
                        }
                        return (
                          n(t, null, [
                            {
                              key: 'getSilentFrame',
                              value(t, e) {
                                switch (t) {
                                  case 'mp4a.40.2':
                                    if (e === 1) return new Uint8Array([0, 200, 0, 128, 35, 128]);
                                    if (e === 2) return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                                    if (e === 3) {
                                      return new Uint8Array([
                                        0,
                                        200,
                                        0,
                                        128,
                                        32,
                                        132,
                                        1,
                                        38,
                                        64,
                                        8,
                                        100,
                                        0,
                                        142,
                                      ]);
                                    }
                                    if (e === 4) {
                                      return new Uint8Array([
                                        0,
                                        200,
                                        0,
                                        128,
                                        32,
                                        132,
                                        1,
                                        38,
                                        64,
                                        8,
                                        100,
                                        0,
                                        128,
                                        44,
                                        128,
                                        8,
                                        2,
                                        56,
                                      ]);
                                    }
                                    if (e === 5) {
                                      return new Uint8Array([
                                        0,
                                        200,
                                        0,
                                        128,
                                        32,
                                        132,
                                        1,
                                        38,
                                        64,
                                        8,
                                        100,
                                        0,
                                        130,
                                        48,
                                        4,
                                        153,
                                        0,
                                        33,
                                        144,
                                        2,
                                        56,
                                      ]);
                                    }
                                    if (e === 6) {
                                      return new Uint8Array([
                                        0,
                                        200,
                                        0,
                                        128,
                                        32,
                                        132,
                                        1,
                                        38,
                                        64,
                                        8,
                                        100,
                                        0,
                                        130,
                                        48,
                                        4,
                                        153,
                                        0,
                                        33,
                                        144,
                                        2,
                                        0,
                                        178,
                                        0,
                                        32,
                                        8,
                                        224,
                                      ]);
                                    }
                                    break;
                                  default:
                                    if (e === 1) {
                                      return new Uint8Array([
                                        1,
                                        64,
                                        34,
                                        128,
                                        163,
                                        78,
                                        230,
                                        128,
                                        186,
                                        8,
                                        0,
                                        0,
                                        0,
                                        28,
                                        6,
                                        241,
                                        193,
                                        10,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        94,
                                      ]);
                                    }
                                    if (e === 2) {
                                      return new Uint8Array([
                                        1,
                                        64,
                                        34,
                                        128,
                                        163,
                                        94,
                                        230,
                                        128,
                                        186,
                                        8,
                                        0,
                                        0,
                                        0,
                                        0,
                                        149,
                                        0,
                                        6,
                                        241,
                                        161,
                                        10,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        94,
                                      ]);
                                    }
                                    if (e === 3) {
                                      return new Uint8Array([
                                        1,
                                        64,
                                        34,
                                        128,
                                        163,
                                        94,
                                        230,
                                        128,
                                        186,
                                        8,
                                        0,
                                        0,
                                        0,
                                        0,
                                        149,
                                        0,
                                        6,
                                        241,
                                        161,
                                        10,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        90,
                                        94,
                                      ]);
                                    }
                                }
                                return null;
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = i;
                    },
                    {},
                  ],
                  534: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 }),
                      (r.AACParser = void 0);
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = t(545);
                      r.AACParser = (function () {
                        function t() {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t));
                        }
                        return (
                          n(t, null, [
                            {
                              key: 'parseAudioSpecificConfig',
                              value(e) {
                                let r = void 0;
                                const n = (r = e.byteLength ? new i.BitArray(e) : e).bitpos
                                      + 8 * (r.src.byteOffset + r.bytepos);
                                const o = r.readBits(5);
                                this.codec = `mp4a.40.${o}`;
                                const a = r.readBits(4);
                                a == 15 && r.skipBits(24);
                                const s = r.readBits(4);
                                return {
                                  config: (0, i.bitSlice)(
                                    new Uint8Array(r.src.buffer),
                                    n,
                                    n + 16,
                                  ),
                                  codec: `mp4a.40.${o}`,
                                  samplerate: t.SampleRates[a],
                                  channels: s,
                                };
                              },
                            },
                            {
                              key: 'parseStreamMuxConfig',
                              value(e) {
                                const r = new i.BitArray(e);
                                if (!r.readBits(1)) return r.skipBits(14), t.parseAudioSpecificConfig(r);
                              },
                            },
                            {
                              key: 'SampleRates',
                              get() {
                                return [
                                  96e3,
                                  88200,
                                  64e3,
                                  48e3,
                                  44100,
                                  32e3,
                                  24e3,
                                  22050,
                                  16e3,
                                  12e3,
                                  11025,
                                  8e3,
                                  7350,
                                ];
                              },
                            },
                          ]),
                          t
                        );
                      }());
                    },
                    { 545: 545 },
                  ],
                  535: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = h(t(546));
                      const o = h(t(547));
                      const a = h(t(540));
                      const s = h(t(536));
                      const f = t(534);
                      const u = t(548);
                      const c = h(t(531));
                      function h(t) {
                        return t && t.__esModule ? t : { default: t };
                      }
                      function d(t, e) {
                        if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                      }
                      const l = t(1);
                      const p = (function () {
                        function t(e, r) {
                          d(this, t),
                          (this.observer = e),
                          (this.remuxer = new a.default(e, {})),
                          (this.audioConfig = t.defaultAACConfig()),
                          (this.sps = []),
                          (this.pps = []),
                          (this.lengthHeaderSize = 4),
                          (this.hasAudio = !0),
                          (this.hasVideo = !0),
                          (this.videoTs = 0),
                          (this.avBuffer = null),
                          (this.config = r),
                          (this.tracks = {
                            audio: {
                              samples: [],
                              container: 'video/mp2t',
                              dropped: 0,
                              sequenceNumber: 0,
                              id: 0,
                              inputTimeScale: 1e3,
                              len: 0,
                              type: 'audio',
                            },
                            video: {
                              samples: [],
                              container: 'video/mp2t',
                              dropped: 0,
                              sequenceNumber: 0,
                              id: 0,
                              inputTimeScale: 1e3,
                              type: 'video',
                            },
                            id3: { samples: [] },
                            text: { samples: [] },
                          });
                        }
                        return (
                          n(
                            t,
                            [
                              {
                                key: 'setAvailableMedia',
                                value(t, e) {
                                  u.logger.log(
                                    `Set available media, audio ${t} video ${e}`,
                                  ),
                                  (this.hasAudio = t),
                                  (this.hasVideo = e);
                                },
                              },
                              {
                                key: 'onData',
                                value(t) {
                                  this.avBuffer == null
                                        && (this.avBuffer = new v({
                                          hasAudio: this.hasAudio,
                                          hasVideo: this.hasVideo,
                                          fragmentLengthMs: this.config.fragmentLengthMs,
                                          cutByIFrameOnly: this.config.cutByIFrameOnly,
                                        }));
                                  for (let e = new i.default(t); e.readableBytes() > 0;) {
                                    var r;
                                    const n = e.readByte();
                                    const o = e.readInt();
                                    const a = e.readInt();
                                    n == 9
                                      ? (r = this.onVideo(e, a, o))
                                            && this.avBuffer.pushVideo(r)
                                      : n == 8
                                            && (r = this.onAudio(e, a, o))
                                            && this.avBuffer.pushAudio(r),
                                    this.flush();
                                  }
                                },
                              },
                              {
                                key: 'onVideo',
                                value(e, r, n) {
                                  const i = e.readByte();
                                  switch (
                                    (this.videoTs == 0 && (this.videoTs = n),
                                    Math.abs(n - this.videoTs) > 5e3
                                      ? (u.logger.log(`Video ts drop ${n - this.videoTs}`),
                                      this.avBuffer.flush(),
                                      this.remuxer.resetInitSegment(),
                                      (this.videoTs = 0),
                                      this.observer.trigger(c.default.TS_RESET))
                                      : n < this.videoTs
                                            && u.logger.warn(
                                              `Non monotonic video ts ${this.videoTs} -> ${n}`,
                                            ),
                                    (this.videoTs = n),
                                    i)
                                  ) {
                                    case 23:
                                      var a = e.readByte();
                                      if (a == 0) {
                                        e.skipBytes(3);
                                        e.readByte();
                                        const s = e.sliceAsUint8Array(e.readerIndex(), 3);
                                        s[0], s[1], s[2];
                                        (this.tracks.video.codec = `avc1.${o.default.hexDump(s).toUpperCase()}`),
                                        (this.lengthHeaderSize = 1 + (3 & e.readByte()));
                                        for (
                                          var f = 31 & e.readByte(), h = [], d = 0;
                                          d < f;
                                          d++
                                        ) h.push(t.readNalFromAVCCFormat(e, 2));
                                        for (
                                          var l = 31 & e.readByte(), p = [], v = 0;
                                          v < l;
                                          v++
                                        ) p.push(t.readNalFromAVCCFormat(e, 2));
                                        this.onVideoConfig(h, p, n);
                                      } else if (a == 1) {
                                        e.skipBytes(3);
                                        const g = t.readNalus(e, this.lengthHeaderSize, r - 5);
                                        if (g) return new b(g, !0, n, n);
                                      } else u.logger.warn(`Unknown inner type ${a}`);
                                      break;
                                    case 39:
                                      e.skipBytes(4);
                                      var y = t.readNalus(e, this.lengthHeaderSize, r - 5);
                                      if (y) return new b(y, !1, n, n);
                                      break;
                                    default:
                                      u.logger.warn(`Unknown AVC type ${i}`);
                                  }
                                },
                              },
                              {
                                key: 'onAudio',
                                value(t, e, r) {
                                  if (t.readByte() != 0) {
                                    return {
                                      unit: t.sliceAsUint8Array(t.readerIndex(), e - 1),
                                      pts: r,
                                      dts: r,
                                    };
                                  }
                                  for (
                                    var n = t.sliceAsUint8Array(t.readerIndex(), e - 1),
                                      i = f.AACParser.parseAudioSpecificConfig(n),
                                      o = [],
                                      a = 0;
                                    a < i.config.byteLength;
                                    a++
                                  ) o[a] = i.config[a];
                                  (i.config = o), this.onAudioConfig(i);
                                },
                              },
                              {
                                key: 'onAudioConfig',
                                value(t) {
                                  (this.audioConfig = t),
                                  (this.tracks.audio.codec = t.codec),
                                  (this.tracks.audio.channelCount = t.channels),
                                  (this.tracks.audio.config = t.config),
                                  (this.tracks.audio.channelCount = t.channels),
                                  (this.tracks.audio.timescale = t.samplerate),
                                  (this.tracks.audio.samplerate = t.samplerate),
                                  (this.tracks.audio.isAAC = !0);
                                },
                              },
                              {
                                key: 'onVideoConfig',
                                value(t, e, r) {
                                  this.avBuffer.onVideoConfig({ sps: t, pps: e }, r);
                                },
                              },
                              {
                                key: 'flush',
                                value() {
                                  for (let t = this.avBuffer.getFragments(); t.length > 0;) {
                                    const e = t.shift();
                                    if (e.configChanged) {
                                      const r = new s.default(e.config.video.sps[0]).readSPS();
                                      (this.tracks.video.width == r.width
                                            && this.tracks.video.height == r.height)
                                            || (u.logger.log(
                                              `Video resolution changed ${
                                                this.tracks.video.width
                                              }x${
                                                this.tracks.video.height
                                              } => ${
                                                r.width
                                              }x${
                                                r.height}`,
                                            ),
                                            this.remuxer.resetInitSegment());
                                    }
                                    if (e.audio.length > 0) {
                                      for (
                                        var n = this.tracks.audio,
                                          i = e.audio,
                                          o = this.audioConfig,
                                          a = 0,
                                          f = 0;
                                        f < i.length;
                                        f++
                                      ) a += i[f].unit.byteLength;
                                      (n.samples = i),
                                      (n.duration = (i[i.length - 1].pts - i[0].pts) / 1e3),
                                      (n.codec = o.codec),
                                      (n.config = o.config),
                                      (n.channelCount = o.channels),
                                      (n.samplerate = o.samplerate),
                                      (n.isAAC = !0),
                                      (n.len = a),
                                      n.sequenceNumber++,
                                      u.logger.log(
                                        `audio: duration ${
                                          this.tracks.audio.duration
                                        }, startPts ${
                                          this.tracks.audio.samples[0].pts
                                        } endPts ${
                                          this.tracks.audio.samples[
                                            this.tracks.audio.samples.length - 1
                                          ].pts}`,
                                      );
                                    }
                                    if (e.video.length > 0) {
                                      if (!e.config.video) continue;
                                      const c = this.tracks.video;
                                      const h = e.video;
                                      const d = new s.default(e.config.video.sps[0]).readSPS();
                                      (c.samples = h),
                                      (c.duration = (h[h.length - 1].pts - h[0].pts) / 1e3),
                                      (c.width = d.width),
                                      (c.height = d.height),
                                      (c.pixelRatio = d.pixelRatio),
                                      (c.pps = e.config.video.pps),
                                      (c.sps = e.config.video.sps),
                                      c.sequenceNumber++,
                                      u.logger.log(
                                        `video: duration ${
                                          this.tracks.video.duration
                                        }, startPts ${
                                          this.tracks.video.samples[0].pts
                                        } endPts ${
                                          this.tracks.video.samples[
                                            this.tracks.video.samples.length - 1
                                          ].pts
                                        } samples ${
                                          h.length}`,
                                      );
                                    }
                                    e.audio.length > 0 && e.video.length > 0
                                      ? (this.tracks.video.duration = this.tracks.audio.duration)
                                      : e.video.length > 0
                                            && e.audio.length == 0
                                            && (this.tracks.audio.duration = this.tracks.video.duration),
                                    this.remuxer.remux(
                                      this.tracks.audio,
                                      this.tracks.video,
                                      this.tracks.id3,
                                      this.tracks.text,
                                      0,
                                    );
                                  }
                                },
                              },
                            ],
                            [
                              {
                                key: 'buffered',
                                value(t) {
                                  if (t.length > 1) {
                                    const e = t[0];
                                    return t[t.length - 1].pts - e.pts;
                                  }
                                  return 0;
                                },
                              },
                              {
                                key: 'readNalFromAVCCFormat',
                                value(t, e) {
                                  if (t.readableBytes() > e) {
                                    let r = 0;
                                    switch (e) {
                                      case 2:
                                        r = t.readShort();
                                        break;
                                      case 4:
                                        r = t.readInt();
                                    }
                                    return t.readableBytes() < r
                                      ? void u.logger.error(
                                        `Length bigger then buffer ${
                                          t.readableBytes()
                                        } ${
                                          r}`,
                                      )
                                      : t.sliceAsUint8Array(t.readerIndex(), r);
                                  }
                                },
                              },
                              {
                                key: 'readNalus',
                                value(e, r, n) {
                                  for (
                                    var i = [], o = e.readableBytes() - n;
                                    e.readableBytes() > o;

                                  ) {
                                    const a = t.readNalFromAVCCFormat(e, r);
                                    if (void 0 !== a) i.push({ data: a, type: 31 & a[0] });
                                    else if (e.readableBytes() > o) return void u.logger.warn('Failed to read nal');
                                  }
                                  if (i.length > 0) return i;
                                },
                              },
                              {
                                key: 'defaultAACConfig',
                                value() {
                                  const t = new Uint8Array(new ArrayBuffer(4));
                                  (t[0] = 17),
                                  (t[1] = 144),
                                  (t[2] = 86),
                                  (t[3] = 229),
                                  (t[4] = 0);
                                  for (
                                    var e = f.AACParser.parseAudioSpecificConfig(t),
                                      r = [],
                                      n = 0;
                                    n < e.config.byteLength;
                                    n++
                                  ) r[n] = e.config[n];
                                  return (e.config = r), e;
                                },
                              },
                            ],
                          ),
                          t
                        );
                      }());
                      r.default = p;
                      var b = function t(e, r, n, i) {
                        d(this, t),
                        (this.pts = n),
                        (this.dts = i),
                        (this.units = e),
                        (this.key = r),
                        (this.frame = !0),
                        (this.id = 0),
                        (this.length = 0);
                        let o = !0;
                        let a = !1;
                        let s = void 0;
                        try {
                          for (
                            var f, u = e[Symbol.iterator]();
                            !(o = (f = u.next()).done);
                            o = !0
                          ) {
                            const c = f.value;
                            this.length += c.data.length;
                          }
                        } catch (t) {
                          (a = !0), (s = t);
                        } finally {
                          try {
                            !o && u.return && u.return();
                          } finally {
                            if (a) throw s;
                          }
                        }
                      };
                      var v = (function () {
                        function t(e) {
                          d(this, t),
                          (this.hasAudio = e.hasAudio),
                          (this.hasVideo = e.hasVideo),
                          (this.fragmentLengthMs = e.fragmentLengthMs),
                          (this.mediaConfig = { audio: null, video: null }),
                          (this.video = []),
                          (this.audio = []),
                          (this.aligned = !1),
                          (this.cutByIFrameOnly = e.cutByIFrameOnly);
                        }
                        return (
                          n(t, [
                            {
                              key: 'pushAudio',
                              value(t) {
                                this.audio.push(t);
                              },
                            },
                            {
                              key: 'pushVideo',
                              value(t) {
                                if (this.video.length > 0) {
                                  const e = this.video[this.video.length - 1];
                                  e.duration = t.pts - e.pts;
                                }
                                this.video.push(t);
                              },
                            },
                            {
                              key: 'onAudioConfig',
                              value(t) {
                                this.mediaConfig.audio = t;
                              },
                            },
                            {
                              key: 'onVideoConfig',
                              value(t, e) {
                                const r = {
                                  key: 'config', pts: e, config: t, duration: -1,
                                };
                                this.pushVideo(r);
                              },
                            },
                            {
                              key: 'flush',
                              value() {
                                return (
                                  (this.aligned = !1),
                                  { audio: this.flushAudio(), video: this.flushVideo() }
                                );
                              },
                            },
                            {
                              key: 'flushAudio',
                              value() {
                                if (this.hasAudio) return this.cut(this.audio.length, -1);
                              },
                            },
                            {
                              key: 'flushVideo',
                              value() {
                                if (this.hasVideo) return this.cut(-1, this.video.length);
                              },
                            },
                            {
                              key: 'getFragments',
                              value() {
                                for (var t = []; this.bufferedEnough();) {
                                  if (this.hasAudio && !this.hasVideo) t.push(this.cut(this.audio.length, -1));
                                  else if (!this.hasAudio && this.hasVideo) {
                                    let e = void 0;
                                    const r = this.fragmentByIFrame();
                                    if (void 0 !== r) e = this.cut(-1, r.index - 1);
                                    else {
                                      if (this.cutByIFrameOnly) break;
                                      e = this.cut(-1, this.video.length);
                                    }
                                    t.push(e);
                                  } else {
                                    if (!this.aligned) {
                                      if (!this.isAlignable()) return t;
                                      const n = this.alignBufferBeforeStartup();
                                      n && t.push(n);
                                      break;
                                    }
                                    const i = this.fragmentByIFrame();
                                    if (void 0 !== i) {
                                      const o = i.index - 1;
                                      const a = (this.video[o].pts,
                                      this.findIndex(this.audio, i.pts - 20, 1 / 0));
                                      if (!((a > -1 ? this.audio[a].pts : -1) > -1)) {
                                        u.logger.log(
                                          `Failed to fragment at: v ${o} a ${a}`,
                                        );
                                        break;
                                      }
                                      t.push(this.cut(a, o)),
                                      u.logger.log('Fragment by iframe');
                                    } else {
                                      if (this.cutByIFrameOnly) break;
                                      const s = this.findSyncPoint(this.video.length);
                                      if (!s) break;
                                      t.push(s);
                                    }
                                  }
                                }
                                return t;
                              },
                            },
                            {
                              key: 'isAlignable',
                              value() {
                                const t = this.findIFrame(0);
                                if (t < 0) return !1;
                                const e = this.video[t].pts;
                                let r = this.findIndex(this.audio, e, e + 50);
                                if (r == null) {
                                  if (
                                    !(
                                      this.audio.length > 0
                                          && this.audio[this.audio.length - 1].pts > e
                                    )
                                  ) return !1;
                                  r = 0;
                                }
                                const n = this.audio[r].pts;
                                const i = e - n;
                                if (i < -100) {
                                  if (this.findIndex(this.video, n - 20, n) == null) return !1;
                                } else if (i > 100) {
                                  if (this.findIndex(this.audio, e, e + 50) == null) return !1;
                                }
                                return !0;
                              },
                            },
                            {
                              key: 'alignBufferBeforeStartup',
                              value() {
                                if (!this.aligned) {
                                  const t = this.findIFrame(0);
                                  if (t < 0) return void u.logger.warn('IFrame missing on startup');
                                  const e = this.video[t].pts;
                                  let r = this.findIndex(this.audio, e, e + 50);
                                  if (r == null) {
                                    if (
                                      !(
                                        this.audio.length > 0
                                            && this.audio[this.audio.length - 1].pts > e
                                      )
                                    ) return void u.logger.log('not enough audio');
                                    r = 0;
                                  } else u.logger.log(`aindex ${r}`);
                                  const n = this.audio[r].pts;
                                  const i = e - n;
                                  if (i < -100) {
                                    u.logger.log(`align buffer missing audio ${-i}`);
                                    const o = this.findIndex(this.video, n - 20, n);
                                    return (this.aligned = !0), this.cut(-1, o);
                                  }
                                  i > 100
                                    ? (u.logger.log(`align buffer missing video ${i}`),
                                    this.cut(r, -1),
                                    u.logger.log(
                                      `Buffer aligned, dropped a:${
                                        r
                                      } v:${
                                        t
                                      }apts ${
                                        this.audio[r].pts
                                      } vpts ${
                                        e}`,
                                    ))
                                    : (u.logger.log(
                                      `audio pts / video pts ${this.audio[r].pts}/${e}`,
                                    ),
                                    this.cut(r - 1, t - 1),
                                    u.logger.log('stream aligned')),
                                  (this.aligned = !0);
                                }
                              },
                            },
                            {
                              key: 'findSyncPoint',
                              value(t) {
                                for (
                                  var e = this.findIndex(
                                      this.video,
                                      this.video[0].pts + this.fragmentLengthMs,
                                      1 / 0,
                                    ),
                                    r = 1,
                                    n = void 0;
                                  e < t;
                                  e++
                                ) {
                                  if (!(e < 3)) {
                                    for (var i = this.video[e].pts; r < this.audio.length;) {
                                      if (!(this.audio[r].pts < i)) {
                                        this.audio[r] - i > i - this.audio[r - 1] && r--;
                                        break;
                                      }
                                      r++;
                                    }
                                    if (!this.audio[r]) break;
                                    const o = this.audio[r].pts;
                                    if (e >= this.video.length - 2) r--;
                                    else if (
                                      !(
                                        this.video[e].duration
                                              > 2 * this.video[e - 1].duration
                                            || this.video[e].duration > 2 * this.video[e + 1].duration
                                      )
                                    ) {
                                      if (Math.abs(i - o) < 100) {
                                        n = this.cut(r, e);
                                        break;
                                      }
                                      r--;
                                    }
                                  }
                                }
                                return n;
                              },
                            },
                            {
                              key: 'cut',
                              value(t, e) {
                                t > -1 && t++, e > -1 && e++;
                                const r = this.audio.splice(0, t);
                                const n = this.video.splice(0, e);
                                let i = !1;
                                if (n[0] && n[0].key == 'config') {
                                  const o = n.shift();
                                  if (this.mediaConfig.video) {
                                    const a = this.mediaConfig.video.sps[0];
                                    const s = o.config.sps[0];
                                    l(a.buffer, s.buffer)
                                          || ((i = !0), (this.mediaConfig.video = o.config));
                                  } else this.mediaConfig.video = o.config;
                                }
                                return (
                                  this.cutByIFrameOnly
                                        && r[0]
                                        && n[0]
                                        && (n[n.length - 1].pts = r[r.length - 1].pts),
                                  {
                                    audio: r,
                                    video: n,
                                    config: this.mediaConfig,
                                    configChanged: i,
                                  }
                                );
                              },
                            },
                            {
                              key: 'fragmentByIFrame',
                              value() {
                                const t = this.findIFrame(1);
                                if (t > 0) return { index: t, pts: this.video[t].pts };
                              },
                            },
                            {
                              key: 'findIFrame',
                              value(t) {
                                for (let e = t; e < this.video.length; e++) if (this.video[e].key == 'config') return e;
                                return -1;
                              },
                            },
                            {
                              key: 'findIndex',
                              value(t, e, r) {
                                for (let n = 0; n < t.length; n++) {
                                  const i = t[n].pts;
                                  if (i >= e && i <= r) return n;
                                  if (i > r) break;
                                }
                              },
                            },
                            {
                              key: 'bufferedEnough',
                              value() {
                                const t = !this.hasAudio
                                        || this.buffered(this.audio) >= this.fragmentLengthMs;
                                const e = !this.hasVideo
                                        || (this.buffered(this.video) >= this.fragmentLengthMs
                                          && this.video.length > 2);
                                return t && e;
                              },
                            },
                            {
                              key: 'buffered',
                              value(t) {
                                if (t.length > 1) {
                                  const e = t[0];
                                  return t[t.length - 1].pts - e.pts;
                                }
                                return 0;
                              },
                            },
                          ]),
                          t
                        );
                      }());
                    },
                    {
                      1: 1, 531: 531, 534: 534, 536: 536, 540: 540, 546: 546, 547: 547, 548: 548,
                    },
                  ],
                  536: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = t(548);
                      const o = (function () {
                        function t(e) {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t)),
                          (this.data = e),
                          (this.bytesAvailable = e.byteLength),
                          (this.word = 0),
                          (this.bitsAvailable = 0);
                        }
                        return (
                          n(t, [
                            {
                              key: 'loadWord',
                              value() {
                                const t = this.data;
                                const e = this.bytesAvailable;
                                const r = t.byteLength - e;
                                const n = new Uint8Array(4);
                                const i = Math.min(4, e);
                                if (i === 0) throw new Error('no bytes available');
                                n.set(t.subarray(r, r + i)),
                                (this.word = new DataView(n.buffer).getUint32(0)),
                                (this.bitsAvailable = 8 * i),
                                (this.bytesAvailable -= i);
                              },
                            },
                            {
                              key: 'skipBits',
                              value(t) {
                                let e;
                                this.bitsAvailable > t
                                  ? ((this.word <<= t), (this.bitsAvailable -= t))
                                  : ((t -= this.bitsAvailable),
                                  (t -= (e = t >> 3) >> 3),
                                  (this.bytesAvailable -= e),
                                  this.loadWord(),
                                  (this.word <<= t),
                                  (this.bitsAvailable -= t));
                              },
                            },
                            {
                              key: 'readBits',
                              value(t) {
                                let e = Math.min(this.bitsAvailable, t);
                                const r = this.word >>> (32 - e);
                                return (
                                  t > 32
                                      && i.logger.error('Cannot read more than 32 bits at a time'),
                                  (this.bitsAvailable -= e),
                                  this.bitsAvailable > 0
                                    ? (this.word <<= e)
                                    : this.bytesAvailable > 0 && this.loadWord(),
                                  (e = t - e) > 0 && this.bitsAvailable
                                    ? (r << e) | this.readBits(e)
                                    : r
                                );
                              },
                            },
                            {
                              key: 'skipLZ',
                              value() {
                                let t;
                                for (t = 0; t < this.bitsAvailable; ++t) if ((this.word & (2147483648 >>> t)) != 0) return (this.word <<= t), (this.bitsAvailable -= t), t;
                                return this.loadWord(), t + this.skipLZ();
                              },
                            },
                            {
                              key: 'skipUEG',
                              value() {
                                this.skipBits(1 + this.skipLZ());
                              },
                            },
                            {
                              key: 'skipEG',
                              value() {
                                this.skipBits(1 + this.skipLZ());
                              },
                            },
                            {
                              key: 'readUEG',
                              value() {
                                const t = this.skipLZ();
                                return this.readBits(t + 1) - 1;
                              },
                            },
                            {
                              key: 'readEG',
                              value() {
                                const t = this.readUEG();
                                return 1 & t ? (1 + t) >>> 1 : -1 * (t >>> 1);
                              },
                            },
                            {
                              key: 'readBoolean',
                              value() {
                                return this.readBits(1) === 1;
                              },
                            },
                            {
                              key: 'readUByte',
                              value() {
                                return this.readBits(8);
                              },
                            },
                            {
                              key: 'readUShort',
                              value() {
                                return this.readBits(16);
                              },
                            },
                            {
                              key: 'readUInt',
                              value() {
                                return this.readBits(32);
                              },
                            },
                            {
                              key: 'skipScalingList',
                              value(t) {
                                let e;
                                let r = 8;
                                let n = 8;
                                for (e = 0; e < t; e++) {
                                  n !== 0 && (n = (r + this.readEG() + 256) % 256),
                                  (r = n === 0 ? r : n);
                                }
                              },
                            },
                            {
                              key: 'readSPS',
                              value() {
                                let t;
                                let e;
                                let r;
                                let n;
                                let i;
                                let o;
                                let a;
                                let s = 0;
                                let f = 0;
                                let u = 0;
                                let c = 0;
                                const h = this.readUByte.bind(this);
                                const d = this.readBits.bind(this);
                                const l = this.readUEG.bind(this);
                                const p = this.readBoolean.bind(this);
                                const b = this.skipBits.bind(this);
                                const v = this.skipEG.bind(this);
                                const g = this.skipUEG.bind(this);
                                const y = this.skipScalingList.bind(this);
                                if (
                                  (h(),
                                  (t = h()),
                                  d(5),
                                  b(3),
                                  h(),
                                  g(),
                                  t === 100
                                      || t === 110
                                      || t === 122
                                      || t === 244
                                      || t === 44
                                      || t === 83
                                      || t === 86
                                      || t === 118
                                      || t === 128)
                                ) {
                                  const m = l();
                                  if ((m === 3 && b(1), g(), g(), b(1), p())) for (o = m !== 3 ? 8 : 12, a = 0; a < o; a++) p() && y(a < 6 ? 16 : 64);
                                }
                                g();
                                const w = l();
                                if (w === 0) l();
                                else if (w === 1) for (b(1), v(), v(), e = l(), a = 0; a < e; a++) v();
                                g(),
                                b(1),
                                (r = l()),
                                (n = l()),
                                (i = d(1)) === 0 && b(1),
                                b(1),
                                p() && ((s = l()), (f = l()), (u = l()), (c = l()));
                                let _ = [1, 1];
                                if (p() && p()) {
                                  switch (h()) {
                                    case 1:
                                      _ = [1, 1];
                                      break;
                                    case 2:
                                      _ = [12, 11];
                                      break;
                                    case 3:
                                      _ = [10, 11];
                                      break;
                                    case 4:
                                      _ = [16, 11];
                                      break;
                                    case 5:
                                      _ = [40, 33];
                                      break;
                                    case 6:
                                      _ = [24, 11];
                                      break;
                                    case 7:
                                      _ = [20, 11];
                                      break;
                                    case 8:
                                      _ = [32, 11];
                                      break;
                                    case 9:
                                      _ = [80, 33];
                                      break;
                                    case 10:
                                      _ = [18, 11];
                                      break;
                                    case 11:
                                      _ = [15, 11];
                                      break;
                                    case 12:
                                      _ = [64, 33];
                                      break;
                                    case 13:
                                      _ = [160, 99];
                                      break;
                                    case 14:
                                      _ = [4, 3];
                                      break;
                                    case 15:
                                      _ = [3, 2];
                                      break;
                                    case 16:
                                      _ = [2, 1];
                                      break;
                                    case 255:
                                      _ = [(h() << 8) | h(), (h() << 8) | h()];
                                  }
                                }
                                return {
                                  width: Math.ceil(16 * (r + 1) - 2 * s - 2 * f),
                                  height: (2 - i) * (n + 1) * 16 - (i ? 2 : 4) * (u + c),
                                  pixelRatio: _,
                                };
                              },
                            },
                            {
                              key: 'readSliceType',
                              value() {
                                return this.readUByte(), this.readUEG(), this.readUEG();
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = o;
                    },
                    { 548: 548 },
                  ],
                  537: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = l(t(538));
                      const o = l(t(535));
                      const a = l(t(541));
                      const s = l(t(544));
                      const f = t(543);
                      const u = l(t(531));
                      const c = l(t(434));
                      const h = t(548);
                      const d = l(t(542));
                      function l(t) {
                        return t && t.__esModule ? t : { default: t };
                      }
                      const p = t(489);
                      const b = t(475);
                      const v = '-LOCAL_CACHED_VIDEO';
                      const g = '-REMOTE_CACHED_VIDEO';
                      const y = (function () {
                        function e(r) {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, e));
                          const n = (this.observer = new c.default());
                          (n.trigger = function (t) {
                            for (
                              var e = arguments.length, r = Array(e > 1 ? e - 1 : 0), i = 1;
                              i < e;
                              i++
                            ) r[i - 1] = arguments[i];
                            n.emit.apply(n, [t].concat(r));
                          }),
                          (n.off = function (t) {
                            for (
                              var e = arguments.length, r = Array(e > 1 ? e - 1 : 0), i = 1;
                              i < e;
                              i++
                            ) r[i - 1] = arguments[i];
                            n.removeListener.apply(n, [t].concat(r));
                          }),
                          (this.on = n.on.bind(n)),
                          (this.off = n.off.bind(n)),
                          (this.trigger = n.trigger.bind(n));
                          try {
                            (0, h.enableLogs)(!0 === r.debug);
                          } catch (t) {}
                          if (r.enableWorker && typeof Worker !== 'undefined') {
                            h.logger.log('using webworker');
                            let d = void 0;
                            try {
                              const l = t(529);
                              (d = this.w = l(i.default)),
                              (this.onwmsg = this.onWorkerMessage.bind(this)),
                              d.addEventListener('message', this.onwmsg),
                              (d.onerror = function (t) {
                                this.trigger(u.default.ERROR, {
                                  type: 'worker',
                                  info: `${t.message} (${t.filename}:${t.lineno})`,
                                });
                              }),
                              d.postMessage({ cmd: 'init', config: JSON.stringify(r) });
                            } catch (t) {
                              h.logger.error(
                                'error while initializing DemuxerWorker, fallback on DemuxerInline',
                              ),
                              d && URL.revokeObjectURL(d.objectURL);
                            }
                          } else {
                            (this.demuxer = new o.default(this, r.connectionConstraints)),
                            r.useFileLoader
                              ? (this.transport = new f.MediaFileReader(
                                this,
                                r,
                                this.demuxer,
                              ))
                              : (this.transport = new s.default(this, r, this.demuxer));
                          }
                          (this.id = r.id),
                          (this.display = r.display),
                          (this.video = e.getCacheInstance(this.display)),
                          this.video
                                  || ((this.video = document.createElement('video')),
                                  this.display.appendChild(this.video)),
                          (this.video.id = this.id),
                          (this.mse = new a.default(this, this.video)),
                          this.on(
                            u.default.TS_RESET,
                            (t) => {
                              h.logger.warn('TS_RESET'),
                              this.mse.release(),
                              (this.mse = new a.default(this, this.video));
                            },
                          ),
                          this.on(
                            u.default.ERROR,
                            (t) => {
                              h.logger.error(`Error ${t.type} info ${t.info}`),
                              this.close();
                            },
                          );
                        }
                        return (
                          n(
                            e,
                            [
                              {
                                key: 'createOffer',
                                value(t) {
                                  return p.resolve({
                                    sdp:
                                          'v=0\r\no=- 1988962254 1988962254 IN IP4 0.0.0.0\r\nc=IN IP4 0.0.0.0\r\nt=0 0\r\na=sdplang:en\r\nm=video 0 RTP/AVP 112\r\na=rtpmap:112 H264/90000\r\na=fmtp:112 packetization-mode=1; profile-level-id=420020\r\na=recvonly\r\nm=audio 0 RTP/AVP 108 96 97 98 99 100 102 103 104\r\na=rtpmap:108 mpeg4-generic/48000/1\r\na=rtpmap:96 mpeg4-generic/8000/1\r\na=rtpmap:97 mpeg4-generic/11025/1\r\na=rtpmap:98 mpeg4-generic/12000/1\r\na=rtpmap:99 mpeg4-generic/16000/1\r\na=rtpmap:100 mpeg4-generic/22050/1\r\na=rtpmap:104 mpeg4-generic/24000/1\r\na=rtpmap:102 mpeg4-generic/32000/1\r\na=rtpmap:103 mpeg4-generic/44100/1\r\na=recvonly\r\n',
                                  });
                                },
                              },
                              {
                                key: 'setRemoteSdp',
                                value(e) {
                                  for (
                                    var r = t(516),
                                      n = !0,
                                      i = !0,
                                      o = r.splitSections(e),
                                      a = 0;
                                    a < o.length;
                                    a++
                                  ) {
                                    if (r.isRejected(o[a])) {
                                      switch (r.getKind(o[a])) {
                                        case 'audio':
                                          n = !1;
                                          break;
                                        case 'video':
                                          i = !1;
                                      }
                                    }
                                  }
                                  return (
                                    this.w
                                      ? this.w.postMessage({
                                        cmd: 'connect',
                                        config: JSON.stringify({ audio: n, video: i }),
                                      })
                                      : (this.demuxer.setAvailableMedia(n, i),
                                      this.transport.connect()),
                                    p.resolve()
                                  );
                                },
                              },
                              {
                                key: 'close',
                                value() {
                                  this.w
                                        && (this.w.postMessage({ cmd: 'close' }),
                                        this.w.removeEventListener('message', this.onwmsg),
                                        this.w.terminate(),
                                        (this.w = null)),
                                  this.transport && this.transport.disconnect(),
                                  this.mse.release(),
                                  (this.video.id = this.video.id + g);
                                },
                              },
                              {
                                key: 'setVolume',
                                value(t) {
                                  this.video && (this.video.volume = t / 100);
                                },
                              },
                              {
                                key: 'unmuteRemoteAudio',
                                value() {
                                  this.video && (this.video.muted = !1);
                                },
                              },
                              {
                                key: 'muteRemoteAudio',
                                value() {
                                  this.video && (this.video.muted = !0);
                                },
                              },
                              {
                                key: 'isRemoteAudioMuted',
                                value() {
                                  return !this.video || this.video.muted;
                                },
                              },
                              {
                                key: 'getVolume',
                                value() {
                                  return this.video ? 100 * this.video.volume : -1;
                                },
                              },
                              {
                                key: 'fullScreen',
                                value() {
                                  const t = this.video;
                                  t
                                        && (document.fullscreenElement
                                        || document.mozFullScreenElement
                                        || document.webkitFullscreenElement
                                        || document.msFullscreenElement
                                          ? document.exitFullscreen
                                            ? document.exitFullscreen()
                                            : document.msExitFullscreen
                                              ? document.msExitFullscreen()
                                              : document.mozCancelFullScreen
                                                ? document.mozCancelFullScreen()
                                                : document.webkitExitFullscreen
                                              && document.webkitExitFullscreen()
                                          : t.requestFullscreen
                                            ? t.requestFullscreen()
                                            : t.msRequestFullscreen
                                              ? t.msRequestFullscreen()
                                              : t.mozRequestFullScreen
                                                ? t.mozRequestFullScreen()
                                                : t.webkitRequestFullscreen
                                            && t.webkitRequestFullscreen());
                                },
                              },
                              {
                                key: 'onWorkerMessage',
                                value(t) {
                                  const e = t.data;
                                  switch (e.event) {
                                    case 'init':
                                      URL.revokeObjectURL(this.w.objectURL);
                                      break;
                                    case u.default.FRAG_PARSING_DATA:
                                      (e.data.data1 = new Uint8Array(e.data1)),
                                      e.data2 && (e.data.data2 = new Uint8Array(e.data2));
                                    default:
                                      (e.data = e.data || {}),
                                      (e.data.frag = this.frag),
                                      (e.data.id = this.id),
                                      this.trigger(e.event, e.data);
                                  }
                                },
                              },
                            ],
                            [
                              {
                                key: 'getCacheInstance',
                                value(t) {
                                  let e = void 0;
                                  for (e = 0; e < t.children.length; e++) {
                                    if (
                                      t.children[e]
                                          && (t.children[e].id.indexOf(v) != -1
                                            || t.children[e].id.indexOf(g) != -1)
                                    ) return t.children[e];
                                  }
                                },
                              },
                              {
                                key: 'playFirstVideo',
                                value(t, e, r) {
                                  const n = this;
                                  return new p(((i, o) => {
                                    if (!n.getCacheInstance(t)) {
                                      const a = document.createElement('video');
                                      if (
                                        (a.setAttribute('playsinline', ''),
                                        a.setAttribute('webkit-playsinline', ''),
                                        t.appendChild(a),
                                        (a.id = b.v1() + (e ? v : g)),
                                        r)
                                      ) {
                                        return (
                                          (a.src = r),
                                          void a
                                            .play()
                                            .then(() => {
                                              i();
                                            })
                                            .catch((t) => {
                                              d.default.getConfig().browserDetails
                                                    != 'chrome'
                                                    && h.logger.error(t),
                                              o();
                                            })
                                        );
                                      }
                                    }
                                    i();
                                  }));
                                },
                              },
                            ],
                          ),
                          e
                        );
                      }());
                      r.default = y;
                    },
                    {
                      434: 434,
                      475: 475,
                      489: 489,
                      516: 516,
                      529: 529,
                      531: 531,
                      535: 535,
                      538: 538,
                      541: 541,
                      542: 542,
                      543: 543,
                      544: 544,
                      548: 548,
                    },
                  ],
                  538: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 }), t(17);
                      const n = f(t(535));
                      const i = f(t(544));
                      const o = f(t(531));
                      const a = f(t(434));
                      const s = t(548);
                      function f(t) {
                        return t && t.__esModule ? t : { default: t };
                      }
                      r.default = function (t) {
                        const e = new a.default();
                        (e.trigger = function (t) {
                          for (
                            var r = arguments.length, n = Array(r > 1 ? r - 1 : 0), i = 1;
                            i < r;
                            i++
                          ) n[i - 1] = arguments[i];
                          e.emit.apply(e, [t, t].concat(n));
                        }),
                        (e.off = function (t) {
                          for (
                            var r = arguments.length, n = Array(r > 1 ? r - 1 : 0), i = 1;
                            i < r;
                            i++
                          ) n[i - 1] = arguments[i];
                          e.removeListener.apply(e, [t].concat(n));
                        });
                        const r = function (e, r) {
                          t.postMessage({ event: e, data: r });
                        };
                        t.addEventListener('message', (o) => {
                          const a = o.data;
                          switch (a.cmd) {
                            case 'init':
                              var f = JSON.parse(a.config);
                              (t.demuxer = new n.default(e, f.connectionConstraints)),
                              (t.transport = new i.default(e, f, t.demuxer));
                              try {
                                (0, s.enableLogs)(!0 === f.debug);
                              } catch (t) {}
                              r('init', null);
                              break;
                            case 'connect':
                              var u = JSON.parse(a.config);
                              t.demuxer.setAvailableMedia(u.audio, u.video),
                              t.transport.connect();
                              break;
                            case 'close':
                              t.transport.disconnect();
                          }
                        }),
                        e.on(o.default.FRAG_PARSING_INIT_SEGMENT, r),
                        e.on(o.default.FRAG_PARSED, r),
                        e.on(o.default.ERROR, r),
                        e.on(o.default.INIT_PTS_FOUND, r),
                        e.on(o.default.TS_RESET, r),
                        e.on(o.default.FRAG_PARSING_DATA, (e, r) => {
                          const n = [];
                          const i = { event: e, data: r };
                          r.data1
                                && ((i.data1 = r.data1.buffer),
                                n.push(r.data1.buffer),
                                delete r.data1),
                          r.data2
                                  && ((i.data2 = r.data2.buffer),
                                  n.push(r.data2.buffer),
                                  delete r.data2),
                          t.postMessage(i, n);
                        });
                      };
                    },
                    {
                      17: 17, 434: 434, 531: 531, 535: 535, 544: 544, 548: 548,
                    },
                  ],
                  539: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = Math.pow(2, 32) - 1;
                      const o = (function () {
                        function t() {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t));
                        }
                        return (
                          n(t, null, [
                            {
                              key: 'init',
                              value() {
                                let e;
                                for (e in ((t.types = {
                                  avc1: [],
                                  avcC: [],
                                  btrt: [],
                                  dinf: [],
                                  dref: [],
                                  esds: [],
                                  ftyp: [],
                                  hdlr: [],
                                  mdat: [],
                                  mdhd: [],
                                  mdia: [],
                                  mfhd: [],
                                  minf: [],
                                  moof: [],
                                  moov: [],
                                  mp4a: [],
                                  '.mp3': [],
                                  mvex: [],
                                  mvhd: [],
                                  pasp: [],
                                  sdtp: [],
                                  stbl: [],
                                  stco: [],
                                  stsc: [],
                                  stsd: [],
                                  stsz: [],
                                  stts: [],
                                  tfdt: [],
                                  tfhd: [],
                                  traf: [],
                                  trak: [],
                                  trun: [],
                                  trex: [],
                                  tkhd: [],
                                  vmhd: [],
                                  smhd: [],
                                }),
                                t.types)) {
                                  t.types.hasOwnProperty(e)
                                        && (t.types[e] = [
                                          e.charCodeAt(0),
                                          e.charCodeAt(1),
                                          e.charCodeAt(2),
                                          e.charCodeAt(3),
                                        ]);
                                }
                                const r = new Uint8Array([
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  118,
                                  105,
                                  100,
                                  101,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  86,
                                  105,
                                  100,
                                  101,
                                  111,
                                  72,
                                  97,
                                  110,
                                  100,
                                  108,
                                  101,
                                  114,
                                  0,
                                ]);
                                const n = new Uint8Array([
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  115,
                                  111,
                                  117,
                                  110,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  83,
                                  111,
                                  117,
                                  110,
                                  100,
                                  72,
                                  97,
                                  110,
                                  100,
                                  108,
                                  101,
                                  114,
                                  0,
                                ]);
                                t.HDLR_TYPES = { video: r, audio: n };
                                const i = new Uint8Array([
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  1,
                                  0,
                                  0,
                                  0,
                                  12,
                                  117,
                                  114,
                                  108,
                                  32,
                                  0,
                                  0,
                                  0,
                                  1,
                                ]);
                                const o = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                                (t.STTS = t.STSC = t.STCO = o),
                                (t.STSZ = new Uint8Array([
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                ])),
                                (t.VMHD = new Uint8Array([
                                  0,
                                  0,
                                  0,
                                  1,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                ])),
                                (t.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
                                (t.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
                                const a = new Uint8Array([105, 115, 111, 109]);
                                const s = new Uint8Array([97, 118, 99, 49]);
                                const f = new Uint8Array([0, 0, 0, 1]);
                                (t.FTYP = t.box(t.types.ftyp, a, f, a, s)),
                                (t.DINF = t.box(t.types.dinf, t.box(t.types.dref, i)));
                              },
                            },
                            {
                              key: 'box',
                              value(t) {
                                for (
                                  var e,
                                    r = Array.prototype.slice.call(arguments, 1),
                                    n = 8,
                                    i = r.length,
                                    o = i;
                                  i--;

                                ) n += r[i].byteLength;
                                for (
                                  (e = new Uint8Array(n))[0] = (n >> 24) & 255,
                                  e[1] = (n >> 16) & 255,
                                  e[2] = (n >> 8) & 255,
                                  e[3] = 255 & n,
                                  e.set(t, 4),
                                  i = 0,
                                  n = 8;
                                  i < o;
                                  i++
                                ) e.set(r[i], n), (n += r[i].byteLength);
                                return e;
                              },
                            },
                            {
                              key: 'hdlr',
                              value(e) {
                                return t.box(t.types.hdlr, t.HDLR_TYPES[e]);
                              },
                            },
                            {
                              key: 'mdat',
                              value(e) {
                                return t.box(t.types.mdat, e);
                              },
                            },
                            {
                              key: 'mdhd',
                              value(e, r) {
                                r *= e;
                                const n = Math.floor(r / (i + 1));
                                const o = Math.floor(r % (i + 1));
                                return t.box(
                                  t.types.mdhd,
                                  new Uint8Array([
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    2,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    3,
                                    (e >> 24) & 255,
                                    (e >> 16) & 255,
                                    (e >> 8) & 255,
                                    255 & e,
                                    n >> 24,
                                    (n >> 16) & 255,
                                    (n >> 8) & 255,
                                    255 & n,
                                    o >> 24,
                                    (o >> 16) & 255,
                                    (o >> 8) & 255,
                                    255 & o,
                                    85,
                                    196,
                                    0,
                                    0,
                                  ]),
                                );
                              },
                            },
                            {
                              key: 'mdia',
                              value(e) {
                                return t.box(
                                  t.types.mdia,
                                  t.mdhd(e.timescale, e.duration),
                                  t.hdlr(e.type),
                                  t.minf(e),
                                );
                              },
                            },
                            {
                              key: 'mfhd',
                              value(e) {
                                return t.box(
                                  t.types.mfhd,
                                  new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    e >> 24,
                                    (e >> 16) & 255,
                                    (e >> 8) & 255,
                                    255 & e,
                                  ]),
                                );
                              },
                            },
                            {
                              key: 'minf',
                              value(e) {
                                return e.type === 'audio'
                                  ? t.box(
                                    t.types.minf,
                                    t.box(t.types.smhd, t.SMHD),
                                    t.DINF,
                                    t.stbl(e),
                                  )
                                  : t.box(
                                    t.types.minf,
                                    t.box(t.types.vmhd, t.VMHD),
                                    t.DINF,
                                    t.stbl(e),
                                  );
                              },
                            },
                            {
                              key: 'moof',
                              value(e, r, n) {
                                return t.box(t.types.moof, t.mfhd(e), t.traf(n, r));
                              },
                            },
                            {
                              key: 'moov',
                              value(e) {
                                for (var r = e.length, n = []; r--;) n[r] = t.trak(e[r]);
                                return t.box.apply(
                                  null,
                                  [t.types.moov, t.mvhd(e[0].timescale, e[0].duration)]
                                    .concat(n)
                                    .concat(t.mvex(e)),
                                );
                              },
                            },
                            {
                              key: 'mvex',
                              value(e) {
                                for (var r = e.length, n = []; r--;) n[r] = t.trex(e[r]);
                                return t.box.apply(null, [t.types.mvex].concat(n));
                              },
                            },
                            {
                              key: 'mvhd',
                              value(e, r) {
                                r *= e;
                                const n = Math.floor(r / (i + 1));
                                const o = Math.floor(r % (i + 1));
                                const a = new Uint8Array([
                                  1,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  2,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  3,
                                  (e >> 24) & 255,
                                  (e >> 16) & 255,
                                  (e >> 8) & 255,
                                  255 & e,
                                  n >> 24,
                                  (n >> 16) & 255,
                                  (n >> 8) & 255,
                                  255 & n,
                                  o >> 24,
                                  (o >> 16) & 255,
                                  (o >> 8) & 255,
                                  255 & o,
                                  0,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  1,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  1,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  64,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  255,
                                  255,
                                  255,
                                  255,
                                ]);
                                return t.box(t.types.mvhd, a);
                              },
                            },
                            {
                              key: 'sdtp',
                              value(e) {
                                let r;
                                let n;
                                const i = e.samples || [];
                                const o = new Uint8Array(4 + i.length);
                                for (n = 0; n < i.length; n++) {
                                  (r = i[n].flags),
                                  (o[n + 4] = (r.dependsOn << 4)
                                          | (r.isDependedOn << 2)
                                          | r.hasRedundancy);
                                }
                                return t.box(t.types.sdtp, o);
                              },
                            },
                            {
                              key: 'stbl',
                              value(e) {
                                return t.box(
                                  t.types.stbl,
                                  t.stsd(e),
                                  t.box(t.types.stts, t.STTS),
                                  t.box(t.types.stsc, t.STSC),
                                  t.box(t.types.stsz, t.STSZ),
                                  t.box(t.types.stco, t.STCO),
                                );
                              },
                            },
                            {
                              key: 'avc1',
                              value(e) {
                                let r;
                                let n;
                                let i;
                                let o = [];
                                let a = [];
                                for (r = 0; r < e.sps.length; r++) {
                                  (i = (n = e.sps[r]).byteLength),
                                  o.push((i >>> 8) & 255),
                                  o.push(255 & i),
                                  (o = o.concat(Array.prototype.slice.call(n)));
                                }
                                for (r = 0; r < e.pps.length; r++) {
                                  (i = (n = e.pps[r]).byteLength),
                                  a.push((i >>> 8) & 255),
                                  a.push(255 & i),
                                  (a = a.concat(Array.prototype.slice.call(n)));
                                }
                                const s = t.box(
                                  t.types.avcC,
                                  new Uint8Array(
                                    [1, o[3], o[4], o[5], 255, 224 | e.sps.length]
                                      .concat(o)
                                      .concat([e.pps.length])
                                      .concat(a),
                                  ),
                                );
                                const f = e.width;
                                const u = e.height;
                                const c = e.pixelRatio[0];
                                const h = e.pixelRatio[1];
                                return t.box(
                                  t.types.avc1,
                                  new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    (f >> 8) & 255,
                                    255 & f,
                                    (u >> 8) & 255,
                                    255 & u,
                                    0,
                                    72,
                                    0,
                                    0,
                                    0,
                                    72,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    18,
                                    100,
                                    97,
                                    105,
                                    108,
                                    121,
                                    109,
                                    111,
                                    116,
                                    105,
                                    111,
                                    110,
                                    47,
                                    104,
                                    108,
                                    115,
                                    46,
                                    106,
                                    115,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    24,
                                    17,
                                    17,
                                  ]),
                                  s,
                                  t.box(
                                    t.types.btrt,
                                    new Uint8Array([
                                      0,
                                      28,
                                      156,
                                      128,
                                      0,
                                      45,
                                      198,
                                      192,
                                      0,
                                      45,
                                      198,
                                      192,
                                    ]),
                                  ),
                                  t.box(
                                    t.types.pasp,
                                    new Uint8Array([
                                      c >> 24,
                                      (c >> 16) & 255,
                                      (c >> 8) & 255,
                                      255 & c,
                                      h >> 24,
                                      (h >> 16) & 255,
                                      (h >> 8) & 255,
                                      255 & h,
                                    ]),
                                  ),
                                );
                              },
                            },
                            {
                              key: 'esds',
                              value(t) {
                                const e = t.config.length;
                                return new Uint8Array(
                                  [
                                    0,
                                    0,
                                    0,
                                    0,
                                    3,
                                    23 + e,
                                    0,
                                    1,
                                    0,
                                    4,
                                    15 + e,
                                    64,
                                    21,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    5,
                                  ]
                                    .concat([e])
                                    .concat(t.config)
                                    .concat([6, 1, 2]),
                                );
                              },
                            },
                            {
                              key: 'mp4a',
                              value(e) {
                                const r = e.samplerate;
                                return t.box(
                                  t.types.mp4a,
                                  new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    e.channelCount,
                                    0,
                                    16,
                                    0,
                                    0,
                                    0,
                                    0,
                                    (r >> 8) & 255,
                                    255 & r,
                                    0,
                                    0,
                                  ]),
                                  t.box(t.types.esds, t.esds(e)),
                                );
                              },
                            },
                            {
                              key: 'mp3',
                              value(e) {
                                const r = e.samplerate;
                                return t.box(
                                  t.types['.mp3'],
                                  new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    e.channelCount,
                                    0,
                                    16,
                                    0,
                                    0,
                                    0,
                                    0,
                                    (r >> 8) & 255,
                                    255 & r,
                                    0,
                                    0,
                                  ]),
                                );
                              },
                            },
                            {
                              key: 'stsd',
                              value(e) {
                                return e.type === 'audio'
                                  ? e.isAAC || e.codec !== 'mp3'
                                    ? t.box(t.types.stsd, t.STSD, t.mp4a(e))
                                    : t.box(t.types.stsd, t.STSD, t.mp3(e))
                                  : t.box(t.types.stsd, t.STSD, t.avc1(e));
                              },
                            },
                            {
                              key: 'tkhd',
                              value(e) {
                                const r = e.id;
                                const n = e.duration * e.timescale;
                                const o = e.width;
                                const a = e.height;
                                const s = Math.floor(n / (i + 1));
                                const f = Math.floor(n % (i + 1));
                                return t.box(
                                  t.types.tkhd,
                                  new Uint8Array([
                                    1,
                                    0,
                                    0,
                                    7,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    2,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    3,
                                    (r >> 24) & 255,
                                    (r >> 16) & 255,
                                    (r >> 8) & 255,
                                    255 & r,
                                    0,
                                    0,
                                    0,
                                    0,
                                    s >> 24,
                                    (s >> 16) & 255,
                                    (s >> 8) & 255,
                                    255 & s,
                                    f >> 24,
                                    (f >> 16) & 255,
                                    (f >> 8) & 255,
                                    255 & f,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    64,
                                    0,
                                    0,
                                    0,
                                    (o >> 8) & 255,
                                    255 & o,
                                    0,
                                    0,
                                    (a >> 8) & 255,
                                    255 & a,
                                    0,
                                    0,
                                  ]),
                                );
                              },
                            },
                            {
                              key: 'traf',
                              value(e, r) {
                                const n = t.sdtp(e);
                                const o = e.id;
                                const a = Math.floor(r / (i + 1));
                                const s = Math.floor(r % (i + 1));
                                return t.box(
                                  t.types.traf,
                                  t.box(
                                    t.types.tfhd,
                                    new Uint8Array([
                                      0,
                                      0,
                                      0,
                                      0,
                                      o >> 24,
                                      (o >> 16) & 255,
                                      (o >> 8) & 255,
                                      255 & o,
                                    ]),
                                  ),
                                  t.box(
                                    t.types.tfdt,
                                    new Uint8Array([
                                      1,
                                      0,
                                      0,
                                      0,
                                      a >> 24,
                                      (a >> 16) & 255,
                                      (a >> 8) & 255,
                                      255 & a,
                                      s >> 24,
                                      (s >> 16) & 255,
                                      (s >> 8) & 255,
                                      255 & s,
                                    ]),
                                  ),
                                  t.trun(e, n.length + 16 + 20 + 8 + 16 + 8 + 8),
                                  n,
                                );
                              },
                            },
                            {
                              key: 'trak',
                              value(e) {
                                return (
                                  (e.duration = e.duration || 4294967295),
                                  t.box(t.types.trak, t.tkhd(e), t.mdia(e))
                                );
                              },
                            },
                            {
                              key: 'trex',
                              value(e) {
                                const r = e.id;
                                return t.box(
                                  t.types.trex,
                                  new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    r >> 24,
                                    (r >> 16) & 255,
                                    (r >> 8) & 255,
                                    255 & r,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    1,
                                  ]),
                                );
                              },
                            },
                            {
                              key: 'trun',
                              value(e, r) {
                                let n;
                                let i;
                                let o;
                                let a;
                                let s;
                                let f;
                                const u = e.samples || [];
                                const c = u.length;
                                const h = 12 + 16 * c;
                                const d = new Uint8Array(h);
                                for (
                                  r += 8 + h,
                                  d.set(
                                    [
                                      0,
                                      0,
                                      15,
                                      1,
                                      (c >>> 24) & 255,
                                      (c >>> 16) & 255,
                                      (c >>> 8) & 255,
                                      255 & c,
                                      (r >>> 24) & 255,
                                      (r >>> 16) & 255,
                                      (r >>> 8) & 255,
                                      255 & r,
                                    ],
                                    0,
                                  ),
                                  n = 0;
                                  n < c;
                                  n++
                                ) {
                                  (o = (i = u[n]).duration),
                                  (a = i.size),
                                  (s = i.flags),
                                  (f = i.cts),
                                  d.set(
                                    [
                                      (o >>> 24) & 255,
                                      (o >>> 16) & 255,
                                      (o >>> 8) & 255,
                                      255 & o,
                                      (a >>> 24) & 255,
                                      (a >>> 16) & 255,
                                      (a >>> 8) & 255,
                                      255 & a,
                                      (s.isLeading << 2) | s.dependsOn,
                                      (s.isDependedOn << 6)
                                              | (s.hasRedundancy << 4)
                                              | (s.paddingValue << 1)
                                              | s.isNonSync,
                                      61440 & s.degradPrio,
                                      15 & s.degradPrio,
                                      (f >>> 24) & 255,
                                      (f >>> 16) & 255,
                                      (f >>> 8) & 255,
                                      255 & f,
                                    ],
                                    12 + 16 * n,
                                  );
                                }
                                return t.box(t.types.trun, d);
                              },
                            },
                            {
                              key: 'initSegment',
                              value(e) {
                                t.types || t.init();
                                let r;
                                const n = t.moov(e);
                                return (
                                  (r = new Uint8Array(t.FTYP.byteLength + n.byteLength)).set(
                                    t.FTYP,
                                  ),
                                  r.set(n, t.FTYP.byteLength),
                                  r
                                );
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = o;
                    },
                    {},
                  ],
                  540: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = u(t(533));
                      const o = t(548);
                      const a = u(t(539));
                      const s = t(530);
                      const f = u(t(531));
                      function u(t) {
                        return t && t.__esModule ? t : { default: t };
                      }
                      const c = (function () {
                        function t(e, r, n, i) {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t)),
                          (this.observer = e),
                          (this.config = r),
                          (this.typeSupported = n);
                          const o = navigator.userAgent;
                          (this.isSafari = i && i.indexOf('Apple') > -1 && o && !o.match('CriOS')),
                          (this.ISGenerated = !1);
                        }
                        return (
                          n(t, [
                            { key: 'destroy', value() {} },
                            {
                              key: 'resetTimeStamp',
                              value(t) {
                                this._initPTS = this._initDTS = t;
                              },
                            },
                            {
                              key: 'resetInitSegment',
                              value() {
                                this.ISGenerated = !1;
                              },
                            },
                            {
                              key: 'remux',
                              value(t, e, r, n, i, a, s) {
                                if (
                                  (this.ISGenerated || this.generateIS(t, e, i), this.ISGenerated)
                                ) {
                                  if (t.samples.length) {
                                    t.timescale
                                        || (o.logger.warn('regenerate InitSegment as audio detected'),
                                        this.generateIS(t, e, i));
                                    const u = this.remuxAudio(t, i, a, s);
                                    if (e.samples.length) {
                                      let c = void 0;
                                      u && (c = u.endPTS - u.startPTS),
                                      e.timescale
                                            || (o.logger.warn(
                                              'regenerate InitSegment as video detected',
                                            ),
                                            this.generateIS(t, e, i)),
                                      this.remuxVideo(e, i, a, c);
                                    }
                                  } else {
                                    let h = void 0;
                                    e.samples.length && (h = this.remuxVideo(e, i, a)),
                                    h
                                          && t.codec
                                          && (o.logger.log('Remux empty audio'),
                                          this.remuxEmptyAudio(t, i, a, h));
                                  }
                                }
                                r.samples.length && this.remuxID3(r, i),
                                n.samples.length && this.remuxText(n, i),
                                this.observer.trigger(f.default.FRAG_PARSED);
                              },
                            },
                            {
                              key: 'generateIS',
                              value(t, e, r) {
                                let n;
                                let i;
                                const u = this.observer;
                                const c = t.samples;
                                const h = e.samples;
                                const d = this.typeSupported;
                                let l = 'audio/mp4';
                                const p = {};
                                const b = { tracks: p };
                                const v = void 0 === this._initPTS;
                                if (
                                  (v && (n = i = 1 / 0),
                                  t.config
                                      && ((t.timescale = t.samplerate),
                                      o.logger.log(`audio sampling rate : ${t.samplerate}`),
                                      t.isAAC
                                        || (d.mpeg
                                          ? ((l = 'audio/mpeg'), (t.codec = ''))
                                          : d.mp3 && (t.codec = 'mp3')),
                                      (p.audio = {
                                        container: l,
                                        codec: t.codec,
                                        initSegment:
                                          !t.isAAC && d.mpeg
                                            ? new Uint8Array()
                                            : a.default.initSegment([t]),
                                        metadata: { channelCount: t.channelCount },
                                      }),
                                      v && c[0] && (n = i = c[0].pts - t.inputTimeScale * r)),
                                  e.sps && e.pps && h.length)
                                ) {
                                  const g = e.inputTimeScale;
                                  (e.timescale = g),
                                  (p.video = {
                                    container: 'video/mp4',
                                    codec: e.codec,
                                    initSegment: a.default.initSegment([e]),
                                    metadata: { width: e.width, height: e.height },
                                  }),
                                  v
                                        && ((n = Math.min(n, h[0].pts - g * r)),
                                        (i = Math.min(i, h[0].dts - g * r)),
                                        this.observer.trigger(f.default.INIT_PTS_FOUND, {
                                          initPTS: n,
                                        }));
                                }
                                Object.keys(p).length
                                  ? (u.trigger(f.default.FRAG_PARSING_INIT_SEGMENT, b),
                                  (this.ISGenerated = !0),
                                  v && ((this._initPTS = n), (this._initDTS = i)))
                                  : u.trigger(f.default.ERROR, {
                                    type: s.ErrorTypes.MEDIA_ERROR,
                                    details: s.ErrorDetails.FRAG_PARSING_ERROR,
                                    fatal: !1,
                                    reason: 'no audio/video samples found',
                                  });
                              },
                            },
                            {
                              key: 'remuxVideo',
                              value(t, e, r, n) {
                                let i;
                                let u;
                                let c;
                                let h;
                                let d;
                                let l;
                                let p;
                                let b = 8;
                                const v = t.timescale;
                                const g = t.samples;
                                const y = [];
                                const m = g.length;
                                const w = this._PTSNormalize;
                                const _ = this._initDTS;
                                g.sort((t, e) => {
                                  const r = t.dts - e.dts;
                                  const n = t.pts - e.pts;
                                  return r || n || t.id - e.id;
                                });
                                const S = g.reduce((t, e) => Math.max(Math.min(t, e.pts - e.dts), -18e3), 0);
                                if (S < 0) {
                                  o.logger.warn(
                                    `PTS < DTS detected in video samples, shifting DTS by ${
                                      Math.round(S / 90)
                                    } ms to overcome this issue`,
                                  );
                                  for (let M = 0; M < g.length; M++) g[M].dts += S;
                                }
                                let E = void 0;
                                E = r ? this.nextAvcDts : e * v;
                                let k = g[0];
                                (d = Math.max(w(k.dts - _, E), 0)),
                                (h = Math.max(w(k.pts - _, E), 0));
                                const x = Math.round((d - E) / 90);
                                r
                                    && x
                                    && (x > 1
                                      ? o.logger.log(
                                        `AVC:${
                                          x
                                        } ms hole between fragments detected,filling it`,
                                      )
                                      : x < -1
                                        && o.logger.log(
                                          `AVC:${-x} ms overlapping between fragments detected`,
                                        ),
                                    (d = E),
                                    (g[0].dts = d + _),
                                    (h = Math.max(h - x, E)),
                                    (g[0].pts = h + _),
                                    o.logger.log(
                                      `Video/PTS/DTS adjusted: ${
                                        Math.round(h / 90)
                                      }/${
                                        Math.round(d / 90)
                                      },delta:${
                                        x
                                      } ms`,
                                    )),
                                (k = g[g.length - 1]),
                                (p = Math.max(w(k.dts - _, E), 0)),
                                (l = Math.max(w(k.pts - _, E), 0)),
                                (l = Math.max(l, p));
                                const A = this.isSafari;
                                A && (i = Math.round((p - d) / (g.length - 1)));
                                for (var R = 0, I = 0, T = 0; T < m; T++) {
                                  for (
                                    var B = g[T], P = B.units, O = P.length, C = 0, L = 0;
                                    L < O;
                                    L++
                                  ) C += P[L].data.length;
                                  (I += C),
                                  (R += O),
                                  (B.length = C),
                                  (B.dts = A ? d + T * i : Math.max(w(B.dts - _, E), d)),
                                  (B.pts = Math.max(w(B.pts - _, E), B.dts));
                                }
                                const j = I + 4 * R + 8;
                                try {
                                  u = new Uint8Array(j);
                                } catch (t) {
                                  return void this.observer.trigger(f.default.ERROR, {
                                    type: s.ErrorTypes.MUX_ERROR,
                                    details: s.ErrorDetails.REMUX_ALLOC_ERROR,
                                    fatal: !1,
                                    bytes: j,
                                    reason: `fail allocating video mdat ${j}`,
                                  });
                                }
                                const N = new DataView(u.buffer);
                                N.setUint32(0, j), u.set(a.default.types.mdat, 4);
                                for (let D = 0; D < m; D++) {
                                  for (
                                    var U = g[D],
                                      F = U.units,
                                      q = 0,
                                      z = void 0,
                                      W = 0,
                                      V = F.length;
                                    W < V;
                                    W++
                                  ) {
                                    const H = F[W];
                                    const G = H.data;
                                    const K = H.data.byteLength;
                                    N.setUint32(b, K),
                                    (b += 4),
                                    u.set(G, b),
                                    (b += K),
                                    (q += 4 + K);
                                  }
                                  if (A) z = Math.max(0, i * Math.round((U.pts - U.dts) / i));
                                  else {
                                    if (D < m - 1) i = g[D + 1].dts - U.dts;
                                    else {
                                      const X = this.config;
                                      const Z = U.dts - g[D > 0 ? D - 1 : D].dts;
                                      if (X.stretchShortVideoTrack) {
                                        const Y = X.maxBufferHole;
                                        const J = X.maxSeekHole;
                                        const $ = Math.floor(Math.min(Y, J) * v);
                                        const Q = (n ? h + n * v : this.nextAudioPts) - U.pts;
                                        Q > $
                                          ? ((i = Q - Z) < 0 && (i = Z),
                                          o.logger.log(
                                            `It is approximately ${
                                              Q / 90
                                            } ms to the next segment; using duration ${
                                              i / 90
                                            } ms for the last video frame.`,
                                          ))
                                          : (i = Z);
                                      } else i = Z;
                                    }
                                    z = Math.round(U.pts - U.dts);
                                  }
                                  y.push({
                                    size: q,
                                    duration: i,
                                    cts: z,
                                    flags: {
                                      isLeading: 0,
                                      isDependedOn: 0,
                                      hasRedundancy: 0,
                                      degradPrio: 0,
                                      dependsOn: U.key ? 2 : 1,
                                      isNonSync: U.key ? 0 : 1,
                                    },
                                  });
                                }
                                this.nextAvcDts = p + i;
                                const tt = t.dropped;
                                if (
                                  ((t.len = 0),
                                  (t.nbNalu = 0),
                                  (t.dropped = 0),
                                  y.length
                                      && navigator.userAgent.toLowerCase().indexOf('chrome') > -1)
                                ) {
                                  const et = y[0].flags;
                                  (et.dependsOn = 2), (et.isNonSync = 0);
                                }
                                (t.samples = y),
                                (c = a.default.moof(t.sequenceNumber++, d, t)),
                                (t.samples = []);
                                const rt = {
                                  data1: c,
                                  data2: u,
                                  startPTS: h / v,
                                  endPTS: (l + i) / v,
                                  startDTS: d / v,
                                  endDTS: this.nextAvcDts / v,
                                  type: 'video',
                                  nb: y.length,
                                  dropped: tt,
                                };
                                return this.observer.trigger(f.default.FRAG_PARSING_DATA, rt), rt;
                              },
                            },
                            {
                              key: 'remuxAudio',
                              value(t, e, r, n) {
                                let u;
                                let c;
                                let h;
                                let d;
                                let l;
                                let p;
                                let b;
                                let v;
                                let g;
                                let y;
                                let m;
                                let w;
                                let _;
                                let S;
                                let M;
                                const E = t.inputTimeScale;
                                const k = E / t.timescale;
                                const x = (t.isAAC ? 1024 : 1152) * k;
                                const A = this._PTSNormalize;
                                const R = this._initDTS;
                                const I = !t.isAAC && this.typeSupported.mpeg;
                                let T = I ? 0 : 8;
                                const B = [];
                                let P = [];
                                if (
                                  (t.samples.sort((t, e) => t.pts - e.pts),
                                  (P = t.samples),
                                  (M = this.nextAudioPts),
                                  (r
                                      |= P.length
                                      && M
                                      && ((n && Math.abs(e - M / E) < 0.1)
                                        || Math.abs(P[0].pts - M - R) < 20 * x)) || (M = e * E),
                                  n && t.isAAC)
                                ) {
                                  for (let O = 0, C = M; O < P.length;) {
                                    const L = P[O];
                                    const j = A(L.pts - R, M) - C;
                                    const N = Math.abs((1e3 * j) / E);
                                    if (j <= -x) {
                                      o.logger.warn(
                                        `Dropping 1 audio frame @ ${
                                          (C / E).toFixed(3)
                                        }s due to ${
                                          N
                                        } ms overlap.`,
                                      ),
                                      P.splice(O, 1),
                                      (t.len -= L.unit.length);
                                    } else if (j >= x && N < 1e4 && C) {
                                      const D = Math.round(j / x);
                                      o.logger.warn(
                                        `Injecting ${
                                          D
                                        } audio frame @ ${
                                          (C / E).toFixed(3)
                                        }s due to ${
                                          Math.round((1e3 * j) / E)
                                        } ms gap.`,
                                      );
                                      for (let U = 0; U < D; U++) {
                                        (S = C + R),
                                        (S = Math.max(S, R)),
                                        (_ = i.default.getSilentFrame(
                                          t.manifestCodec || t.codec,
                                          t.channelCount,
                                        ))
                                              || (o.logger.log(
                                                'Unable to get silent frame for given audio codec; duplicating last frame instead.',
                                              ),
                                              (_ = L.unit.subarray())),
                                        P.splice(O, 0, { unit: _, pts: S, dts: S }),
                                        (t.len += _.length),
                                        (C += x),
                                        (O += 1);
                                      }
                                      (L.pts = L.dts = C + R), (C += x), (O += 1);
                                    } else {
                                      Math.abs(j),
                                      (C += x),
                                      (L.pts = L.dts = O === 0 ? R + M : P[O - 1].pts + x),
                                      (O += 1);
                                    }
                                  }
                                }
                                for (let F = 0, q = P.length; F < q; F++) {
                                  if (
                                    ((h = (u = P[F]).unit),
                                    (g = u.pts - R),
                                    (y = u.dts - R),
                                    void 0 !== v)
                                  ) {
                                    (m = A(g, v)),
                                    (w = A(y, v)),
                                    (c.duration = Math.round((w - v) / k));
                                  } else {
                                    (m = A(g, M)), (w = A(y, M));
                                    const z = Math.round((1e3 * (m - M)) / E);
                                    let W = 0;
                                    if (r && t.isAAC && z) {
                                      if (z > 0 && z < 1e4) {
                                        (W = Math.round((m - M) / x)),
                                        o.logger.log(
                                          `${z} ms hole between AAC samples detected,filling it`,
                                        ),
                                        W > 0
                                              && ((_ = i.default.getSilentFrame(
                                                t.manifestCodec || t.codec,
                                                t.channelCount,
                                              )) || (_ = h.subarray()),
                                              (t.len += W * _.length));
                                      } else if (z < -12) {
                                        o.logger.log(
                                          `drop overlapping AAC sample, expected/parsed/delta:${
                                            (M / E).toFixed(3)
                                          }s/${
                                            (m / E).toFixed(3)
                                          }s/${
                                            -z
                                          }ms`,
                                        ),
                                        (t.len -= h.byteLength);
                                        continue;
                                      }
                                      m = w = M;
                                    }
                                    if (
                                      ((p = Math.max(0, m)), (b = Math.max(0, w)), !(t.len > 0))
                                    ) return void o.logger.log('no audio samples');
                                    const V = I ? t.len : t.len + 8;
                                    try {
                                      d = new Uint8Array(V);
                                    } catch (t) {
                                      return (
                                        o.logger.error(`got error ${t}`),
                                        void this.observer.trigger(f.default.ERROR, {
                                          type: s.ErrorTypes.MUX_ERROR,
                                          details: s.ErrorDetails.REMUX_ALLOC_ERROR,
                                          fatal: !1,
                                          bytes: V,
                                          reason: `fail allocating audio mdat ${V}`,
                                        })
                                      );
                                    }
                                    I
                                        || (new DataView(d.buffer).setUint32(0, V),
                                        d.set(a.default.types.mdat, 4));
                                    for (let H = 0; H < W; H++) {
                                      (S = m - (W - H) * x),
                                      (_ = i.default.getSilentFrame(
                                        t.manifestCodec || t.codec,
                                        t.channelCount,
                                      ))
                                            || (o.logger.log(
                                              'Unable to get silent frame for given audio codec; duplicating this frame instead.',
                                            ),
                                            (_ = h.subarray())),
                                      d.set(_, T),
                                      (T += _.byteLength),
                                      (c = {
                                        size: _.byteLength,
                                        cts: 0,
                                        duration: 1024,
                                        flags: {
                                          isLeading: 0,
                                          isDependedOn: 0,
                                          hasRedundancy: 0,
                                          degradPrio: 0,
                                          dependsOn: 1,
                                        },
                                      }),
                                      B.push(c);
                                    }
                                  }
                                  d.set(h, T);
                                  const G = h.byteLength;
                                  (T += G),
                                  (c = {
                                    size: G,
                                    cts: 0,
                                    duration: 0,
                                    flags: {
                                      isLeading: 0,
                                      isDependedOn: 0,
                                      hasRedundancy: 0,
                                      degradPrio: 0,
                                      dependsOn: 1,
                                    },
                                  }),
                                  B.push(c),
                                  (v = w);
                                }
                                let K = 0;
                                const X = B.length;
                                if ((X >= 2 && ((K = B[X - 2].duration), (c.duration = K)), X)) {
                                  (this.nextAudioPts = m + k * K),
                                  (t.len = 0),
                                  (t.samples = B),
                                  (l = I
                                    ? new Uint8Array()
                                    : a.default.moof(t.sequenceNumber++, b / k, t)),
                                  (t.samples = []);
                                  const Z = {
                                    data1: l,
                                    data2: d,
                                    startPTS: p / E,
                                    endPTS: this.nextAudioPts / E,
                                    startDTS: b / E,
                                    endDTS: (w + k * K) / E,
                                    type: 'audio',
                                    nb: X,
                                  };
                                  return this.observer.trigger(f.default.FRAG_PARSING_DATA, Z), Z;
                                }
                                return null;
                              },
                            },
                            {
                              key: 'remuxEmptyAudio',
                              value(t, e, r, n) {
                                const a = t.inputTimeScale;
                                const s = a / (t.samplerate ? t.samplerate : a);
                                const f = this.nextAudioPts;
                                const u = (void 0 !== f ? f : n.startDTS * a) + this._initDTS;
                                const c = n.endDTS * a + this._initDTS;
                                const h = 1024 * s;
                                const d = Math.ceil((c - u) / h);
                                const l = i.default.getSilentFrame(
                                  t.manifestCodec || t.codec,
                                  t.channelCount,
                                );
                                if ((o.logger.warn('remux empty Audio'), l)) {
                                  for (var p = [], b = 0; b < d; b++) {
                                    const v = u + b * h;
                                    p.push({ unit: l, pts: v, dts: v }), (t.len += l.length);
                                  }
                                  (t.samples = p), this.remuxAudio(t, e, r);
                                } else {
                                  o.logger.warn(
                                    'Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!',
                                  );
                                }
                              },
                            },
                            {
                              key: 'remuxID3',
                              value(t, e) {
                                let r;
                                const n = t.samples.length;
                                const i = t.inputTimeScale;
                                const o = this._initPTS;
                                const a = this._initDTS;
                                if (n) {
                                  for (let s = 0; s < n; s++) {
                                    ((r = t.samples[s]).pts = (r.pts - o) / i),
                                    (r.dts = (r.dts - a) / i);
                                  }
                                  this.observer.trigger(f.default.FRAG_PARSING_METADATA, {
                                    samples: t.samples,
                                  });
                                }
                                (t.samples = []), (e = e);
                              },
                            },
                            {
                              key: 'remuxText',
                              value(t, e) {
                                t.samples.sort((t, e) => t.pts - e.pts);
                                let r;
                                const n = t.samples.length;
                                const i = t.inputTimeScale;
                                const o = this._initPTS;
                                if (n) {
                                  for (let a = 0; a < n; a++) (r = t.samples[a]).pts = (r.pts - o) / i;
                                  this.observer.trigger(f.default.FRAG_PARSING_USERDATA, {
                                    samples: t.samples,
                                  });
                                }
                                (t.samples = []), (e = e);
                              },
                            },
                            {
                              key: '_PTSNormalize',
                              value(t, e) {
                                let r;
                                if (void 0 === e) return t;
                                for (
                                  r = e < t ? -8589934592 : 8589934592;
                                  Math.abs(t - e) > 4294967296;

                                ) t += r;
                                return t;
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = c;
                    },
                    {
                      530: 530, 531: 531, 533: 533, 539: 539, 548: 548,
                    },
                  ],
                  541: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const i = t(548);
                      const o = f(t(531));
                      const a = t(530);
                      const s = f(t(542));
                      function f(t) {
                        return t && t.__esModule ? t : { default: t };
                      }
                      function u(t, e) {
                        if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                      }
                      const c = (function () {
                        function t(e, r, n, i) {
                          u(this, t),
                          (this.observer = e),
                          (this.video = r),
                          (this.mediaSource = new MediaSource()).addEventListener(
                            'sourceopen',
                            this.onSourceOpen.bind(this),
                          ),
                          (this.video.src = URL.createObjectURL(this.mediaSource)),
                          (this.sourceBuffer = []),
                          e.on(
                            o.default.FRAG_PARSING_INIT_SEGMENT,
                            (t) => {
                              this.onBufferCodecs(t.tracks),
                              t.tracks.video
                                      && this.append({
                                        startPTS: 0,
                                        endPTS: 0,
                                        data1: t.tracks.video.initSegment,
                                        type: 'video',
                                      }),
                              t.tracks.audio
                                      && this.append({
                                        startPTS: 0,
                                        endPTS: 0,
                                        data1: t.tracks.audio.initSegment,
                                        type: 'audio',
                                      });
                            },
                          ),
                          e.on(
                            o.default.FRAG_PARSING_DATA,
                            (t) => {
                              if (this.video.currentTime > 0 && this.video.readyState < 4) {
                                let e = !1;
                                let r = !1;
                                let n = 1 / 0;
                                if (this.sourceBuffer.audio) {
                                  const i = this.sourceBuffer.audio.buffered;
                                  if (i.length > 0) {
                                    const o = i.start(i.length - 1);
                                    const a = i.end(i.length - 1);
                                    a - o > 1 && ((e = !0), (n = a));
                                  }
                                } else e = !0;
                                if (this.sourceBuffer.video) {
                                  const s = this.sourceBuffer.video.buffered;
                                  if (s.length > 0) {
                                    const f = s.start(s.length - 1);
                                    const u = s.end(s.length - 1);
                                    u - f > 1 && (u < n && (n = u), (r = !0));
                                  }
                                } else r = !0;
                                if (e && r) {
                                  if (n - this.video.currentTime > 3) {
                                    const c = n - 1;
                                    this.video.currentTime = c;
                                  }
                                }
                              }
                              this.append(t, t.type);
                            },
                          ),
                          (this.audioBuffer = new h('audio')),
                          (this.videoBuffer = new h('video')),
                          (this.updating = !1),
                          (this.pendingTracks = {}),
                          (this.tracks = {}),
                          (this.removed = []);
                        }
                        return (
                          n(t, [
                            {
                              key: 'createBuffers',
                              value(t) {
                                const e = `video/mp4; codecs="${codec}"`;
                                MediaSource.isTypeSupported(e)
                                  ? ((this.mediaSource = new MediaSource()),
                                  (this.mime = e),
                                  (this.video.src = URL.createObjectURL(this.mediaSource)),
                                  this.mediaSource.addEventListener(
                                    'sourceopen',
                                    this.onSourceOpen.bind(this),
                                  ))
                                  : this.observer.trigger(o.default.ERROR, {
                                    type: a.ErrorTypes.BUFFER_ERROR,
                                    info:
                                          `Failed to create buffer, codec is not supported ${codec}`,
                                  });
                              },
                            },
                            {
                              key: 'createSourceBuffers',
                              value(t) {
                                const e = this.sourceBuffer;
                                const r = this.mediaSource;
                                for (const n in t) {
                                  if (!e[n]) {
                                    const s = t[n];
                                    const f = s.codec;
                                    const u = `${s.container};codecs=${f}`;
                                    i.logger.log(`creating sourceBuffer(${u})`);
                                    try {
                                      const c = (e[n] = r.addSourceBuffer(u));
                                      c.addEventListener(
                                        'updateend',
                                        this.onSourceUpdateEnd.bind(this),
                                      ),
                                      c.addEventListener(
                                        'error',
                                        this.onSourceError.bind(this),
                                      ),
                                      (this.tracks[n] = { codec: f, container: s.container }),
                                      (s.buffer = c);
                                    } catch (t) {
                                      i.logger.error(
                                        `error while trying to add sourceBuffer:${t.message}`,
                                      ),
                                      this.observer.trigger(o.default.ERROR, {
                                        type: a.ErrorTypes.MEDIA_ERROR,
                                        details: a.ErrorDetails.BUFFER_ADD_CODEC_ERROR,
                                        fatal: !1,
                                        err: t,
                                        mimeType: u,
                                      });
                                    }
                                  }
                                }
                              },
                            },
                            {
                              key: 'onBufferCodecs',
                              value(t) {
                                if (Object.keys(this.sourceBuffer).length === 0) {
                                  for (const e in t) this.pendingTracks[e] = t[e];
                                  const r = this.mediaSource;
                                  r && r.readyState === 'open' && this.checkPendingTracks();
                                }
                              },
                            },
                            {
                              key: 'append',
                              value(t, e) {
                                t.type == 'audio'
                                  ? this.audioBuffer.append(t)
                                  : t.type == 'video' && this.videoBuffer.append(t),
                                this.doAppending();
                              },
                            },
                            {
                              key: 'doAppending',
                              value() {
                                this.audioBuffer.ready()
                                    && (this.audioBuffer.flushed
                                      ? this.appendTo('audio', this.audioBuffer.next())
                                        && this.audioBuffer.poll()
                                      : this.audioBuffer.buffered() > 2
                                        && (!this.sourceBuffer.video
                                          || this.videoBuffer.flushed
                                          || this.videoBuffer.buffered() > 2)
                                        && this.appendTo('audio', this.audioBuffer.next())
                                        && (this.audioBuffer.poll(), (this.audioBuffer.flushed = !0))),
                                this.videoBuffer.ready()
                                      && (this.videoBuffer.flushed
                                        ? this.appendTo('video', this.videoBuffer.next())
                                          && this.videoBuffer.poll()
                                        : this.videoBuffer.buffered() > 2
                                          && (!this.sourceBuffer.audio
                                            || this.audioBuffer.flushed
                                            || this.audioBuffer.buffered() > 2)
                                          && this.appendTo('video', this.videoBuffer.next())
                                          && (this.videoBuffer.poll(),
                                          (this.videoBuffer.flushed = !0)));
                              },
                            },
                            {
                              key: 'appendTo',
                              value(t, e) {
                                if (e) {
                                  if (this.sourceBuffer[t] && !this.sourceBuffer[t].updating) {
                                    try {
                                      return e.data1
                                        ? (this.sourceBuffer[t].appendBuffer(e.data1),
                                        (e.data1 = null),
                                        e.data2 == null)
                                        : (e.data2 && this.sourceBuffer[t].appendBuffer(e.data2),
                                        !0);
                                    } catch (e) {
                                      e.code == 22
                                        ? (i.logger.error(
                                          `Failed to append data to buffer ${t} error ${e}`,
                                        ),
                                        this.cleanBuffer(t))
                                        : i.logger.error(e);
                                    }
                                  }
                                  return !1;
                                }
                              },
                            },
                            {
                              key: 'cleanBuffer',
                              value(t) {
                                if (!this.sourceBuffer[t].updating) {
                                  const e = this.video.currentTime;
                                  const r = this.sourceBuffer[t].buffered;
                                  if (r.length > 0) {
                                    const n = r.end(0);
                                    const o = e > n + 300 ? 0 : n - e + 300;
                                    const a = e > n ? 0 : 60;
                                    const s = r.start(0);
                                    if (s < this.removed[t]) return;
                                    if (n - o <= s || n - o - s < a) return;
                                    (this.removed[t] = n - o),
                                    i.logger.log(
                                      `Removing buffered ${
                                        t
                                      } start ${
                                        s
                                      } end ${
                                        n - o
                                      } currentTime ${
                                        e}`,
                                    ),
                                    this.sourceBuffer[t].remove(s, n - o);
                                  }
                                }
                              },
                            },
                            {
                              key: 'onSourceOpen',
                              value(t) {
                                const e = this;
                                i.logger.log('media source opened');
                                const r = this.mediaSource;
                                r
                                    && (r.removeEventListener('sourceopen', this.onSourceOpen),
                                    this.video.play().catch((t) => {
                                      s.default.getConfig().browserDetails == 'chrome'
                                        ? (i.logger.info(
                                          'Autoplay detected! Trying to play a video with a muted sound...',
                                        ),
                                        (e.video.muted = !0),
                                        e.video.play())
                                        : i.logger.error(t);
                                    })),
                                this.checkPendingTracks();
                              },
                            },
                            {
                              key: 'checkPendingTracks',
                              value() {
                                const t = this.pendingTracks;
                                Object.keys(t).length
                                    && (this.createSourceBuffers(t),
                                    (this.pendingTracks = {}),
                                    this.doAppending());
                              },
                            },
                            {
                              key: 'onSourceUpdateEnd',
                              value(t) {
                                this.sourceBuffer.audio && this.cleanBuffer('audio'),
                                this.sourceBuffer.video && this.cleanBuffer('video'),
                                this.doAppending();
                              },
                            },
                            {
                              key: 'onSourceError',
                              value(t) {
                                this.observer.trigger(o.default.ERROR, {
                                  type: a.ErrorTypes.BUFFER_ERROR,
                                  info: t,
                                });
                              },
                            },
                            {
                              key: 'release',
                              value() {
                                this.video
                                    && ((this.sourceBuffer = {}),
                                    URL.revokeObjectURL(this.video.src),
                                    this.video.removeAttribute('src'),
                                    this.video.load(),
                                    (this.video = null));
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = c;
                      var h = (function () {
                        function t(e) {
                          u(this, t),
                          (this.samples = []),
                          (this.start = -1),
                          (this.end = 0),
                          (this.flushed = !1),
                          (this.type = e);
                        }
                        return (
                          n(t, [
                            {
                              key: 'buffered',
                              value() {
                                return this.end - this.start;
                              },
                            },
                            {
                              key: 'append',
                              value(t) {
                                this.samples.push(t),
                                this.start == -1 && (this.start = t.startPTS),
                                (this.end = t.endPTS);
                              },
                            },
                            {
                              key: 'next',
                              value() {
                                return this.samples[0];
                              },
                            },
                            {
                              key: 'poll',
                              value() {
                                const t = this.samples.shift();
                                return (
                                  this.samples.length == 0
                                    ? ((this.start = -1), (this.end = 0))
                                    : ((this.start = this.samples[0].startPTS),
                                    (this.end = this.samples[this.samples.length - 1].endPTS)),
                                  t
                                );
                              },
                            },
                            {
                              key: 'ready',
                              value() {
                                return this.buffered() > 0;
                              },
                            },
                          ]),
                          t
                        );
                      }());
                    },
                    {
                      530: 530, 531: 531, 542: 542, 548: 548,
                    },
                  ],
                  542: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      t(17);
                      let i;
                      const o = t(537);
                      const a = (i = o) && i.__esModule ? i : { default: i };
                      let s;
                      const f = t(489);
                      const u = (function () {
                        function t() {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t));
                        }
                        return (
                          n(t, null, [
                            {
                              key: 'createConnection',
                              value(t) {
                                void 0 === t.enableWorker && (t.enableWorker = !0),
                                void 0 === t.connectionConstraints
                                  ? (t.connectionConstraints = {
                                    fragmentLengthMs: 100,
                                    cutByIFrameOnly: !1,
                                  })
                                  : (void 0 === t.connectionConstraints.fragmentLengthMs
                                            && (t.connectionConstraints.fragmentLengthMs = 100),
                                  void 0 === t.connectionConstraints.cutByIFrameOnly
                                            && (t.connectionConstraints.cutByIFrameOnly = !1));
                                const e = new a.default(t);
                                return f.resolve(e);
                              },
                            },
                            {
                              key: 'getMediaAccess',
                              value() {
                                return new f(((t, e) => {
                                  e(new Error("This provider doesn't support getMediaAccess"));
                                }));
                              },
                            },
                            {
                              key: 'releaseMedia',
                              value() {
                                return !1;
                              },
                            },
                            {
                              key: 'available',
                              value() {
                                return 'MediaSource' in window;
                              },
                            },
                            {
                              key: 'listDevices',
                              value() {
                                return new f(((t, e) => {
                                  e(new Error("This provider doesn't support listDevices"));
                                }));
                              },
                            },
                            {
                              key: 'configure',
                              value(t) {
                                s = t;
                              },
                            },
                            {
                              key: 'getConfig',
                              value() {
                                return s;
                              },
                            },
                            { key: 'playFirstSound', value() {} },
                            {
                              key: 'playFirstVideo',
                              value(t, e) {
                                return a.default.playFirstVideo(t, e);
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = u;
                    },
                    { 17: 17, 489: 489, 537: 537 },
                  ],
                  543: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      r.MediaFileReader = (function () {
                        function t(e, r, n) {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t)),
                          (this.observer = e),
                          (this.elementId = r.mainUrl),
                          (this.buffer = r.buffer),
                          (this.demuxer = n),
                          this.buffer
                            ? this.feedDemuxer(this.buffer)
                            : document
                              .getElementById(this.elementId)
                              .addEventListener(
                                'change',
                                this.handleFileSelect.bind(this),
                                !1,
                              );
                        }
                        return (
                          n(t, [
                            {
                              key: 'handleFileSelect',
                              value(t) {
                                const e = t.target.files[0];
                                const r = new FileReader();
                                const n = this;
                                (r.onload = function (t) {
                                  n.feedDemuxer(t.target.result);
                                }),
                                r.readAsArrayBuffer(e);
                              },
                            },
                            {
                              key: 'feedDemuxer',
                              value(t) {
                                for (
                                  let e = this.demuxer, r = new DataView(t), n = 0;
                                  n < t.byteLength;

                                ) {
                                  const i = r.getInt32(n + 5);
                                  const o = t.slice(n, n + i + 9);
                                  (n += 9), (n += i), e.onData(o);
                                }
                              },
                            },
                            { key: 'disconnect', value() {} },
                          ]),
                          t
                        );
                      }());
                    },
                    {},
                  ],
                  544: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      let n;
                      const i = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      const o = t(531);
                      const a = ((n = o) && n.__esModule, t(530));
                      const s = (function () {
                        function t(e, r, n) {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t)),
                          (this.mediaConnection = e),
                          (this.url = r.mainUrl),
                          (this.token = r.authToken),
                          (this.state = 'NEW'),
                          (this.socket = null),
                          (this.demuxer = n);
                        }
                        return (
                          i(t, [
                            {
                              key: 'connect',
                              value() {
                                const t = this;
                                (this.state = 'CONNECTING'),
                                (this.socket = new WebSocket(this.url)),
                                (this.socket.binaryType = 'arraybuffer'),
                                (this.socket.onopen = this.onConnected.bind(this)),
                                (this.socket.onmessage = function (e) {
                                  if (e.data instanceof ArrayBuffer) t.demuxer.onData(e.data);
                                  else {
                                    switch (JSON.parse(e.data).message) {
                                      case 'ping':
                                        var r = { message: 'pong' };
                                        t.socket.send(JSON.stringify(r));
                                    }
                                  }
                                }),
                                (this.socket.onerror = function (e) {
                                  (t.state = 'ERROR'),
                                  t.mediaConnection.trigger(Event.ERROR, {
                                    type: a.ErrorTypes.NETWORK_ERROR,
                                    info: e,
                                  });
                                }),
                                (this.socket.onclose = this.onDisconnected.bind(this));
                              },
                            },
                            {
                              key: 'disconnect',
                              value() {
                                (this.state != 'CONNECTING' && this.state != 'CONNECTED')
                                    || this.socket.close();
                              },
                            },
                            {
                              key: 'onConnected',
                              value() {
                                const t = { message: 'connectMediaTransport' };
                                (t.data = [{ authToken: this.token }]),
                                this.socket.send(JSON.stringify(t)),
                                (this.state = 'CONNECTED'),
                                this.mediaConnection.trigger(Event.TRANSPORT_CONNECTED, {});
                              },
                            },
                            {
                              key: 'onDisconnected',
                              value() {
                                (this.state = 'CLOSED'),
                                this.mediaConnection.trigger(Event.TRANSPORT_DISCONNECTED, {});
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = s;
                    },
                    { 530: 530, 531: 531 },
                  ],
                  545: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      (r.appendByteArray = function (t, e) {
                        const r = new Uint8Array((0 | t.byteLength) + (0 | e.byteLength));
                        return r.set(t, 0), r.set(e, 0 | t.byteLength), r;
                      }),
                      (r.appendByteArrayAsync = function (t, e) {
                        return new Promise(((r, n) => {
                          const i = new Blob([t, e]);
                          const o = new FileReader();
                          o.addEventListener('loadend', () => {
                            r();
                          }),
                          o.readAsArrayBuffer(i);
                        }));
                      }),
                      (r.base64ToArrayBuffer = function (t) {
                        for (
                          var e = window.atob(t), r = e.length, n = new Uint8Array(r), i = 0;
                          i < r;
                          i++
                        ) n[i] = e.charCodeAt(i);
                        return n.buffer;
                      }),
                      (r.hexToByteArray = function (t) {
                        for (var e = t.length >> 1, r = new Uint8Array(e), n = 0; n < e; n++) r[n] = parseInt(t.substr(n << 1, 2), 16);
                        return r;
                      }),
                      (r.concatenate = function (t) {
                        for (
                          var e = 0, r = arguments.length, n = Array(r > 1 ? r - 1 : 0), i = 1;
                          i < r;
                          i++
                        ) n[i - 1] = arguments[i];
                        let o = !0;
                        let a = !1;
                        let s = void 0;
                        try {
                          for (
                            var f, u = n[Symbol.iterator]();
                            !(o = (f = u.next()).done);
                            o = !0
                          ) {
                            const c = f.value;
                            e += c.length;
                          }
                        } catch (t) {
                          (a = !0), (s = t);
                        } finally {
                          try {
                            !o && u.return && u.return();
                          } finally {
                            if (a) throw s;
                          }
                        }
                        const h = new t(e);
                        let d = 0;
                        let l = !0;
                        let p = !1;
                        let b = void 0;
                        try {
                          for (
                            var v, g = n[Symbol.iterator]();
                            !(l = (v = g.next()).done);
                            l = !0
                          ) {
                            const y = v.value;
                            h.set(y, d), (d += y.length);
                          }
                        } catch (t) {
                          (p = !0), (b = t);
                        } finally {
                          try {
                            !l && g.return && g.return();
                          } finally {
                            if (p) throw b;
                          }
                        }
                        return h;
                      }),
                      (r.bitSlice = function (t) {
                        for (
                          var e = arguments.length > 1 && void 0 !== arguments[1]
                              ? arguments[1]
                              : 0,
                            r = arguments.length > 2 && void 0 !== arguments[2]
                              ? arguments[2]
                              : 8 * t.byteLength,
                            n = Math.ceil((r - e) / 8),
                            i = new Uint8Array(n),
                            o = e >>> 3,
                            a = (r >>> 3) - 1,
                            s = 7 & e,
                            f = 8 - s,
                            u = (8 - r) & 7,
                            c = 0;
                          c < n;
                          ++c
                        ) {
                          let h = 0;
                          c < a
                                && ((h = t[o + c + 1] >> f),
                                c == a - 1 && u < 8 && ((h >>= u), (h <<= u))),
                          (i[c] = (t[o + c] << s) | h);
                        }
                        return i;
                      });
                      r.BitArray = (function () {
                        function t(e) {
                          !(function (t, e) {
                            if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                          }(this, t)),
                          (this.src = new DataView(e.buffer, e.byteOffset, e.byteLength)),
                          (this.bitpos = 0),
                          (this.byte = this.src.getUint8(0)),
                          (this.bytepos = 0);
                        }
                        return (
                          n(t, [
                            {
                              key: 'readBits',
                              value(t) {
                                if ((0 | t) > 32 || (0 | t) == 0) throw new Error('too big');
                                for (var e = 0, r = t; r > 0; --r) {
                                  (e = ((0 | e) << 1)
                                      | (((0 | this.byte) >> (8 - ++this.bitpos)) & 1)),
                                  (0 | this.bitpos) >= 8
                                        && ((this.byte = this.src.getUint8(++this.bytepos)),
                                        (this.bitpos &= 7));
                                }
                                return e;
                              },
                            },
                            {
                              key: 'skipBits',
                              value(t) {
                                return (
                                  (this.bitpos += 7 & (0 | t)),
                                  (this.bytepos += (0 | t) >>> 3),
                                  this.bitpos > 7 && ((this.bitpos &= 7), ++this.bytepos),
                                  this.finished()
                                    ? this.bytepos - this.src.byteLength - this.src.bitpos
                                    : ((this.byte = this.src.getUint8(this.bytepos)), 0)
                                );
                              },
                            },
                            {
                              key: 'finished',
                              value() {
                                return this.bytepos >= this.src.byteLength;
                              },
                            },
                          ]),
                          t
                        );
                      }());
                    },
                    {},
                  ],
                  546: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = (function () {
                        function t(t, e) {
                          for (let r = 0; r < e.length; r++) {
                            const n = e[r];
                            (n.enumerable = n.enumerable || !1),
                            (n.configurable = !0),
                            'value' in n && (n.writable = !0),
                            Object.defineProperty(t, n.key, n);
                          }
                        }
                        return function (e, r, n) {
                          return r && t(e.prototype, r), n && t(e, n), e;
                        };
                      }());
                      function i(t, e) {
                        if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
                      }
                      const o = (function () {
                        function t(e) {
                          const r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                          i(this, t),
                          (this.array = e),
                          (this.view = new DataView(e)),
                          (this.i = r),
                          (this.length = e.byteLength - r);
                        }
                        return (
                          n(t, [
                            {
                              key: 'readByte',
                              value() {
                                if (!(this.length - this.i < 1)) {
                                  const t = this.view.getInt8(this.i);
                                  return this.i++, t;
                                }
                                logger.error('Buffer end reached');
                              },
                            },
                            {
                              key: 'readInt',
                              value() {
                                if (!(this.length - this.i < 4)) {
                                  const t = this.view.getInt32(this.i);
                                  return (this.i += 4), t;
                                }
                                logger.error('Buffer end reached');
                              },
                            },
                            {
                              key: 'readShort',
                              value() {
                                if (!(this.length - this.i < 2)) {
                                  const t = this.view.getInt16(this.i);
                                  return (this.i += 2), t;
                                }
                                logger.error('Buffer end reached');
                              },
                            },
                            {
                              key: 'skipBytes',
                              value(t) {
                                this.i += t;
                              },
                            },
                            {
                              key: 'readableBytes',
                              value() {
                                return this.length - this.i;
                              },
                            },
                            {
                              key: 'sliceAsUint8Array',
                              value(t, e) {
                                const r = this.array.slice(t, t + e);
                                return (this.i += e), new Uint8Array(r);
                              },
                            },
                            {
                              key: 'readerIndex',
                              value() {
                                return this.i;
                              },
                            },
                            {
                              key: 'resetReaderIndex',
                              value() {
                                this.i = this.array.byteLength - this.length;
                              },
                            },
                          ]),
                          t
                        );
                      }());
                      r.default = o;
                    },
                    {},
                  ],
                  547: [
                    function (t, e, r) {
                      e.exports = {
                        hexDump(t) {
                          let e;
                          let r = '';
                          for (e = 0; e < t.length; e++) {
                            let n = t[e].toString(16);
                            n.length < 2 && (n = `0${n}`), (r += n);
                          }
                          return r;
                        },
                      };
                    },
                    {},
                  ],
                  548: [
                    function (t, e, r) {
                      Object.defineProperty(r, '__esModule', { value: !0 });
                      const n = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
                        ? function (t) {
                          return typeof t;
                        }
                        : function (t) {
                          return t
                                  && typeof Symbol === 'function'
                                  && t.constructor === Symbol
                                  && t !== Symbol.prototype
                            ? 'symbol'
                            : typeof t;
                        };
                      function i() {}
                      const o = {
                        trace: i, debug: i, log: i, warn: i, info: i, error: i,
                      };
                      let a = o;
                      function s(t, e) {
                        return (e = `[${t}] > ${e}`);
                      }
                      function f(t) {
                        const e = self.console[t];
                        return e
                          ? function () {
                            for (var r = arguments.length, n = Array(r), i = 0; i < r; i++) n[i] = arguments[i];
                            n[0] && (n[0] = s(t, n[0])), e.apply(self.console, n);
                          }
                          : i;
                      }
                      (r.enableLogs = function (t) {
                        if (!0 === t || (void 0 === t ? 'undefined' : n(t)) === 'object') {
                          !(function (t) {
                            for (
                              var e = arguments.length, r = Array(e > 1 ? e - 1 : 0), n = 1;
                              n < e;
                              n++
                            ) r[n - 1] = arguments[n];
                            r.forEach((e) => {
                              a[e] = t[e] ? t[e].bind(t) : f(e);
                            });
                          }(t, 'debug', 'log', 'info', 'warn', 'error'));
                          try {
                            a.log();
                          } catch (t) {
                            a = o;
                          }
                        } else a = o;
                      }),
                      (r.logger = a);
                    },
                    {},
                  ],
                },
                {},
                [532],
              ))(532)));
            }.call(this));
          }.call(
            this,
            typeof global !== 'undefined'
              ? global
              : typeof self !== 'undefined'
                ? self
                : typeof window !== 'undefined'
                  ? window
                  : {},
          ));
        },
        {},
      ],
      32: [
        function (require, module, exports) {
          const { SESSION_STATUS } = require('./constants');

          const { STREAM_STATUS } = require('./constants');

          const Promise = require('promise-polyfill');

          const util = require('./util');

          const uuid_v1 = require('uuid/v1');

          const ROOM_REST_APP = 'roomApp';
          /**
           * Room api based on core api
           *
           * @namespace roomApi
           */

          /**
           * Initialize connection
           *
           * @param {Object} options session options
           * @param {String} options.urlServer Server address in form of [ws,wss]://host.domain:port
           * @param {String} options.username Username to login with
           * @returns {roomApi.Session}
           * @memberof roomApi
           * @method connect
           */

          const appSession = function appSession(options) {
            /**
             * Represents connection to room api app
             *
             * @namespace roomApi.Session
             */
            const callbacks = {};
            const rooms = {};
            const username_ = options.username;
            let exports;
            const roomHandlers = {};
            const session = Flashphoner.createSession({
              urlServer: options.urlServer,
              mediaOptions: options.mediaOptions,
              appKey: options.appKey && options.appKey.length != 0 ? options.appKey : ROOM_REST_APP,
              custom: {
                login: options.username,
                token: options.token,
              },
            })
              .on(SESSION_STATUS.ESTABLISHED, (session) => {
                if (callbacks[session.status()]) {
                  callbacks[session.status()](exports);
                }
              })
              .on(SESSION_STATUS.APP_DATA, (data) => {
                const { payload } = data;

                if (!payload || !payload.roomName) {
                  console.error(
                    `Received app data does not contain 'payload' or 'payload.roomName' field. Received data: ${
                      JSON.stringify(data)}`,
                  );
                  return;
                }

                const { roomName } = payload;

                if (roomHandlers[roomName]) {
                  roomHandlers[roomName](payload);
                } else {
                  console.warn(`Failed to find room with name ${roomName}`);
                }
              })
              .on(SESSION_STATUS.DISCONNECTED, sessionDied)
              .on(SESSION_STATUS.FAILED, sessionDied); // teardown helper

            function sessionDied(session) {
              if (callbacks[session.status()]) {
                callbacks[session.status()](exports);
              }
            }
            /**
             * Disconnect session
             *
             * @memberof roomApi.Session
             * @inner
             */

            const disconnect = function disconnect() {
              session.disconnect();
            };
            /**
             * Get session status
             *
             * @returns {string} One of {@link Flashphoner.constants.SESSION_STATUS}
             * @memberof roomApi.Session
             * @inner
             */

            const status = function status() {
              return session.status();
            };
            /**
             * Get session id
             *
             * @returns {string} session id
             * @memberof roomApi.Session
             * @inner
             */

            const id = function id() {
              return session.id();
            };
            /**
             * Get server address
             *
             * @returns {string} Server url
             * @memberof roomApi.Session
             * @inner
             */

            const getServerUrl = function getServerUrl() {
              return session.getServerUrl();
            };
            /**
             * Get session username
             *
             * @returns {string} username
             * @memberof roomApi.Session
             * @inner
             */

            const username = function username() {
              return username_;
            };
            /**
             * Get rooms
             *
             * @returns {roomApi.Room[]}
             * @memberof roomApi.Session
             * @inner
             */

            const getRooms = function getRooms() {
              return util.copyObjectToArray(rooms);
            };
            /**
             * Add session event callback.
             *
             * @param {string} event One of {@link Flashphoner.constants.SESSION_STATUS} events
             * @param {Session~eventCallback} callback Callback function
             * @returns {roomApi.Session} Session
             * @throws {TypeError} Error if event is not specified
             * @throws {Error} Error if callback is not a valid function
             * @memberof roomApi.Session
             * @inner
             */

            const on = function on(event, callback) {
              if (!event) {
                throw new Error("Event can't be null", 'TypeError');
              }

              if (!callback || typeof callback !== 'function') {
                throw new Error('Callback needs to be a valid function');
              }

              callbacks[event] = callback;
              return exports;
            };
            /**
             * Join room
             *
             * @param {Object} options Room options
             * @param {String} options.name Room name
             * @returns {roomApi.Room}
             * @memberof roomApi.Session
             * @inner
             */

            const join = function join(options) {
              /**
               * Room
               *
               * @namespace roomApi.Room
               */
              const room = {};
              const name_ = options.name;
              const participants = {};
              const callbacks = {};
              let stateStreams = {};

              roomHandlers[name_] = function (data) {
                /**
                 * Room participant
                 *
                 * @namespace roomApi.Room.Participant
                 */
                let participant;

                if (data.name == 'STATE') {
                  if (data.info) {
                    for (let i = 0; i < data.info.length; i++) {
                      participantFromState(data.info[i]);
                    }

                    stateStreams = {};
                  }

                  if (callbacks.STATE) {
                    callbacks.STATE(room);
                  }
                } else if (data.name == 'JOINED') {
                  participants[data.info] = {
                    streams: {},
                    name: function name() {
                      return data.info;
                    },
                    sendMessage: attachSendMessage(data.info),
                    getStreams: function getStreams() {
                      return util.copyObjectToArray(this.streams);
                    },
                  };

                  if (callbacks.JOINED) {
                    callbacks.JOINED(participants[data.info]);
                  }
                } else if (data.name == 'LEFT') {
                  participant = participants[data.info];
                  delete participants[data.info];

                  if (callbacks.LEFT) {
                    callbacks.LEFT(participant);
                  }
                } else if (data.name == 'PUBLISHED') {
                  participant = participants[data.info.login];
                  participant.streams[data.info.name] = {
                    play: play(data.info.name),
                    stop: stop(data.info.name),
                    id: id(data.info.name),
                    streamName: function streamName() {
                      return data.info.name;
                    },
                  };

                  if (callbacks.PUBLISHED) {
                    callbacks.PUBLISHED(participant);
                  }
                } else if (data.name == 'FAILED' || data.name == 'UNPUBLISHED') {
                  participant = participants[data.info.login];
                  if (participant != null) delete participant.streams[data.info.name];
                } else if (data.name == 'MESSAGE') {
                  if (callbacks.MESSAGE) {
                    callbacks.MESSAGE({
                      from: participants[data.info.from],
                      text: data.info.text,
                    });
                  }
                }
              }; // participant creation helper

              function participantFromState(state) {
                let participant = {};

                if (state.hasOwnProperty('login')) {
                  const { login } = state;
                  const _streamName = state.name;
                  stateStreams[_streamName] = {
                    /**
                     * Play participant stream
                     *
                     * @param {HTMLElement} display Div element stream should be displayed in
                     * @returns {Stream} Local stream object
                     * @memberof roomApi.Room.Participant.Stream
                     * @inner
                     */
                    play: play(_streamName),

                    /**
                     * Stop participant stream
                     *
                     * @memberof roomApi.Room.Participant.Stream
                     * @inner
                     */
                    stop: stop(_streamName),

                    /**
                     * Get participant stream id
                     *
                     * @returns {String} Stream id
                     * @memberof roomApi.Room.Participant.Stream
                     * @inner
                     */
                    id: id(_streamName),

                    /**
                     * Get participant stream name
                     *
                     * @returns {String} Stream name
                     * @memberof roomApi.Room.Participant.Stream
                     * @inner
                     */
                    streamName: function streamName() {
                      return _streamName;
                    },
                  };

                  if (participants[login] != null) {
                    participant = participants[login];
                  } else {
                    participant = {
                      streams: {},

                      /**
                       * Get participant name
                       *
                       * @returns {String} Participant name
                       * @memberof roomApi.Room.Participant
                       * @inner
                       */
                      name: function name() {
                        return login;
                      },

                      /**
                       * Send message to participant
                       *
                       * @param {String} message Message to send
                       * @param {Function} error Error callback
                       * @memberof roomApi.Room.Participant
                       * @inner
                       */
                      sendMessage: attachSendMessage(login),

                      /**
                       * Get participant streams
                       *
                       * @returns {Array<roomApi.Room.Participant.Stream>} Streams
                       * @memberof roomApi.Room.Participant
                       * @inner
                       */
                      getStreams: function getStreams() {
                        return util.copyObjectToArray(this.streams);
                      },
                    };
                    participants[participant.name()] = participant;
                  }
                  /**
                   * Room participant
                   *
                   * @namespace roomApi.Room.Participant.Stream
                   */
                } else {
                  participant = {
                    streams: {},
                    name: function name() {
                      return state;
                    },
                    sendMessage: attachSendMessage(state),
                    getStreams: function getStreams() {
                      return util.copyObjectToArray(this.streams);
                    },
                  };
                }

                if (Object.keys(stateStreams).length != 0) {
                  for (const k in stateStreams) {
                    if (stateStreams.hasOwnProperty(k)) {
                      participant.streams[k] = stateStreams[k];
                      delete stateStreams[k];
                    }
                  }
                }

                participants[participant.name()] = participant;
                return participant;
              }
              /**
               * Get room name
               *
               * @returns {String} Room name
               * @memberof roomApi.Room
               * @inner
               */

              const name = function name() {
                return name_;
              };
              /**
               * Leave room
               *
               * @returns {Promise<room>}
               * @memberof roomApi.Room
               * @inner
               */

              const leave = function leave() {
                return new Promise(((resolve, reject) => {
                  sendAppCommand('leave', {
                    name: name_,
                  }).then(
                    () => {
                      cleanUp();
                      resolve(room);
                    },
                    () => {
                      cleanUp();
                      reject(room);
                    },
                  );

                  function cleanUp() {
                    // clear streams
                    const streams = session.getStreams();

                    for (let i = 0; i < streams.length; i++) {
                      if (
                        streams[i].name().indexOf(`${name_}-${username_}`) !== -1
                        && streams[i].status() != STREAM_STATUS.UNPUBLISHED
                      ) {
                        streams[i].stop();
                      } else if (
                        streams[i].name().indexOf(name_) !== -1
                        && streams[i].status() != STREAM_STATUS.STOPPED
                      ) {
                        streams[i].stop();
                      }
                    }

                    delete roomHandlers[name_];
                    delete rooms[name_];
                  }
                }));
              };
              /**
               * Publish stream inside room
               *
               * @param {Object} options Stream options
               * @param {string=} options.name Stream name
               * @param {Object=} options.constraints Stream constraints
               * @param {Boolean=} options.record Enable stream recording
               * @param {Boolean=} options.cacheLocalResources Display will contain local video after stream release
               * @param {HTMLElement} options.display Div element stream should be displayed in
               * @returns {Stream}
               * @memberof roomApi.Room
               * @inner
               */

              const publish = function publish(options) {
                options.name = options.name
                  ? `${name_}-${username_}-${uuid_v1().substr(0, 4)}-${options.name}`
                  : `${name_}-${username_}-${uuid_v1().substr(0, 4)}`;
                options.cacheLocalResources = typeof options.cacheLocalResources === 'boolean'
                  ? options.cacheLocalResources
                  : true;
                options.custom = {
                  name: name_,
                };
                const stream = session.createStream(options);
                stream.publish();
                return stream;
              };
              /**
               * Add room event callback.
               *
               * @param {string} event One of {@link roomApi.events} events
               * @param {roomApi.Room~eventCallback} callback Callback function
               * @returns {roomApi.Room} room
               * @throws {TypeError} Error if event is not specified
               * @throws {Error} Error if callback is not a valid function
               * @memberof roomApi.Room
               * @inner
               */

              const on = function on(event, callback) {
                if (!event) {
                  throw new Error("Event can't be null", 'TypeError');
                }

                if (!callback || typeof callback !== 'function') {
                  throw new Error('Callback needs to be a valid function');
                }

                callbacks[event] = callback;
                return room;
              };
              /**
               * Get participants
               *
               * @returns {roomApi.Room.Participant}
               * @memberof roomApi.Room
               * @inner
               */

              const getParticipants = function getParticipants() {
                return util.copyObjectToArray(participants);
              }; // participant helpers

              function play(streamName) {
                return function (display) {
                  const stream = session.createStream({
                    name: streamName,
                    display,
                    custom: {
                      name: name_,
                    },
                  });
                  stream.play();
                  return stream;
                };
              }

              function stop(streamName) {
                return function () {
                  const streams = session.getStreams();

                  for (let i = 0; i < streams.length; i++) {
                    if (
                      streams[i].name() == streamName
                      && streams[i].status() != STREAM_STATUS.UNPUBLISHED
                    ) {
                      streams[i].stop();
                    }
                  }
                };
              }

              function id(streamName) {
                return function () {
                  const streams = session.getStreams();

                  for (let i = 0; i < streams.length; i++) {
                    if (streams[i].name() == streamName) return streams[i].id();
                  }
                };
              }

              function attachSendMessage(recipientName) {
                return function (text, error) {
                  const message = {
                    roomConfig: {
                      name: name_,
                    },
                    to: recipientName,
                    text,
                  };
                  sendAppCommand('sendMessage', message).then(
                    () => {},
                    () => {
                      if (error) {
                        error();
                      }
                    },
                  );
                };
              } // sendData helper

              function sendAppCommand(commandName, data) {
                const command = {
                  command: commandName,
                  options: data,
                };
                return session.sendData(command);
              }

              sendAppCommand('join', {
                name: name_,
              }).then(
                () => {},
                (info) => {
                  if (callbacks.FAILED) {
                    callbacks.FAILED(room, info.info);
                  }
                },
              );
              room.name = name;
              room.leave = leave;
              room.publish = publish;
              room.getParticipants = getParticipants;
              room.on = on;
              rooms[name_] = room;
              return room;
            };

            exports = {
              disconnect,
              id,
              getServerUrl,
              username,
              status,
              getRooms,
              join,
              on,
            };
            return exports;
          };

          const events = {
            STATE: 'STATE',
            JOINED: 'JOINED',
            LEFT: 'LEFT',
            PUBLISHED: 'PUBLISHED',
            MESSAGE: 'MESSAGE',
            FAILED: 'FAILED',
          };
          module.exports = {
            connect: appSession,
            events,
          };
        },
        {
          './constants': 28, './util': 33, 'promise-polyfill': 4, 'uuid/v1': 11,
        },
      ],
      33: [
        function (require, module, exports) {
          module.exports = {
            isEmptyObject: function isEmptyObject(obj) {
              for (const name in obj) {
                return false;
              }

              return true;
            },

            /**
             * Copy values of object own properties to array.
             *
             * @param obj
             * @returns {Array}
             */
            copyObjectToArray: function copyObjectToArray(obj) {
              const ret = [];

              for (const prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                  ret.push(obj[prop]);
                }
              }

              return ret;
            },

            /**
             * Copy src properties to dst object.
             * Will overwrite dst prop with src prop in case of dst prop exist.
             */
            copyObjectPropsToAnotherObject: function copyObjectPropsToAnotherObject(src, dst) {
              for (const prop in src) {
                if (src.hasOwnProperty(prop)) {
                  dst[prop] = src[prop];
                }
              }
            },
            browser: function browser() {
              let browser;
              const isAndroid = navigator.userAgent.toLowerCase().indexOf('android') > -1;
              if (isAndroid) browser = 'Android';
              const isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
              if (isiOS) browser = 'iOS'; // Opera 8.0+

              const isOpera = (!!window.opr && !!opr.addons)
                || !!window.opera
                || navigator.userAgent.indexOf(' OPR/') >= 0;
              if (isOpera) browser = 'Opera'; // Firefox 1.0+

              const isFirefox = typeof InstallTrigger !== 'undefined';
              if (isFirefox) browser = 'Firefox'; // At least Safari 3+: "[object HTMLElementConstructor]"

              const isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
              if (isSafari) browser = 'Safari'; // Internet Explorer 6-11

              const isIE =
                /* @cc_on!@ */
                false || !!document.documentMode;
              if (isIE) browser = 'IE'; // Edge 20+

              const isEdge = !isIE && !!window.StyleMedia;
              if (isEdge) browser = 'Edge'; // Chrome 1+

              const isChrome = !!window.chrome
                && /Chrome/.test(navigator.userAgent)
                && /Google Inc/.test(navigator.vendor)
                && !/OPR/.test(navigator.userAgent);
              if (isChrome) browser = 'Chrome';
              return browser;
            },
            processRtcStatsReport: function processRtcStatsReport(browser, report) {
              let result = {};

              if (browser == 'chrome') {
                /**
                 * Report types: googComponent, googCandidatePair, googCertificate, googLibjingleSession, googTrack, ssrc
                 */
                let gotResult = false;

                if (report.type && report.type == 'googCandidatePair') {
                  // check if this is active pair
                  if (report.googActiveConnection == 'true') {
                    gotResult = true;
                  }
                }

                if (report.type && report.type == 'ssrc') {
                  gotResult = true;
                }

                if (gotResult) {
                  for (var k in report) {
                    if (report.hasOwnProperty(k)) {
                      result[k] = report[k];
                    }
                  }
                }

                return result;
              } if (browser == 'firefox') {
                /**
                 * RTCStatsReport http://mxr.mozilla.org/mozilla-central/source/dom/webidl/RTCStatsReport.webidl
                 */
                if (
                  report.type
                  && (report.type == 'outboundrtp' || report.type == 'inboundrtp')
                  && report.id.indexOf('rtcp') == -1
                ) {
                  result = {};

                  for (var k in report) {
                    if (report.hasOwnProperty(k)) {
                      result[k] = report[k];
                    }
                  }
                }

                return result;
              }
              return result;
            },
            Browser: {
              isIE: function isIE() {
                return (
                  /* @cc_on!@ */
                  false || !!document.documentMode
                );
              },
              isFirefox: function isFirefox() {
                return typeof InstallTrigger !== 'undefined';
              },
              isChrome: function isChrome() {
                return (
                  !!window.chrome
                  && /Chrome/.test(navigator.userAgent)
                  && /Google Inc/.test(navigator.vendor)
                  && !/OPR/.test(navigator.userAgent)
                );
              },
              isEdge: function isEdge() {
                return !isIE && !!window.StyleMedia;
              },
              isOpera: function isOpera() {
                return (
                  (!!window.opr && !!opr.addons)
                  || !!window.opera
                  || navigator.userAgent.indexOf(' OPR/') >= 0
                );
              },
              isiOS: function isiOS() {
                return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
              },
              isSafari: function isSafari() {
                const userAgent = navigator.userAgent.toLowerCase();
                return (
                  /(safary|applewebkit)/i.test(userAgent)
                  && !userAgent.includes('chrome')
                  && !userAgent.includes('android')
                );
              },
              isAndroid: function isAndroid() {
                return navigator.userAgent.toLowerCase().indexOf('android') > -1;
              },
              isSafariWebRTC: function isSafariWebRTC() {
                return navigator.mediaDevices && this.isSafari();
              },
              isSamsungBrowser: function isSamsungBrowser() {
                return /SamsungBrowser/i.test(navigator.userAgent);
              },
              isAndroidFirefox: function isAndroidFirefox() {
                return this.isAndroid() && /Firefox/i.test(navigator.userAgent);
              },
            },
            SDP: {
              matchPrefix: function matchPrefix(sdp, prefix) {
                const parts = sdp
                  .trim()
                  .split('\n')
                  .map((line) => line.trim());
                return parts.filter((line) => line.indexOf(prefix) === 0);
              },
              writeFmtp: function writeFmtp(sdp, param, codec) {
                const sdpArray = sdp.split('\n');
                let i;

                for (i = 0; i < sdpArray.length; i++) {
                  if (sdpArray[i].search(codec) != -1 && sdpArray[i].indexOf('a=rtpmap') == 0) {
                    sdpArray[i]
                      += `\na=fmtp:${sdpArray[i].match(/[0-9]+/)[0]} ${param}\r`;
                  }
                } // normalize sdp after modifications

                let result = '';

                for (i = 0; i < sdpArray.length; i++) {
                  if (sdpArray[i] != '') {
                    result += `${sdpArray[i]}\n`;
                  }
                }

                return result;
              },
            },
            logger: {
              init: function init(verbosity, enablePushLogs, customLogger, enableLogs) {
                switch (verbosity.toUpperCase()) {
                  case 'DEBUG':
                    this.verbosity = 3;
                    break;

                  case 'INFO':
                    this.verbosity = 2;
                    break;

                  case 'ERROR':
                    this.verbosity = 0;
                    break;

                  case 'WARN':
                    this.verbosity = 1;
                    break;

                  case 'TRACE':
                    this.verbosity = 4;
                    break;

                  default:
                    this.verbosity = 2;
                }

                this.date = function () {
                  return new Date().toTimeString().split(' ')[0];
                };

                this.enablePushLogs = enablePushLogs;
                let delayedLogs = [];
                this.customLogger = customLogger;
                this.enableLogs = enableLogs;

                this.pushLogs = function (log) {
                  if (this.wsConnection && this.enablePushLogs) {
                    if (delayedLogs.length) {
                      for (let i = 0; i < delayedLogs.length; i++) {
                        this.wsConnection.send(
                          JSON.stringify({
                            message: 'pushLogs',
                            data: [
                              {
                                logs: delayedLogs[i],
                              },
                            ],
                          }),
                        );
                      }
                    }

                    delayedLogs = [];
                    this.wsConnection.send(
                      JSON.stringify({
                        message: 'pushLogs',
                        data: [
                          {
                            logs: log,
                          },
                        ],
                      }),
                    );
                  } else {
                    // Save logs to send it later
                    delayedLogs.push(log);
                  }
                };
              },
              info: function info(src, text) {
                if (!this.enableLogs) {
                  return;
                }

                const prefix = `${this.date()} INFO ${src} - `;
                this.pushLogs(`${prefix + JSON.stringify(text)}\n`);

                if (this.verbosity >= 2) {
                  if (this.customLogger != null) {
                    this.customLogger.info(text);
                  } else {
                    console.log(prefix, text);
                  }
                }
              },
              debug: function debug(src, text) {
                if (!this.enableLogs) {
                  return;
                }

                const prefix = `${this.date()} DEBUG ${src} - `;
                this.pushLogs(`${prefix + JSON.stringify(text)}\n`);

                if (this.verbosity >= 3) {
                  if (this.customLogger != null) {
                    this.customLogger.debug(text);
                  } else {
                    console.log(prefix, text);
                  }
                }
              },
              trace: function trace(src, text) {
                if (!this.enableLogs) {
                  return;
                }

                const prefix = `${this.date()} TRACE ${src} - `;
                this.pushLogs(`${prefix + JSON.stringify(text)}\n`);

                if (this.verbosity >= 4) {
                  if (this.customLogger != null) {
                    this.customLogger.trace(text);
                  } else {
                    console.log(prefix, text);
                  }
                }
              },
              warn: function warn(src, text) {
                if (!this.enableLogs) {
                  return;
                }

                const prefix = `${this.date()} WARN ${src} - `;
                this.pushLogs(`${prefix + JSON.stringify(text)}\n`);

                if (this.verbosity >= 1) {
                  if (this.customLogger != null) {
                    this.customLogger.warn(text);
                  } else {
                    console.warn(prefix, text);
                  }
                }
              },
              error: function error(src, text) {
                if (!this.enableLogs) {
                  return;
                }

                const prefix = `${this.date()} ERROR ${src} - `;
                this.pushLogs(`${prefix + JSON.stringify(text)}\n`);

                if (this.verbosity >= 0) {
                  if (this.customLogger != null) {
                    this.customLogger.error(text);
                  } else {
                    console.error(prefix, text);
                  }
                }
              },
              setEnableLogs: function setEnableLogs(enableLogs) {
                this.enableLogs = enableLogs;
              },
              setCustomLogger: function setCustomLogger(customLogger) {
                this.customLogger = customLogger;
              },
              setConnection: function setConnection(connection) {
                this.wsConnection = connection;
              },
              setPushLogs: function setPushLogs(pushLogs) {
                this.enablePushLogs = pushLogs;
              },
              setLevel: function setLevel(level) {
                switch (level.toUpperCase()) {
                  case 'DEBUG':
                    this.verbosity = 3;
                    break;

                  case 'INFO':
                    this.verbosity = 2;
                    break;

                  case 'ERROR':
                    this.verbosity = 0;
                    break;

                  case 'WARN':
                    this.verbosity = 1;
                    break;

                  case 'TRACE':
                    this.verbosity = 4;
                    break;

                  default:
                    this.verbosity = 2;
                }
              },
            },
            stripCodecs: function stripCodecs(sdp, codecs) {
              if (!codecs.length) return sdp;
              const sdpArray = sdp.split('\n');
              const codecsArray = codecs.split(','); // search and delete codecs line

              const pt = [];
              let i;

              for (var p = 0; p < codecsArray.length; p++) {
                console.log(`Searching for codec ${codecsArray[p]}`);

                for (i = 0; i < sdpArray.length; i++) {
                  if (
                    sdpArray[i].search(new RegExp(codecsArray[p], 'i')) != -1
                    && sdpArray[i].indexOf('a=rtpmap') == 0
                  ) {
                    console.log(`${codecsArray[p]} detected`);
                    pt.push(sdpArray[i].match(/[0-9]+/)[0]);
                    sdpArray[i] = '';
                  }
                }
              }

              if (pt.length) {
                // searching for fmtp
                for (p = 0; p < pt.length; p++) {
                  for (i = 0; i < sdpArray.length; i++) {
                    if (
                      sdpArray[i].search(`a=fmtp:${pt[p]}`) != -1
                      || sdpArray[i].search(`a=rtcp-fb:${pt[p]}`) != -1
                    ) {
                      sdpArray[i] = '';
                    }
                  }
                } // delete entries from m= line

                for (i = 0; i < sdpArray.length; i++) {
                  if (sdpArray[i].search('m=audio') != -1 || sdpArray[i].search('m=video') != -1) {
                    const mLineSplitted = sdpArray[i].split(' ');
                    let newMLine = '';

                    for (let m = 0; m < mLineSplitted.length; m++) {
                      if (pt.indexOf(mLineSplitted[m].trim()) == -1 || m <= 2) {
                        newMLine += mLineSplitted[m];

                        if (m < mLineSplitted.length - 1) {
                          newMLine += ' ';
                        }
                      }
                    }

                    sdpArray[i] = newMLine;
                  }
                }
              } // normalize sdp after modifications

              let result = '';

              for (i = 0; i < sdpArray.length; i++) {
                if (sdpArray[i] != '') {
                  result += `${sdpArray[i]}\n`;
                }
              }

              return result;
            },
            getCurrentCodecAndSampleRate: function getCurrentCodecAndSampleRate(sdp, mediaType) {
              const rows = sdp.split('\n');
              let codecPt;

              for (let i = 0; i < rows.length; i++) {
                if (codecPt && rows[i].indexOf(`a=rtpmap:${codecPt}`) != -1) {
                  const ret = {};
                  ret.name = rows[i].split(' ')[1].split('/')[0];
                  ret.sampleRate = rows[i].split(' ')[1].split('/')[1];
                  return ret;
                } // WCS-2136. WebRTC statistics doesn't work for VP8

                if (rows[i].indexOf(`m=${mediaType}`) != -1) {
                  codecPt = rows[i].split(' ')[3].trim();
                }
              }
            },
          };
        },
        {},
      ],
      34: [
        function (require, module, exports) {
          function _typeof(obj) {
            '@babel/helpers - typeof';

            if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
              _typeof = function _typeof(obj) {
                return typeof obj;
              };
            } else {
              _typeof = function _typeof(obj) {
                return obj
                  && typeof Symbol === 'function'
                  && obj.constructor === Symbol
                  && obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj;
              };
            }
            return _typeof(obj);
          }

          const { browserDetails } = require('webrtc-adapter').default;

          const uuid_v1 = require('uuid/v1');

          const util = require('./util');

          const connections = {};
          const LOCAL_CACHED_VIDEO = '-LOCAL_CACHED_VIDEO';
          const REMOTE_CACHED_VIDEO = '-REMOTE_CACHED_VIDEO';
          let extensionId;
          let defaultConstraints;
          let logger;
          const LOG_PREFIX = 'webrtc';
          let audioContext;
          let createMicGainNode;
          let microphoneGain;

          const constants = require('./constants');

          const validBrowsers = ['firefox', 'chrome', 'safari']; // list of presented video input devices

          const videoCams = []; // list of presented audio input devices

          const mics = [];

          const createConnection = function createConnection(options) {
            return new Promise(((resolve, reject) => {
              const { id } = options;
              const connectionConfig = options.connectionConfig || {
                iceServers: [],
              };
              const connectionConstraints = options.connectionConstraints || {};

              if (!connectionConstraints.hasOwnProperty('optional')) {
                connectionConstraints.optional = [
                  {
                    DtlsSrtpKeyAgreement: true,
                  },
                ];
              }

              connectionConfig.bundlePolicy = 'max-compat';
              const connection = new RTCPeerConnection(connectionConfig, connectionConstraints); // unidirectional display

              const { display } = options; // bidirectional local

              const { localDisplay } = options; // bidirectional remote

              const { remoteDisplay } = options;
              const { bidirectional } = options;
              let localVideo; // tweak for custom video players #WCS-1511

              let { remoteVideo } = options;
              let switchCamCount = 0;
              let switchMicCount = 0;
              const { customStream } = options;
              let currentAudioTrack;
              let currentVideoTrack;
              let systemSoundTrack;
              const constraints = options.constraints ? options.constraints : {};
              let screenShare = false;
              const { playoutDelay } = options;

              if (bidirectional) {
                localVideo = getCacheInstance(localDisplay);

                if (localVideo) {
                  // made for safari, if sip call without audio and video, because function playFirstVideo() creates a video element
                  if (localVideo.srcObject) {
                    localVideo.id = `${id}-local`;
                    connection.addStream(localVideo.srcObject);
                  } else {
                    localVideo = null;
                  }
                }

                remoteVideo = getCacheInstance(remoteDisplay);

                if (!remoteVideo) {
                  remoteVideo = document.createElement('video');
                  remoteDisplay.appendChild(remoteVideo);
                }

                remoteVideo.id = `${id}-remote`;

                if (options.audioOutputId && typeof remoteVideo.setSinkId !== 'undefined') {
                  remoteVideo.setSinkId(options.audioOutputId);
                }
                /**
                 * Workaround for Android 6, 7, Chrome 61.
                 * https://bugs.chromium.org/p/chromium/issues/detail?id=769622
                 */

                remoteVideo.style = 'border-radius: 1px';
              } else {
                // tweak for custom video players. In order to put MediaStream in srcObject #WCS-1511
                if (!remoteVideo) {
                  const cachedVideo = getCacheInstance(display);

                  if (
                    !cachedVideo
                    || cachedVideo.id.indexOf(REMOTE_CACHED_VIDEO) !== -1
                    || !cachedVideo.srcObject
                  ) {
                    if (cachedVideo) {
                      remoteVideo = cachedVideo;
                    } else {
                      remoteVideo = document.createElement('video');
                      display.appendChild(remoteVideo);
                    }

                    remoteVideo.id = id;

                    if (options.audioOutputId && typeof remoteVideo.setSinkId !== 'undefined') {
                      remoteVideo.setSinkId(options.audioOutputId);
                    }
                    /**
                     * Workaround for Android 6, 7, Chrome 61.
                     * https://bugs.chromium.org/p/chromium/issues/detail?id=769622
                     */

                    remoteVideo.style = 'border-radius: 1px';
                  } else {
                    localVideo = cachedVideo;
                    localVideo.id = id;
                    connection.addStream(localVideo.srcObject);
                  }
                }
              }

              if (localVideo) {
                const videoTrack = localVideo.srcObject.getVideoTracks()[0];

                if (videoTrack) {
                  videoCams.forEach((cam, index) => {
                    if (videoTrack.label === cam.label) {
                      switchCamCount = index;
                    }
                  });
                }

                const audioTrack = localVideo.srcObject.getAudioTracks()[0];

                if (audioTrack) {
                  mics.forEach((mic, index) => {
                    if (audioTrack.label === mic.label) {
                      switchMicCount = index;
                    }
                  });
                }
              }

              connection.ontrack = function (event) {
                if (remoteVideo) {
                  remoteVideo.srcObject = event.streams[0];

                  remoteVideo.onloadedmetadata = function (e) {
                    if (remoteVideo) {
                      remoteVideo.play().catch((e) => {
                        if (validBrowsers.includes(browserDetails.browser)) {
                          // WCS-1698. fixed autoplay in chromium based browsers
                          // WCS-2375. fixed autoplay in ios safari
                          logger.info(
                            LOG_PREFIX,
                            'Autoplay detected! Trying to play a video with a muted sound...',
                          );
                          remoteVideo.muted = true;
                          remoteVideo.play();
                        } else {
                          logger.error(LOG_PREFIX, e);
                        }
                      });
                    }
                  };
                } // WCS-2904 check playoutDelay to prevent TypeError in some browsers

                if (playoutDelay !== undefined) {
                  // WCS-2771 add playback delay
                  connection.getReceivers().forEach((track) => {
                    if (track.playoutDelayHint === undefined) {
                      logger.warn('playout delay unsupported');
                    }

                    track.playoutDelayHint = playoutDelay;
                  });
                }
              };

              connection.onremovestream = function (event) {
                if (remoteVideo) {
                  remoteVideo.pause();
                }
              };

              connection.onsignalingstatechange = function (event) {};

              connection.oniceconnectionstatechange = function (event) {};

              connection.onicecandidate = function (event) {
                if (event.candidate != null) {
                  logger.debug(LOG_PREFIX, `Added icecandidate: ${event.candidate.candidate}`);
                }
              };

              const state = function state() {
                return connection.signalingState;
              };

              const close = function close(cacheCamera) {
                if (remoteVideo) {
                  removeVideoElement(remoteVideo); // tweak for custom video players #WCS-1511

                  if (!options.remoteVideo) {
                    remoteVideo.id += REMOTE_CACHED_VIDEO;
                  }

                  remoteVideo = null;
                }

                if (localVideo && !getCacheInstance(localDisplay || display) && cacheCamera) {
                  localVideo.id += LOCAL_CACHED_VIDEO;
                  unmuteAudio();
                  unmuteVideo();
                  localVideo = null;
                } else if (localVideo) {
                  localVideo.id += LOCAL_CACHED_VIDEO;
                  removeVideoElement(localVideo);
                  localVideo = null;
                }

                if (connection.signalingState !== 'closed') {
                  connection.close();
                }

                delete connections[id];
              };

              const createOffer = function createOffer(options) {
                return new Promise(((resolve, reject) => {
                  let hasAudio = true;
                  let hasVideo = true;

                  if (localVideo) {
                    if (!localVideo.srcObject.getAudioTracks()[0]) {
                      hasAudio = false;
                    }

                    if (!localVideo.srcObject.getVideoTracks()[0]) {
                      hasVideo = false;
                      options.receiveVideo = false;
                    }
                  } else if (
                    browserDetails.browser == 'safari'
                    && !connection.getTransceivers().length
                  ) {
                    if (options.receiveAudio) {
                      connection.addTransceiver('audio', {
                        direction: 'recvonly',
                      });
                    }

                    if (options.receiveVideo) {
                      connection.addTransceiver('video', {
                        direction: 'recvonly',
                      });
                    }
                  }

                  const constraints = {
                    offerToReceiveAudio: options.receiveAudio ? 1 : 0,
                    offerToReceiveVideo: options.receiveVideo ? 1 : 0,
                  }; // create offer and set local sdp

                  connection.createOffer(constraints).then((offer) => {
                    // WCS-2919 Workaround for Chromium bug to play stereo
                    if (options.stereo) {
                      offer.sdp = offer.sdp.replace(
                        'minptime=10',
                        'minptime=10;stereo=1;sprop-stereo=1',
                      );
                    }

                    connection.setLocalDescription(offer).then(() => {
                      const o = {};
                      o.sdp = util.stripCodecs(offer.sdp, options.stripCodecs);
                      o.hasAudio = hasAudio;
                      o.hasVideo = hasVideo;
                      resolve(o);
                    });
                  });
                }));
              };

              const createAnswer = function createAnswer(options) {
                return new Promise(((resolve, reject) => {
                  // create offer and set local sdp
                  connection.createAnswer().then((answer) => {
                    connection.setLocalDescription(answer).then(() => {
                      resolve(util.stripCodecs(answer.sdp, options.stripCodecs));
                    });
                  });
                }));
              };

              const changeAudioCodec = function changeAudioCodec(codec) {
                return false;
              };

              const setRemoteSdp = function setRemoteSdp(sdp) {
                logger.debug(LOG_PREFIX, 'setRemoteSDP:');
                logger.debug(LOG_PREFIX, sdp);
                return new Promise(((resolve, reject) => {
                  let sdpType;

                  if (connection.signalingState == 'have-local-offer') {
                    sdpType = 'answer';
                  } else {
                    sdpType = 'offer';
                  }

                  const rtcSdp = new RTCSessionDescription({
                    type: sdpType,
                    sdp,
                  });
                  connection
                    .setRemoteDescription(rtcSdp)
                    .then(() => {
                      // use in edge for ice
                      if (browserDetails.browser == 'edge') {
                        // var sdpArray = sdp.split("\n");
                        // var i;
                        // for (i = 0; i < sdpArray.length; i++) {
                        //     if (sdpArray[i].indexOf("m=video") == 0) {
                        //         break;
                        //     }
                        //     if (sdpArray[i].indexOf("a=candidate:1 1") == 0 || sdpArray[i].indexOf("a=candidate:2 1") == 0) {
                        //         var rtcIceCandidate = new RTCIceCandidate({
                        //             candidate: sdpArray[i],
                        //             sdpMid: "audio",
                        //             sdpMLineIndex: 0
                        //         });
                        //         connection.addIceCandidate(rtcIceCandidate);
                        //     }
                        // }
                        // var video = false;
                        // for (i = 0; i < sdpArray.length; i++) {
                        //     if (sdpArray[i].indexOf("m=video") == 0) {
                        //         video = true;
                        //     }
                        //     if (video && (sdpArray[i].indexOf("a=candidate:1 1") == 0 || sdpArray[i].indexOf("a=candidate:2 1") == 0)) {
                        //         var rtcIceCandidate2 = new RTCIceCandidate({
                        //             candidate: sdpArray[i],
                        //             sdpMid: "video",
                        //             sdpMLineIndex: 1
                        //         });
                        //         connection.addIceCandidate(rtcIceCandidate2);
                        //     }
                        // }
                        // WCS-2204. fixed InvalidStateError
                        // connection.addIceCandidate(null);
                      }

                      resolve();
                    })
                    .catch((error) => {
                      reject(error);
                    });
                }));
              };

              const setAudioOutputId = function setAudioOutputId(id) {
                if (remoteVideo) {
                  // WCS-2063. fixed output device switch
                  if (browserDetails.browser == 'edge') {
                    const { srcObject } = remoteVideo;
                    remoteVideo.srcObject = null;
                    const res = remoteVideo.setSinkId(id);
                    remoteVideo.srcObject = srcObject;
                    return res;
                  }

                  return remoteVideo.setSinkId(id);
                }
              };

              const getVolume = function getVolume() {
                if (
                  remoteVideo
                  && remoteVideo.srcObject
                  && remoteVideo.srcObject.getAudioTracks().length > 0
                ) {
                  // return remoteVideo.srcObject.getAudioTracks()[0].volume * 100;
                  return remoteVideo.volume * 100;
                }

                return -1;
              };

              const setVolume = function setVolume(volume) {
                if (
                  remoteVideo
                  && remoteVideo.srcObject
                  && remoteVideo.srcObject.getAudioTracks().length > 0
                ) {
                  remoteVideo.volume = volume / 100;
                }
              };

              const unmuteRemoteAudio = function unmuteRemoteAudio() {
                if (
                  remoteVideo
                  && remoteVideo.srcObject
                  && remoteVideo.srcObject.getAudioTracks().length > 0
                ) {
                  remoteVideo.muted = false;
                }
              };

              const muteRemoteAudio = function muteRemoteAudio() {
                if (
                  remoteVideo
                  && remoteVideo.srcObject
                  && remoteVideo.srcObject.getAudioTracks().length > 0
                ) {
                  remoteVideo.muted = true;
                }
              };

              const isRemoteAudioMuted = function isRemoteAudioMuted() {
                if (
                  remoteVideo
                  && remoteVideo.srcObject
                  && remoteVideo.srcObject.getAudioTracks().length > 0
                ) {
                  return remoteVideo.muted;
                }

                return true;
              };

              const setMicrophoneGain = function setMicrophoneGain(volume) {
                if (microphoneGain) {
                  microphoneGain.gain.value = volume / 100;
                }
              };

              const muteAudio = function muteAudio() {
                if (
                  localVideo
                  && localVideo.srcObject
                  && localVideo.srcObject.getAudioTracks().length > 0
                ) {
                  localVideo.srcObject.getAudioTracks()[0].enabled = false;
                }
              };

              var unmuteAudio = function unmuteAudio() {
                if (
                  localVideo
                  && localVideo.srcObject
                  && localVideo.srcObject.getAudioTracks().length > 0
                ) {
                  localVideo.srcObject.getAudioTracks()[0].enabled = true;
                }
              };

              const isAudioMuted = function isAudioMuted() {
                if (
                  localVideo
                  && localVideo.srcObject
                  && localVideo.srcObject.getAudioTracks().length > 0
                ) {
                  return !localVideo.srcObject.getAudioTracks()[0].enabled;
                }

                return true;
              };

              const muteVideo = function muteVideo() {
                if (
                  localVideo
                  && localVideo.srcObject
                  && localVideo.srcObject.getVideoTracks().length > 0
                ) {
                  localVideo.srcObject.getVideoTracks()[0].enabled = false;
                }
              };

              var unmuteVideo = function unmuteVideo() {
                if (
                  localVideo
                  && localVideo.srcObject
                  && localVideo.srcObject.getVideoTracks().length > 0
                ) {
                  localVideo.srcObject.getVideoTracks()[0].enabled = true;
                }
              };

              const isVideoMuted = function isVideoMuted() {
                if (
                  localVideo
                  && localVideo.srcObject
                  && localVideo.srcObject.getVideoTracks().length > 0
                ) {
                  return !localVideo.srcObject.getVideoTracks()[0].enabled;
                }

                return true;
              };

              const getStat = function getStat(callbackFn, nativeStats) {
                const { browser } = browserDetails;
                const result = {
                  outboundStream: {},
                  inboundStream: {},
                  otherStats: [],
                };

                if (connection && validBrowsers.includes(browser)) {
                  if (nativeStats) {
                    return connection.getStats(null);
                  }
                  connection.getStats(null).then((stat) => {
                    if (stat) {
                      stat.forEach((report) => {
                        if (!report.isRemote) {
                          if (report.type == 'outbound-rtp') {
                            fillStatObject(result.outboundStream, report);

                            if (report.mediaType == 'video') {
                              const vSettings = localVideo.srcObject
                                .getVideoTracks()[0]
                                .getSettings();
                              result.outboundStream[report.mediaType].height = vSettings.height;
                              result.outboundStream[report.mediaType].width = vSettings.width;
                            }
                          } else if (report.type == 'inbound-rtp') {
                            fillStatObject(result.inboundStream, report);

                            if (report.mediaType == 'video' && remoteVideo != undefined) {
                              result.inboundStream[report.mediaType].height = remoteVideo.videoHeight;
                              result.inboundStream[report.mediaType].width = remoteVideo.videoWidth;
                            }
                          }
                        }
                      });
                    }

                    callbackFn(result);
                  });
                }
              };

              function fillStatObject(obj, report) {
                const { mediaType } = report;
                obj[mediaType] = {}; // WCS-1922, currentRemoteDescription - browser compatibilitySection: Chrome 70, FF 57, Safari 11

                const description = connection.currentRemoteDescription != undefined
                  ? connection.currentRemoteDescription
                  : connection.remoteDescription;
                const codec = util.getCurrentCodecAndSampleRate(description.sdp, mediaType);
                obj[mediaType].codec = codec.name;
                obj[mediaType].codecRate = codec.sampleRate;
                Object.keys(report).forEach((key) => {
                  if (
                    key.startsWith('bytes')
                    || key.startsWith('packets')
                    || key.indexOf('Count') != -1
                  ) {
                    obj[mediaType][key] = report[key];
                  }
                });
              }

              const fullScreen = function fullScreen() {
                const video = document.getElementById(id);

                if (video) {
                  if (
                    !document.fullscreenElement
                    && !document.mozFullScreenElement
                    && !document.webkitFullscreenElement
                    && !document.msFullscreenElement
                  ) {
                    if (video.requestFullscreen) {
                      video.requestFullscreen();
                    } else if (video.msRequestFullscreen) {
                      video.msRequestFullscreen();
                    } else if (video.mozRequestFullScreen) {
                      video.mozRequestFullScreen();
                    } else if (video.webkitRequestFullscreen) {
                      video.webkitRequestFullscreen();
                    } else if (video.webkitEnterFullscreen) {
                      video.webkitEnterFullscreen(); // hack for iOS safari. Video is getting paused when switching from fullscreen to normal mode.

                      video.addEventListener('pause', () => {
                        video.play();
                      });
                    }
                  } else if (document.exitFullscreen) {
                    document.exitFullscreen();
                  } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                  } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                  } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                  }
                }
              };

              const switchCam = function switchCam(deviceId) {
                return new Promise(((resolve, reject) => {
                  if (
                    localVideo
                    && localVideo.srcObject
                    && videoCams.length > 1
                    && !customStream
                    && !screenShare
                  ) {
                    connection.getSenders().forEach((sender) => {
                      if (sender.track.kind === 'audio') return;
                      switchCamCount = (switchCamCount + 1) % videoCams.length;
                      sender.track.stop();
                      const cam = typeof deviceId !== 'undefined' ? deviceId : videoCams[switchCamCount].id; // use the settings that were set during connection initiation

                      const clonedConstraints = { ...constraints };
                      clonedConstraints.video.deviceId = {
                        exact: cam,
                      };
                      clonedConstraints.audio = false;
                      navigator.mediaDevices
                        .getUserMedia(clonedConstraints)
                        .then((newStream) => {
                          const newVideoTrack = newStream.getVideoTracks()[0];
                          newVideoTrack.enabled = localVideo.srcObject.getVideoTracks()[0].enabled;
                          const audioTrack = localVideo.srcObject.getAudioTracks()[0];
                          sender.replaceTrack(newVideoTrack);
                          localVideo.srcObject = newStream; // On Safari mobile _newStream_ doesn't contain audio track, so we need to add track from previous stream

                          if (localVideo.srcObject.getAudioTracks().length == 0 && audioTrack) {
                            localVideo.srcObject.addTrack(audioTrack);
                          }

                          logger.info(`Switch camera to ${cam}`);
                          resolve(cam);
                        })
                        .catch((reason) => {
                          logger.error(LOG_PREFIX, reason);
                          reject(reason);
                        });
                    });
                  } else {
                    reject(constants.ERROR_INFO.CAN_NOT_SWITCH_CAM);
                  }
                }));
              };

              const switchMic = function switchMic(deviceId) {
                return new Promise(((resolve, reject) => {
                  if (localVideo && localVideo.srcObject && mics.length > 1 && !customStream) {
                    connection.getSenders().forEach((sender) => {
                      if (sender.track.kind === 'video') return;
                      switchMicCount = (switchMicCount + 1) % mics.length;
                      sender.track.stop();

                      if (microphoneGain) {
                        microphoneGain.release();
                      }

                      const mic = typeof deviceId !== 'undefined' ? deviceId : mics[switchMicCount].id; // use the settings that were set during connection initiation

                      const clonedConstraints = { ...constraints };
                      clonedConstraints.audio.deviceId = {
                        exact: mic,
                      };
                      clonedConstraints.video = false;
                      navigator.mediaDevices
                        .getUserMedia(clonedConstraints)
                        .then((newStream) => {
                          if (microphoneGain) {
                            const currentGain = microphoneGain.gain.value;
                            microphoneGain = createGainNode(newStream);
                            microphoneGain.gain.value = currentGain;
                          }

                          const newAudioTrack = newStream.getAudioTracks()[0];
                          newAudioTrack.enabled = localVideo.srcObject.getAudioTracks()[0].enabled;
                          currentAudioTrack = newAudioTrack;
                          const videoTrack = localVideo.srcObject.getVideoTracks()[0];

                          if (systemSoundTrack) {
                            const mixedTrack = mixAudioTracks(
                              new MediaStream([newAudioTrack]),
                              new MediaStream([systemSoundTrack]),
                            );
                            mixedTrack.enabled = newAudioTrack.enabled;
                            sender.replaceTrack(mixedTrack);
                            localVideo.srcObject = new MediaStream([mixedTrack]);
                          } else {
                            sender.replaceTrack(newAudioTrack);
                            localVideo.srcObject = newStream;
                          }

                          if (videoTrack) {
                            localVideo.srcObject.addTrack(videoTrack);
                          }

                          logger.info(`Switch mic to ${mic}`);
                          resolve(mic);
                        })
                        .catch((reason) => {
                          logger.error(LOG_PREFIX, reason);
                          reject(reason);
                        });
                    });
                  } else {
                    reject(constants.ERROR_INFO.CAN_NOT_SWITCH_MIC);
                  }
                }));
              };

              const switchToScreen = function switchToScreen(source, woExtension) {
                return new Promise(((resolve, reject) => {
                  if (!screenShare) {
                    const clonedConstraints = {
                      video: { ...constraints.video },
                      audio: { ...constraints.audio },
                    };

                    if (browserDetails.browser === 'firefox') {
                      clonedConstraints.video.mediaSource = source;
                    }

                    if (window.chrome && woExtension) {
                      getScreenDeviceIdWoExtension(clonedConstraints).then((
                        screenSharingConstraints,
                      ) => {
                        navigator.mediaDevices
                          .getDisplayMedia(screenSharingConstraints)
                          .then((stream) => {
                            processScreenStream(stream, resolve);
                          })
                          .catch(reject);
                      });
                      return;
                    }

                    getScreenDeviceId(clonedConstraints)
                      .then((screenSharingConstraints) => {
                        clonedConstraints.sourceId = screenSharingConstraints.sourceId;

                        if (screenSharingConstraints.audioMandatory) {
                          clonedConstraints.audio = {
                            mandatory: screenSharingConstraints.audioMandatory,
                            optional: [],
                          };
                        } else {
                          delete clonedConstraints.audio;
                        }

                        if (browserDetails.browser == 'firefox') {
                          clonedConstraints.video = screenSharingConstraints;
                        } else if (browserDetails.browser == 'chrome') {
                          delete clonedConstraints.video;
                          clonedConstraints.video = {
                            mandatory: screenSharingConstraints.mandatory,
                          };
                        }

                        navigator.mediaDevices
                          .getUserMedia(clonedConstraints)
                          .then((stream) => {
                            processScreenStream(stream, resolve);
                          })
                          .catch((reason) => {
                            logger.error(reason);
                            reject(reason);
                          });
                      })
                      .catch((reason) => {
                        logger.error(reason);
                        reject(reason);
                      });
                  }
                }));
              };

              var processScreenStream = function processScreenStream(stream, resolve) {
                connection.getSenders().forEach((sender) => {
                  if (sender.track.kind === 'audio') return;
                  currentAudioTrack = localVideo.srcObject.getAudioTracks()[0];
                  currentVideoTrack = localVideo.srcObject.getVideoTracks()[0];
                  const newVideoTrack = stream.getVideoTracks()[0];
                  newVideoTrack.enabled = currentVideoTrack.enabled;
                  sender.replaceTrack(newVideoTrack);
                  localVideo.srcObject = stream;

                  if (stream.getAudioTracks()[0]) {
                    systemSoundTrack = stream.getAudioTracks()[0];
                    connection.getSenders().forEach((sender) => {
                      if (sender.track.kind === 'video') return;
                      const mixedTrack = mixAudioTracks(stream, new MediaStream([sender.track]));
                      mixedTrack.enabled = currentAudioTrack.enabled;
                      sender.replaceTrack(mixedTrack);
                      localVideo.srcObject.removeTrack(stream.getAudioTracks()[0]);
                      localVideo.srcObject.addTrack(mixedTrack);
                      currentAudioTrack.enabled = true;
                    });
                  } else {
                    localVideo.srcObject.addTrack(currentAudioTrack);
                  }
                });
                logger.info('Switch to screen');
                screenShare = true;
                resolve();
              };

              const switchToCam = function switchToCam() {
                if (screenShare) {
                  connection.getSenders().forEach((sender) => {
                    if (sender.track.kind === 'audio') return;
                    currentVideoTrack.enabled = sender.track.enabled;
                    sender.track.stop();
                    localVideo.srcObject = new MediaStream([currentVideoTrack]);
                    sender.replaceTrack(currentVideoTrack);

                    if (currentAudioTrack) {
                      connection.getSenders().forEach((sender) => {
                        if (sender.track.kind === 'video') return;

                        if (systemSoundTrack) {
                          currentAudioTrack.enabled = sender.track.enabled;
                          sender.track.stop();
                          systemSoundTrack.stop();
                          systemSoundTrack = null;
                          sender.replaceTrack(currentAudioTrack);
                        }

                        localVideo.srcObject.addTrack(currentAudioTrack);
                      });
                    }
                  });
                }

                logger.info('Switch to cam');
                screenShare = false;
              };

              const exports = {};
              exports.state = state;
              exports.createOffer = createOffer;
              exports.createAnswer = createAnswer;
              exports.setRemoteSdp = setRemoteSdp;
              exports.changeAudioCodec = changeAudioCodec;
              exports.close = close;
              exports.setAudioOutputId = setAudioOutputId;
              exports.setVolume = setVolume;
              exports.unmuteRemoteAudio = unmuteRemoteAudio;
              exports.muteRemoteAudio = muteRemoteAudio;
              exports.isRemoteAudioMuted = isRemoteAudioMuted;
              exports.setMicrophoneGain = setMicrophoneGain;
              exports.getVolume = getVolume;
              exports.muteAudio = muteAudio;
              exports.unmuteAudio = unmuteAudio;
              exports.isAudioMuted = isAudioMuted;
              exports.muteVideo = muteVideo;
              exports.unmuteVideo = unmuteVideo;
              exports.isVideoMuted = isVideoMuted;
              exports.getStats = getStat;
              exports.fullScreen = fullScreen;
              exports.switchCam = switchCam;
              exports.switchMic = switchMic;
              exports.switchToScreen = switchToScreen;
              exports.switchToCam = switchToCam;
              connections[id] = exports;
              resolve(exports);
            }));
          };

          var mixAudioTracks = function mixAudioTracks(stream1, stream2) {
            const stream1Sound = audioContext.createMediaStreamSource(stream1);
            const stream2Sound = audioContext.createMediaStreamSource(stream2);
            const destination = audioContext.createMediaStreamDestination();
            const newStream = destination.stream;
            stream1Sound.connect(destination);
            stream2Sound.connect(destination);
            return newStream.getAudioTracks()[0];
          };

          const getMediaAccess = function getMediaAccess(
            constraints,
            display,
            disableConstraintsNormalization,
            useCanvas,
          ) {
            return new Promise(((resolve, reject) => {
              if (!constraints) {
                constraints = defaultConstraints;
              }

              if (!disableConstraintsNormalization) {
                constraints = normalizeConstraints(constraints);
              }

              const cacheInstance = getCacheInstance(display);

              if (
                cacheInstance
                && cacheInstance.srcObject
                && JSON.stringify(display.mediaTrackConstraints) == JSON.stringify(constraints)
                && !constraints.customStream
              ) {
                resolve(display);
                return;
              }

              display.mediaTrackConstraints = constraints;
              releaseMedia(display);

              if (!constraints.video && !constraints.audio && !constraints.customStream) {
                resolve(display);
                return;
              } // check if this is screen sharing

              if (
                constraints.video
                && constraints.video.type
                && constraints.video.type == 'screen'
              ) {
                delete constraints.video.type; // WCS-2751 Add screen capture using getDisplayMedia in Safari

                if (screenCaptureSupportedBrowsers() && constraints.video.withoutExtension) {
                  getScreenDeviceIdWoExtension(constraints).then((
                    screenSharingConstraints,
                  ) => {
                    getScreenAccessWoExtension(screenSharingConstraints, constraints.audio);
                  });
                  return;
                }

                let requestAudioConstraints = null;
                getScreenDeviceId(constraints).then((screenSharingConstraints) => {
                  // copy constraints
                  constraints.sourceId = screenSharingConstraints.sourceId;
                  requestAudioConstraints = constraints.audio;

                  if (screenSharingConstraints.audioMandatory) {
                    constraints.audio = {
                      mandatory: screenSharingConstraints.audioMandatory,
                      optional: [],
                    };
                  } else if (window.chrome) {
                    constraints.audio = false;
                  }

                  delete screenSharingConstraints.audioMandatory;
                  delete screenSharingConstraints.sourceId;

                  for (const prop in screenSharingConstraints) {
                    if (screenSharingConstraints.hasOwnProperty(prop)) {
                      constraints.video[prop] = screenSharingConstraints[prop];
                    }
                  }

                  if (browserDetails.browser == 'chrome') {
                    delete constraints.video.frameRate;
                    delete constraints.video.height;
                    delete constraints.video.width;
                    delete constraints.systemSound;
                  }

                  getAccess(constraints, true, requestAudioConstraints);
                }, reject);
              } else {
                getAccess(constraints);
              }

              function getScreenAccessWoExtension(constraints, requestAudioConstraints) {
                // WCS-1952. exact constraints and system audio are not supported!
                navigator.mediaDevices
                  .getDisplayMedia(constraints)
                  .then((stream) => {
                    loadVideo(display, stream, true, requestAudioConstraints, resolve, constraints);
                  })
                  .catch(reject);
              }

              function getAccess(constraints, screenShare, requestAudioConstraints) {
                logger.info(LOG_PREFIX, constraints);

                if (constraints.customStream) {
                  // get tracks if we have at least one defined constraint
                  if (constraints.audio || constraints.video) {
                    // remove customStream from constraints before passing to GUM
                    const normalizedConstraints = {
                      audio: constraints.audio ? constraints.audio : false,
                      video: constraints.video ? constraints.video : false,
                    };
                    navigator.getUserMedia(
                      normalizedConstraints,
                      (stream) => {
                        // add resulting tracks to customStream
                        stream.getTracks().forEach((track) => {
                          constraints.customStream.addTrack(track);
                        }); // display customStream

                        loadVideo(
                          display,
                          constraints.customStream,
                          screenShare,
                          requestAudioConstraints,
                          resolve,
                          constraints,
                        );
                      },
                      reject,
                    );
                  } else {
                    // display customStream
                    loadVideo(
                      display,
                      constraints.customStream,
                      screenShare,
                      requestAudioConstraints,
                      resolve,
                      constraints,
                    );
                  }
                } else {
                  // WCS-2933, fix mobile streaming issues, gather info about available devices before streaming, but not during
                  listDevices(false).then((devices) => {
                    devices.video.forEach((device) => {
                      videoCams.push(device);
                    });
                    devices.audio.forEach((device) => {
                      mics.push(device);
                    });
                    navigator.getUserMedia(
                      constraints,
                      (stream) => {
                        loadVideo(
                          display,
                          stream,
                          screenShare,
                          requestAudioConstraints,
                          resolve,
                          constraints,
                          useCanvas,
                        );
                      },
                      reject,
                    );
                  }, reject);
                }
              }
            }));
          };

          const loadOrdinaryVideo = function loadOrdinaryVideo(
            display,
            stream,
            screenShare,
            constraints,
            video,
          ) {
            let vEl = video;

            if (!vEl) {
              vEl = document.createElement('video');
              display.appendChild(vEl);
            }

            vEl.id = uuid_v1() + LOCAL_CACHED_VIDEO;
            vEl.srcObject = stream; // mute audio

            vEl.muted = true;

            vEl.onloadedmetadata = function (e) {
              // WCS-2751 Add screen capture using getDisplayMedia in Safari
              if (screenShare && !screenCaptureSupportedBrowsers()) {
                setScreenResolution(vEl, stream, constraints);
              }

              vEl.play();
            };

            return vEl;
          };

          const loadCanvasVideo = function loadCanvasVideo(display, stream, video) {
            let vEl = video;

            if (!vEl) {
              createCanvasEl(display);
              createVideoEl(display.children[0]);
              vEl = display.children[0];
            } else {
              // replace local video with canvas, set source video element as child for canvas
              if (vEl.tagName !== 'CANVAS') {
                const canvas = document.createElement('canvas');
                display.replaceChild(canvas, vEl);
                canvas.appendChild(vEl);
                vEl = canvas;
              }
            }

            vEl.id = uuid_v1() + LOCAL_CACHED_VIDEO;
            const child = vEl.children[0];
            child.srcObject = stream; // mute audio

            child.muted = true;

            child.onloadedmetadata = function (e) {
              child.play();
              vEl.width = child.videoWidth;
              vEl.height = child.videoHeight; // Resize canvas to save aspect ratio

              resizeCanvas(vEl, child.videoWidth, child.videoHeight);
            }; // https://bugzilla.mozilla.org/show_bug.cgi?id=1572422

            if (util.Browser.isFirefox()) {
              vEl.getContext('2d');
            }

            vEl.srcObject = vEl.captureStream(30);

            if (stream.getAudioTracks().length > 0) {
              vEl.srcObject.addTrack(stream.getAudioTracks()[0]);
            }

            function createCanvasEl(parent) {
              const canvas = document.createElement('canvas');
              parent.appendChild(canvas);
            }

            function createVideoEl(parent) {
              const video = document.createElement('video');
              parent.appendChild(video);
            }

            function resizeCanvas(canvas, videoWidth, videoHeight) {
              if (!canvas.parentNode) {
                return;
              }

              const display = vEl.parentNode;
              const parentSize = {
                w: display.parentNode.clientWidth,
                h: display.parentNode.clientHeight,
              };
              let newSize;

              if (videoWidth && videoHeight) {
                newSize = downScaleToFitSize(videoWidth, videoHeight, parentSize.w, parentSize.h);
              } else {
                newSize = downScaleToFitSize(
                  canvas.videoWidth,
                  canvas.videoHeight,
                  parentSize.w,
                  parentSize.h,
                );
              }

              display.style.width = `${newSize.w}px`;
              display.style.height = `${newSize.h}px`; // vertical align

              let margin = 0;

              if (parentSize.h - newSize.h > 1) {
                margin = Math.floor((parentSize.h - newSize.h) / 2);
              }

              display.style.margin = `${margin}px auto`;

              function downScaleToFitSize(videoWidth, videoHeight, dstWidth, dstHeight) {
                let newWidth; let
                  newHeight;
                const videoRatio = videoWidth / videoHeight;
                const dstRatio = dstWidth / dstHeight;

                if (dstRatio > videoRatio) {
                  newHeight = dstHeight;
                  newWidth = Math.floor(videoRatio * dstHeight);
                } else {
                  newWidth = dstWidth;
                  newHeight = Math.floor(dstWidth / videoRatio);
                }

                return {
                  w: newWidth,
                  h: newHeight,
                };
              }
            }

            return vEl;
          };

          var loadVideo = function loadVideo(
            display,
            stream,
            screenShare,
            requestAudioConstraints,
            resolve,
            constraints,
            useCanvas,
          ) {
            let video;

            if (useCanvas) {
              video = loadCanvasVideo(display, stream, getCacheInstance(display));
            } else {
              video = loadOrdinaryVideo(
                display,
                stream,
                screenShare,
                constraints,
                getCacheInstance(display),
              );
            }

            if (
              createMicGainNode
              && stream.getAudioTracks().length > 0
              && browserDetails.browser == 'chrome'
            ) {
              // WCS-1696. We need to start audioContext to work with gain control
              audioContext.resume();
              microphoneGain = createGainNode(stream);
            }

            if (constraints.systemSound && browserDetails.browser == 'chrome') {
              addSystemSound();
            } else {
              resolveCallback();
            }

            function resolveCallback() {
              // This hack for chrome only, firefox supports screen-sharing + audio natively
              if (requestAudioConstraints && browserDetails.browser == 'chrome') {
                logger.info(LOG_PREFIX, 'Request for audio stream');
                navigator.getUserMedia(
                  {
                    audio: requestAudioConstraints,
                  },
                  (stream) => {
                    logger.info(LOG_PREFIX, 'Got audio stream, add it to video stream');

                    if (video.srcObject.getAudioTracks()[0]) {
                      const mixedTrack = mixAudioTracks(stream, video.srcObject);
                      const originalTrack = video.srcObject.getAudioTracks()[0];
                      video.srcObject.removeTrack(originalTrack);
                      video.srcObject.addTrack(mixedTrack);
                    } else {
                      video.srcObject.addTrack(stream.getAudioTracks()[0]);
                    }

                    resolve(display);
                  },
                );
              } else {
                resolve(display);
              }
            }

            function addSystemSound() {
              chrome.runtime.sendMessage(
                extensionId,
                {
                  type: 'isInstalled',
                },
                (response) => {
                  if (response) {
                    chrome.runtime.sendMessage(
                      extensionId,
                      {
                        type: 'getSourceId',
                      },
                      (response) => {
                        if (response.error) {
                          resolveCallback();
                          logger.error(LOG_PREFIX, response.error);
                        } else if (response.systemSoundAccess) {
                          const constraints = {
                            audio: {
                              mandatory: {
                                chromeMediaSource: 'desktop',
                                chromeMediaSourceId: response.sourceId,
                                echoCancellation: true,
                              },
                              optional: [],
                            },
                            video: {
                              mandatory: {
                                chromeMediaSource: 'desktop',
                                chromeMediaSourceId: response.sourceId,
                              },
                              optional: [],
                            },
                          };
                          navigator.getUserMedia(
                            constraints,
                            (audioStream) => {
                              if (stream.getAudioTracks().length > 0) {
                                const originalAudioTrack = stream.getAudioTracks()[0];
                                const mixedTrack = mixAudioTracks(stream, audioStream);
                                stream.addTrack(mixedTrack);
                                stream.removeTrack(originalAudioTrack);
                              } else {
                                stream.addTrack(audioStream.getAudioTracks()[0]);
                              }

                              resolveCallback();
                            },
                            (reason) => {
                              resolveCallback();
                              logger.error(LOG_PREFIX, reason);
                            },
                          );
                        } else {
                          resolveCallback();
                          logger.error(LOG_PREFIX, 'System sound: access is denied by the user');
                        }
                      },
                    );
                  } else {
                    resolveCallback();
                  }
                },
              );
            }
          };

          var createGainNode = function createGainNode(stream) {
            const audioCtx = audioContext;
            const source = audioCtx.createMediaStreamSource(stream);
            const gainNode = audioCtx.createGain();
            const destination = audioCtx.createMediaStreamDestination();
            const outputStream = destination.stream;
            source.connect(gainNode);
            gainNode.connect(destination);
            const sourceAudioTrack = stream.getAudioTracks()[0];
            gainNode.sourceAudioTrack = sourceAudioTrack;

            gainNode.release = function () {
              this.sourceAudioTrack.stop();
              this.disconnect();
            };

            stream.addTrack(outputStream.getAudioTracks()[0]);
            stream.removeTrack(sourceAudioTrack);
            return gainNode;
          }; // Fix to set screen resolution for screen sharing in Firefox

          var setScreenResolution = function setScreenResolution(video, stream, constraints) {
            let newHeight;
            let newWidth;
            let videoRatio;

            if (video.videoWidth > video.videoHeight) {
              videoRatio = video.videoWidth / video.videoHeight;
              newHeight = constraints.video.videoWidth / videoRatio;
              newWidth = constraints.video.videoWidth;
            } else {
              videoRatio = video.videoHeight / video.videoWidth;
              newWidth = constraints.video.videoHeight / videoRatio;
              newHeight = constraints.video.videoHeight;
            }

            console.log(`videoRatio === ${videoRatio}`);
            stream.getVideoTracks()[0].applyConstraints({
              height: newHeight,
              width: newWidth,
            });
          }; // for chrome

          var getScreenDeviceIdWoExtension = function getScreenDeviceIdWoExtension(constraints) {
            return new Promise(((resolve, reject) => {
              // WCS-2751. exact constraints are supported.
              // WCS-1986. added audio: true to constraints.
              let video = {};

              if (constraints.video.frameRate.ideal) {
                video.frameRate = constraints.video.frameRate.ideal;
              }

              if (constraints.video.width) {
                video.width = constraints.video.width;
              }

              if (constraints.video.height) {
                video.height = constraints.video.height;
              }

              if (Object.keys(video).length === 0) {
                video = true;
              }

              resolve({
                video,
                audio: true,
              });
            }));
          };

          var getScreenDeviceId = function getScreenDeviceId(constraints) {
            return new Promise(((resolve, reject) => {
              const o = {};

              if (window.chrome) {
                chrome.runtime.sendMessage(
                  extensionId,
                  {
                    type: 'isInstalled',
                  },
                  (response) => {
                    // WCS-1972. fixed "TypeError"
                    if (response) {
                      o.maxWidth = constraints && constraints.video && constraints.video.width
                        ? constraints.video.width
                        : 320;
                      o.maxHeight = constraints && constraints.video && constraints.video.height
                        ? constraints.video.height
                        : 240;
                      o.maxFrameRate = constraints
                        && constraints.video
                        && constraints.video.frameRate
                        && constraints.video.frameRate.ideal
                        ? constraints.video.frameRate.ideal
                        : 30;
                      o.chromeMediaSource = 'desktop';
                      chrome.runtime.sendMessage(
                        extensionId,
                        {
                          type: 'getSourceId',
                        },
                        (response) => {
                          if (response.error) {
                            reject(new Error('Screen access denied'));
                          } else {
                            o.chromeMediaSourceId = response.sourceId;
                            const result = {
                              mandatory: o,
                              sourceId: response.sourceId,
                            };

                            if (response.systemSoundAccess) {
                              result.audioMandatory = {
                                chromeMediaSource: 'desktop',
                                chromeMediaSourceId: response.sourceId,
                                echoCancellation: true,
                              };
                            }

                            resolve(result);
                          }
                        },
                      );
                    } else {
                      reject(new Error('Screen sharing extension is not available'));
                    }
                  },
                );
              } else {
                // firefox case
                o.mediaSource = constraints.video.mediaSource;
                o.width = {};
                o.height = {};
                o.frameRate = {
                  min: constraints.video.frameRate.max,
                  max: constraints.video.frameRate.max,
                };
                o.videoWidth = constraints.video.width;
                o.videoHeight = constraints.video.height;
                resolve(o);
              }
            }));
          };

          var releaseMedia = function releaseMedia(display) {
            const video = getCacheInstance(display);

            if (video) {
              removeVideoElement(video);
              return true;
            }

            return false;
          };

          function getCacheInstance(display) {
            if (!display) return;
            let i;

            for (i = 0; i < display.children.length; i++) {
              if (
                display.children[i]
                && (display.children[i].id.indexOf(LOCAL_CACHED_VIDEO) != -1
                  || display.children[i].id.indexOf(REMOTE_CACHED_VIDEO) != -1)
              ) {
                logger.info(
                  LOG_PREFIX,
                  `FOUND WEBRTC CACHED INSTANCE, id ${display.children[i].id}`,
                );
                return display.children[i];
              }
            }
          }

          function removeVideoElement(video) {
            if (video.srcObject) {
              // pause
              video.pause(); // stop media tracks

              const tracks = video.srcObject.getTracks();

              for (let i = 0; i < tracks.length; i++) {
                tracks[i].stop();

                if (
                  video.id.indexOf(LOCAL_CACHED_VIDEO) != -1
                  && tracks[i].kind == 'audio'
                  && microphoneGain
                ) {
                  microphoneGain.release();
                }
              }

              video.srcObject = null;

              if (video.tagName === 'CANVAS') {
                for (let _i = 0; _i < video.children.length; _i++) {
                  removeVideoElement(video.children[_i]);
                }
              }
            }
          }
          /**
           * Check WebRTC available
           *
           * @returns {boolean} webrtc available
           */

          const available = function available() {
            // return (adapter.browserDetails.browser != "edge") ? navigator.getUserMedia && RTCPeerConnection : false;
            return 'getUserMedia' in navigator && 'RTCPeerConnection' in window;
          };

          var listDevices = function listDevices(labels, kind, deviceConstraints) {
            // WCS-1963. added deviceConstraints.
            if (!deviceConstraints) {
              deviceConstraints = {
                audio: true,
                video: true,
              };
            }

            if (!kind) {
              kind = constants.MEDIA_DEVICE_KIND.INPUT;
            } else if (kind == 'all') {
              kind = '';
            }

            const getConstraints = function getConstraints(devices) {
              const constraints = {};

              for (let i = 0; i < devices.length; i++) {
                const device = devices[i];

                if (device.kind.indexOf(`audio${kind}`) === 0 && deviceConstraints.audio) {
                  constraints.audio = true;
                } else if (device.kind.indexOf(`video${kind}`) === 0 && deviceConstraints.video) {
                  constraints.video = true;
                } else {
                  logger.debug(
                    LOG_PREFIX,
                    `unknown device ${device.kind} id ${device.deviceId}`,
                  );
                }
              }

              return constraints;
            };

            const getList = function getList(devices) {
              const list = {
                audio: [],
                video: [],
              };
              let micCount = 0;
              let outputCount = 0;
              let camCount = 0;

              for (let i = 0; i < devices.length; i++) {
                const device = devices[i];
                const ret = {
                  id: device.deviceId,
                  label: device.label,
                };

                if (
                  device.kind.indexOf(`audio${kind}`) === 0
                  && device.deviceId != 'communications'
                ) {
                  ret.type = device.kind == 'audioinput' ? 'mic' : 'speaker';

                  if (ret.type == 'mic' && ret.label == '') {
                    ret.label = `microphone${++micCount}`;
                  }

                  if (ret.type == 'speaker' && ret.label == '') {
                    ret.label = `speaker${++outputCount}`;
                  }

                  list.audio.push(ret);
                } else if (device.kind.indexOf(`video${kind}`) === 0) {
                  if (ret.label == '') {
                    ret.label = `camera${++camCount}`;
                  }

                  ret.type = 'camera';
                  list.video.push(ret);
                } else {
                  logger.debug(
                    LOG_PREFIX,
                    `unknown device ${device.kind} id ${device.deviceId}`,
                  );
                }
              }

              return list;
            };

            return new Promise(((resolve, reject) => {
              navigator.mediaDevices.enumerateDevices().then((devices) => {
                if (labels) {
                  // WCS-2708. Fixed uncaught exception if no camera and mic
                  const constraints = getConstraints(devices);

                  if (Object.keys(constraints).length === 0) {
                    reject(new Error(`${kind} media devices not found`));
                    return;
                  }

                  navigator.getUserMedia(
                    constraints,
                    (stream) => {
                      navigator.mediaDevices.enumerateDevices().then((devicesWithLabales) => {
                        resolve(getList(devicesWithLabales));
                        stream.getTracks().forEach((track) => {
                          track.stop();
                        });
                      }, reject);
                    },
                    reject,
                  );
                } else {
                  resolve(getList(devices));
                }
              }, reject);
            }));
          };

          function normalizeConstraints(constraints) {
            // WCS-2010. fixed TypeError after publish->stop->publish
            // WCS-2373. fixed customStream
            const { customStream } = constraints;
            constraints = JSON.parse(JSON.stringify(constraints));
            constraints.customStream = customStream;

            if (constraints.video) {
              if (constraints.video === true) {
                constraints.video = {};
              }

              if (_typeof(constraints.video) === 'object') {
                const { width } = constraints.video;
                const { height } = constraints.video;

                if (browserDetails.browser == 'safari') {
                  if (!width || !height) {
                    // WCS-3016 16:9 ratio
                    constraints.video.width = {
                      min: 320,
                      max: 640,
                    };
                    constraints.video.height = {
                      min: 180,
                      max: 360,
                    };
                  } else if (_typeof(width) !== 'object' || _typeof(height) !== 'object') {
                    constraints.video.width = {
                      min: width,
                      max: width,
                    };
                    constraints.video.height = {
                      min: height,
                      max: height,
                    };
                  }
                } else if (isNaN(width) || width === 0 || isNaN(height) || height === 0) {
                  constraints.video.width = 320;
                  constraints.video.height = 240;
                } // WCS-1972. fixed "TypeError"
                // Set default FPS value

                const frameRate = !constraints.video.frameRate || constraints.video.frameRate == 0
                  ? 30
                  : constraints.video.frameRate;
                constraints.video.frameRate = {
                  ideal: frameRate,
                };
              }
            }

            if (constraints.audio) {
              // The WebRTC AEC implementation doesn't work well on stereophonic sound and makes mono on output
              if (constraints.audio.stereo) {
                constraints.audio.echoCancellation = false;
                constraints.audio.googEchoCancellation = false;
              }
            }

            return constraints;
          }

          const playFirstSound = function playFirstSound() {
            if (audioContext) {
              const buffer = audioContext.createBuffer(1, 441, 44100);
              const output = buffer.getChannelData(0);

              for (let i = 0; i < output.length; i++) {
                output[i] = 0;
              }

              const source = audioContext.createBufferSource();
              source.buffer = buffer; // Connect to output (speakers)

              source.connect(audioContext.destination); // Play sound

              if (source.start) {
                source.start(0);
              } else if (source.play) {
                source.play(0);
              } else if (source.noteOn) {
                source.noteOn(0);
              }

              return true;
            }

            return false;
          };

          const playFirstVideo = function playFirstVideo(display, isLocal, src) {
            return new Promise(((resolve, reject) => {
              if (!getCacheInstance(display)) {
                const video = document.createElement('video');
                video.setAttribute('playsinline', '');
                video.setAttribute('webkit-playsinline', '');
                video.id = uuid_v1() + (isLocal ? LOCAL_CACHED_VIDEO : REMOTE_CACHED_VIDEO); // in WCS-1560 we removed video.play() call, because it triggers the â€œUnhandled Promise Rejectionâ€ exception in iOS Safari
                // in WCS-2160 we rolled back the changes made in WCS-1560 due to no audio on first playback in iOS Safari

                if (src) {
                  video.src = src;
                  video
                    .play()
                    .then(() => {
                      display.appendChild(video);
                      resolve();
                    })
                    .catch(() => {
                      // WCS-2375. fixed autoplay in ios safari
                      logger.info(
                        LOG_PREFIX,
                        'Autoplay detected! Trying to play a video with a muted sound...',
                      );
                      video.muted = true;
                      video.play().then(() => {
                        display.appendChild(video);
                        resolve();
                      }); // WCS-2375. low power mode suspends video play

                      video.onsuspend = function (event) {
                        reject();
                      };
                    });
                  return;
                }
              }

              resolve();
            }));
          };

          var screenCaptureSupportedBrowsers = function screenCaptureSupportedBrowsers() {
            return util.Browser.isChrome() || util.Browser.isSafari();
          };

          module.exports = {
            createConnection,
            getMediaAccess,
            releaseMedia,
            listDevices,
            playFirstSound,
            playFirstVideo,
            available,
            configure: function configure(configuration) {
              extensionId = configuration.extensionId;
              defaultConstraints = configuration.constraints;
              audioContext = configuration.audioContext;
              logger = configuration.logger;
              createMicGainNode = typeof configuration.createMicGainNode !== 'undefined'
                ? configuration.createMicGainNode
                : true;
              logger.info(LOG_PREFIX, 'Initialized');
            },
          };
        },
        {
          './constants': 28, './util': 33, 'uuid/v1': 11, 'webrtc-adapter': 12,
        },
      ],
      35: [
        function (require, module, exports) {
          const { WSPlayer } = require('./WSPlayer');

          const util = require('./util');

          const WSPlayer_ = new WSPlayer();
          const connections = {};
          let receiverLocation = './WSReceiver2.js';
          let decoderLocation = './video-worker2.js';
          const DEFAULT_SDP = 'v=0\r\n'
            + 'o=- 1988962254 1988962254 IN IP4 0.0.0.0\r\n'
            + 'c=IN IP4 0.0.0.0\r\n'
            + 't=0 0\r\n'
            + 'a=sdplang:en\r\n'
            + 'm=video 0 RTP/AVP 32\r\n'
            + 'a=rtpmap:32 MPV/90000\r\n'
            + 'a=recvonly\r\n'
            + 'm=audio 0 RTP/AVP 0\r\n'
            + 'a=rtpmap:0 PCMU/8000\r\n'
            + 'a=recvonly\r\n';
          let logger;
          const LOG_PREFIX = 'websocket';
          let audioContext;

          const createConnection = function createConnection(options, handlers) {
            return new Promise(((resolve, reject) => {
              const { id } = options;
              const { display } = options;
              const canvas = document.createElement('canvas');
              display.appendChild(canvas);
              canvas.id = id;

              const createOffer = function createOffer(options) {
                return new Promise(((resolve, reject) => {
                  const o = {};
                  o.sdp = DEFAULT_SDP;
                  o.player = WSPlayer_;
                  resolve(o);
                }));
              };

              const setRemoteSdp = function setRemoteSdp(sdp) {
                return new Promise(((resolve, reject) => {
                  resolve();
                }));
              };

              const close = function close() {
                WSPlayer_.stop();

                if (canvas.parentNode) {
                  canvas.parentNode.removeChild(canvas);
                }

                delete connections[id];
              };

              const unmuteRemoteAudio = function unmuteRemoteAudio() {
                audioContext.resume();
              };

              const muteRemoteAudio = function muteRemoteAudio() {
                audioContext.suspend();
              };

              const isRemoteAudioMuted = function isRemoteAudioMuted() {
                if (audioContext.state == 'suspended') {
                  return true;
                }

                return false;
              };

              const setVolume = function setVolume(volume) {
                WSPlayer_.setVolume(volume);
              };

              const getVolume = function getVolume() {
                if (WSPlayer_) {
                  return WSPlayer_.getVolume();
                }

                return -1;
              };

              const fullScreen = function fullScreen() {
                if (canvas) {
                  if (
                    !document.fullscreenElement
                    && !document.mozFullScreenElement
                    && !document.webkitFullscreenElement
                    && !document.msFullscreenElement
                  ) {
                    if (canvas.requestFullscreen) {
                      canvas.requestFullscreen();
                    } else if (canvas.msRequestFullscreen) {
                      canvas.msRequestFullscreen();
                    } else if (canvas.mozRequestFullScreen) {
                      canvas.mozRequestFullScreen();
                    } else if (canvas.webkitRequestFullscreen) {
                      canvas.webkitRequestFullscreen();
                    }
                  } else if (document.exitFullscreen) {
                    document.exitFullscreen();
                  } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                  } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                  } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                  }
                }
              };

              try {
                const config = {};
                config.urlWsServer = options.mainUrl;
                config.token = options.authToken;
                config.receiverPath = receiverLocation;
                config.decoderPath = decoderLocation;
                config.streamId = id;
                config.api = handlers;
                config.canvas = canvas;
                config.videoWidth = 320;
                config.videoHeight = 240;
                config.startWithVideoOnly = false;
                config.keepLastFrame = false;
                let reinit = false;

                if (WSPlayer_.initialized) {
                  reinit = true;
                }

                WSPlayer_.initLogger(0);
                WSPlayer_.init(config, audioContext, reinit);
              } catch (e) {
                reject(new Error(`Failed to init stream receiver ${e}`));
              }

              const exports = {};
              exports.createOffer = createOffer;
              exports.setRemoteSdp = setRemoteSdp;
              exports.close = close;
              exports.unmuteRemoteAudio = unmuteRemoteAudio;
              exports.muteRemoteAudio = muteRemoteAudio;
              exports.isRemoteAudioMuted = isRemoteAudioMuted;
              exports.setVolume = setVolume;
              exports.getVolume = getVolume;
              exports.fullScreen = fullScreen;
              connections[id] = exports;
              resolve(connections[id]);
            }));
          }; // return Promise(reject)

          const getMediaAccess = function getMediaAccess() {
            return new Promise(((resolve, reject) => {
              reject(new Error("This provider doesn't support getMediaAccess"));
            }));
          };

          const listDevices = function listDevices() {
            return new Promise(((resolve, reject) => {
              reject(new Error("This provider doesn't support listDevices"));
            }));
          }; // always false

          const releaseMedia = function releaseMedia() {
            return false;
          };

          const playFirstSound = function playFirstSound(noise) {
            const audioBuffer = audioContext.createBuffer(1, 441, 44100);
            const output = audioBuffer.getChannelData(0);

            for (let i = 0; i < output.length; i++) {
              if (noise) {
                output[i] = Math.random() * 2 - 1;
              } else {
                output[i] = 0;
              }
            }

            const src = audioContext.createBufferSource();
            src.buffer = audioBuffer;
            src.connect(audioContext.destination);
            src.start(0);
          };

          const playFirstVideo = function playFirstVideo() {
            return new Promise(((resolve, reject) => {
              resolve();
            }));
          };
          /**
           * Check WebSocket available
           *
           * @returns {boolean} WSPlayer available
           */

          const available = function available(audioContext) {
            return !!audioContext;
          };

          module.exports = {
            createConnection,
            getMediaAccess,
            releaseMedia,
            available,
            listDevices,
            playFirstSound,
            playFirstVideo,
            configure: function configure(configuration) {
              audioContext = configuration.audioContext;
              receiverLocation = configuration.receiverLocation || receiverLocation;
              decoderLocation = configuration.decoderLocation || decoderLocation;
              logger = configuration.logger;
              logger.info(LOG_PREFIX, 'Initialized');
            },
          };
        },
        { './WSPlayer': 27, './util': 33 },
      ],
    },
    {},
    [30],
  )(30);
}));
